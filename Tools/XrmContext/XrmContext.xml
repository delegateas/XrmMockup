<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>XrmContext</name></assembly>
<members>
<member name="T:DG.XrmContext.RawState">
<summary>
 Serializable record containing necessary (meta)data
</summary>
</member>
<member name="M:DG.XrmContext.Utility.matchesVersionCriteria(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Int32,System.Int32,System.Int32,System.Int32}},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Int32,System.Int32,System.Int32,System.Int32}})">
<summary>
 Check if the version matches the version criteria
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_DotGreater(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Version greater than
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_DotLess(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Version less than
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_DotLessEquals(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Version less than or equal to
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_DotGreaterEquals(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Version greater than or equal to
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_QmarkBar``1">
<summary>
 Option default argument
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_QmarkGreaterGreaterQmark``1(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean})">
<summary>
 Option checker
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_QmarkBarGreater``2(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpFunc{``0,``1})">
<summary>
 Option mapper
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_QmarkGreaterGreater``2(Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}})">
<summary>
 Option binder
</summary>
</member>
<member name="M:DG.XrmContext.Utility.op_BarGreaterGreater``1(``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit})">
<summary>
 Use argument and pass it along
</summary>
</member>
<member name="M:DG.XrmContext.InterpretOptionSetMetadata.interpretOptionSet(Microsoft.FSharp.Collections.FSharpSet{System.String},Microsoft.FSharp.Core.FSharpOption{Microsoft.Xrm.Sdk.Metadata.EntityMetadata},Microsoft.Xrm.Sdk.Metadata.EnumAttributeMetadata,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.String,System.String}[]})">
<summary>
 Interprets CRM OptionSetMetadata into intermediate type
</summary>
</member>
<member name="M:DG.XrmContext.DataRetrieval.getFullEntityList``1(Microsoft.FSharp.Core.FSharpOption{System.String[]},Microsoft.FSharp.Core.FSharpOption{``0[]},Microsoft.Xrm.Sdk.IOrganizationService)">
<summary>
 Gets all the entities related to the given solutions and merges with the given entities
</summary>
</member>
<member name="M:DG.XrmContext.DataRetrieval.retrieveCrmData(Microsoft.FSharp.Core.FSharpOption{System.String[]},Microsoft.Xrm.Sdk.IOrganizationService)">
<summary>
 Retrieve all the necessary CRM data
</summary>
</member>
<member name="M:DG.XrmContext.DataRetrieval.retrieveCrmVersion(Microsoft.Xrm.Sdk.IOrganizationService)">
<summary>
 Retrieve version from CRM
</summary>
</member>
<member name="M:DG.XrmContext.DataRetrieval.connectToCrm(DG.XrmContext.XrmAuthentication)">
<summary>
 Connect to CRM with the given authentication
</summary>
</member>
<member name="M:DG.XrmContext.Setup.interpretCrmData(DG.XrmContext.XcGenerationSettings,System.String,System.Int32,System.Int32,System.Int32,System.Int32,DG.XrmContext.RawState)">
<summary>
 Interprets the raw CRM data into an intermediate state used for further generation
</summary>
</member>
<member name="M:DG.XrmContext.Setup.intersectEntities(DG.XrmContext.IntermediateRepresentation.XrmEntity[],System.Tuple{System.String,System.String[]}[])">
<summary>
 Intersects the attributes of the desired entities and returns the common attributes as XrmIntersects
</summary>
</member>
<member name="M:DG.XrmContext.Setup.toComparableAttr(DG.XrmContext.IntermediateRepresentation.XrmAttribute)">
<summary>
 Converts a XrmAttribute to a tuple which can be used as a comparable
</summary>
</member>
<member name="M:DG.XrmContext.GenerationMain.generateFromRaw(DG.XrmContext.XcGenerationSettings,DG.XrmContext.RawState)">
<summary>
 Main generator function
</summary>
</member>
<member name="M:DG.XrmContext.GenerationMain.retrieveRawState(DG.XrmContext.XrmAuthentication,DG.XrmContext.XcRetrievalSettings)">
<summary>
 Retrieve data from CRM and setup raw state
</summary>
</member>
<member name="M:DG.XrmContext.CommandLineHelper.printArgumentHelp(Microsoft.FSharp.Collections.FSharpList{DG.XrmContext.ArgInfo})">
<summary>
 Helper that prints all the possible arguments to console.
</summary>
</member>
<member name="M:DG.XrmContext.CommandLineHelper.parseArgs(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpMap{System.String,DG.XrmContext.ArgInfo})">
<summary>
 Parses the given arguments against the expected arguments.
</summary>
</member>
<member name="M:DG.XrmContext.CommandLineHelper.parseCommandLineRec(Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpMap{System.String,DG.XrmContext.ArgInfo},Microsoft.FSharp.Collections.FSharpMap{System.String,System.String})">
<summary>
 Helper function that recursively parses the arguments
</summary>
</member>
<member name="M:Program.dataSave(Microsoft.FSharp.Collections.FSharpMap{System.String,System.String})">
<summary>
 Save metadata to file
</summary>
</member>
<member name="M:Program.loadGen(Microsoft.FSharp.Collections.FSharpMap{System.String,System.String})">
<summary>
 Load metadata from local file and generate
</summary>
</member>
</members>
</doc>
