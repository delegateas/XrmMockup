//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;

[assembly: ProxyTypesAssembly()]


namespace DG.XrmFramework.BusinessDomain.ServiceContext {
    
    
    /// <summary>
    /// <para>Business that represents a customer or potential customer. The company that is billed in business transactions.</para>
    /// <para>Display Name: Account</para>
    /// </summary>
    [EntityLogicalName("account")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Account : ExtendedEntity<AccountState, Account_StatusCode> {
        
        public const string EntityLogicalName = "account";
        
        public const int EntityTypeCode = 1;
        
        public Account() : 
                base(EntityLogicalName) {
        }
        
        public Account(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("accountid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("accountid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public Guid? AccountId {
            get {
                return GetAttributeValue<Guid?>("accountid");
            }
            set {
                SetId("accountid", value);
            }
        }
        
        /// <summary>
        /// <para>Select a category to indicate whether the customer account is standard or preferred.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("accountcategorycode")]
        public Account_AccountCategoryCode? AccountCategoryCode {
            get {
                return GetOptionSetValue<Account_AccountCategoryCode>("accountcategorycode");
            }
            set {
                SetOptionSetValue("accountcategorycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select a classification code to indicate the potential value of the customer account based on the projected return on investment, cooperation level, sales cycle length or other criteria.</para>
        /// <para>Display Name: Classification</para>
        /// </summary>
        [AttributeLogicalName("accountclassificationcode")]
        public Account_AccountClassificationCode? AccountClassificationCode {
            get {
                return GetOptionSetValue<Account_AccountClassificationCode>("accountclassificationcode");
            }
            set {
                SetOptionSetValue("accountclassificationcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type an ID number or code for the account to quickly search and identify the account in system views.</para>
        /// <para>Display Name: Account Number</para>
        /// </summary>
        [AttributeLogicalName("accountnumber")]
        public string AccountNumber {
            get {
                return GetAttributeValue<string>("accountnumber");
            }
            set {
                SetAttributeValue("accountnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select a rating to indicate the value of the customer account.</para>
        /// <para>Display Name: Account Rating</para>
        /// </summary>
        [AttributeLogicalName("accountratingcode")]
        public Account_AccountRatingCode? AccountRatingCode {
            get {
                return GetOptionSetValue<Account_AccountRatingCode>("accountratingcode");
            }
            set {
                SetOptionSetValue("accountratingcode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public Account_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<Account_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>Display Name: Address 1: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address 1</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>Display Name: Address 1: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 1: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        public Account_Address1_FreightTermsCode? Address1_FreightTermsCode {
            get {
                return GetOptionSetValue<Account_Address1_FreightTermsCode>("address1_freighttermscode");
            }
            set {
                SetOptionSetValue("address1_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>Display Name: Address 1: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's primary address.</para>
        /// <para>Display Name: Address 1: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address1_primarycontactname")]
        public string Address1_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address1_primarycontactname");
            }
            set {
                SetAttributeValue("address1_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public Account_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>Display Name: Address 1: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>Display Name: Address Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public Account_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<Account_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>Display Name: Address 2: City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Address 2</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>Display Name: Address 2: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 2: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        public Account_Address2_FreightTermsCode? Address2_FreightTermsCode {
            get {
                return GetOptionSetValue<Account_Address2_FreightTermsCode>("address2_freighttermscode");
            }
            set {
                SetOptionSetValue("address2_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>Display Name: Address 2: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's secondary address.</para>
        /// <para>Display Name: Address 2: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address2_primarycontactname")]
        public string Address2_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address2_primarycontactname");
            }
            set {
                SetAttributeValue("address2_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public Account_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>Display Name: Address 2: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 30</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        public decimal? Aging30 {
            get {
                return GetMoneyValue("aging30");
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 30 field.</para>
        /// <para>Display Name: Aging 30 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        public decimal? Aging30_Base {
            get {
                return GetMoneyValue("aging30_base");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 60</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        public decimal? Aging60 {
            get {
                return GetMoneyValue("aging60");
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 60 field.</para>
        /// <para>Display Name: Aging 60 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        public decimal? Aging60_Base {
            get {
                return GetMoneyValue("aging60_base");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 90</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        public decimal? Aging90 {
            get {
                return GetMoneyValue("aging90");
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 90 field.</para>
        /// <para>Display Name: Aging 90 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        public decimal? Aging90_Base {
            get {
                return GetMoneyValue("aging90_base");
            }
        }
        
        /// <summary>
        /// <para>Select the legal designation or other business type of the account for contracts or reporting purposes.</para>
        /// <para>Display Name: Business Type</para>
        /// </summary>
        [AttributeLogicalName("businesstypecode")]
        public Account_BusinessTypeCode? BusinessTypeCode {
            get {
                return GetOptionSetValue<Account_BusinessTypeCode>("businesstypecode");
            }
            set {
                SetOptionSetValue("businesstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the credit limit of the account. This is a useful reference when you address invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Limit</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public decimal? CreditLimit {
            get {
                return GetMoneyValue("creditlimit");
            }
            set {
                SetMoneyValue("creditlimit", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the credit limit converted to the system's default base currency for reporting purposes.</para>
        /// <para>Display Name: Credit Limit (Base)</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        public decimal? CreditLimit_Base {
            get {
                return GetMoneyValue("creditlimit_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the credit for the account is on hold. This is a useful reference while addressing the invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Hold</para>
        /// </summary>
        [AttributeLogicalName("creditonhold")]
        public bool? CreditOnHold {
            get {
                return GetAttributeValue<bool?>("creditonhold");
            }
            set {
                SetAttributeValue("creditonhold", value);
            }
        }
        
        /// <summary>
        /// <para>Select the size category or range of the account for segmentation and reporting purposes.</para>
        /// <para>Display Name: Customer Size</para>
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        public Account_CustomerSizeCode? CustomerSizeCode {
            get {
                return GetOptionSetValue<Account_CustomerSizeCode>("customersizecode");
            }
            set {
                SetOptionSetValue("customersizecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the category that best describes the relationship between the account and your organization.</para>
        /// <para>Display Name: Relationship Type</para>
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        public Account_CustomerTypeCode? CustomerTypeCode {
            get {
                return GetOptionSetValue<Account_CustomerTypeCode>("customertypecode");
            }
            set {
                SetOptionSetValue("customertypecode", value);
            }
        }
        
        /// <summary>
        /// <para>price_level_accounts</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelid")]
        public EntityReference DefaultPriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("defaultpricelevelid");
            }
            set {
                SetAttributeValue("defaultpricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the account, such as an excerpt from the company's website.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows bulk email sent through campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but is excluded from email.</para>
        /// <para>Display Name: Do not allow Bulk Emails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        public bool? DoNotBulkEMail {
            get {
                return GetAttributeValue<bool?>("donotbulkemail");
            }
            set {
                SetAttributeValue("donotbulkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but will be excluded from the postal mail.</para>
        /// <para>Display Name: Do not allow Bulk Mails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkpostalmail")]
        public bool? DoNotBulkPostalMail {
            get {
                return GetAttributeValue<bool?>("donotbulkpostalmail");
            }
            set {
                SetAttributeValue("donotbulkpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows direct email sent from Microsoft Dynamics 365.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEMail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
            set {
                SetAttributeValue("donotemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows faxes. If Do Not Allow is selected, the account will be excluded from fax activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
            set {
                SetAttributeValue("donotfax", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows phone calls. If Do Not Allow is selected, the account will be excluded from phone call activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
            set {
                SetAttributeValue("donotphone", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows direct mail. If Do Not Allow is selected, the account will be excluded from letter activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
            set {
                SetAttributeValue("donotpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account accepts marketing materials, such as brochures or catalogs.</para>
        /// <para>Display Name: Send Marketing Materials</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        public bool? DoNotSendMM {
            get {
                return GetAttributeValue<bool?>("donotsendmm");
            }
            set {
                SetAttributeValue("donotsendmm", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary email address for the account.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        public string EMailAddress1 {
            get {
                return GetAttributeValue<string>("emailaddress1");
            }
            set {
                SetAttributeValue("emailaddress1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the secondary email address for the account.</para>
        /// <para>Display Name: Email Address 2</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        public string EMailAddress2 {
            get {
                return GetAttributeValue<string>("emailaddress2");
            }
            set {
                SetAttributeValue("emailaddress2", value);
            }
        }
        
        /// <summary>
        /// <para>Type an alternate email address for the account.</para>
        /// <para>Display Name: Email Address 3</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        public string EMailAddress3 {
            get {
                return GetAttributeValue<string>("emailaddress3");
            }
            set {
                SetAttributeValue("emailaddress3", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the account.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the account.</para>
        /// <para>Display Name: Follow Email Activity</para>
        /// </summary>
        [AttributeLogicalName("followemail")]
        public bool? FollowEmail {
            get {
                return GetAttributeValue<bool?>("followemail");
            }
            set {
                SetAttributeValue("followemail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the URL for the account's FTP site to enable users to access data and share documents.</para>
        /// <para>Display Name: FTP Site</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        public string FtpSiteURL {
            get {
                return GetAttributeValue<string>("ftpsiteurl");
            }
            set {
                SetAttributeValue("ftpsiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account's primary industry for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: Industry</para>
        /// </summary>
        [AttributeLogicalName("industrycode")]
        public Account_IndustryCode? IndustryCode {
            get {
                return GetOptionSetValue<Account_IndustryCode>("industrycode");
            }
            set {
                SetOptionSetValue("industrycode", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the account was last included in a marketing campaign or quick campaign.</para>
        /// <para>Display Name: Last Date Included in Campaign</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? LastUsedInCampaign {
            get {
                return GetAttributeValue<DateTime?>("lastusedincampaign");
            }
            set {
                SetAttributeValue("lastusedincampaign", value);
            }
        }
        
        /// <summary>
        /// <para>Type the market capitalization of the account to identify the company's equity, used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Market Capitalization</para>
        /// </summary>
        [AttributeLogicalName("marketcap")]
        public decimal? MarketCap {
            get {
                return GetMoneyValue("marketcap");
            }
            set {
                SetMoneyValue("marketcap", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the market capitalization converted to the system's default base currency.</para>
        /// <para>Display Name: Market Capitalization (Base)</para>
        /// </summary>
        [AttributeLogicalName("marketcap_base")]
        public decimal? MarketCap_Base {
            get {
                return GetMoneyValue("marketcap_base");
            }
        }
        
        /// <summary>
        /// <para>Whether is only for marketing</para>
        /// <para>Display Name: Marketing Only</para>
        /// </summary>
        [AttributeLogicalName("marketingonly")]
        public bool? MarketingOnly {
            get {
                return GetAttributeValue<bool?>("marketingonly");
            }
            set {
                SetAttributeValue("marketingonly", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the master account that the account was merged with.</para>
        /// <para>Display Name: Master ID</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account has been merged with another account.</para>
        /// <para>Display Name: Merged</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the company or business name.</para>
        /// <para>Display Name: Account Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of employees that work at the account for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: Number of Employees</para>
        /// </summary>
        [AttributeLogicalName("numberofemployees")]
        public int? NumberOfEmployees {
            get {
                return GetAttributeValue<int?>("numberofemployees");
            }
            set {
                SetAttributeValue("numberofemployees", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Number of open opportunities against an account and its child accounts.</para>
        /// <para>Display Name: Open Deals</para>
        /// </summary>
        [AttributeLogicalName("opendeals")]
        public int? OpenDeals {
            get {
                return GetAttributeValue<int?>("opendeals");
            }
        }
        
        /// <summary>
        /// <para>The date time for Open Deals.</para>
        /// <para>Display Name: Open Deals(Last Updated Time)</para>
        /// </summary>
        [AttributeLogicalName("opendeals_date")]
        public DateTime? OpenDeals_Date {
            get {
                return GetAttributeValue<DateTime?>("opendeals_date");
            }
        }
        
        /// <summary>
        /// <para>State of Open Deals.</para>
        /// <para>Display Name: Open Deals(State)</para>
        /// </summary>
        [AttributeLogicalName("opendeals_state")]
        public int? OpenDeals_State {
            get {
                return GetAttributeValue<int?>("opendeals_state");
            }
        }
        
        /// <summary>
        /// <para>Sum of open revenue against an account and its child accounts.</para>
        /// <para>Display Name: Open Revenue</para>
        /// </summary>
        [AttributeLogicalName("openrevenue")]
        public decimal? OpenRevenue {
            get {
                return GetMoneyValue("openrevenue");
            }
        }
        
        /// <summary>
        /// <para>Sum of open revenue against an account and its child accounts.</para>
        /// <para>Display Name: Open Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_base")]
        public decimal? OpenRevenue_Base {
            get {
                return GetMoneyValue("openrevenue_base");
            }
        }
        
        /// <summary>
        /// <para>The date time for Open Revenue.</para>
        /// <para>Display Name: Open Revenue(Last Updated Time)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_date")]
        public DateTime? OpenRevenue_Date {
            get {
                return GetAttributeValue<DateTime?>("openrevenue_date");
            }
        }
        
        /// <summary>
        /// <para>State of Open Revenue.</para>
        /// <para>Display Name: Open Revenue(State)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_state")]
        public int? OpenRevenue_State {
            get {
                return GetAttributeValue<int?>("openrevenue_state");
            }
        }
        
        /// <summary>
        /// <para>account_originating_lead</para>
        /// <para>Display Name: Originating Lead</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference OriginatingLeadId {
            get {
                return GetAttributeValue<EntityReference>("originatingleadid");
            }
            set {
                SetAttributeValue("originatingleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account's ownership structure, such as public or private.</para>
        /// <para>Display Name: Ownership</para>
        /// </summary>
        [AttributeLogicalName("ownershipcode")]
        public Account_OwnershipCode? OwnershipCode {
            get {
                return GetOptionSetValue<Account_OwnershipCode>("ownershipcode");
            }
            set {
                SetOptionSetValue("ownershipcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the account.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the account.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Choose the parent account associated with this account to show parent and child businesses in reporting and analytics.</para>
        /// <para>Display Name: Parent Account</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference ParentAccountId {
            get {
                return GetAttributeValue<EntityReference>("parentaccountid");
            }
            set {
                SetAttributeValue("parentaccountid", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only. Legacy Microsoft Dynamics CRM 3.0 workflow data.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public Account_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Account_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred day of the week for service appointments.</para>
        /// <para>Display Name: Preferred Day</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public Account_PreferredAppointmentDayCode? PreferredAppointmentDayCode {
            get {
                return GetOptionSetValue<Account_PreferredAppointmentDayCode>("preferredappointmentdaycode");
            }
            set {
                SetOptionSetValue("preferredappointmentdaycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred time of day for service appointments.</para>
        /// <para>Display Name: Preferred Time</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public Account_PreferredAppointmentTimeCode? PreferredAppointmentTimeCode {
            get {
                return GetOptionSetValue<Account_PreferredAppointmentTimeCode>("preferredappointmenttimecode");
            }
            set {
                SetOptionSetValue("preferredappointmenttimecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Display Name: Preferred Method of Contact</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public Account_PreferredContactMethodCode? PreferredContactMethodCode {
            get {
                return GetOptionSetValue<Account_PreferredContactMethodCode>("preferredcontactmethodcode");
            }
            set {
                SetOptionSetValue("preferredcontactmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>equipment_accounts</para>
        /// <para>Display Name: Preferred Facility/Equipment</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentid")]
        public EntityReference PreferredEquipmentId {
            get {
                return GetAttributeValue<EntityReference>("preferredequipmentid");
            }
            set {
                SetAttributeValue("preferredequipmentid", value);
            }
        }
        
        /// <summary>
        /// <para>service_accounts</para>
        /// <para>Display Name: Preferred Service</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceid")]
        public EntityReference PreferredServiceId {
            get {
                return GetAttributeValue<EntityReference>("preferredserviceid");
            }
            set {
                SetAttributeValue("preferredserviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the preferred service representative for reference when you schedule service activities for the account.</para>
        /// <para>Display Name: Preferred User</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuserid")]
        public EntityReference PreferredSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("preferredsystemuserid");
            }
            set {
                SetAttributeValue("preferredsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the primary contact for the account to provide quick access to contact details.</para>
        /// <para>Display Name: Primary Contact</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference PrimaryContactId {
            get {
                return GetAttributeValue<EntityReference>("primarycontactid");
            }
            set {
                SetAttributeValue("primarycontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Primary Satori ID for Account</para>
        /// <para>Display Name: Primary Satori ID</para>
        /// </summary>
        [AttributeLogicalName("primarysatoriid")]
        public string PrimarySatoriId {
            get {
                return GetAttributeValue<string>("primarysatoriid");
            }
            set {
                SetAttributeValue("primarysatoriid", value);
            }
        }
        
        /// <summary>
        /// <para>Primary Twitter ID for Account</para>
        /// <para>Display Name: Primary Twitter ID</para>
        /// </summary>
        [AttributeLogicalName("primarytwitterid")]
        public string PrimaryTwitterId {
            get {
                return GetAttributeValue<string>("primarytwitterid");
            }
            set {
                SetAttributeValue("primarytwitterid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the annual revenue for the account, used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Annual Revenue</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        public decimal? Revenue {
            get {
                return GetMoneyValue("revenue");
            }
            set {
                SetMoneyValue("revenue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the annual revenue converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Annual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        public decimal? Revenue_Base {
            get {
                return GetMoneyValue("revenue_base");
            }
        }
        
        /// <summary>
        /// <para>Type the Standard Industrial Classification (SIC) code that indicates the account's primary industry of business, for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: SIC Code</para>
        /// </summary>
        [AttributeLogicalName("sic")]
        public string SIC {
            get {
                return GetAttributeValue<string>("sic");
            }
            set {
                SetAttributeValue("sic", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Account record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Type the number of shares available to the public for the account. This number is used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Shares Outstanding</para>
        /// </summary>
        [AttributeLogicalName("sharesoutstanding")]
        public int? SharesOutstanding {
            get {
                return GetAttributeValue<int?>("sharesoutstanding");
            }
            set {
                SetAttributeValue("sharesoutstanding", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to the account's address to designate the preferred carrier or other delivery option.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public Account_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account is active or inactive. Inactive accounts are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public AccountState? StateCode {
            get {
                return GetOptionSetValue<AccountState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Account_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Account_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the stock exchange at which the account is listed to track their stock and financial performance of the company.</para>
        /// <para>Display Name: Stock Exchange</para>
        /// </summary>
        [AttributeLogicalName("stockexchange")]
        public string StockExchange {
            get {
                return GetAttributeValue<string>("stockexchange");
            }
            set {
                SetAttributeValue("stockexchange", value);
            }
        }
        
        /// <summary>
        /// <para>Number of users or conversations followed the record</para>
        /// <para>Display Name: TeamsFollowed</para>
        /// </summary>
        [AttributeLogicalName("teamsfollowed")]
        public int? TeamsFollowed {
            get {
                return GetAttributeValue<int?>("teamsfollowed");
            }
            set {
                SetAttributeValue("teamsfollowed", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number for this account.</para>
        /// <para>Display Name: Main Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        public string Telephone1 {
            get {
                return GetAttributeValue<string>("telephone1");
            }
            set {
                SetAttributeValue("telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number for this account.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        public string Telephone2 {
            get {
                return GetAttributeValue<string>("telephone2");
            }
            set {
                SetAttributeValue("telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number for this account.</para>
        /// <para>Display Name: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        public string Telephone3 {
            get {
                return GetAttributeValue<string>("telephone3");
            }
            set {
                SetAttributeValue("telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Select a region or territory for the account for use in segmentation and analysis.</para>
        /// <para>Display Name: Territory Code</para>
        /// </summary>
        [AttributeLogicalName("territorycode")]
        public Account_TerritoryCode? TerritoryCode {
            get {
                return GetOptionSetValue<Account_TerritoryCode>("territorycode");
            }
            set {
                SetOptionSetValue("territorycode", value);
            }
        }
        
        /// <summary>
        /// <para>territory_accounts</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territoryid")]
        public EntityReference TerritoryId {
            get {
                return GetAttributeValue<EntityReference>("territoryid");
            }
            set {
                SetAttributeValue("territoryid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the stock exchange symbol for the account to track financial performance of the company. You can click the code entered in this field to access the latest trading information from MSN Money.</para>
        /// <para>Display Name: Ticker Symbol</para>
        /// </summary>
        [AttributeLogicalName("tickersymbol")]
        public string TickerSymbol {
            get {
                return GetAttributeValue<string>("tickersymbol");
            }
            set {
                SetAttributeValue("tickersymbol", value);
            }
        }
        
        /// <summary>
        /// <para>Total time spent for emails (read and write) and meetings by me in relation to account record.</para>
        /// <para>Display Name: Time Spent by me</para>
        /// </summary>
        [AttributeLogicalName("timespentbymeonemailandmeetings")]
        public string TimeSpentByMeOnEmailAndMeetings {
            get {
                return GetAttributeValue<string>("timespentbymeonemailandmeetings");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the account.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type the account's website URL to get quick details about the company profile.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteURL {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the company name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
        /// <para>Display Name: Yomi Account Name</para>
        /// </summary>
        [AttributeLogicalName("yominame")]
        public string YomiName {
            get {
                return GetAttributeValue<string>("yominame");
            }
            set {
                SetAttributeValue("yominame", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Multiselect</para>
        /// </summary>
        [AttributeLogicalName("dg_multiselect")]
        public IEnumerable<Account_dg_Multiselect> dg_Multiselect {
            get {
                return GetOptionSetCollectionValue<Account_dg_Multiselect>("dg_multiselect");
            }
            set {
                SetOptionSetCollectionValue("dg_multiselect", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Some Decimal</para>
        /// </summary>
        [AttributeLogicalName("dg_somedecimal")]
        public decimal? dg_SomeDecimal {
            get {
                return GetAttributeValue<decimal?>("dg_somedecimal");
            }
            set {
                SetAttributeValue("dg_somedecimal", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: TestCalculated</para>
        /// </summary>
        [AttributeLogicalName("dg_testcalculated")]
        public decimal? dg_TestCalculated {
            get {
                return GetMoneyValue("dg_testcalculated");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Test_Med_Underscore</para>
        /// </summary>
        [AttributeLogicalName("dg_test_med_underscore")]
        public string dg_Test_Med_Underscore {
            get {
                return GetAttributeValue<string>("dg_test_med_underscore");
            }
            set {
                SetAttributeValue("dg_test_med_underscore", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Year Only</para>
        /// </summary>
        [AttributeLogicalName("dg_yearonly")]
        public DateTime? dg_YearOnly {
            get {
                return GetAttributeValue<DateTime?>("dg_yearonly");
            }
            set {
                SetAttributeValue("dg_yearonly", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: ZZ_deprecated_field</para>
        /// </summary>
        [AttributeLogicalName("dg_deprecated_field")]
        [ObsoleteAttribute()]
        public string dg_deprecated_field {
            get {
                return GetAttributeValue<string>("dg_deprecated_field");
            }
            set {
                SetAttributeValue("dg_deprecated_field", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Some string with guids</para>
        /// </summary>
        [AttributeLogicalName("dg_somestringwith_guids")]
        public string dg_somestringwith_guids {
            get {
                return GetAttributeValue<string>("dg_somestringwith_guids");
            }
            set {
                SetAttributeValue("dg_somestringwith_guids", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the TestCalculated in base currency.</para>
        /// <para>Display Name: TestCalculated (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_testcalculated_base")]
        public decimal? dg_testcalculated_Base {
            get {
                return GetMoneyValue("dg_testcalculated_base");
            }
        }
        
        /// <summary>
        /// <para>Reference to an other account to be used for billing (only to be used if billing account differs)</para>
        /// <para>Display Name: Billing Account</para>
        /// </summary>
        [AttributeLogicalName("msdyn_billingaccount")]
        public EntityReference msdyn_BillingAccount {
            get {
                return GetAttributeValue<EntityReference>("msdyn_billingaccount");
            }
            set {
                SetAttributeValue("msdyn_billingaccount", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Preferred Resource (Deprecated)</para>
        /// </summary>
        [AttributeLogicalName("msdyn_preferredresource")]
        public EntityReference msdyn_PreferredResource {
            get {
                return GetAttributeValue<EntityReference>("msdyn_preferredresource");
            }
            set {
                SetAttributeValue("msdyn_preferredresource", value);
            }
        }
        
        /// <summary>
        /// <para>Default Sales Tax Code</para>
        /// <para>Display Name: Sales Tax Code</para>
        /// </summary>
        [AttributeLogicalName("msdyn_salestaxcode")]
        public EntityReference msdyn_SalesTaxCode {
            get {
                return GetAttributeValue<EntityReference>("msdyn_salestaxcode");
            }
            set {
                SetAttributeValue("msdyn_salestaxcode", value);
            }
        }
        
        /// <summary>
        /// <para>The Service Territory this account belongs to. This is used to optimize scheduling and routing</para>
        /// <para>Display Name: Service Territory</para>
        /// </summary>
        [AttributeLogicalName("msdyn_serviceterritory")]
        public EntityReference msdyn_ServiceTerritory {
            get {
                return GetAttributeValue<EntityReference>("msdyn_serviceterritory");
            }
            set {
                SetAttributeValue("msdyn_serviceterritory", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account is tax exempt.</para>
        /// <para>Display Name: Tax Exempt</para>
        /// </summary>
        [AttributeLogicalName("msdyn_taxexempt")]
        public bool? msdyn_TaxExempt {
            get {
                return GetAttributeValue<bool?>("msdyn_taxexempt");
            }
            set {
                SetAttributeValue("msdyn_taxexempt", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the government tax exempt number.</para>
        /// <para>Display Name: Tax Exempt Number</para>
        /// </summary>
        [AttributeLogicalName("msdyn_taxexemptnumber")]
        public string msdyn_TaxExemptNumber {
            get {
                return GetAttributeValue<string>("msdyn_taxexemptnumber");
            }
            set {
                SetAttributeValue("msdyn_taxexemptnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the travel charge to include on work orders. This value will be multiplied by the travel charge type.</para>
        /// <para>Display Name: Travel Charge</para>
        /// </summary>
        [AttributeLogicalName("msdyn_travelcharge")]
        public decimal? msdyn_TravelCharge {
            get {
                return GetMoneyValue("msdyn_travelcharge");
            }
            set {
                SetMoneyValue("msdyn_travelcharge", value);
            }
        }
        
        /// <summary>
        /// <para>Specify how travel is charged for this account.</para>
        /// <para>Display Name: Travel Charge Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_travelchargetype")]
        public msdyn_travelchargetype? msdyn_TravelChargeType {
            get {
                return GetOptionSetValue<msdyn_travelchargetype>("msdyn_travelchargetype");
            }
            set {
                SetOptionSetValue("msdyn_travelchargetype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the default instructions to show on new work orders.</para>
        /// <para>Display Name: Work Order Instructions</para>
        /// </summary>
        [AttributeLogicalName("msdyn_workorderinstructions")]
        public string msdyn_WorkOrderInstructions {
            get {
                return GetAttributeValue<string>("msdyn_workorderinstructions");
            }
            set {
                SetAttributeValue("msdyn_workorderinstructions", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: KPI</para>
        /// </summary>
        [AttributeLogicalName("msdyn_accountkpiid")]
        public EntityReference msdyn_accountkpiid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_accountkpiid");
            }
            set {
                SetAttributeValue("msdyn_accountkpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Describes whether account is opted out or not</para>
        /// <para>Display Name: GDPR Optout</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gdproptout")]
        public bool? msdyn_gdproptout {
            get {
                return GetAttributeValue<bool?>("msdyn_gdproptout");
            }
            set {
                SetAttributeValue("msdyn_gdproptout", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Travel Charge in base currency.</para>
        /// <para>Display Name: Travel Charge (Base)</para>
        /// </summary>
        [AttributeLogicalName("msdyn_travelcharge_base")]
        public decimal? msdyn_travelcharge_Base {
            get {
                return GetMoneyValue("msdyn_travelcharge_base");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Work Hour Template</para>
        /// </summary>
        [AttributeLogicalName("msdyn_workhourtemplate")]
        public EntityReference msdyn_workhourtemplate {
            get {
                return GetAttributeValue<EntityReference>("msdyn_workhourtemplate");
            }
            set {
                SetAttributeValue("msdyn_workhourtemplate", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateOnly</para>
        /// </summary>
        [AttributeLogicalName("new_dateonly")]
        public DateTime? new_DateOnly {
            get {
                return GetAttributeValue<DateTime?>("new_dateonly");
            }
            set {
                SetAttributeValue("new_dateonly", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateTime</para>
        /// </summary>
        [AttributeLogicalName("new_datetime")]
        public DateTime? new_DateTime {
            get {
                return GetAttributeValue<DateTime?>("new_datetime");
            }
            set {
                SetAttributeValue("new_datetime", value);
            }
        }
        
        [RelationshipSchemaName("Account_ActivityPointers")]
        public IEnumerable<ActivityPointer> Account_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Account_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Account_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Email_EmailSender")]
        public IEnumerable<Email> Account_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("Account_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("Account_Email_EmailSender", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Email_SendersAccount")]
        public IEnumerable<Email> Account_Email_SendersAccount {
            get {
                return GetRelatedEntities<Email>("Account_Email_SendersAccount", null);
            }
            set {
                SetRelatedEntities("Account_Email_SendersAccount", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Emails")]
        public IEnumerable<Email> Account_Emails {
            get {
                return GetRelatedEntities<Email>("Account_Emails", null);
            }
            set {
                SetRelatedEntities("Account_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Tasks")]
        public IEnumerable<Task> Account_Tasks {
            get {
                return GetRelatedEntities<Task>("Account_Tasks", null);
            }
            set {
                SetRelatedEntities("Account_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("account_master_account", EntityRole.Referenced)]
        public IEnumerable<Account> Referencedaccount_master_account {
            get {
                return GetRelatedEntities<Account>("account_master_account", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("account_master_account", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("account_parent_account", EntityRole.Referenced)]
        public IEnumerable<Account> Referencedaccount_parent_account {
            get {
                return GetRelatedEntities<Account>("account_parent_account", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("account_parent_account", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_account_account_BillingAccount", EntityRole.Referenced)]
        public IEnumerable<Account> Referencedmsdyn_account_account_BillingAccount {
            get {
                return GetRelatedEntities<Account>("msdyn_account_account_BillingAccount", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("msdyn_account_account_BillingAccount", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("account_master_account", EntityRole.Referencing)]
        public Account Referencingaccount_master_account {
            get {
                return GetRelatedEntity<Account>("account_master_account", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("account_master_account", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentaccountid")]
        [RelationshipSchemaName("account_parent_account", EntityRole.Referencing)]
        public Account Referencingaccount_parent_account {
            get {
                return GetRelatedEntity<Account>("account_parent_account", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("account_parent_account", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("msdyn_billingaccount")]
        [RelationshipSchemaName("msdyn_account_account_BillingAccount", EntityRole.Referencing)]
        public Account Referencingmsdyn_account_account_BillingAccount {
            get {
                return GetRelatedEntity<Account>("msdyn_account_account_BillingAccount", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("msdyn_account_account_BillingAccount", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("account_IncidentResolutions")]
        public IEnumerable<IncidentResolution> account_IncidentResolutions {
            get {
                return GetRelatedEntities<IncidentResolution>("account_IncidentResolutions", null);
            }
            set {
                SetRelatedEntities("account_IncidentResolutions", null, value);
            }
        }
        
        [RelationshipSchemaName("account_OpportunityCloses")]
        public IEnumerable<OpportunityClose> account_OpportunityCloses {
            get {
                return GetRelatedEntities<OpportunityClose>("account_OpportunityCloses", null);
            }
            set {
                SetRelatedEntities("account_OpportunityCloses", null, value);
            }
        }
        
        [RelationshipSchemaName("account_activity_parties")]
        public IEnumerable<ActivityParty> account_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("account_activity_parties", null);
            }
            set {
                SetRelatedEntities("account_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("originatingleadid")]
        [RelationshipSchemaName("account_originating_lead")]
        public Lead account_originating_lead {
            get {
                return GetRelatedEntity<Lead>("account_originating_lead", null);
            }
            set {
                SetRelatedEntity("account_originating_lead", null, value);
            }
        }
        
        [AttributeLogicalName("primarycontactid")]
        [RelationshipSchemaName("account_primary_contact")]
        public Contact account_primary_contact {
            get {
                return GetRelatedEntity<Contact>("account_primary_contact", null);
            }
            set {
                SetRelatedEntity("account_primary_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("accountleads_association")]
        public IEnumerable<Lead> accountleads_association {
            get {
                return GetRelatedEntities<Lead>("accountleads_association", null);
            }
            set {
                SetRelatedEntities("accountleads_association", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_accounts")]
        public BusinessUnit business_unit_accounts {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_accounts", null);
            }
            set {
                SetRelatedEntity("business_unit_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_customer_accounts")]
        public IEnumerable<Contact> contact_customer_accounts {
            get {
                return GetRelatedEntities<Contact>("contact_customer_accounts", null);
            }
            set {
                SetRelatedEntities("contact_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_account_account")]
        public IEnumerable<Account> dg_account_account {
            get {
                return GetRelatedEntities<Account>("dg_account_account", null);
            }
            set {
                SetRelatedEntities("dg_account_account", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_account_contact")]
        public IEnumerable<Contact> dg_account_contact {
            get {
                return GetRelatedEntities<Contact>("dg_account_contact", null);
            }
            set {
                SetRelatedEntities("dg_account_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_account_contact_TestAccount")]
        public IEnumerable<Contact> dg_account_contact_TestAccount {
            get {
                return GetRelatedEntities<Contact>("dg_account_contact_TestAccount", null);
            }
            set {
                SetRelatedEntities("dg_account_contact_TestAccount", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_customer_accounts")]
        public IEnumerable<Incident> incident_customer_accounts {
            get {
                return GetRelatedEntities<Incident>("incident_customer_accounts", null);
            }
            set {
                SetRelatedEntities("incident_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_customer_accounts")]
        public IEnumerable<Invoice> invoice_customer_accounts {
            get {
                return GetRelatedEntities<Invoice>("invoice_customer_accounts", null);
            }
            set {
                SetRelatedEntities("invoice_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_customer_accounts")]
        public IEnumerable<Lead> lead_customer_accounts {
            get {
                return GetRelatedEntities<Lead>("lead_customer_accounts", null);
            }
            set {
                SetRelatedEntities("lead_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_parent_account")]
        public IEnumerable<Lead> lead_parent_account {
            get {
                return GetRelatedEntities<Lead>("lead_parent_account", null);
            }
            set {
                SetRelatedEntities("lead_parent_account", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_accountbase_createdby")]
        public SystemUser lk_accountbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_accountbase_createdonbehalfby")]
        public SystemUser lk_accountbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_accountbase_modifiedby")]
        public SystemUser lk_accountbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_accountbase_modifiedonbehalfby")]
        public SystemUser lk_accountbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_customer_accounts")]
        public IEnumerable<Opportunity> opportunity_customer_accounts {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_customer_accounts", null);
            }
            set {
                SetRelatedEntities("opportunity_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_parent_account")]
        public IEnumerable<Opportunity> opportunity_parent_account {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_parent_account", null);
            }
            set {
                SetRelatedEntities("opportunity_parent_account", null, value);
            }
        }
        
        [AttributeLogicalName("preferredsystemuserid")]
        [RelationshipSchemaName("system_user_accounts")]
        public SystemUser system_user_accounts {
            get {
                return GetRelatedEntity<SystemUser>("system_user_accounts", null);
            }
            set {
                SetRelatedEntity("system_user_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_accounts")]
        public Team team_accounts {
            get {
                return GetRelatedEntity<Team>("team_accounts", null);
            }
            set {
                SetRelatedEntity("team_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_account")]
        public TransactionCurrency transactioncurrency_account {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_account", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_account", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_accounts")]
        public SystemUser user_accounts {
            get {
                return GetRelatedEntity<SystemUser>("user_accounts", null);
            }
            set {
                SetRelatedEntity("user_accounts", null, value);
            }
        }
        
        public static Account Retrieve(IOrganizationService service, Guid id, params Expression<Func<Account,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'name'</para>
        /// </summary>
        public static Account Retrieve_dg_name(IOrganizationService service, string Name, params Expression<Func<Account,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("name", Name);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'name'</para>
        /// </summary>
        public void AltKey_dg_name(string Name) {
            KeyAttributes.Clear();
            KeyAttributes.Add("name", Name);
        }
    }
    
    /// <summary>
    /// <para>description.</para>
    /// <para>Display Name: AccountLeads</para>
    /// </summary>
    [EntityLogicalName("accountleads")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class AccountLeads : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "accountleads";
        
        public const int EntityTypeCode = 16;
        
        public AccountLeads() : 
                base(EntityLogicalName) {
        }
        
        public AccountLeads(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("accountleadid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("accountleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the lead for the account.</para>
        /// </summary>
        [AttributeLogicalName("accountleadid")]
        public Guid? AccountLeadId {
            get {
                return GetAttributeValue<Guid?>("accountleadid");
            }
            set {
                SetId("accountleadid", value);
            }
        }
        
        [AttributeLogicalName("accountid")]
        public Guid? AccountId {
            get {
                return GetAttributeValue<Guid?>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        [AttributeLogicalName("leadid")]
        public Guid? LeadId {
            get {
                return GetAttributeValue<Guid?>("leadid");
            }
        }
        
        /// <summary>
        /// <para>name</para>
        /// <para>Display Name: name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("accountleads_Teams")]
        public IEnumerable<Team> accountleads_Teams {
            get {
                return GetRelatedEntities<Team>("accountleads_Teams", null);
            }
            set {
                SetRelatedEntities("accountleads_Teams", null, value);
            }
        }
        
        public static AccountLeads Retrieve(IOrganizationService service, Guid id, params Expression<Func<AccountLeads,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Person or group associated with an activity. An activity can have multiple activity parties.</para>
    /// <para>Display Name: Activity Party</para>
    /// </summary>
    [EntityLogicalName("activityparty")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ActivityParty : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "activityparty";
        
        public const int EntityTypeCode = 135;
        
        public ActivityParty() : 
                base(EntityLogicalName) {
        }
        
        public ActivityParty(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("partyidname");
            }
        }
        
        [AttributeLogicalName("activitypartyid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activitypartyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity party.</para>
        /// <para>Display Name: Activity Party</para>
        /// </summary>
        [AttributeLogicalName("activitypartyid")]
        public Guid? ActivityPartyId {
            get {
                return GetAttributeValue<Guid?>("activitypartyid");
            }
            set {
                SetId("activitypartyid", value);
            }
        }
        
        /// <summary>
        /// <para>quoteclose_activity_parties</para>
        /// <para>Display Name: Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public EntityReference ActivityId {
            get {
                return GetAttributeValue<EntityReference>("activityid");
            }
            set {
                SetAttributeValue("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Email address to which an email is delivered, and which is associated with the target entity.</para>
        /// <para>Display Name: Address </para>
        /// </summary>
        [AttributeLogicalName("addressused")]
        public string AddressUsed {
            get {
                return GetAttributeValue<string>("addressused");
            }
            set {
                SetAttributeValue("addressused", value);
            }
        }
        
        /// <summary>
        /// <para>Email address column number from associated party.</para>
        /// <para>Display Name: Email column number of party</para>
        /// </summary>
        [AttributeLogicalName("addressusedemailcolumnnumber")]
        public int? AddressUsedEmailColumnNumber {
            get {
                return GetAttributeValue<int?>("addressusedemailcolumnnumber");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending email to the activity party.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEmail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending faxes to the activity party.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow phone calls to the lead.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending postal mail to the lead.</para>
        /// <para>Display Name: Do not allow Postal Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
        }
        
        /// <summary>
        /// <para>Amount of effort used by the resource in a service appointment activity.</para>
        /// <para>Display Name: Effort</para>
        /// </summary>
        [AttributeLogicalName("effort")]
        public double? Effort {
            get {
                return GetAttributeValue<double?>("effort");
            }
            set {
                SetAttributeValue("effort", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Exchange Entry</para>
        /// </summary>
        [AttributeLogicalName("exchangeentryid")]
        public string ExchangeEntryId {
            get {
                return GetAttributeValue<string>("exchangeentryid");
            }
            set {
                SetAttributeValue("exchangeentryid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Appointment Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public ActivityParty_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<ActivityParty_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>Information about whether the underlying entity record is deleted.</para>
        /// <para>Display Name: Is Party Deleted</para>
        /// </summary>
        [AttributeLogicalName("ispartydeleted")]
        public bool? IsPartyDeleted {
            get {
                return GetAttributeValue<bool?>("ispartydeleted");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the activity_party.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Role of the person in the activity, such as sender, to, cc, bcc, required, optional, organizer, regarding, or owner.</para>
        /// <para>Display Name: Participation Type</para>
        /// </summary>
        [AttributeLogicalName("participationtypemask")]
        public ActivityParty_ParticipationTypeMask? ParticipationTypeMask {
            get {
                return GetOptionSetValue<ActivityParty_ParticipationTypeMask>("participationtypemask");
            }
            set {
                SetOptionSetValue("participationtypemask", value);
            }
        }
        
        /// <summary>
        /// <para>salesorder_activity_parties</para>
        /// <para>Display Name: Party</para>
        /// </summary>
        [AttributeLogicalName("partyid")]
        public EntityReference PartyId {
            get {
                return GetAttributeValue<EntityReference>("partyid");
            }
            set {
                SetAttributeValue("partyid", value);
            }
        }
        
        /// <summary>
        /// <para>ActivityPartyResourceSpec</para>
        /// <para>Display Name: Resource Specification</para>
        /// </summary>
        [AttributeLogicalName("resourcespecid")]
        public EntityReference ResourceSpecId {
            get {
                return GetAttributeValue<EntityReference>("resourcespecid");
            }
            set {
                SetAttributeValue("resourcespecid", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the activity.</para>
        /// <para>Display Name: Scheduled End</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the activity.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("account_activity_parties")]
        public Account account_activity_parties {
            get {
                return GetRelatedEntity<Account>("account_activity_parties", null);
            }
            set {
                SetRelatedEntity("account_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activitypointer_activity_parties")]
        public ActivityPointer activitypointer_activity_parties {
            get {
                return GetRelatedEntity<ActivityPointer>("activitypointer_activity_parties", null);
            }
            set {
                SetRelatedEntity("activitypointer_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("contact_activity_parties")]
        public Contact contact_activity_parties {
            get {
                return GetRelatedEntity<Contact>("contact_activity_parties", null);
            }
            set {
                SetRelatedEntity("contact_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("email_activity_parties")]
        public Email email_activity_parties {
            get {
                return GetRelatedEntity<Email>("email_activity_parties", null);
            }
            set {
                SetRelatedEntity("email_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("incident_activity_parties")]
        public Incident incident_activity_parties {
            get {
                return GetRelatedEntity<Incident>("incident_activity_parties", null);
            }
            set {
                SetRelatedEntity("incident_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("incidentresolution_activity_parties")]
        public IncidentResolution incidentresolution_activity_parties {
            get {
                return GetRelatedEntity<IncidentResolution>("incidentresolution_activity_parties", null);
            }
            set {
                SetRelatedEntity("incidentresolution_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("invoice_activity_parties")]
        public Invoice invoice_activity_parties {
            get {
                return GetRelatedEntity<Invoice>("invoice_activity_parties", null);
            }
            set {
                SetRelatedEntity("invoice_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("lead_activity_parties")]
        public Lead lead_activity_parties {
            get {
                return GetRelatedEntity<Lead>("lead_activity_parties", null);
            }
            set {
                SetRelatedEntity("lead_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("opportunity_activity_parties")]
        public Opportunity opportunity_activity_parties {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_activity_parties", null);
            }
            set {
                SetRelatedEntity("opportunity_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("opportunityclose_activity_parties")]
        public OpportunityClose opportunityclose_activity_parties {
            get {
                return GetRelatedEntity<OpportunityClose>("opportunityclose_activity_parties", null);
            }
            set {
                SetRelatedEntity("opportunityclose_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("system_user_activity_parties")]
        public SystemUser system_user_activity_parties {
            get {
                return GetRelatedEntity<SystemUser>("system_user_activity_parties", null);
            }
            set {
                SetRelatedEntity("system_user_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("task_activity_parties")]
        public Task task_activity_parties {
            get {
                return GetRelatedEntity<Task>("task_activity_parties", null);
            }
            set {
                SetRelatedEntity("task_activity_parties", null, value);
            }
        }
        
        public static ActivityParty Retrieve(IOrganizationService service, Guid id, params Expression<Func<ActivityParty,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Task performed, or to be performed, by a user. An activity is any action for which an entry can be made on a calendar.</para>
    /// <para>Display Name: Activity</para>
    /// </summary>
    [EntityLogicalName("activitypointer")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ActivityPointer : ExtendedEntity<ActivityPointerState, ActivityPointer_StatusCode> {
        
        public const string EntityLogicalName = "activitypointer";
        
        public const int EntityTypeCode = 4200;
        
        public ActivityPointer() : 
                base(EntityLogicalName) {
        }
        
        public ActivityPointer(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity.</para>
        /// <para>Display Name: Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Additional information provided by the external application as JSON. For internal use only.</para>
        /// <para>Display Name: Activity Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Actual duration of the activity in minutes.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Actual end time of the activity.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Actual start time of the activity.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.</para>
        /// <para>Display Name: Social Channel</para>
        /// </summary>
        [AttributeLogicalName("community")]
        public socialprofile_community? Community {
            get {
                return GetOptionSetValue<socialprofile_community>("community");
            }
            set {
                SetOptionSetValue("community", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the activity.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was created.</para>
        /// <para>Display Name: Date Created</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the activitypointer.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the delivery of the activity was last attempted.</para>
        /// <para>Display Name: Date Delivery Last Attempted</para>
        /// </summary>
        [AttributeLogicalName("deliverylastattemptedon")]
        public DateTime? DeliveryLastAttemptedOn {
            get {
                return GetAttributeValue<DateTime?>("deliverylastattemptedon");
            }
        }
        
        /// <summary>
        /// <para>Priority of delivery of the activity to the email server.</para>
        /// <para>Display Name: Delivery Priority</para>
        /// </summary>
        [AttributeLogicalName("deliveryprioritycode")]
        public activitypointer_deliveryprioritycode? DeliveryPriorityCode {
            get {
                return GetOptionSetValue<activitypointer_deliveryprioritycode>("deliveryprioritycode");
            }
            set {
                SetOptionSetValue("deliveryprioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the activity.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>The message id of activity which is returned from Exchange Server.</para>
        /// <para>Display Name: Exchange Item ID</para>
        /// </summary>
        [AttributeLogicalName("exchangeitemid")]
        public string ExchangeItemId {
            get {
                return GetAttributeValue<string>("exchangeitemid");
            }
            set {
                SetAttributeValue("exchangeitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the activitypointer with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the web link of Activity of type email.</para>
        /// <para>Display Name: Exchange WebLink</para>
        /// </summary>
        [AttributeLogicalName("exchangeweblink")]
        public string ExchangeWebLink {
            get {
                return GetAttributeValue<string>("exchangeweblink");
            }
            set {
                SetAttributeValue("exchangeweblink", value);
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Recurring Instance Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public ActivityPointer_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<ActivityPointer_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("ismapiprivate")]
        public bool? IsMapiPrivate {
            get {
                return GetAttributeValue<bool?>("ismapiprivate");
            }
            set {
                SetAttributeValue("ismapiprivate", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Left the voice mail</para>
        /// <para>Display Name: Left Voice Mail</para>
        /// </summary>
        [AttributeLogicalName("leftvoicemail")]
        public bool? LeftVoiceMail {
            get {
                return GetAttributeValue<bool?>("leftvoicemail");
            }
            set {
                SetAttributeValue("leftvoicemail", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of user who last modified the activity.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when activity was last modified.</para>
        /// <para>Display Name: Last Updated</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the activitypointer.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the activity.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Delay activity processing until</para>
        /// </summary>
        [AttributeLogicalName("postponeactivityprocessinguntil")]
        public DateTime? PostponeActivityProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeactivityprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Priority of the activity.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public ActivityPointer_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<ActivityPointer_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the case record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
            set {
                SetAttributeValue("scheduleddurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the activity.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the activity.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the mailbox associated with the sender of the email message.</para>
        /// <para>Display Name: Sender's Mailbox</para>
        /// </summary>
        [AttributeLogicalName("sendermailboxid")]
        public EntityReference SenderMailboxId {
            get {
                return GetAttributeValue<EntityReference>("sendermailboxid");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was sent.</para>
        /// <para>Display Name: Date Sent</para>
        /// </summary>
        [AttributeLogicalName("senton")]
        public DateTime? SentOn {
            get {
                return GetAttributeValue<DateTime?>("senton");
            }
        }
        
        /// <summary>
        /// <para>Uniqueidentifier specifying the id of recurring series of an instance.</para>
        /// <para>Display Name: Series Id</para>
        /// </summary>
        [AttributeLogicalName("seriesid")]
        public Guid? SeriesId {
            get {
                return GetAttributeValue<Guid?>("seriesid");
            }
        }
        
        /// <summary>
        /// <para>service_activity_pointers</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>Display Name: Sort Date</para>
        /// </summary>
        [AttributeLogicalName("sortdate")]
        public DateTime? SortDate {
            get {
                return GetAttributeValue<DateTime?>("sortdate");
            }
            set {
                SetAttributeValue("sortdate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the activity.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ActivityPointerState? StateCode {
            get {
                return GetOptionSetValue<ActivityPointerState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the activity.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public ActivityPointer_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<ActivityPointer_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the activitypointer.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>All activity parties associated with this activity.</para>
        /// <para>Display Name: All Activity Parties</para>
        /// </summary>
        [AttributeLogicalName("allparties")]
        public IEnumerable<ActivityParty> allparties {
            get {
                return GetEntityCollection<ActivityParty>("allparties");
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_ActivityPointers")]
        public Account Account_ActivityPointers {
            get {
                return GetRelatedEntity<Account>("Account_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Account_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("ActivityPointer_QueueItem")]
        public IEnumerable<QueueItem> ActivityPointer_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("ActivityPointer_QueueItem", null);
            }
            set {
                SetRelatedEntities("ActivityPointer_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_ActivityPointers")]
        public Contact Contact_ActivityPointers {
            get {
                return GetRelatedEntity<Contact>("Contact_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Contact_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_ActivityPointers")]
        public Incident Incident_ActivityPointers {
            get {
                return GetRelatedEntity<Incident>("Incident_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Incident_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_ActivityPointers")]
        public Invoice Invoice_ActivityPointers {
            get {
                return GetRelatedEntity<Invoice>("Invoice_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Invoice_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_ActivityPointers")]
        public Lead Lead_ActivityPointers {
            get {
                return GetRelatedEntity<Lead>("Lead_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Lead_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_ActivityPointers")]
        public Opportunity Opportunity_ActivityPointers {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Opportunity_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_ActivityPointer")]
        public TransactionCurrency TransactionCurrency_ActivityPointer {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_ActivityPointer", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_ActivityPointer", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_email")]
        public IEnumerable<Email> activity_pointer_email {
            get {
                return GetRelatedEntities<Email>("activity_pointer_email", null);
            }
            set {
                SetRelatedEntities("activity_pointer_email", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_incident_resolution")]
        public IEnumerable<IncidentResolution> activity_pointer_incident_resolution {
            get {
                return GetRelatedEntities<IncidentResolution>("activity_pointer_incident_resolution", null);
            }
            set {
                SetRelatedEntities("activity_pointer_incident_resolution", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_opportunity_close")]
        public IEnumerable<OpportunityClose> activity_pointer_opportunity_close {
            get {
                return GetRelatedEntities<OpportunityClose>("activity_pointer_opportunity_close", null);
            }
            set {
                SetRelatedEntities("activity_pointer_opportunity_close", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_task")]
        public IEnumerable<Task> activity_pointer_task {
            get {
                return GetRelatedEntities<Task>("activity_pointer_task", null);
            }
            set {
                SetRelatedEntities("activity_pointer_task", null, value);
            }
        }
        
        [RelationshipSchemaName("activitypointer_activity_parties")]
        public IEnumerable<ActivityParty> activitypointer_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("activitypointer_activity_parties", null);
            }
            set {
                SetRelatedEntities("activitypointer_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_activitypointer")]
        public BusinessUnit business_unit_activitypointer {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_activitypointer", null);
            }
            set {
                SetRelatedEntity("business_unit_activitypointer", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_activitypointer_createdby")]
        public SystemUser lk_activitypointer_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_createdby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_activitypointer_createdonbehalfby")]
        public SystemUser lk_activitypointer_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_activitypointer_modifiedby")]
        public SystemUser lk_activitypointer_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_activitypointer_modifiedonbehalfby")]
        public SystemUser lk_activitypointer_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_activity")]
        public Team team_activity {
            get {
                return GetRelatedEntity<Team>("team_activity", null);
            }
            set {
                SetRelatedEntity("team_activity", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_activity")]
        public SystemUser user_activity {
            get {
                return GetRelatedEntity<SystemUser>("user_activity", null);
            }
            set {
                SetRelatedEntity("user_activity", null, value);
            }
        }
        
        public static ActivityPointer Retrieve(IOrganizationService service, Guid id, params Expression<Func<ActivityPointer,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Business, division, or department in the Microsoft Dynamics 365 database.</para>
    /// <para>Display Name: Business Unit</para>
    /// </summary>
    [EntityLogicalName("businessunit")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BusinessUnit : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "businessunit";
        
        public const int EntityTypeCode = 10;
        
        public BusinessUnit() : 
                base(EntityLogicalName) {
        }
        
        public BusinessUnit(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public Guid? BusinessUnitId {
            get {
                return GetAttributeValue<Guid?>("businessunitid");
            }
            set {
                SetId("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 1, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public BusinessUnit_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<BusinessUnit_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 1.</para>
        /// <para>Display Name: Bill To City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Country/region name for address 1.</para>
        /// <para>Display Name: Bill To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>County name for address 1.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 1.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 1.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 1 information.</para>
        /// <para>Display Name: Bill To Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 1 information.</para>
        /// <para>Display Name: Bill To Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 1 information.</para>
        /// <para>Display Name: Bill To Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 1.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 1.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 1.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 1.</para>
        /// <para>Display Name: Bill To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 1.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public BusinessUnit_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<BusinessUnit_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 1.</para>
        /// <para>Display Name: Bill To State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 1.</para>
        /// <para>Display Name: Main Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 1.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 1.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 1.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 2, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public BusinessUnit_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<BusinessUnit_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 2.</para>
        /// <para>Display Name: Ship To City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Country/region name for address 2.</para>
        /// <para>Display Name: Ship To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>County name for address 2.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 2.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 2.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 2 information.</para>
        /// <para>Display Name: Ship To Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 2 information.</para>
        /// <para>Display Name: Ship To Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 2 information.</para>
        /// <para>Display Name: Ship To Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 2.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 2.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 2.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 2.</para>
        /// <para>Display Name: Ship To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 2.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public BusinessUnit_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<BusinessUnit_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 2.</para>
        /// <para>Display Name: Ship To State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 2.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Fiscal calendar associated with the business unit.</para>
        /// <para>Display Name: Calendar</para>
        /// </summary>
        [AttributeLogicalName("calendarid")]
        public EntityReference CalendarId {
            get {
                return GetAttributeValue<EntityReference>("calendarid");
            }
            set {
                SetAttributeValue("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the business unit cost center.</para>
        /// <para>Display Name: Cost Center</para>
        /// </summary>
        [AttributeLogicalName("costcenter")]
        public string CostCenter {
            get {
                return GetAttributeValue<string>("costcenter");
            }
            set {
                SetAttributeValue("costcenter", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the business unit.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the business unit was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the businessunit.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Credit limit for the business unit.</para>
        /// <para>Display Name: Credit Limit</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public double? CreditLimit {
            get {
                return GetAttributeValue<double?>("creditlimit");
            }
            set {
                SetAttributeValue("creditlimit", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the business unit.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for disabling the business unit.</para>
        /// <para>Display Name: Disable Reason</para>
        /// </summary>
        [AttributeLogicalName("disabledreason")]
        public string DisabledReason {
            get {
                return GetAttributeValue<string>("disabledreason");
            }
        }
        
        /// <summary>
        /// <para>Name of the division to which the business unit belongs.</para>
        /// <para>Display Name: Division</para>
        /// </summary>
        [AttributeLogicalName("divisionname")]
        public string DivisionName {
            get {
                return GetAttributeValue<string>("divisionname");
            }
            set {
                SetAttributeValue("divisionname", value);
            }
        }
        
        /// <summary>
        /// <para>Email address for the business unit.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EMailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the businessunit with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Alternative name under which the business unit can be filed.</para>
        /// <para>Display Name: File as Name</para>
        /// </summary>
        [AttributeLogicalName("fileasname")]
        public string FileAsName {
            get {
                return GetAttributeValue<string>("fileasname");
            }
            set {
                SetAttributeValue("fileasname", value);
            }
        }
        
        /// <summary>
        /// <para>FTP site URL for the business unit.</para>
        /// <para>Display Name: FTP Site</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        public string FtpSiteUrl {
            get {
                return GetAttributeValue<string>("ftpsiteurl");
            }
            set {
                SetAttributeValue("ftpsiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Inheritance mask for the business unit.</para>
        /// <para>Display Name: Inheritance Mask</para>
        /// </summary>
        [AttributeLogicalName("inheritancemask")]
        public int? InheritanceMask {
            get {
                return GetAttributeValue<int?>("inheritancemask");
            }
            set {
                SetAttributeValue("inheritancemask", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the business unit is enabled or disabled.</para>
        /// <para>Display Name: Is Disabled</para>
        /// </summary>
        [AttributeLogicalName("isdisabled")]
        public bool? IsDisabled {
            get {
                return GetAttributeValue<bool?>("isdisabled");
            }
            set {
                SetAttributeValue("isdisabled", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the business unit.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the business unit was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the businessunit.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the business unit.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the business unit.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the parent business unit.</para>
        /// <para>Display Name: Parent Business</para>
        /// </summary>
        [AttributeLogicalName("parentbusinessunitid")]
        public EntityReference ParentBusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("parentbusinessunitid");
            }
            set {
                SetAttributeValue("parentbusinessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Picture or diagram of the business unit.</para>
        /// <para>Display Name: Picture</para>
        /// </summary>
        [AttributeLogicalName("picture")]
        public string Picture {
            get {
                return GetAttributeValue<string>("picture");
            }
            set {
                SetAttributeValue("picture", value);
            }
        }
        
        /// <summary>
        /// <para>Stock exchange on which the business is listed.</para>
        /// <para>Display Name: Stock Exchange</para>
        /// </summary>
        [AttributeLogicalName("stockexchange")]
        public string StockExchange {
            get {
                return GetAttributeValue<string>("stockexchange");
            }
            set {
                SetAttributeValue("stockexchange", value);
            }
        }
        
        /// <summary>
        /// <para>Stock exchange ticker symbol for the business unit.</para>
        /// <para>Display Name: Ticker Symbol</para>
        /// </summary>
        [AttributeLogicalName("tickersymbol")]
        public string TickerSymbol {
            get {
                return GetAttributeValue<string>("tickersymbol");
            }
            set {
                SetAttributeValue("tickersymbol", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the businessunit.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for the business unit. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("utcoffset")]
        public int? UTCOffset {
            get {
                return GetAttributeValue<int?>("utcoffset");
            }
            set {
                SetAttributeValue("utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the business unit.</para>
        /// <para>Display Name: Version number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Website URL for the business unit.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteUrl {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether workflow or sales process rules have been suspended.</para>
        /// <para>Display Name: Workflow Suspended</para>
        /// </summary>
        [AttributeLogicalName("workflowsuspended")]
        public bool? WorkflowSuspended {
            get {
                return GetAttributeValue<bool?>("workflowsuspended");
            }
            set {
                SetAttributeValue("workflowsuspended", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Warehouse associated with Business Unit.</para>
        /// <para>Display Name: Warehouse (Deprecated)</para>
        /// </summary>
        [AttributeLogicalName("msdyn_warehouse")]
        public EntityReference msdyn_Warehouse {
            get {
                return GetAttributeValue<EntityReference>("msdyn_warehouse");
            }
            set {
                SetAttributeValue("msdyn_warehouse", value);
            }
        }
        
        [AttributeLogicalName("calendarid")]
        [RelationshipSchemaName("BusinessUnit_Calendar")]
        public Calendar BusinessUnit_Calendar {
            get {
                return GetRelatedEntity<Calendar>("BusinessUnit_Calendar", null);
            }
            set {
                SetRelatedEntity("BusinessUnit_Calendar", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_parent_business_unit", EntityRole.Referenced)]
        public IEnumerable<BusinessUnit> Referencedbusiness_unit_parent_business_unit {
            get {
                return GetRelatedEntities<BusinessUnit>("business_unit_parent_business_unit", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("business_unit_parent_business_unit", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("parentbusinessunitid")]
        [RelationshipSchemaName("business_unit_parent_business_unit", EntityRole.Referencing)]
        public BusinessUnit Referencingbusiness_unit_parent_business_unit {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_parent_business_unit", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("business_unit_parent_business_unit", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_BusinessUnit")]
        public TransactionCurrency TransactionCurrency_BusinessUnit {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_BusinessUnit", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_BusinessUnit", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_accounts")]
        public IEnumerable<Account> business_unit_accounts {
            get {
                return GetRelatedEntities<Account>("business_unit_accounts", null);
            }
            set {
                SetRelatedEntities("business_unit_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_activitypointer")]
        public IEnumerable<ActivityPointer> business_unit_activitypointer {
            get {
                return GetRelatedEntities<ActivityPointer>("business_unit_activitypointer", null);
            }
            set {
                SetRelatedEntities("business_unit_activitypointer", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_calendars")]
        public IEnumerable<Calendar> business_unit_calendars {
            get {
                return GetRelatedEntities<Calendar>("business_unit_calendars", null);
            }
            set {
                SetRelatedEntities("business_unit_calendars", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_contacts")]
        public IEnumerable<Contact> business_unit_contacts {
            get {
                return GetRelatedEntities<Contact>("business_unit_contacts", null);
            }
            set {
                SetRelatedEntities("business_unit_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_autonumberentity")]
        public IEnumerable<dg_autonumberentity> business_unit_dg_autonumberentity {
            get {
                return GetRelatedEntities<dg_autonumberentity>("business_unit_dg_autonumberentity", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_autonumberentity", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_bus")]
        public IEnumerable<dg_bus> business_unit_dg_bus {
            get {
                return GetRelatedEntities<dg_bus>("business_unit_dg_bus", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_child")]
        public IEnumerable<dg_child> business_unit_dg_child {
            get {
                return GetRelatedEntities<dg_child>("business_unit_dg_child", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_field")]
        public IEnumerable<dg_field> business_unit_dg_field {
            get {
                return GetRelatedEntities<dg_field>("business_unit_dg_field", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_field", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_man")]
        public IEnumerable<dg_man> business_unit_dg_man {
            get {
                return GetRelatedEntities<dg_man>("business_unit_dg_man", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_man", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_email_activities")]
        public IEnumerable<Email> business_unit_email_activities {
            get {
                return GetRelatedEntities<Email>("business_unit_email_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_email_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_incident_resolution_activities")]
        public IEnumerable<IncidentResolution> business_unit_incident_resolution_activities {
            get {
                return GetRelatedEntities<IncidentResolution>("business_unit_incident_resolution_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_incident_resolution_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_incidents")]
        public IEnumerable<Incident> business_unit_incidents {
            get {
                return GetRelatedEntities<Incident>("business_unit_incidents", null);
            }
            set {
                SetRelatedEntities("business_unit_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_invoices")]
        public IEnumerable<Invoice> business_unit_invoices {
            get {
                return GetRelatedEntities<Invoice>("business_unit_invoices", null);
            }
            set {
                SetRelatedEntities("business_unit_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_leads")]
        public IEnumerable<Lead> business_unit_leads {
            get {
                return GetRelatedEntities<Lead>("business_unit_leads", null);
            }
            set {
                SetRelatedEntities("business_unit_leads", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_opportunities")]
        public IEnumerable<Opportunity> business_unit_opportunities {
            get {
                return GetRelatedEntities<Opportunity>("business_unit_opportunities", null);
            }
            set {
                SetRelatedEntities("business_unit_opportunities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_opportunity_close_activities")]
        public IEnumerable<OpportunityClose> business_unit_opportunity_close_activities {
            get {
                return GetRelatedEntities<OpportunityClose>("business_unit_opportunity_close_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_opportunity_close_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_system_users")]
        public IEnumerable<SystemUser> business_unit_system_users {
            get {
                return GetRelatedEntities<SystemUser>("business_unit_system_users", null);
            }
            set {
                SetRelatedEntities("business_unit_system_users", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_task_activities")]
        public IEnumerable<Task> business_unit_task_activities {
            get {
                return GetRelatedEntities<Task>("business_unit_task_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_task_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_teams")]
        public IEnumerable<Team> business_unit_teams {
            get {
                return GetRelatedEntities<Team>("business_unit_teams", null);
            }
            set {
                SetRelatedEntities("business_unit_teams", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_workflow")]
        public IEnumerable<Workflow> business_unit_workflow {
            get {
                return GetRelatedEntities<Workflow>("business_unit_workflow", null);
            }
            set {
                SetRelatedEntities("business_unit_workflow", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_businessunit_createdonbehalfby")]
        public SystemUser lk_businessunit_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_businessunit_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_businessunit_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_businessunit_modifiedonbehalfby")]
        public SystemUser lk_businessunit_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_businessunit_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_businessunit_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_businessunitbase_createdby")]
        public SystemUser lk_businessunitbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_businessunitbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_businessunitbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_businessunitbase_modifiedby")]
        public SystemUser lk_businessunitbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_businessunitbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_businessunitbase_modifiedby", null, value);
            }
        }
        
        public static BusinessUnit Retrieve(IOrganizationService service, Guid id, params Expression<Func<BusinessUnit,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Calendar used by the scheduling system to define when an appointment or activity is to occur.</para>
    /// <para>Display Name: Calendar</para>
    /// </summary>
    [EntityLogicalName("calendar")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Calendar : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "calendar";
        
        public const int EntityTypeCode = 4003;
        
        public Calendar() : 
                base(EntityLogicalName) {
        }
        
        public Calendar(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("calendarid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the calendar.</para>
        /// <para>Display Name: Calendar</para>
        /// </summary>
        [AttributeLogicalName("calendarid")]
        public Guid? CalendarId {
            get {
                return GetAttributeValue<Guid?>("calendarid");
            }
            set {
                SetId("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the calendar is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the calendar.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the calendar was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the calendar.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Calendar used by the scheduling system to define when an appointment or activity is to occur.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Holiday Schedule CalendarId</para>
        /// <para>Display Name: Holiday Schedule CalendarId</para>
        /// </summary>
        [AttributeLogicalName("holidayschedulecalendarid")]
        public EntityReference HolidayScheduleCalendarId {
            get {
                return GetAttributeValue<EntityReference>("holidayschedulecalendarid");
            }
            set {
                SetAttributeValue("holidayschedulecalendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Calendar is shared by other calendars, such as the organization calendar.</para>
        /// <para>Display Name: Is Shared</para>
        /// </summary>
        [AttributeLogicalName("isshared")]
        public bool? IsShared {
            get {
                return GetAttributeValue<bool?>("isshared");
            }
            set {
                SetAttributeValue("isshared", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the calendar.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the calendar was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the calendar.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the calendar.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization with which the calendar is associated.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the primary user of this calendar.</para>
        /// <para>Display Name: Primary User</para>
        /// </summary>
        [AttributeLogicalName("primaryuserid")]
        public Guid? PrimaryUserId {
            get {
                return GetAttributeValue<Guid?>("primaryuserid");
            }
            set {
                SetAttributeValue("primaryuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Calendar type, such as User work hour calendar, or Customer service hour calendar.</para>
        /// <para>Display Name: Calendar type</para>
        /// </summary>
        [AttributeLogicalName("type")]
        public Calendar_Type? Type {
            get {
                return GetOptionSetValue<Calendar_Type>("type");
            }
            set {
                SetOptionSetValue("type", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("BusinessUnit_Calendar")]
        public IEnumerable<BusinessUnit> BusinessUnit_Calendar {
            get {
                return GetRelatedEntities<BusinessUnit>("BusinessUnit_Calendar", null);
            }
            set {
                SetRelatedEntities("BusinessUnit_Calendar", null, value);
            }
        }
        
        [RelationshipSchemaName("calendar_customercalendar_holidaycalendar", EntityRole.Referenced)]
        public IEnumerable<Calendar> Referencedcalendar_customercalendar_holidaycalendar {
            get {
                return GetRelatedEntities<Calendar>("calendar_customercalendar_holidaycalendar", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("calendar_customercalendar_holidaycalendar", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("holidayschedulecalendarid")]
        [RelationshipSchemaName("calendar_customercalendar_holidaycalendar", EntityRole.Referencing)]
        public Calendar Referencingcalendar_customercalendar_holidaycalendar {
            get {
                return GetRelatedEntity<Calendar>("calendar_customercalendar_holidaycalendar", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("calendar_customercalendar_holidaycalendar", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        [RelationshipSchemaName("business_unit_calendars")]
        public BusinessUnit business_unit_calendars {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_calendars", null);
            }
            set {
                SetRelatedEntity("business_unit_calendars", null, value);
            }
        }
        
        [RelationshipSchemaName("calendar_system_users")]
        public IEnumerable<SystemUser> calendar_system_users {
            get {
                return GetRelatedEntities<SystemUser>("calendar_system_users", null);
            }
            set {
                SetRelatedEntities("calendar_system_users", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_calendar_createdby")]
        public SystemUser lk_calendar_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_calendar_createdby", null);
            }
            set {
                SetRelatedEntity("lk_calendar_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_calendar_createdonbehalfby")]
        public SystemUser lk_calendar_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_calendar_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_calendar_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_calendar_modifiedby")]
        public SystemUser lk_calendar_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_calendar_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_calendar_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_calendar_modifiedonbehalfby")]
        public SystemUser lk_calendar_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_calendar_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_calendar_modifiedonbehalfby", null, value);
            }
        }
        
        public static Calendar Retrieve(IOrganizationService service, Guid id, params Expression<Func<Calendar,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Person with whom a business unit has a relationship, such as customer, supplier, and colleague.</para>
    /// <para>Display Name: Contact</para>
    /// </summary>
    [EntityLogicalName("contact")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Contact : ExtendedEntity<ContactState, Contact_StatusCode> {
        
        public const string EntityLogicalName = "contact";
        
        public const int EntityTypeCode = 2;
        
        public Contact() : 
                base(EntityLogicalName) {
        }
        
        public Contact(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
            set {
                SetId("contactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the contact is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Select the contact's role within the company or sales process, such as decision maker, employee, or influencer.</para>
        /// <para>Display Name: Role</para>
        /// </summary>
        [AttributeLogicalName("accountrolecode")]
        public Contact_AccountRoleCode? AccountRoleCode {
            get {
                return GetOptionSetValue<Contact_AccountRoleCode>("accountrolecode");
            }
            set {
                SetOptionSetValue("accountrolecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public Contact_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>Display Name: Address 1: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address 1</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>Display Name: Address 1: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 1: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        public Contact_Address1_FreightTermsCode? Address1_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address1_FreightTermsCode>("address1_freighttermscode");
            }
            set {
                SetOptionSetValue("address1_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>Display Name: Address 1: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's primary address.</para>
        /// <para>Display Name: Address 1: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address1_primarycontactname")]
        public string Address1_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address1_primarycontactname");
            }
            set {
                SetAttributeValue("address1_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public Contact_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>Display Name: Address 1: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public Contact_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>Display Name: Address 2: City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Address 2</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>Display Name: Address 2: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 2: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        public Contact_Address2_FreightTermsCode? Address2_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address2_FreightTermsCode>("address2_freighttermscode");
            }
            set {
                SetOptionSetValue("address2_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>Display Name: Address 2: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's secondary address.</para>
        /// <para>Display Name: Address 2: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address2_primarycontactname")]
        public string Address2_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address2_primarycontactname");
            }
            set {
                SetAttributeValue("address2_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public Contact_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>Display Name: Address 2: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 3.</para>
        /// <para>Display Name: Address 3: ID</para>
        /// </summary>
        [AttributeLogicalName("address3_addressid")]
        public Guid? Address3_AddressId {
            get {
                return GetAttributeValue<Guid?>("address3_addressid");
            }
            set {
                SetAttributeValue("address3_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the third address type.</para>
        /// <para>Display Name: Address 3: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address3_addresstypecode")]
        public Contact_Address3_AddressTypeCode? Address3_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address3_AddressTypeCode>("address3_addresstypecode");
            }
            set {
                SetOptionSetValue("address3_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the 3rd address.</para>
        /// <para>Display Name: Address 3: City</para>
        /// </summary>
        [AttributeLogicalName("address3_city")]
        public string Address3_City {
            get {
                return GetAttributeValue<string>("address3_city");
            }
            set {
                SetAttributeValue("address3_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete third address.</para>
        /// <para>Display Name: Address 3</para>
        /// </summary>
        [AttributeLogicalName("address3_composite")]
        public string Address3_Composite {
            get {
                return GetAttributeValue<string>("address3_composite");
            }
        }
        
        /// <summary>
        /// <para>the country or region for the 3rd address.</para>
        /// <para>Display Name: Address3: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address3_country")]
        public string Address3_Country {
            get {
                return GetAttributeValue<string>("address3_country");
            }
            set {
                SetAttributeValue("address3_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the third address.</para>
        /// <para>Display Name: Address 3: County</para>
        /// </summary>
        [AttributeLogicalName("address3_county")]
        public string Address3_County {
            get {
                return GetAttributeValue<string>("address3_county");
            }
            set {
                SetAttributeValue("address3_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the third address.</para>
        /// <para>Display Name: Address 3: Fax</para>
        /// </summary>
        [AttributeLogicalName("address3_fax")]
        public string Address3_Fax {
            get {
                return GetAttributeValue<string>("address3_fax");
            }
            set {
                SetAttributeValue("address3_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the third address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 3: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address3_freighttermscode")]
        public Contact_Address3_FreightTermsCode? Address3_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address3_FreightTermsCode>("address3_freighttermscode");
            }
            set {
                SetOptionSetValue("address3_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the third address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 3: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address3_latitude")]
        public double? Address3_Latitude {
            get {
                return GetAttributeValue<double?>("address3_latitude");
            }
            set {
                SetAttributeValue("address3_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>the first line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address3_line1")]
        public string Address3_Line1 {
            get {
                return GetAttributeValue<string>("address3_line1");
            }
            set {
                SetAttributeValue("address3_line1", value);
            }
        }
        
        /// <summary>
        /// <para>the second line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address3_line2")]
        public string Address3_Line2 {
            get {
                return GetAttributeValue<string>("address3_line2");
            }
            set {
                SetAttributeValue("address3_line2", value);
            }
        }
        
        /// <summary>
        /// <para>the third line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address3_line3")]
        public string Address3_Line3 {
            get {
                return GetAttributeValue<string>("address3_line3");
            }
            set {
                SetAttributeValue("address3_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the third address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 3: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address3_longitude")]
        public double? Address3_Longitude {
            get {
                return GetAttributeValue<double?>("address3_longitude");
            }
            set {
                SetAttributeValue("address3_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the third address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 3: Name</para>
        /// </summary>
        [AttributeLogicalName("address3_name")]
        public string Address3_Name {
            get {
                return GetAttributeValue<string>("address3_name");
            }
            set {
                SetAttributeValue("address3_name", value);
            }
        }
        
        /// <summary>
        /// <para>the post office box number of the 3rd address.</para>
        /// <para>Display Name: Address 3: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address3_postofficebox")]
        public string Address3_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address3_postofficebox");
            }
            set {
                SetAttributeValue("address3_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>the ZIP Code or postal code for the 3rd address.</para>
        /// <para>Display Name: Address3: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address3_postalcode")]
        public string Address3_PostalCode {
            get {
                return GetAttributeValue<string>("address3_postalcode");
            }
            set {
                SetAttributeValue("address3_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's third address.</para>
        /// <para>Display Name: Address 3: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address3_primarycontactname")]
        public string Address3_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address3_primarycontactname");
            }
            set {
                SetAttributeValue("address3_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 3: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address3_shippingmethodcode")]
        public Contact_Address3_ShippingMethodCode? Address3_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address3_ShippingMethodCode>("address3_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address3_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>the state or province of the third address.</para>
        /// <para>Display Name: Address3: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address3_stateorprovince")]
        public string Address3_StateOrProvince {
            get {
                return GetAttributeValue<string>("address3_stateorprovince");
            }
            set {
                SetAttributeValue("address3_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the third address.</para>
        /// <para>Display Name: Address 3: Telephone1</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone1")]
        public string Address3_Telephone1 {
            get {
                return GetAttributeValue<string>("address3_telephone1");
            }
            set {
                SetAttributeValue("address3_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the third address.</para>
        /// <para>Display Name: Address 3: Telephone2</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone2")]
        public string Address3_Telephone2 {
            get {
                return GetAttributeValue<string>("address3_telephone2");
            }
            set {
                SetAttributeValue("address3_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 3: Telephone3</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone3")]
        public string Address3_Telephone3 {
            get {
                return GetAttributeValue<string>("address3_telephone3");
            }
            set {
                SetAttributeValue("address3_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the third address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 3: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address3_upszone")]
        public string Address3_UPSZone {
            get {
                return GetAttributeValue<string>("address3_upszone");
            }
            set {
                SetAttributeValue("address3_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 3: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address3_utcoffset")]
        public int? Address3_UTCOffset {
            get {
                return GetAttributeValue<int?>("address3_utcoffset");
            }
            set {
                SetAttributeValue("address3_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 30</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        public decimal? Aging30 {
            get {
                return GetMoneyValue("aging30");
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 30 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 30 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        public decimal? Aging30_Base {
            get {
                return GetMoneyValue("aging30_base");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 60</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        public decimal? Aging60 {
            get {
                return GetMoneyValue("aging60");
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 60 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 60 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        public decimal? Aging60_Base {
            get {
                return GetMoneyValue("aging60_base");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 90</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        public decimal? Aging90 {
            get {
                return GetMoneyValue("aging90");
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 90 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 90 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        public decimal? Aging90_Base {
            get {
                return GetMoneyValue("aging90_base");
            }
        }
        
        /// <summary>
        /// <para>Enter the date of the contact's wedding or service anniversary for use in customer gift programs or other communications.</para>
        /// <para>Display Name: Anniversary</para>
        /// </summary>
        [AttributeLogicalName("anniversary")]
        public DateTime? Anniversary {
            get {
                return GetAttributeValue<DateTime?>("anniversary");
            }
            set {
                SetAttributeValue("anniversary", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's annual income for use in profiling and financial analysis.</para>
        /// <para>Display Name: Annual Income</para>
        /// </summary>
        [AttributeLogicalName("annualincome")]
        public decimal? AnnualIncome {
            get {
                return GetMoneyValue("annualincome");
            }
            set {
                SetMoneyValue("annualincome", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Annual Income field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Annual Income (Base)</para>
        /// </summary>
        [AttributeLogicalName("annualincome_base")]
        public decimal? AnnualIncome_Base {
            get {
                return GetMoneyValue("annualincome_base");
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's assistant.</para>
        /// <para>Display Name: Assistant</para>
        /// </summary>
        [AttributeLogicalName("assistantname")]
        public string AssistantName {
            get {
                return GetAttributeValue<string>("assistantname");
            }
            set {
                SetAttributeValue("assistantname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the contact's assistant.</para>
        /// <para>Display Name: Assistant Phone</para>
        /// </summary>
        [AttributeLogicalName("assistantphone")]
        public string AssistantPhone {
            get {
                return GetAttributeValue<string>("assistantphone");
            }
            set {
                SetAttributeValue("assistantphone", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the contact's birthday for use in customer gift programs or other communications.</para>
        /// <para>Display Name: Birthday</para>
        /// </summary>
        [AttributeLogicalName("birthdate")]
        public DateTime? BirthDate {
            get {
                return GetAttributeValue<DateTime?>("birthdate");
            }
            set {
                SetAttributeValue("birthdate", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second business phone number for this contact.</para>
        /// <para>Display Name: Business Phone 2</para>
        /// </summary>
        [AttributeLogicalName("business2")]
        public string Business2 {
            get {
                return GetAttributeValue<string>("business2");
            }
            set {
                SetAttributeValue("business2", value);
            }
        }
        
        /// <summary>
        /// <para>Stores Image of the Business Card</para>
        /// <para>Display Name: Business Card</para>
        /// </summary>
        [AttributeLogicalName("businesscard")]
        public string BusinessCard {
            get {
                return GetAttributeValue<string>("businesscard");
            }
            set {
                SetAttributeValue("businesscard", value);
            }
        }
        
        /// <summary>
        /// <para>Stores Business Card Control Properties.</para>
        /// <para>Display Name: BusinessCardAttributes</para>
        /// </summary>
        [AttributeLogicalName("businesscardattributes")]
        public string BusinessCardAttributes {
            get {
                return GetAttributeValue<string>("businesscardattributes");
            }
            set {
                SetAttributeValue("businesscardattributes", value);
            }
        }
        
        /// <summary>
        /// <para>Type a callback phone number for this contact.</para>
        /// <para>Display Name: Callback Number</para>
        /// </summary>
        [AttributeLogicalName("callback")]
        public string Callback {
            get {
                return GetAttributeValue<string>("callback");
            }
            set {
                SetAttributeValue("callback", value);
            }
        }
        
        /// <summary>
        /// <para>Type the names of the contact's children for reference in communications and client programs.</para>
        /// <para>Display Name: Children's Names</para>
        /// </summary>
        [AttributeLogicalName("childrensnames")]
        public string ChildrensNames {
            get {
                return GetAttributeValue<string>("childrensnames");
            }
            set {
                SetAttributeValue("childrensnames", value);
            }
        }
        
        /// <summary>
        /// <para>Type the company phone of the contact.</para>
        /// <para>Display Name: Company Phone</para>
        /// </summary>
        [AttributeLogicalName("company")]
        public string Company {
            get {
                return GetAttributeValue<string>("company");
            }
            set {
                SetAttributeValue("company", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the credit limit of the contact for reference when you address invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Limit</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public decimal? CreditLimit {
            get {
                return GetMoneyValue("creditlimit");
            }
            set {
                SetMoneyValue("creditlimit", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Credit Limit field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Credit Limit (Base)</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        public decimal? CreditLimit_Base {
            get {
                return GetMoneyValue("creditlimit_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact is on a credit hold, for reference when addressing invoice and accounting issues.</para>
        /// <para>Display Name: Credit Hold</para>
        /// </summary>
        [AttributeLogicalName("creditonhold")]
        public bool? CreditOnHold {
            get {
                return GetAttributeValue<bool?>("creditonhold");
            }
            set {
                SetAttributeValue("creditonhold", value);
            }
        }
        
        /// <summary>
        /// <para>Select the size of the contact's company for segmentation and reporting purposes.</para>
        /// <para>Display Name: Customer Size</para>
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        public Contact_CustomerSizeCode? CustomerSizeCode {
            get {
                return GetOptionSetValue<Contact_CustomerSizeCode>("customersizecode");
            }
            set {
                SetOptionSetValue("customersizecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the category that best describes the relationship between the contact and your organization.</para>
        /// <para>Display Name: Relationship Type</para>
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        public Contact_CustomerTypeCode? CustomerTypeCode {
            get {
                return GetOptionSetValue<Contact_CustomerTypeCode>("customertypecode");
            }
            set {
                SetOptionSetValue("customertypecode", value);
            }
        }
        
        /// <summary>
        /// <para>price_level_contacts</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelid")]
        public EntityReference DefaultPriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("defaultpricelevelid");
            }
            set {
                SetAttributeValue("defaultpricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the department or business unit where the contact works in the parent company or business.</para>
        /// <para>Display Name: Department</para>
        /// </summary>
        [AttributeLogicalName("department")]
        public string Department {
            get {
                return GetAttributeValue<string>("department");
            }
            set {
                SetAttributeValue("department", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the contact, such as an excerpt from the company's website.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the email.</para>
        /// <para>Display Name: Do not allow Bulk Emails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        public bool? DoNotBulkEMail {
            get {
                return GetAttributeValue<bool?>("donotbulkemail");
            }
            set {
                SetAttributeValue("donotbulkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the letters.</para>
        /// <para>Display Name: Do not allow Bulk Mails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkpostalmail")]
        public bool? DoNotBulkPostalMail {
            get {
                return GetAttributeValue<bool?>("donotbulkpostalmail");
            }
            set {
                SetAttributeValue("donotbulkpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows direct email sent from Microsoft Dynamics 365. If Do Not Allow is selected, Microsoft Dynamics 365 will not send the email.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEMail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
            set {
                SetAttributeValue("donotemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows faxes. If Do Not Allow is selected, the contact will be excluded from any fax activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
            set {
                SetAttributeValue("donotfax", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts phone calls. If Do Not Allow is selected, the contact will be excluded from any phone call activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
            set {
                SetAttributeValue("donotphone", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows direct mail. If Do Not Allow is selected, the contact will be excluded from letter activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
            set {
                SetAttributeValue("donotpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts marketing materials, such as brochures or catalogs. Contacts that opt out can be excluded from marketing initiatives.</para>
        /// <para>Display Name: Send Marketing Materials</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        public bool? DoNotSendMM {
            get {
                return GetAttributeValue<bool?>("donotsendmm");
            }
            set {
                SetAttributeValue("donotsendmm", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary email address for the contact.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        public string EMailAddress1 {
            get {
                return GetAttributeValue<string>("emailaddress1");
            }
            set {
                SetAttributeValue("emailaddress1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the secondary email address for the contact.</para>
        /// <para>Display Name: Email Address 2</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        public string EMailAddress2 {
            get {
                return GetAttributeValue<string>("emailaddress2");
            }
            set {
                SetAttributeValue("emailaddress2", value);
            }
        }
        
        /// <summary>
        /// <para>Type an alternate email address for the contact.</para>
        /// <para>Display Name: Email Address 3</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        public string EMailAddress3 {
            get {
                return GetAttributeValue<string>("emailaddress3");
            }
            set {
                SetAttributeValue("emailaddress3", value);
            }
        }
        
        /// <summary>
        /// <para>Select the contact's highest level of education for use in segmentation and analysis.</para>
        /// <para>Display Name: Education</para>
        /// </summary>
        [AttributeLogicalName("educationcode")]
        public Contact_EducationCode? EducationCode {
            get {
                return GetOptionSetValue<Contact_EducationCode>("educationcode");
            }
            set {
                SetOptionSetValue("educationcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the employee ID or number for the contact for reference in orders, service cases, or other communications with the contact's organization.</para>
        /// <para>Display Name: Employee</para>
        /// </summary>
        [AttributeLogicalName("employeeid")]
        public string EmployeeId {
            get {
                return GetAttributeValue<string>("employeeid");
            }
            set {
                SetAttributeValue("employeeid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Identifier for an external user.</para>
        /// <para>Display Name: External User Identifier</para>
        /// </summary>
        [AttributeLogicalName("externaluseridentifier")]
        public string ExternalUserIdentifier {
            get {
                return GetAttributeValue<string>("externaluseridentifier");
            }
            set {
                SetAttributeValue("externaluseridentifier", value);
            }
        }
        
        /// <summary>
        /// <para>Select the marital status of the contact for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: Marital Status</para>
        /// </summary>
        [AttributeLogicalName("familystatuscode")]
        public Contact_FamilyStatusCode? FamilyStatusCode {
            get {
                return GetOptionSetValue<Contact_FamilyStatusCode>("familystatuscode");
            }
            set {
                SetOptionSetValue("familystatuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the contact.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's first name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the contact.</para>
        /// <para>Display Name: Follow Email Activity</para>
        /// </summary>
        [AttributeLogicalName("followemail")]
        public bool? FollowEmail {
            get {
                return GetAttributeValue<bool?>("followemail");
            }
            set {
                SetAttributeValue("followemail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the URL for the contact's FTP site to enable users to access data and share documents.</para>
        /// <para>Display Name: FTP Site</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        public string FtpSiteUrl {
            get {
                return GetAttributeValue<string>("ftpsiteurl");
            }
            set {
                SetAttributeValue("ftpsiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Combines and shows the contact's first and last names so that the full name can be displayed in views and reports.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Select the contact's gender to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Gender</para>
        /// </summary>
        [AttributeLogicalName("gendercode")]
        public Contact_GenderCode? GenderCode {
            get {
                return GetOptionSetValue<Contact_GenderCode>("gendercode");
            }
            set {
                SetOptionSetValue("gendercode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the passport number or other government ID for the contact for use in documents or reports.</para>
        /// <para>Display Name: Government</para>
        /// </summary>
        [AttributeLogicalName("governmentid")]
        public string GovernmentId {
            get {
                return GetAttributeValue<string>("governmentid");
            }
            set {
                SetAttributeValue("governmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact has any children for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: Has Children</para>
        /// </summary>
        [AttributeLogicalName("haschildrencode")]
        public Contact_HasChildrenCode? HasChildrenCode {
            get {
                return GetOptionSetValue<Contact_HasChildrenCode>("haschildrencode");
            }
            set {
                SetOptionSetValue("haschildrencode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second home phone number for this contact.</para>
        /// <para>Display Name: Home Phone 2</para>
        /// </summary>
        [AttributeLogicalName("home2")]
        public string Home2 {
            get {
                return GetAttributeValue<string>("home2");
            }
            set {
                SetAttributeValue("home2", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact exists in a separate accounting or other system, such as Microsoft Dynamics GP or another ERP database, for use in integration processes.</para>
        /// <para>Display Name: Back Office Customer</para>
        /// </summary>
        [AttributeLogicalName("isbackofficecustomer")]
        public bool? IsBackofficeCustomer {
            get {
                return GetAttributeValue<bool?>("isbackofficecustomer");
            }
            set {
                SetAttributeValue("isbackofficecustomer", value);
            }
        }
        
        /// <summary>
        /// <para>Type the job title of the contact to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Job Title</para>
        /// </summary>
        [AttributeLogicalName("jobtitle")]
        public string JobTitle {
            get {
                return GetAttributeValue<string>("jobtitle");
            }
            set {
                SetAttributeValue("jobtitle", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's last name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the contact was last included in a marketing campaign or quick campaign.</para>
        /// <para>Display Name: Last Date Included in Campaign</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? LastUsedInCampaign {
            get {
                return GetAttributeValue<DateTime?>("lastusedincampaign");
            }
            set {
                SetAttributeValue("lastusedincampaign", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary marketing source that directed the contact to your organization.</para>
        /// <para>Display Name: Lead Source</para>
        /// </summary>
        [AttributeLogicalName("leadsourcecode")]
        public Contact_LeadSourceCode? LeadSourceCode {
            get {
                return GetOptionSetValue<Contact_LeadSourceCode>("leadsourcecode");
            }
            set {
                SetOptionSetValue("leadsourcecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's manager for use in escalating issues or other follow-up communications with the contact.</para>
        /// <para>Display Name: Manager</para>
        /// </summary>
        [AttributeLogicalName("managername")]
        public string ManagerName {
            get {
                return GetAttributeValue<string>("managername");
            }
            set {
                SetAttributeValue("managername", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the contact's manager.</para>
        /// <para>Display Name: Manager Phone</para>
        /// </summary>
        [AttributeLogicalName("managerphone")]
        public string ManagerPhone {
            get {
                return GetAttributeValue<string>("managerphone");
            }
            set {
                SetAttributeValue("managerphone", value);
            }
        }
        
        /// <summary>
        /// <para>Whether is only for marketing</para>
        /// <para>Display Name: Marketing Only</para>
        /// </summary>
        [AttributeLogicalName("marketingonly")]
        public bool? MarketingOnly {
            get {
                return GetAttributeValue<bool?>("marketingonly");
            }
            set {
                SetAttributeValue("marketingonly", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the master contact for merge.</para>
        /// <para>Display Name: Master ID</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account has been merged with a master contact.</para>
        /// <para>Display Name: Merged</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Type the contact's middle name or initial to make sure the contact is addressed correctly.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Type the mobile phone number for the contact.</para>
        /// <para>Display Name: Mobile Phone</para>
        /// </summary>
        [AttributeLogicalName("mobilephone")]
        public string MobilePhone {
            get {
                return GetAttributeValue<string>("mobilephone");
            }
            set {
                SetAttributeValue("mobilephone", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the contact's nickname.</para>
        /// <para>Display Name: Nickname</para>
        /// </summary>
        [AttributeLogicalName("nickname")]
        public string NickName {
            get {
                return GetAttributeValue<string>("nickname");
            }
            set {
                SetAttributeValue("nickname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of children the contact has for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: No. of Children</para>
        /// </summary>
        [AttributeLogicalName("numberofchildren")]
        public int? NumberOfChildren {
            get {
                return GetAttributeValue<int?>("numberofchildren");
            }
            set {
                SetAttributeValue("numberofchildren", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>contact_originating_lead</para>
        /// <para>Display Name: Originating Lead</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference OriginatingLeadId {
            get {
                return GetAttributeValue<EntityReference>("originatingleadid");
            }
            set {
                SetAttributeValue("originatingleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the contact.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the contact.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the contact.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the pager number for the contact.</para>
        /// <para>Display Name: Pager</para>
        /// </summary>
        [AttributeLogicalName("pager")]
        public string Pager {
            get {
                return GetAttributeValue<string>("pager");
            }
            set {
                SetAttributeValue("pager", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the parent contact.</para>
        /// <para>Display Name: Parent Contact</para>
        /// </summary>
        [AttributeLogicalName("parentcontactid")]
        public EntityReference ParentContactId {
            get {
                return GetAttributeValue<EntityReference>("parentcontactid");
            }
        }
        
        /// <summary>
        /// <para>Select the parent account or parent contact for the contact to provide a quick link to additional details, such as financial information, activities, and opportunities.</para>
        /// <para>Display Name: Company Name</para>
        /// </summary>
        [AttributeLogicalName("parentcustomerid")]
        public EntityReference ParentCustomerId {
            get {
                return GetAttributeValue<EntityReference>("parentcustomerid");
            }
            set {
                SetAttributeValue("parentcustomerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the contact participates in workflow rules.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public Contact_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Contact_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred day of the week for service appointments.</para>
        /// <para>Display Name: Preferred Day</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public Contact_PreferredAppointmentDayCode? PreferredAppointmentDayCode {
            get {
                return GetOptionSetValue<Contact_PreferredAppointmentDayCode>("preferredappointmentdaycode");
            }
            set {
                SetOptionSetValue("preferredappointmentdaycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred time of day for service appointments.</para>
        /// <para>Display Name: Preferred Time</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public Contact_PreferredAppointmentTimeCode? PreferredAppointmentTimeCode {
            get {
                return GetOptionSetValue<Contact_PreferredAppointmentTimeCode>("preferredappointmenttimecode");
            }
            set {
                SetOptionSetValue("preferredappointmenttimecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Display Name: Preferred Method of Contact</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public Contact_PreferredContactMethodCode? PreferredContactMethodCode {
            get {
                return GetOptionSetValue<Contact_PreferredContactMethodCode>("preferredcontactmethodcode");
            }
            set {
                SetOptionSetValue("preferredcontactmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>equipment_contacts</para>
        /// <para>Display Name: Preferred Facility/Equipment</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentid")]
        public EntityReference PreferredEquipmentId {
            get {
                return GetAttributeValue<EntityReference>("preferredequipmentid");
            }
            set {
                SetAttributeValue("preferredequipmentid", value);
            }
        }
        
        /// <summary>
        /// <para>service_contacts</para>
        /// <para>Display Name: Preferred Service</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceid")]
        public EntityReference PreferredServiceId {
            get {
                return GetAttributeValue<EntityReference>("preferredserviceid");
            }
            set {
                SetAttributeValue("preferredserviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the regular or preferred customer service representative for reference when scheduling service activities for the contact.</para>
        /// <para>Display Name: Preferred User</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuserid")]
        public EntityReference PreferredSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("preferredsystemuserid");
            }
            set {
                SetAttributeValue("preferredsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Contact record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Type the salutation of the contact to make sure the contact is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
        /// <para>Display Name: Salutation</para>
        /// </summary>
        [AttributeLogicalName("salutation")]
        public string Salutation {
            get {
                return GetAttributeValue<string>("salutation");
            }
            set {
                SetAttributeValue("salutation", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public Contact_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's spouse or partner for reference during calls, events, or other communications with the contact.</para>
        /// <para>Display Name: Spouse/Partner Name</para>
        /// </summary>
        [AttributeLogicalName("spousesname")]
        public string SpousesName {
            get {
                return GetAttributeValue<string>("spousesname");
            }
            set {
                SetAttributeValue("spousesname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the contact is active or inactive. Inactive contacts are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ContactState? StateCode {
            get {
                return GetOptionSetValue<ContactState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the contact's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Contact_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Contact_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the suffix used in the contact's name, such as Jr. or Sr. to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Suffix</para>
        /// </summary>
        [AttributeLogicalName("suffix")]
        public string Suffix {
            get {
                return GetAttributeValue<string>("suffix");
            }
            set {
                SetAttributeValue("suffix", value);
            }
        }
        
        /// <summary>
        /// <para>Number of users or conversations followed the record</para>
        /// <para>Display Name: TeamsFollowed</para>
        /// </summary>
        [AttributeLogicalName("teamsfollowed")]
        public int? TeamsFollowed {
            get {
                return GetAttributeValue<int?>("teamsfollowed");
            }
            set {
                SetAttributeValue("teamsfollowed", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number for this contact.</para>
        /// <para>Display Name: Business Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        public string Telephone1 {
            get {
                return GetAttributeValue<string>("telephone1");
            }
            set {
                SetAttributeValue("telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number for this contact.</para>
        /// <para>Display Name: Home Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        public string Telephone2 {
            get {
                return GetAttributeValue<string>("telephone2");
            }
            set {
                SetAttributeValue("telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number for this contact.</para>
        /// <para>Display Name: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        public string Telephone3 {
            get {
                return GetAttributeValue<string>("telephone3");
            }
            set {
                SetAttributeValue("telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Select a region or territory for the contact for use in segmentation and analysis.</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territorycode")]
        public Contact_TerritoryCode? TerritoryCode {
            get {
                return GetOptionSetValue<Contact_TerritoryCode>("territorycode");
            }
            set {
                SetOptionSetValue("territorycode", value);
            }
        }
        
        /// <summary>
        /// <para>Total time spent for emails (read and write) and meetings by me in relation to the contact record.</para>
        /// <para>Display Name: Time Spent by me</para>
        /// </summary>
        [AttributeLogicalName("timespentbymeonemailandmeetings")]
        public string TimeSpentByMeOnEmailAndMeetings {
            get {
                return GetAttributeValue<string>("timespentbymeonemailandmeetings");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the contact.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type the contact's professional or personal website or blog URL.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteUrl {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the combined Yomi first and last names of the contact so that the full phonetic name can be displayed in views and reports.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Anonymiseret</para>
        /// </summary>
        [AttributeLogicalName("dg_anonymized")]
        public DateTime? dg_Anonymized {
            get {
                return GetAttributeValue<DateTime?>("dg_anonymized");
            }
            set {
                SetAttributeValue("dg_anonymized", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Test Account</para>
        /// </summary>
        [AttributeLogicalName("dg_testaccount")]
        public EntityReference dg_TestAccount {
            get {
                return GetAttributeValue<EntityReference>("dg_testaccount");
            }
            set {
                SetAttributeValue("dg_testaccount", value);
            }
        }
        
        /// <summary>
        /// <para>Maps to contact KPI records</para>
        /// <para>Display Name: KPI</para>
        /// </summary>
        [AttributeLogicalName("msdyn_contactkpiid")]
        public EntityReference msdyn_contactkpiid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_contactkpiid");
            }
            set {
                SetAttributeValue("msdyn_contactkpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Describes whether contact is opted out or not</para>
        /// <para>Display Name: GDPR Optout</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gdproptout")]
        public bool? msdyn_gdproptout {
            get {
                return GetAttributeValue<bool?>("msdyn_gdproptout");
            }
            set {
                SetAttributeValue("msdyn_gdproptout", value);
            }
        }
        
        /// <summary>
        /// <para>Whether or not the contact belongs to the associated account</para>
        /// <para>Display Name: Not at Company Flag</para>
        /// </summary>
        [AttributeLogicalName("msdyn_orgchangestatus")]
        public Contact_msdyn_orgchangestatus? msdyn_orgchangestatus {
            get {
                return GetOptionSetValue<Contact_msdyn_orgchangestatus>("msdyn_orgchangestatus");
            }
            set {
                SetOptionSetValue("msdyn_orgchangestatus", value);
            }
        }
        
        [RelationshipSchemaName("Contact_ActivityPointers")]
        public IEnumerable<ActivityPointer> Contact_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Contact_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Contact_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Email_EmailSender")]
        public IEnumerable<Email> Contact_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("Contact_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("Contact_Email_EmailSender", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Emails")]
        public IEnumerable<Email> Contact_Emails {
            get {
                return GetRelatedEntities<Email>("Contact_Emails", null);
            }
            set {
                SetRelatedEntities("Contact_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Tasks")]
        public IEnumerable<Task> Contact_Tasks {
            get {
                return GetRelatedEntities<Task>("Contact_Tasks", null);
            }
            set {
                SetRelatedEntities("Contact_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_customer_contacts", EntityRole.Referenced)]
        public IEnumerable<Contact> Referencedcontact_customer_contacts {
            get {
                return GetRelatedEntities<Contact>("contact_customer_contacts", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("contact_customer_contacts", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("contact_master_contact", EntityRole.Referenced)]
        public IEnumerable<Contact> Referencedcontact_master_contact {
            get {
                return GetRelatedEntities<Contact>("contact_master_contact", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("contact_master_contact", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("parentcustomerid")]
        [RelationshipSchemaName("contact_customer_contacts", EntityRole.Referencing)]
        public Contact Referencingcontact_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("contact_customer_contacts", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("contact_customer_contacts", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("contact_master_contact", EntityRole.Referencing)]
        public Contact Referencingcontact_master_contact {
            get {
                return GetRelatedEntity<Contact>("contact_master_contact", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("contact_master_contact", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("account_primary_contact")]
        public IEnumerable<Account> account_primary_contact {
            get {
                return GetRelatedEntities<Account>("account_primary_contact", null);
            }
            set {
                SetRelatedEntities("account_primary_contact", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_contacts")]
        public BusinessUnit business_unit_contacts {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_contacts", null);
            }
            set {
                SetRelatedEntity("business_unit_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_activity_parties")]
        public IEnumerable<ActivityParty> contact_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("contact_activity_parties", null);
            }
            set {
                SetRelatedEntities("contact_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_as_primary_contact")]
        public IEnumerable<Incident> contact_as_primary_contact {
            get {
                return GetRelatedEntities<Incident>("contact_as_primary_contact", null);
            }
            set {
                SetRelatedEntities("contact_as_primary_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_as_responsible_contact")]
        public IEnumerable<Incident> contact_as_responsible_contact {
            get {
                return GetRelatedEntities<Incident>("contact_as_responsible_contact", null);
            }
            set {
                SetRelatedEntities("contact_as_responsible_contact", null, value);
            }
        }
        
        [AttributeLogicalName("parentcustomerid")]
        [RelationshipSchemaName("contact_customer_accounts")]
        public Account contact_customer_accounts {
            get {
                return GetRelatedEntity<Account>("contact_customer_accounts", null);
            }
            set {
                SetRelatedEntity("contact_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("originatingleadid")]
        [RelationshipSchemaName("contact_originating_lead")]
        public Lead contact_originating_lead {
            get {
                return GetRelatedEntity<Lead>("contact_originating_lead", null);
            }
            set {
                SetRelatedEntity("contact_originating_lead", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("contact_owning_user")]
        public SystemUser contact_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("contact_owning_user", null);
            }
            set {
                SetRelatedEntity("contact_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("contactinvoices_association")]
        public IEnumerable<Invoice> contactinvoices_association {
            get {
                return GetRelatedEntities<Invoice>("contactinvoices_association", null);
            }
            set {
                SetRelatedEntities("contactinvoices_association", null, value);
            }
        }
        
        [RelationshipSchemaName("contactleads_association")]
        public IEnumerable<Lead> contactleads_association {
            get {
                return GetRelatedEntities<Lead>("contactleads_association", null);
            }
            set {
                SetRelatedEntities("contactleads_association", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_account_contact")]
        public IEnumerable<Account> dg_account_contact {
            get {
                return GetRelatedEntities<Account>("dg_account_contact", null);
            }
            set {
                SetRelatedEntities("dg_account_contact", null, value);
            }
        }
        
        [AttributeLogicalName("dg_testaccount")]
        [RelationshipSchemaName("dg_account_contact_TestAccount")]
        public Account dg_account_contact_TestAccount {
            get {
                return GetRelatedEntity<Account>("dg_account_contact_TestAccount", null);
            }
            set {
                SetRelatedEntity("dg_account_contact_TestAccount", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_customer_contacts")]
        public IEnumerable<Incident> incident_customer_contacts {
            get {
                return GetRelatedEntities<Incident>("incident_customer_contacts", null);
            }
            set {
                SetRelatedEntities("incident_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_customer_contacts")]
        public IEnumerable<Invoice> invoice_customer_contacts {
            get {
                return GetRelatedEntities<Invoice>("invoice_customer_contacts", null);
            }
            set {
                SetRelatedEntities("invoice_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_customer_contacts")]
        public IEnumerable<Lead> lead_customer_contacts {
            get {
                return GetRelatedEntities<Lead>("lead_customer_contacts", null);
            }
            set {
                SetRelatedEntities("lead_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_parent_contact")]
        public IEnumerable<Lead> lead_parent_contact {
            get {
                return GetRelatedEntities<Lead>("lead_parent_contact", null);
            }
            set {
                SetRelatedEntities("lead_parent_contact", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_contact_createdonbehalfby")]
        public SystemUser lk_contact_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contact_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_contact_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_contact_modifiedonbehalfby")]
        public SystemUser lk_contact_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contact_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_contact_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_contactbase_createdby")]
        public SystemUser lk_contactbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contactbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_contactbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_contactbase_modifiedby")]
        public SystemUser lk_contactbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contactbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_contactbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_customer_contacts")]
        public IEnumerable<Opportunity> opportunity_customer_contacts {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_customer_contacts", null);
            }
            set {
                SetRelatedEntities("opportunity_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_parent_contact")]
        public IEnumerable<Opportunity> opportunity_parent_contact {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_parent_contact", null);
            }
            set {
                SetRelatedEntities("opportunity_parent_contact", null, value);
            }
        }
        
        [AttributeLogicalName("preferredsystemuserid")]
        [RelationshipSchemaName("system_user_contacts")]
        public SystemUser system_user_contacts {
            get {
                return GetRelatedEntity<SystemUser>("system_user_contacts", null);
            }
            set {
                SetRelatedEntity("system_user_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_contacts")]
        public Team team_contacts {
            get {
                return GetRelatedEntity<Team>("team_contacts", null);
            }
            set {
                SetRelatedEntity("team_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_contact")]
        public TransactionCurrency transactioncurrency_contact {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_contact", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_contact", null, value);
            }
        }
        
        public static Contact Retrieve(IOrganizationService service, Guid id, params Expression<Func<Contact,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: ContactInvoices</para>
    /// </summary>
    [EntityLogicalName("contactinvoices")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ContactInvoices : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "contactinvoices";
        
        public const int EntityTypeCode = 17;
        
        public ContactInvoices() : 
                base(EntityLogicalName) {
        }
        
        public ContactInvoices(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("contactinvoiceid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactinvoiceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the invoices for the contact.</para>
        /// </summary>
        [AttributeLogicalName("contactinvoiceid")]
        public Guid? ContactInvoiceId {
            get {
                return GetAttributeValue<Guid?>("contactinvoiceid");
            }
            set {
                SetId("contactinvoiceid", value);
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        [AttributeLogicalName("invoiceid")]
        public Guid? InvoiceId {
            get {
                return GetAttributeValue<Guid?>("invoiceid");
            }
        }
        
        /// <summary>
        /// <para>name</para>
        /// <para>Display Name: name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("contactinvoices_Teams")]
        public IEnumerable<Team> contactinvoices_Teams {
            get {
                return GetRelatedEntities<Team>("contactinvoices_Teams", null);
            }
            set {
                SetRelatedEntities("contactinvoices_Teams", null, value);
            }
        }
        
        public static ContactInvoices Retrieve(IOrganizationService service, Guid id, params Expression<Func<ContactInvoices,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: ContactLeads</para>
    /// </summary>
    [EntityLogicalName("contactleads")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ContactLeads : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "contactleads";
        
        public const int EntityTypeCode = 22;
        
        public ContactLeads() : 
                base(EntityLogicalName) {
        }
        
        public ContactLeads(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("contactleadid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the leads for the contact.</para>
        /// </summary>
        [AttributeLogicalName("contactleadid")]
        public Guid? ContactLeadId {
            get {
                return GetAttributeValue<Guid?>("contactleadid");
            }
            set {
                SetId("contactleadid", value);
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        [AttributeLogicalName("leadid")]
        public Guid? LeadId {
            get {
                return GetAttributeValue<Guid?>("leadid");
            }
        }
        
        /// <summary>
        /// <para>name</para>
        /// <para>Display Name: name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("contactleads_Teams")]
        public IEnumerable<Team> contactleads_Teams {
            get {
                return GetRelatedEntities<Team>("contactleads_Teams", null);
            }
            set {
                SetRelatedEntities("contactleads_Teams", null, value);
            }
        }
        
        public static ContactLeads Retrieve(IOrganizationService service, Guid id, params Expression<Func<ContactLeads,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Activity that is delivered using email protocols.</para>
    /// <para>Display Name: Email</para>
    /// </summary>
    [EntityLogicalName("email")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Email : ExtendedEntity<EmailState, Email_StatusCode> {
        
        public const string EntityLogicalName = "email";
        
        public const int EntityTypeCode = 4202;
        
        public Email() : 
                base(EntityLogicalName) {
        }
        
        public Email(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the email activity.</para>
        /// <para>Display Name: Email Message</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent creating and sending the email. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the email. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual time to create and send the email.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the email. By default, it displays the date and time when the activity was created, but can be edited to capture the actual time to create and send the email.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the umber of attachments of the email message.</para>
        /// <para>Display Name: Attachment Count</para>
        /// </summary>
        [AttributeLogicalName("attachmentcount")]
        public int? AttachmentCount {
            get {
                return GetAttributeValue<int?>("attachmentcount");
            }
        }
        
        /// <summary>
        /// <para>Shows the number of times an email attachment has been viewed.</para>
        /// <para>Display Name: Attachment Open Count</para>
        /// </summary>
        [AttributeLogicalName("attachmentopencount")]
        public int? AttachmentOpenCount {
            get {
                return GetAttributeValue<int?>("attachmentopencount");
            }
            set {
                SetAttributeValue("attachmentopencount", value);
            }
        }
        
        /// <summary>
        /// <para>Hash of base of conversation index.</para>
        /// <para>Display Name: Conversation Index (Hash)</para>
        /// </summary>
        [AttributeLogicalName("baseconversationindexhash")]
        public int? BaseConversationIndexHash {
            get {
                return GetAttributeValue<int?>("baseconversationindexhash");
            }
            set {
                SetAttributeValue("baseconversationindexhash", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the recipients that are included on the email distribution, but are not displayed to other recipients.</para>
        /// <para>Display Name: Bcc</para>
        /// </summary>
        [AttributeLogicalName("bcc")]
        public IEnumerable<ActivityParty> Bcc {
            get {
                return GetEntityCollection<ActivityParty>("bcc");
            }
            set {
                SetEntityCollection("bcc", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the email type, such as lead outreach, customer follow-up, or service alert, to tie the email to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the recipients that should be copied on the email.</para>
        /// <para>Display Name: Cc</para>
        /// </summary>
        [AttributeLogicalName("cc")]
        public IEnumerable<ActivityParty> Cc {
            get {
                return GetEntityCollection<ActivityParty>("cc");
            }
            set {
                SetEntityCollection("cc", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the body is compressed.</para>
        /// <para>Display Name: Compression</para>
        /// </summary>
        [AttributeLogicalName("compressed")]
        public bool? Compressed {
            get {
                return GetAttributeValue<bool?>("compressed");
            }
        }
        
        /// <summary>
        /// <para>Identifier for all the email responses for this conversation.</para>
        /// <para>Display Name: Conversation Index</para>
        /// </summary>
        [AttributeLogicalName("conversationindex")]
        public string ConversationIndex {
            get {
                return GetAttributeValue<string>("conversationindex");
            }
        }
        
        /// <summary>
        /// <para>Conversation Tracking Id.</para>
        /// <para>Display Name: Conversation Tracking Id</para>
        /// </summary>
        [AttributeLogicalName("conversationtrackingid")]
        public Guid? ConversationTrackingId {
            get {
                return GetAttributeValue<Guid?>("conversationtrackingid");
            }
            set {
                SetAttributeValue("conversationtrackingid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how an email is matched to an existing email in Microsoft Dynamics 365. For system use only.</para>
        /// <para>Display Name: Correlation Method</para>
        /// </summary>
        [AttributeLogicalName("correlationmethod")]
        public Email_CorrelationMethod? CorrelationMethod {
            get {
                return GetOptionSetValue<Email_CorrelationMethod>("correlationmethod");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected date and time when email will be sent.</para>
        /// <para>Display Name: Send Later</para>
        /// </summary>
        [AttributeLogicalName("delayedemailsendtime")]
        public DateTime? DelayedEmailSendTime {
            get {
                return GetAttributeValue<DateTime?>("delayedemailsendtime");
            }
            set {
                SetAttributeValue("delayedemailsendtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the count of the number of attempts made to send the email. The count is used as an indicator of email routing issues.</para>
        /// <para>Display Name: No. of Delivery Attempts</para>
        /// </summary>
        [AttributeLogicalName("deliveryattempts")]
        public int? DeliveryAttempts {
            get {
                return GetAttributeValue<int?>("deliveryattempts");
            }
            set {
                SetAttributeValue("deliveryattempts", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority of delivery of the email to the email server.</para>
        /// <para>Display Name: Delivery Priority</para>
        /// </summary>
        [AttributeLogicalName("deliveryprioritycode")]
        public activitypointer_deliveryprioritycode? DeliveryPriorityCode {
            get {
                return GetOptionSetValue<activitypointer_deliveryprioritycode>("deliveryprioritycode");
            }
            set {
                SetOptionSetValue("deliveryprioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the sender should receive confirmation that the email was delivered.</para>
        /// <para>Display Name: Delivery Receipt Requested</para>
        /// </summary>
        [AttributeLogicalName("deliveryreceiptrequested")]
        public bool? DeliveryReceiptRequested {
            get {
                return GetAttributeValue<bool?>("deliveryreceiptrequested");
            }
            set {
                SetAttributeValue("deliveryreceiptrequested", value);
            }
        }
        
        /// <summary>
        /// <para>Type the greeting and message text of the email.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Select the direction of the email as incoming or outbound.</para>
        /// <para>Display Name: Direction</para>
        /// </summary>
        [AttributeLogicalName("directioncode")]
        public bool? DirectionCode {
            get {
                return GetAttributeValue<bool?>("directioncode");
            }
            set {
                SetAttributeValue("directioncode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when an email reminder expires.</para>
        /// <para>Display Name: Email Reminder Expiry Time</para>
        /// </summary>
        [AttributeLogicalName("emailreminderexpirytime")]
        public DateTime? EmailReminderExpiryTime {
            get {
                return GetAttributeValue<DateTime?>("emailreminderexpirytime");
            }
            set {
                SetAttributeValue("emailreminderexpirytime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the email reminder.</para>
        /// <para>Display Name: Email Reminder Status</para>
        /// </summary>
        [AttributeLogicalName("emailreminderstatus")]
        public Email_EmailReminderStatus? EmailReminderStatus {
            get {
                return GetOptionSetValue<Email_EmailReminderStatus>("emailreminderstatus");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Email Reminder Text</para>
        /// </summary>
        [AttributeLogicalName("emailremindertext")]
        public string EmailReminderText {
            get {
                return GetAttributeValue<string>("emailremindertext");
            }
            set {
                SetAttributeValue("emailremindertext", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of the email reminder.</para>
        /// <para>Display Name: Email Reminder Type</para>
        /// </summary>
        [AttributeLogicalName("emailremindertype")]
        public Email_EmailReminderType? EmailReminderType {
            get {
                return GetOptionSetValue<Email_EmailReminderType>("emailremindertype");
            }
            set {
                SetOptionSetValue("emailremindertype", value);
            }
        }
        
        /// <summary>
        /// <para>Equipment_Email_EmailSender</para>
        /// <para>Display Name: Sender</para>
        /// </summary>
        [AttributeLogicalName("emailsender")]
        public EntityReference EmailSender {
            get {
                return GetAttributeValue<EntityReference>("emailsender");
            }
        }
        
        /// <summary>
        /// <para>Email Tracking Id.</para>
        /// <para>Display Name: Email Tracking Id</para>
        /// </summary>
        [AttributeLogicalName("emailtrackingid")]
        public Guid? EmailTrackingId {
            get {
                return GetAttributeValue<Guid?>("emailtrackingid");
            }
            set {
                SetAttributeValue("emailtrackingid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Select whether the email allows following recipient activities sent from Microsoft Dynamics 365.This is user preference state which can be overridden by system evaluated state.</para>
        /// <para>Display Name: Following</para>
        /// </summary>
        [AttributeLogicalName("followemailuserpreference")]
        public bool? FollowEmailUserPreference {
            get {
                return GetAttributeValue<bool?>("followemailuserpreference");
            }
            set {
                SetAttributeValue("followemailuserpreference", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the sender of the email.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ID of the email message that this email activity is a response to.</para>
        /// <para>Display Name: In Reply To Message</para>
        /// </summary>
        [AttributeLogicalName("inreplyto")]
        public string InReplyTo {
            get {
                return GetAttributeValue<string>("inreplyto");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the email activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only. Shows whether this email is followed. This is evaluated state which overrides user selection of follow email.</para>
        /// <para>Display Name: Followed</para>
        /// </summary>
        [AttributeLogicalName("isemailfollowed")]
        public bool? IsEmailFollowed {
            get {
                return GetAttributeValue<bool?>("isemailfollowed");
            }
        }
        
        /// <summary>
        /// <para>For internal use only. Shows whether this email Reminder is Set.</para>
        /// <para>Display Name: Reminder Set</para>
        /// </summary>
        [AttributeLogicalName("isemailreminderset")]
        public bool? IsEmailReminderSet {
            get {
                return GetAttributeValue<bool?>("isemailreminderset");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: IsUnsafe</para>
        /// </summary>
        [AttributeLogicalName("isunsafe")]
        public int? IsUnsafe {
            get {
                return GetAttributeValue<int?>("isunsafe");
            }
        }
        
        /// <summary>
        /// <para>Indication if the email was created by a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the latest date and time when email was opened.</para>
        /// <para>Display Name: Last Opened Time</para>
        /// </summary>
        [AttributeLogicalName("lastopenedtime")]
        public DateTime? LastOpenedTime {
            get {
                return GetAttributeValue<DateTime?>("lastopenedtime");
            }
            set {
                SetAttributeValue("lastopenedtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the number of times a link in an email has been clicked.</para>
        /// <para>Display Name: Links Clicked Count</para>
        /// </summary>
        [AttributeLogicalName("linksclickedcount")]
        public int? LinksClickedCount {
            get {
                return GetAttributeValue<int?>("linksclickedcount");
            }
            set {
                SetAttributeValue("linksclickedcount", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the email message. Used only for email that is received.</para>
        /// <para>Display Name: Message ID</para>
        /// </summary>
        [AttributeLogicalName("messageid")]
        public string MessageId {
            get {
                return GetAttributeValue<string>("messageid");
            }
            set {
                SetAttributeValue("messageid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Message ID Dup Check</para>
        /// </summary>
        [AttributeLogicalName("messageiddupcheck")]
        public Guid? MessageIdDupCheck {
            get {
                return GetAttributeValue<Guid?>("messageiddupcheck");
            }
            set {
                SetAttributeValue("messageiddupcheck", value);
            }
        }
        
        /// <summary>
        /// <para>MIME type of the email message data.</para>
        /// <para>Display Name: Mime Type</para>
        /// </summary>
        [AttributeLogicalName("mimetype")]
        public string MimeType {
            get {
                return GetAttributeValue<string>("mimetype");
            }
            set {
                SetAttributeValue("mimetype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the notification code to identify issues with the email recipients or attachments, such as blocked attachments.</para>
        /// <para>Display Name: Notifications</para>
        /// </summary>
        [AttributeLogicalName("notifications")]
        public Email_Notifications? Notifications {
            get {
                return GetOptionSetValue<Email_Notifications>("notifications");
            }
            set {
                SetOptionSetValue("notifications", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Shows the number of times an email has been opened.</para>
        /// <para>Display Name: Open Count</para>
        /// </summary>
        [AttributeLogicalName("opencount")]
        public int? OpenCount {
            get {
                return GetAttributeValue<int?>("opencount");
            }
            set {
                SetAttributeValue("opencount", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the email activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the email activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the email activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Select the activity that the email is associated with.</para>
        /// <para>Display Name: Parent Activity Id</para>
        /// </summary>
        [AttributeLogicalName("parentactivityid")]
        public EntityReference ParentActivityId {
            get {
                return GetAttributeValue<EntityReference>("parentactivityid");
            }
            set {
                SetAttributeValue("parentactivityid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Delay email processing until</para>
        /// </summary>
        [AttributeLogicalName("postponeemailprocessinguntil")]
        public DateTime? PostponeEmailProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeemailprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Email_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Email_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that a read receipt is requested.</para>
        /// <para>Display Name: Read Receipt Requested</para>
        /// </summary>
        [AttributeLogicalName("readreceiptrequested")]
        public bool? ReadReceiptRequested {
            get {
                return GetAttributeValue<bool?>("readreceiptrequested");
            }
            set {
                SetAttributeValue("readreceiptrequested", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the e-mail is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Reminder Action Card Id.</para>
        /// <para>Display Name: Reminder Action Card Id.</para>
        /// </summary>
        [AttributeLogicalName("reminderactioncardid")]
        public Guid? ReminderActionCardId {
            get {
                return GetAttributeValue<Guid?>("reminderactioncardid");
            }
            set {
                SetAttributeValue("reminderactioncardid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the number of replies received for an email.</para>
        /// <para>Display Name: Reply Count</para>
        /// </summary>
        [AttributeLogicalName("replycount")]
        public int? ReplyCount {
            get {
                return GetAttributeValue<int?>("replycount");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the email record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this email. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the email activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time for the activity to be completed to provide details about when the email will be sent.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected start date and time for the activity to provide details about the tentative time when the email activity must be initiated.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Sender of the email.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("sender")]
        public string Sender {
            get {
                return GetAttributeValue<string>("sender");
            }
            set {
                SetAttributeValue("sender", value);
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox associated with the sender of the email message.</para>
        /// <para>Display Name: Sender's Mailbox</para>
        /// </summary>
        [AttributeLogicalName("sendermailboxid")]
        public EntityReference SenderMailboxId {
            get {
                return GetAttributeValue<EntityReference>("sendermailboxid");
            }
        }
        
        /// <summary>
        /// <para>Shows the parent account of the sender of the email.</para>
        /// <para>Display Name: Senders Account</para>
        /// </summary>
        [AttributeLogicalName("sendersaccount")]
        public EntityReference SendersAccount {
            get {
                return GetAttributeValue<EntityReference>("sendersaccount");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time that the email was sent.</para>
        /// <para>Display Name: Date Sent</para>
        /// </summary>
        [AttributeLogicalName("senton")]
        public DateTime? SentOn {
            get {
                return GetAttributeValue<DateTime?>("senton");
            }
        }
        
        /// <summary>
        /// <para>service_emails</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>Display Name: Sort Date</para>
        /// </summary>
        [AttributeLogicalName("sortdate")]
        public DateTime? SortDate {
            get {
                return GetAttributeValue<DateTime?>("sortdate");
            }
            set {
                SetAttributeValue("sortdate", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the email is open, completed, or canceled. Completed and canceled email is read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public EmailState? StateCode {
            get {
                return GetOptionSetValue<EmailState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the email's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Email_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Email_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the email type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the email.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Microsoft Office Outlook account for the user who submitted the email to Microsoft Dynamics 365.</para>
        /// <para>Display Name: Submitted By</para>
        /// </summary>
        [AttributeLogicalName("submittedby")]
        public string SubmittedBy {
            get {
                return GetAttributeValue<string>("submittedby");
            }
            set {
                SetAttributeValue("submittedby", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only. ID for template used in email.</para>
        /// <para>Display Name: ID for template used.</para>
        /// </summary>
        [AttributeLogicalName("templateid")]
        public EntityReference TemplateId {
            get {
                return GetAttributeValue<EntityReference>("templateid");
            }
            set {
                SetAttributeValue("templateid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, queue, or user recipients for the email.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the email addresses corresponding to the recipients.</para>
        /// <para>Display Name: To Recipients</para>
        /// </summary>
        [AttributeLogicalName("torecipients")]
        public string ToRecipients {
            get {
                return GetAttributeValue<string>("torecipients");
            }
            set {
                SetAttributeValue("torecipients", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the tracking token assigned to the email to make sure responses are automatically tracked in Microsoft Dynamics 365.</para>
        /// <para>Display Name: Tracking Token</para>
        /// </summary>
        [AttributeLogicalName("trackingtoken")]
        public string TrackingToken {
            get {
                return GetAttributeValue<string>("trackingtoken");
            }
            set {
                SetAttributeValue("trackingtoken", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the email message.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("Account_Email_EmailSender")]
        public Account Account_Email_EmailSender {
            get {
                return GetRelatedEntity<Account>("Account_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("Account_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("sendersaccount")]
        [RelationshipSchemaName("Account_Email_SendersAccount")]
        public Account Account_Email_SendersAccount {
            get {
                return GetRelatedEntity<Account>("Account_Email_SendersAccount", null);
            }
            set {
                SetRelatedEntity("Account_Email_SendersAccount", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Emails")]
        public Account Account_Emails {
            get {
                return GetRelatedEntity<Account>("Account_Emails", null);
            }
            set {
                SetRelatedEntity("Account_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("Contact_Email_EmailSender")]
        public Contact Contact_Email_EmailSender {
            get {
                return GetRelatedEntity<Contact>("Contact_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("Contact_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Emails")]
        public Contact Contact_Emails {
            get {
                return GetRelatedEntity<Contact>("Contact_Emails", null);
            }
            set {
                SetRelatedEntity("Contact_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Email_QueueItem")]
        public IEnumerable<QueueItem> Email_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Email_QueueItem", null);
            }
            set {
                SetRelatedEntities("Email_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Emails")]
        public Incident Incident_Emails {
            get {
                return GetRelatedEntity<Incident>("Incident_Emails", null);
            }
            set {
                SetRelatedEntity("Incident_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_Emails")]
        public Invoice Invoice_Emails {
            get {
                return GetRelatedEntity<Invoice>("Invoice_Emails", null);
            }
            set {
                SetRelatedEntity("Invoice_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("Lead_Email_EmailSender")]
        public Lead Lead_Email_EmailSender {
            get {
                return GetRelatedEntity<Lead>("Lead_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("Lead_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_Emails")]
        public Lead Lead_Emails {
            get {
                return GetRelatedEntity<Lead>("Lead_Emails", null);
            }
            set {
                SetRelatedEntity("Lead_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_Emails")]
        public Opportunity Opportunity_Emails {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_Emails", null);
            }
            set {
                SetRelatedEntity("Opportunity_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("email_email_parentactivityid", EntityRole.Referenced)]
        public IEnumerable<Email> Referencedemail_email_parentactivityid {
            get {
                return GetRelatedEntities<Email>("email_email_parentactivityid", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("email_email_parentactivityid", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("parentactivityid")]
        [RelationshipSchemaName("email_email_parentactivityid", EntityRole.Referencing)]
        public Email Referencingemail_email_parentactivityid {
            get {
                return GetRelatedEntity<Email>("email_email_parentactivityid", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("email_email_parentactivityid", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("SystemUser_Email_EmailSender")]
        public SystemUser SystemUser_Email_EmailSender {
            get {
                return GetRelatedEntity<SystemUser>("SystemUser_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("SystemUser_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Email")]
        public TransactionCurrency TransactionCurrency_Email {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Email", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Email", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_email")]
        public ActivityPointer activity_pointer_email {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_email", null);
            }
            set {
                SetRelatedEntity("activity_pointer_email", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_email_activities")]
        public BusinessUnit business_unit_email_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_email_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_email_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("email_activity_parties")]
        public IEnumerable<ActivityParty> email_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("email_activity_parties", null);
            }
            set {
                SetRelatedEntities("email_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_email_createdby")]
        public SystemUser lk_email_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_createdby", null);
            }
            set {
                SetRelatedEntity("lk_email_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_email_createdonbehalfby")]
        public SystemUser lk_email_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_email_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_email_modifiedby")]
        public SystemUser lk_email_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_email_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_email_modifiedonbehalfby")]
        public SystemUser lk_email_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_email_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_email")]
        public Team team_email {
            get {
                return GetRelatedEntity<Team>("team_email", null);
            }
            set {
                SetRelatedEntity("team_email", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_email")]
        public SystemUser user_email {
            get {
                return GetRelatedEntity<SystemUser>("user_email", null);
            }
            set {
                SetRelatedEntity("user_email", null, value);
            }
        }
        
        public static Email Retrieve(IOrganizationService service, Guid id, params Expression<Func<Email,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Service request case associated with a contract.</para>
    /// <para>Display Name: Case</para>
    /// </summary>
    [EntityLogicalName("incident")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Incident : ExtendedEntity<IncidentState, Incident_StatusCode> {
        
        public const string EntityLogicalName = "incident";
        
        public const int EntityTypeCode = 112;
        
        public Incident() : 
                base(EntityLogicalName) {
        }
        
        public Incident(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("incidentid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("incidentid", value);
            }
        }
        
        /// <summary>
        /// <para>lk_incident_ChildIncidentCount</para>
        /// <para>Display Name: Case</para>
        /// </summary>
        [AttributeLogicalName("incidentid")]
        public Guid? IncidentId {
            get {
                return GetAttributeValue<Guid?>("incidentid");
            }
            set {
                SetId("incidentid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the case is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Activities Complete</para>
        /// </summary>
        [AttributeLogicalName("activitiescomplete")]
        public bool? ActivitiesComplete {
            get {
                return GetAttributeValue<bool?>("activitiescomplete");
            }
            set {
                SetAttributeValue("activitiescomplete", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of service units that were actually required to resolve the case.</para>
        /// <para>Display Name: Actual Service Units</para>
        /// </summary>
        [AttributeLogicalName("actualserviceunits")]
        public int? ActualServiceUnits {
            get {
                return GetAttributeValue<int?>("actualserviceunits");
            }
            set {
                SetAttributeValue("actualserviceunits", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of service units that were billed to the customer for the case.</para>
        /// <para>Display Name: Billed Service Units</para>
        /// </summary>
        [AttributeLogicalName("billedserviceunits")]
        public int? BilledServiceUnits {
            get {
                return GetAttributeValue<int?>("billedserviceunits");
            }
            set {
                SetAttributeValue("billedserviceunits", value);
            }
        }
        
        /// <summary>
        /// <para>Details whether the profile is blocked or not.</para>
        /// <para>Display Name: Blocked Profile</para>
        /// </summary>
        [AttributeLogicalName("blockedprofile")]
        public bool? BlockedProfile {
            get {
                return GetAttributeValue<bool?>("blockedprofile");
            }
            set {
                SetAttributeValue("blockedprofile", value);
            }
        }
        
        /// <summary>
        /// <para>Select how contact about the case was originated, such as email, phone, or web, for use in reporting and analysis.</para>
        /// <para>Display Name: Origin</para>
        /// </summary>
        [AttributeLogicalName("caseorigincode")]
        public incident_caseorigincode? CaseOriginCode {
            get {
                return GetOptionSetValue<incident_caseorigincode>("caseorigincode");
            }
            set {
                SetOptionSetValue("caseorigincode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the type of case to identify the incident for use in case routing and analysis.</para>
        /// <para>Display Name: Case Type</para>
        /// </summary>
        [AttributeLogicalName("casetypecode")]
        public Incident_CaseTypeCode? CaseTypeCode {
            get {
                return GetOptionSetValue<Incident_CaseTypeCode>("casetypecode");
            }
            set {
                SetOptionSetValue("casetypecode", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Check Email</para>
        /// </summary>
        [AttributeLogicalName("checkemail")]
        public bool? CheckEmail {
            get {
                return GetAttributeValue<bool?>("checkemail");
            }
            set {
                SetAttributeValue("checkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact associated with the case.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>contract_detail_cases</para>
        /// <para>Display Name: Contract Line</para>
        /// </summary>
        [AttributeLogicalName("contractdetailid")]
        public EntityReference ContractDetailId {
            get {
                return GetAttributeValue<EntityReference>("contractdetailid");
            }
            set {
                SetAttributeValue("contractdetailid", value);
            }
        }
        
        /// <summary>
        /// <para>contract_cases</para>
        /// <para>Display Name: Contract</para>
        /// </summary>
        [AttributeLogicalName("contractid")]
        public EntityReference ContractId {
            get {
                return GetAttributeValue<EntityReference>("contractid");
            }
            set {
                SetAttributeValue("contractid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the service level for the case to make sure the case is handled correctly.</para>
        /// <para>Display Name: Service Level</para>
        /// </summary>
        [AttributeLogicalName("contractservicelevelcode")]
        public Incident_ContractServiceLevelCode? ContractServiceLevelCode {
            get {
                return GetOptionSetValue<Incident_ContractServiceLevelCode>("contractservicelevelcode");
            }
            set {
                SetOptionSetValue("contractservicelevelcode", value);
            }
        }
        
        /// <summary>
        /// <para>lk_incidentbase_createdby</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>lk_externalparty_incident_createdby</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>lk_incidentbase_createdonbehalfby</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Tells whether customer service representative has contacted the customer or not.</para>
        /// <para>Display Name: Customer Contacted</para>
        /// </summary>
        [AttributeLogicalName("customercontacted")]
        public bool? CustomerContacted {
            get {
                return GetAttributeValue<bool?>("customercontacted");
            }
            set {
                SetAttributeValue("customercontacted", value);
            }
        }
        
        /// <summary>
        /// <para>incident_customer_contacts</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer's level of satisfaction with the handling and resolution of the case.</para>
        /// <para>Display Name: Satisfaction</para>
        /// </summary>
        [AttributeLogicalName("customersatisfactioncode")]
        public Incident_CustomerSatisfactionCode? CustomerSatisfactionCode {
            get {
                return GetOptionSetValue<Incident_CustomerSatisfactionCode>("customersatisfactioncode");
            }
            set {
                SetOptionSetValue("customersatisfactioncode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether terms of the associated entitlement should be decremented or not.</para>
        /// <para>Display Name: Decrement Entitlement Terms</para>
        /// </summary>
        [AttributeLogicalName("decremententitlementterm")]
        public bool? DecrementEntitlementTerm {
            get {
                return GetAttributeValue<bool?>("decremententitlementterm");
            }
            set {
                SetAttributeValue("decremententitlementterm", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the case to assist the service team in reaching a resolution.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>The primary email address for the entity.</para>
        /// <para>Display Name: Email Address</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EmailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>entitlement_cases</para>
        /// <para>Display Name: Entitlement</para>
        /// </summary>
        [AttributeLogicalName("entitlementid")]
        public EntityReference EntitlementId {
            get {
                return GetAttributeValue<EntityReference>("entitlementid");
            }
            set {
                SetAttributeValue("entitlementid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Indicates the date and time when the case was escalated.</para>
        /// <para>Display Name: Escalated On</para>
        /// </summary>
        [AttributeLogicalName("escalatedon")]
        public DateTime? EscalatedOn {
            get {
                return GetAttributeValue<DateTime?>("escalatedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>incident_existingcase</para>
        /// <para>Display Name: Existing Case</para>
        /// </summary>
        [AttributeLogicalName("existingcase")]
        public EntityReference ExistingCase {
            get {
                return GetAttributeValue<EntityReference>("existingcase");
            }
            set {
                SetAttributeValue("existingcase", value);
            }
        }
        
        /// <summary>
        /// <para>slakpiinstance_incident_firstresponsebykpi</para>
        /// <para>Display Name: First Response By KPI</para>
        /// </summary>
        [AttributeLogicalName("firstresponsebykpiid")]
        public EntityReference FirstResponseByKPIId {
            get {
                return GetAttributeValue<EntityReference>("firstresponsebykpiid");
            }
            set {
                SetAttributeValue("firstresponsebykpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the initial response time for the case according to the terms of the SLA.</para>
        /// <para>Display Name: First Response SLA Status</para>
        /// </summary>
        [AttributeLogicalName("firstresponseslastatus")]
        public Incident_FirstResponseSLAStatus? FirstResponseSLAStatus {
            get {
                return GetOptionSetValue<Incident_FirstResponseSLAStatus>("firstresponseslastatus");
            }
            set {
                SetOptionSetValue("firstresponseslastatus", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the first response has been sent.</para>
        /// <para>Display Name: First Response Sent</para>
        /// </summary>
        [AttributeLogicalName("firstresponsesent")]
        public bool? FirstResponseSent {
            get {
                return GetAttributeValue<bool?>("firstresponsesent");
            }
            set {
                SetAttributeValue("firstresponsesent", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Follow up Task Created</para>
        /// </summary>
        [AttributeLogicalName("followuptaskcreated")]
        public bool? FollowUpTaskCreated {
            get {
                return GetAttributeValue<bool?>("followuptaskcreated");
            }
            set {
                SetAttributeValue("followuptaskcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date by which a customer service representative has to follow up with the customer on this case.</para>
        /// <para>Display Name: Follow Up By</para>
        /// </summary>
        [AttributeLogicalName("followupby")]
        public DateTime? FollowupBy {
            get {
                return GetAttributeValue<DateTime?>("followupby");
            }
            set {
                SetAttributeValue("followupby", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the current stage of the service process for the case to assist service team members when they review or transfer a case.</para>
        /// <para>Display Name: Case Stage</para>
        /// </summary>
        [AttributeLogicalName("incidentstagecode")]
        public Incident_IncidentStageCode? IncidentStageCode {
            get {
                return GetOptionSetValue<Incident_IncidentStageCode>("incidentstagecode");
            }
            set {
                SetOptionSetValue("incidentstagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Will contain the Influencer score coming from NetBreeze.</para>
        /// <para>Display Name: Influence Score</para>
        /// </summary>
        [AttributeLogicalName("influencescore")]
        public double? InfluenceScore {
            get {
                return GetAttributeValue<double?>("influencescore");
            }
            set {
                SetAttributeValue("influencescore", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Decrementing</para>
        /// </summary>
        [AttributeLogicalName("isdecrementing")]
        public bool? IsDecrementing {
            get {
                return GetAttributeValue<bool?>("isdecrementing");
            }
            set {
                SetAttributeValue("isdecrementing", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the case has been escalated.</para>
        /// <para>Display Name: Is Escalated</para>
        /// </summary>
        [AttributeLogicalName("isescalated")]
        public bool? IsEscalated {
            get {
                return GetAttributeValue<bool?>("isescalated");
            }
            set {
                SetAttributeValue("isescalated", value);
            }
        }
        
        /// <summary>
        /// <para>kbarticle_incidents</para>
        /// <para>Display Name: Knowledge Base Article</para>
        /// </summary>
        [AttributeLogicalName("kbarticleid")]
        public EntityReference KbArticleId {
            get {
                return GetAttributeValue<EntityReference>("kbarticleid");
            }
            set {
                SetAttributeValue("kbarticleid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>incident_master_incident</para>
        /// <para>Display Name: Master Case</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
            set {
                SetAttributeValue("masterid", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the incident has been merged with another incident.</para>
        /// <para>Display Name: Internal Use Only</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the post originated as a public or private message.</para>
        /// <para>Display Name: Received As</para>
        /// </summary>
        [AttributeLogicalName("messagetypecode")]
        public socialactivity_postmessagetype? MessageTypeCode {
            get {
                return GetOptionSetValue<socialactivity_postmessagetype>("messagetypecode");
            }
            set {
                SetOptionSetValue("messagetypecode", value);
            }
        }
        
        /// <summary>
        /// <para>lk_incidentbase_modifiedby</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>lk_externalparty_incident_modifiedby</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>lk_incidentbase_modifiedonbehalfby</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Number of child incidents associated with the incident.</para>
        /// <para>Display Name: Child Cases</para>
        /// </summary>
        [AttributeLogicalName("numberofchildincidents")]
        public int? NumberOfChildIncidents {
            get {
                return GetAttributeValue<int?>("numberofchildincidents");
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the case was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>owner_incidents</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>business_unit_incidents</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>team_incidents</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>system_user_incidents</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>incident_parent_incident</para>
        /// <para>Display Name: Parent Case</para>
        /// </summary>
        [AttributeLogicalName("parentcaseid")]
        public EntityReference ParentCaseId {
            get {
                return GetAttributeValue<EntityReference>("parentcaseid");
            }
            set {
                SetAttributeValue("parentcaseid", value);
            }
        }
        
        /// <summary>
        /// <para>contact_as_primary_contact</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference PrimaryContactId {
            get {
                return GetAttributeValue<EntityReference>("primarycontactid");
            }
            set {
                SetAttributeValue("primarycontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Incident_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Incident_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>product_incidents</para>
        /// <para>Display Name: Product</para>
        /// </summary>
        [AttributeLogicalName("productid")]
        public EntityReference ProductId {
            get {
                return GetAttributeValue<EntityReference>("productid");
            }
            set {
                SetAttributeValue("productid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the serial number of the product that is associated with this case, so that the number of cases per product can be reported.</para>
        /// <para>Display Name: Serial Number</para>
        /// </summary>
        [AttributeLogicalName("productserialnumber")]
        public string ProductSerialNumber {
            get {
                return GetAttributeValue<string>("productserialnumber");
            }
            set {
                SetAttributeValue("productserialnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date by when the case must be resolved.</para>
        /// <para>Display Name: Resolve By</para>
        /// </summary>
        [AttributeLogicalName("resolveby")]
        public DateTime? ResolveBy {
            get {
                return GetAttributeValue<DateTime?>("resolveby");
            }
            set {
                SetAttributeValue("resolveby", value);
            }
        }
        
        /// <summary>
        /// <para>slakpiinstance_incident_resolvebykpi</para>
        /// <para>Display Name: Resolve By KPI</para>
        /// </summary>
        [AttributeLogicalName("resolvebykpiid")]
        public EntityReference ResolveByKPIId {
            get {
                return GetAttributeValue<EntityReference>("resolvebykpiid");
            }
            set {
                SetAttributeValue("resolvebykpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the resolution time for the case according to the terms of the SLA.</para>
        /// <para>Display Name: Resolve By SLA Status</para>
        /// </summary>
        [AttributeLogicalName("resolvebyslastatus")]
        public Incident_ResolveBySLAStatus? ResolveBySLAStatus {
            get {
                return GetOptionSetValue<Incident_ResolveBySLAStatus>("resolvebyslastatus");
            }
            set {
                SetOptionSetValue("resolvebyslastatus", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: First Response By</para>
        /// </summary>
        [AttributeLogicalName("responseby")]
        public DateTime? ResponseBy {
            get {
                return GetAttributeValue<DateTime?>("responseby");
            }
            set {
                SetAttributeValue("responseby", value);
            }
        }
        
        /// <summary>
        /// <para>contact_as_responsible_contact</para>
        /// <para>Display Name: Responsible Contact</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactid")]
        public EntityReference ResponsibleContactId {
            get {
                return GetAttributeValue<EntityReference>("responsiblecontactid");
            }
            set {
                SetAttributeValue("responsiblecontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the incident has been routed to queue or not.</para>
        /// <para>Display Name: Route Case</para>
        /// </summary>
        [AttributeLogicalName("routecase")]
        public bool? RouteCase {
            get {
                return GetAttributeValue<bool?>("routecase");
            }
            set {
                SetAttributeValue("routecase", value);
            }
        }
        
        /// <summary>
        /// <para>manualsla_cases</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.</para>
        /// <para>Display Name: Sentiment Value</para>
        /// </summary>
        [AttributeLogicalName("sentimentvalue")]
        public double? SentimentValue {
            get {
                return GetAttributeValue<double?>("sentimentvalue");
            }
            set {
                SetAttributeValue("sentimentvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Select the stage, in the case resolution process, that the case is in.</para>
        /// <para>Display Name: Service Stage</para>
        /// </summary>
        [AttributeLogicalName("servicestage")]
        public servicestage? ServiceStage {
            get {
                return GetOptionSetValue<servicestage>("servicestage");
            }
            set {
                SetOptionSetValue("servicestage", value);
            }
        }
        
        /// <summary>
        /// <para>Select the severity of this case to indicate the incident's impact on the customer's business.</para>
        /// <para>Display Name: Severity</para>
        /// </summary>
        [AttributeLogicalName("severitycode")]
        public Incident_SeverityCode? SeverityCode {
            get {
                return GetOptionSetValue<Incident_SeverityCode>("severitycode");
            }
            set {
                SetOptionSetValue("severitycode", value);
            }
        }
        
        /// <summary>
        /// <para>socialprofile_cases</para>
        /// <para>Display Name: Social Profile</para>
        /// </summary>
        [AttributeLogicalName("socialprofileid")]
        public EntityReference SocialProfileId {
            get {
                return GetAttributeValue<EntityReference>("socialprofileid");
            }
            set {
                SetAttributeValue("socialprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>processstage_incident</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the case is active, resolved, or canceled. Resolved and canceled cases are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public IncidentState? StateCode {
            get {
                return GetOptionSetValue<IncidentState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the case's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Incident_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Incident_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>subject_incidents</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subjectid")]
        public EntityReference SubjectId {
            get {
                return GetAttributeValue<EntityReference>("subjectid");
            }
            set {
                SetAttributeValue("subjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the case number for customer reference and searching capabilities. This cannot be modified.</para>
        /// <para>Display Name: Case Number</para>
        /// </summary>
        [AttributeLogicalName("ticketnumber")]
        public string TicketNumber {
            get {
                return GetAttributeValue<string>("ticketnumber");
            }
            set {
                SetAttributeValue("ticketnumber", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subject or descriptive name, such as the request, issue, or company name, to identify the case in Microsoft Dynamics 365 views.</para>
        /// <para>Display Name: Case Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>TransactionCurrency_Incident</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the case.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Incident Type associated with Case.</para>
        /// <para>Display Name: Incident Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_incidenttype")]
        public EntityReference msdyn_IncidentType {
            get {
                return GetAttributeValue<EntityReference>("msdyn_incidenttype");
            }
            set {
                SetAttributeValue("msdyn_incidenttype", value);
            }
        }
        
        /// <summary>
        /// <para>The iot alert that initiated this case</para>
        /// <para>Display Name: IoT Alert</para>
        /// </summary>
        [AttributeLogicalName("msdyn_iotalert")]
        public EntityReference msdyn_iotalert {
            get {
                return GetAttributeValue<EntityReference>("msdyn_iotalert");
            }
            set {
                SetAttributeValue("msdyn_iotalert", value);
            }
        }
        
        [RelationshipSchemaName("Incident_ActivityPointers")]
        public IEnumerable<ActivityPointer> Incident_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Incident_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Incident_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_Emails")]
        public IEnumerable<Email> Incident_Emails {
            get {
                return GetRelatedEntities<Email>("Incident_Emails", null);
            }
            set {
                SetRelatedEntities("Incident_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_IncidentResolutions")]
        public IEnumerable<IncidentResolution> Incident_IncidentResolutions {
            get {
                return GetRelatedEntities<IncidentResolution>("Incident_IncidentResolutions", null);
            }
            set {
                SetRelatedEntities("Incident_IncidentResolutions", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_QueueItem")]
        public IEnumerable<QueueItem> Incident_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Incident_QueueItem", null);
            }
            set {
                SetRelatedEntities("Incident_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_Tasks")]
        public IEnumerable<Task> Incident_Tasks {
            get {
                return GetRelatedEntities<Task>("Incident_Tasks", null);
            }
            set {
                SetRelatedEntities("Incident_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("OriginatingCase_Lead")]
        public IEnumerable<Lead> OriginatingCase_Lead {
            get {
                return GetRelatedEntities<Lead>("OriginatingCase_Lead", null);
            }
            set {
                SetRelatedEntities("OriginatingCase_Lead", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_existingcase", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_existingcase {
            get {
                return GetRelatedEntities<Incident>("incident_existingcase", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_existingcase", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("incident_master_incident", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_master_incident {
            get {
                return GetRelatedEntities<Incident>("incident_master_incident", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_master_incident", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("incident_parent_incident", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_parent_incident {
            get {
                return GetRelatedEntities<Incident>("incident_parent_incident", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_parent_incident", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("existingcase")]
        [RelationshipSchemaName("incident_existingcase", EntityRole.Referencing)]
        public Incident Referencingincident_existingcase {
            get {
                return GetRelatedEntity<Incident>("incident_existingcase", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_existingcase", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("incident_master_incident", EntityRole.Referencing)]
        public Incident Referencingincident_master_incident {
            get {
                return GetRelatedEntity<Incident>("incident_master_incident", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_master_incident", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentcaseid")]
        [RelationshipSchemaName("incident_parent_incident", EntityRole.Referencing)]
        public Incident Referencingincident_parent_incident {
            get {
                return GetRelatedEntity<Incident>("incident_parent_incident", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_parent_incident", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Incident")]
        public TransactionCurrency TransactionCurrency_Incident {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Incident", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Incident", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_incidents")]
        public BusinessUnit business_unit_incidents {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_incidents", null);
            }
            set {
                SetRelatedEntity("business_unit_incidents", null, value);
            }
        }
        
        [AttributeLogicalName("primarycontactid")]
        [RelationshipSchemaName("contact_as_primary_contact")]
        public Contact contact_as_primary_contact {
            get {
                return GetRelatedEntity<Contact>("contact_as_primary_contact", null);
            }
            set {
                SetRelatedEntity("contact_as_primary_contact", null, value);
            }
        }
        
        [AttributeLogicalName("responsiblecontactid")]
        [RelationshipSchemaName("contact_as_responsible_contact")]
        public Contact contact_as_responsible_contact {
            get {
                return GetRelatedEntity<Contact>("contact_as_responsible_contact", null);
            }
            set {
                SetRelatedEntity("contact_as_responsible_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_OpportunityCloses")]
        public IEnumerable<OpportunityClose> incident_OpportunityCloses {
            get {
                return GetRelatedEntities<OpportunityClose>("incident_OpportunityCloses", null);
            }
            set {
                SetRelatedEntities("incident_OpportunityCloses", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_Teams")]
        public IEnumerable<Team> incident_Teams {
            get {
                return GetRelatedEntities<Team>("incident_Teams", null);
            }
            set {
                SetRelatedEntities("incident_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_activity_parties")]
        public IEnumerable<ActivityParty> incident_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("incident_activity_parties", null);
            }
            set {
                SetRelatedEntities("incident_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("incident_customer_accounts")]
        public Account incident_customer_accounts {
            get {
                return GetRelatedEntity<Account>("incident_customer_accounts", null);
            }
            set {
                SetRelatedEntity("incident_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("incident_customer_contacts")]
        public Contact incident_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("incident_customer_contacts", null);
            }
            set {
                SetRelatedEntity("incident_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_incidentbase_createdby")]
        public SystemUser lk_incidentbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_incidentbase_createdonbehalfby")]
        public SystemUser lk_incidentbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_incidentbase_modifiedby")]
        public SystemUser lk_incidentbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_incidentbase_modifiedonbehalfby")]
        public SystemUser lk_incidentbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_incidents")]
        public SystemUser system_user_incidents {
            get {
                return GetRelatedEntity<SystemUser>("system_user_incidents", null);
            }
            set {
                SetRelatedEntity("system_user_incidents", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_incidents")]
        public Team team_incidents {
            get {
                return GetRelatedEntity<Team>("team_incidents", null);
            }
            set {
                SetRelatedEntity("team_incidents", null, value);
            }
        }
        
        public static Incident Retrieve(IOrganizationService service, Guid id, params Expression<Func<Incident,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Special type of activity that includes description of the resolution, billing status, and the duration of the case.</para>
    /// <para>Display Name: Case Resolution</para>
    /// </summary>
    [EntityLogicalName("incidentresolution")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class IncidentResolution : ExtendedEntity<IncidentResolutionState, IncidentResolution_StatusCode> {
        
        public const string EntityLogicalName = "incidentresolution";
        
        public const int EntityTypeCode = 4206;
        
        public IncidentResolution() : 
                base(EntityLogicalName) {
        }
        
        public IncidentResolution(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>activity_pointer_incident_resolution</para>
        /// <para>Display Name: Case Resolution</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Additional information provided by the external application as JSON. For internal use only.</para>
        /// <para>Display Name: Activity Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Actual duration of the case resolution activity in minutes.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Actual end time of the case resolution activity.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Actual start time of the case resolution activity.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Blind Carbon-copy (bcc) recipients of the activity.</para>
        /// <para>Display Name: BCC</para>
        /// </summary>
        [AttributeLogicalName("bcc")]
        public IEnumerable<ActivityParty> Bcc {
            get {
                return GetEntityCollection<ActivityParty>("bcc");
            }
            set {
                SetEntityCollection("bcc", value);
            }
        }
        
        /// <summary>
        /// <para>Category for the case resolution activity.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Carbon-copy (cc) recipients of the activity.</para>
        /// <para>Display Name: CC</para>
        /// </summary>
        [AttributeLogicalName("cc")]
        public IEnumerable<ActivityParty> Cc {
            get {
                return GetEntityCollection<ActivityParty>("cc");
            }
            set {
                SetEntityCollection("cc", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.</para>
        /// <para>Display Name: Social Channel</para>
        /// </summary>
        [AttributeLogicalName("community")]
        public socialprofile_community? Community {
            get {
                return GetOptionSetValue<socialprofile_community>("community");
            }
            set {
                SetOptionSetValue("community", value);
            }
        }
        
        /// <summary>
        /// <para>lk_incidentresolution_createdby</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the case resolution activity was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>lk_incidentresolution_createdonbehalfby</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Customer with which the activity is associated.</para>
        /// <para>Display Name: Customers</para>
        /// </summary>
        [AttributeLogicalName("customers")]
        public IEnumerable<ActivityParty> Customers {
            get {
                return GetEntityCollection<ActivityParty>("customers");
            }
            set {
                SetEntityCollection("customers", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the delivery of the activity was last attempted.</para>
        /// <para>Display Name: Date Delivery Last Attempted</para>
        /// </summary>
        [AttributeLogicalName("deliverylastattemptedon")]
        public DateTime? DeliveryLastAttemptedOn {
            get {
                return GetAttributeValue<DateTime?>("deliverylastattemptedon");
            }
        }
        
        /// <summary>
        /// <para>Priority of delivery of the activity to the email server.</para>
        /// <para>Display Name: Delivery Priority</para>
        /// </summary>
        [AttributeLogicalName("deliveryprioritycode")]
        public activitypointer_deliveryprioritycode? DeliveryPriorityCode {
            get {
                return GetOptionSetValue<activitypointer_deliveryprioritycode>("deliveryprioritycode");
            }
            set {
                SetOptionSetValue("deliveryprioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information that describes the case resolution.</para>
        /// <para>Display Name: Remarks</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>The message id of activity which is returned from Exchange Server.</para>
        /// <para>Display Name: Exchange Item ID</para>
        /// </summary>
        [AttributeLogicalName("exchangeitemid")]
        public string ExchangeItemId {
            get {
                return GetAttributeValue<string>("exchangeitemid");
            }
            set {
                SetAttributeValue("exchangeitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the activitypointer with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the web link of Activity of type email.</para>
        /// <para>Display Name: Exchange WebLink</para>
        /// </summary>
        [AttributeLogicalName("exchangeweblink")]
        public string ExchangeWebLink {
            get {
                return GetAttributeValue<string>("exchangeweblink");
            }
            set {
                SetAttributeValue("exchangeweblink", value);
            }
        }
        
        /// <summary>
        /// <para>Person who the activity is from.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Incident_IncidentResolutions</para>
        /// <para>Display Name: Case</para>
        /// </summary>
        [AttributeLogicalName("incidentid")]
        public EntityReference IncidentId {
            get {
                return GetAttributeValue<EntityReference>("incidentid");
            }
            set {
                SetAttributeValue("incidentid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Recurring Instance Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public IncidentResolution_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<IncidentResolution_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>Information about whether the case resolution activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("ismapiprivate")]
        public bool? IsMapiPrivate {
            get {
                return GetAttributeValue<bool?>("ismapiprivate");
            }
            set {
                SetAttributeValue("ismapiprivate", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Information that specifies if the case resolution activity was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Left the voice mail</para>
        /// <para>Display Name: Left Voice Mail</para>
        /// </summary>
        [AttributeLogicalName("leftvoicemail")]
        public bool? LeftVoiceMail {
            get {
                return GetAttributeValue<bool?>("leftvoicemail");
            }
            set {
                SetAttributeValue("leftvoicemail", value);
            }
        }
        
        /// <summary>
        /// <para>lk_incidentresolution_modifiedby</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the case resolution activity was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>lk_incidentresolution_modifiedonbehalfby</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>List of optional attendees for the activity.</para>
        /// <para>Display Name: Optional Attendees</para>
        /// </summary>
        [AttributeLogicalName("optionalattendees")]
        public IEnumerable<ActivityParty> OptionalAttendees {
            get {
                return GetEntityCollection<ActivityParty>("optionalattendees");
            }
            set {
                SetEntityCollection("optionalattendees", value);
            }
        }
        
        /// <summary>
        /// <para>Person who organized the activity.</para>
        /// <para>Display Name: Organizer</para>
        /// </summary>
        [AttributeLogicalName("organizer")]
        public IEnumerable<ActivityParty> Organizer {
            get {
                return GetEntityCollection<ActivityParty>("organizer");
            }
            set {
                SetEntityCollection("organizer", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the case resolution activity.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>business_unit_incident_resolution_activities</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>team_incidentresolution</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>user_incidentresolution</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Outsource vendor with which activity is associated.</para>
        /// <para>Display Name: Outsource Vendors</para>
        /// </summary>
        [AttributeLogicalName("partners")]
        public IEnumerable<ActivityParty> Partners {
            get {
                return GetEntityCollection<ActivityParty>("partners");
            }
            set {
                SetEntityCollection("partners", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Delay activity processing until</para>
        /// </summary>
        [AttributeLogicalName("postponeactivityprocessinguntil")]
        public DateTime? PostponeActivityProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeactivityprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Priority of the activity.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public IncidentResolution_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<IncidentResolution_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>List of required attendees for the activity.</para>
        /// <para>Display Name: Required Attendees</para>
        /// </summary>
        [AttributeLogicalName("requiredattendees")]
        public IEnumerable<ActivityParty> RequiredAttendees {
            get {
                return GetEntityCollection<ActivityParty>("requiredattendees");
            }
            set {
                SetEntityCollection("requiredattendees", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Resolution Type</para>
        /// </summary>
        [AttributeLogicalName("resolutiontypecode")]
        public IncidentResolution_ResolutionTypeCode? ResolutionTypeCode {
            get {
                return GetOptionSetValue<IncidentResolution_ResolutionTypeCode>("resolutiontypecode");
            }
            set {
                SetOptionSetValue("resolutiontypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Users or facility/equipment that are required for the activity.</para>
        /// <para>Display Name: Resources</para>
        /// </summary>
        [AttributeLogicalName("resources")]
        public IEnumerable<ActivityParty> Resources {
            get {
                return GetEntityCollection<ActivityParty>("resources");
            }
            set {
                SetEntityCollection("resources", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the case record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the case resolution activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the case resolution activity.</para>
        /// <para>Display Name: Scheduled End</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the case resolution activity.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the mailbox associated with the sender of the email message.</para>
        /// <para>Display Name: Sender's Mailbox</para>
        /// </summary>
        [AttributeLogicalName("sendermailboxid")]
        public EntityReference SenderMailboxId {
            get {
                return GetAttributeValue<EntityReference>("sendermailboxid");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was sent.</para>
        /// <para>Display Name: Date Sent</para>
        /// </summary>
        [AttributeLogicalName("senton")]
        public DateTime? SentOn {
            get {
                return GetAttributeValue<DateTime?>("senton");
            }
        }
        
        /// <summary>
        /// <para>Uniqueidentifier specifying the id of recurring series of an instance.</para>
        /// <para>Display Name: Series Id</para>
        /// </summary>
        [AttributeLogicalName("seriesid")]
        public Guid? SeriesId {
            get {
                return GetAttributeValue<Guid?>("seriesid");
            }
        }
        
        /// <summary>
        /// <para>service_incidentresolutions</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>Display Name: Sort Date</para>
        /// </summary>
        [AttributeLogicalName("sortdate")]
        public DateTime? SortDate {
            get {
                return GetAttributeValue<DateTime?>("sortdate");
            }
            set {
                SetAttributeValue("sortdate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the case resolution is open, completed, or canceled. By default, all case resolutions are completed and the status value can't be changed.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public IncidentResolutionState? StateCode {
            get {
                return GetOptionSetValue<IncidentResolutionState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the case resolution activity.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public IncidentResolution_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<IncidentResolution_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Subcategory of the case resolution activity.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the case resolution activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Time spent on the case resolution activity.</para>
        /// <para>Display Name: Billable Time</para>
        /// </summary>
        [AttributeLogicalName("timespent")]
        public int? TimeSpent {
            get {
                return GetAttributeValue<int?>("timespent");
            }
            set {
                SetAttributeValue("timespent", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Person who is the receiver of the activity.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        /// <summary>
        /// <para>Total time spent on the case resolution activity.</para>
        /// <para>Display Name: Total Time</para>
        /// </summary>
        [AttributeLogicalName("totaltimespent")]
        public int? TotalTimeSpent {
            get {
                return GetAttributeValue<int?>("totaltimespent");
            }
            set {
                SetAttributeValue("totaltimespent", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the activitypointer.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the case.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("incidentid")]
        [RelationshipSchemaName("Incident_IncidentResolutions")]
        public Incident Incident_IncidentResolutions {
            get {
                return GetRelatedEntity<Incident>("Incident_IncidentResolutions", null);
            }
            set {
                SetRelatedEntity("Incident_IncidentResolutions", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("account_IncidentResolutions")]
        public Account account_IncidentResolutions {
            get {
                return GetRelatedEntity<Account>("account_IncidentResolutions", null);
            }
            set {
                SetRelatedEntity("account_IncidentResolutions", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_incident_resolution")]
        public ActivityPointer activity_pointer_incident_resolution {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_incident_resolution", null);
            }
            set {
                SetRelatedEntity("activity_pointer_incident_resolution", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_incident_resolution_activities")]
        public BusinessUnit business_unit_incident_resolution_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_incident_resolution_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_incident_resolution_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("incidentresolution_Teams")]
        public IEnumerable<Team> incidentresolution_Teams {
            get {
                return GetRelatedEntities<Team>("incidentresolution_Teams", null);
            }
            set {
                SetRelatedEntities("incidentresolution_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("incidentresolution_activity_parties")]
        public IEnumerable<ActivityParty> incidentresolution_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("incidentresolution_activity_parties", null);
            }
            set {
                SetRelatedEntities("incidentresolution_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("incidentresolution_transactioncurrency_transactioncurrencyid")]
        public TransactionCurrency incidentresolution_transactioncurrency_transactioncurrencyid {
            get {
                return GetRelatedEntity<TransactionCurrency>("incidentresolution_transactioncurrency_transactioncurrencyid", null);
            }
            set {
                SetRelatedEntity("incidentresolution_transactioncurrency_transactioncurrencyid", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("lead_IncidentResolutions")]
        public Lead lead_IncidentResolutions {
            get {
                return GetRelatedEntity<Lead>("lead_IncidentResolutions", null);
            }
            set {
                SetRelatedEntity("lead_IncidentResolutions", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_incidentresolution_createdby")]
        public SystemUser lk_incidentresolution_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentresolution_createdby", null);
            }
            set {
                SetRelatedEntity("lk_incidentresolution_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_incidentresolution_createdonbehalfby")]
        public SystemUser lk_incidentresolution_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentresolution_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_incidentresolution_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_incidentresolution_modifiedby")]
        public SystemUser lk_incidentresolution_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentresolution_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_incidentresolution_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_incidentresolution_modifiedonbehalfby")]
        public SystemUser lk_incidentresolution_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentresolution_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_incidentresolution_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_incidentresolution")]
        public Team team_incidentresolution {
            get {
                return GetRelatedEntity<Team>("team_incidentresolution", null);
            }
            set {
                SetRelatedEntity("team_incidentresolution", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_incidentresolution")]
        public SystemUser user_incidentresolution {
            get {
                return GetRelatedEntity<SystemUser>("user_incidentresolution", null);
            }
            set {
                SetRelatedEntity("user_incidentresolution", null, value);
            }
        }
        
        public static IncidentResolution Retrieve(IOrganizationService service, Guid id, params Expression<Func<IncidentResolution,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Order that has been billed.</para>
    /// <para>Display Name: Invoice</para>
    /// </summary>
    [EntityLogicalName("invoice")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Invoice : ExtendedEntity<InvoiceState, Invoice_StatusCode> {
        
        public const string EntityLogicalName = "invoice";
        
        public const int EntityTypeCode = 1090;
        
        public Invoice() : 
                base(EntityLogicalName) {
        }
        
        public Invoice(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("invoiceid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("invoiceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the invoice.</para>
        /// <para>Display Name: Invoice</para>
        /// </summary>
        [AttributeLogicalName("invoiceid")]
        public Guid? InvoiceId {
            get {
                return GetAttributeValue<Guid?>("invoiceid");
            }
            set {
                SetId("invoiceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the invoice is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's billing address.</para>
        /// <para>Display Name: Bill To City</para>
        /// </summary>
        [AttributeLogicalName("billto_city")]
        public string BillTo_City {
            get {
                return GetAttributeValue<string>("billto_city");
            }
            set {
                SetAttributeValue("billto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Bill To address.</para>
        /// <para>Display Name: Bill To Address</para>
        /// </summary>
        [AttributeLogicalName("billto_composite")]
        public string BillTo_Composite {
            get {
                return GetAttributeValue<string>("billto_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's billing address.</para>
        /// <para>Display Name: Bill To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("billto_country")]
        public string BillTo_Country {
            get {
                return GetAttributeValue<string>("billto_country");
            }
            set {
                SetAttributeValue("billto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Fax</para>
        /// </summary>
        [AttributeLogicalName("billto_fax")]
        public string BillTo_Fax {
            get {
                return GetAttributeValue<string>("billto_fax");
            }
            set {
                SetAttributeValue("billto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 1</para>
        /// </summary>
        [AttributeLogicalName("billto_line1")]
        public string BillTo_Line1 {
            get {
                return GetAttributeValue<string>("billto_line1");
            }
            set {
                SetAttributeValue("billto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 2</para>
        /// </summary>
        [AttributeLogicalName("billto_line2")]
        public string BillTo_Line2 {
            get {
                return GetAttributeValue<string>("billto_line2");
            }
            set {
                SetAttributeValue("billto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the billing address.</para>
        /// <para>Display Name: Bill To Street 3</para>
        /// </summary>
        [AttributeLogicalName("billto_line3")]
        public string BillTo_Line3 {
            get {
                return GetAttributeValue<string>("billto_line3");
            }
            set {
                SetAttributeValue("billto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's billing address, such as "Headquarters" or "Field office", to identify the address.</para>
        /// <para>Display Name: Bill To Name</para>
        /// </summary>
        [AttributeLogicalName("billto_name")]
        public string BillTo_Name {
            get {
                return GetAttributeValue<string>("billto_name");
            }
            set {
                SetAttributeValue("billto_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the billing address.</para>
        /// <para>Display Name: Bill To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("billto_postalcode")]
        public string BillTo_PostalCode {
            get {
                return GetAttributeValue<string>("billto_postalcode");
            }
            set {
                SetAttributeValue("billto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the billing address.</para>
        /// <para>Display Name: Bill To State/Province</para>
        /// </summary>
        [AttributeLogicalName("billto_stateorprovince")]
        public string BillTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("billto_stateorprovince");
            }
            set {
                SetAttributeValue("billto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Phone</para>
        /// </summary>
        [AttributeLogicalName("billto_telephone")]
        public string BillTo_Telephone {
            get {
                return GetAttributeValue<string>("billto_telephone");
            }
            set {
                SetAttributeValue("billto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact associated with the invoice.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>lk_invoicebase_createdby</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>lk_invoice_createdonbehalfby</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>invoice_customer_contacts</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the products included in the invoice were delivered.</para>
        /// <para>Display Name: Date Delivered</para>
        /// </summary>
        [AttributeLogicalName("datedelivered")]
        public DateTime? DateDelivered {
            get {
                return GetAttributeValue<DateTime?>("datedelivered");
            }
            set {
                SetAttributeValue("datedelivered", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the invoice, such as shipping details or product substitutions.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Type the discount amount for the invoice if the customer is eligible for special savings.</para>
        /// <para>Display Name: Invoice Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("discountamount")]
        public decimal? DiscountAmount {
            get {
                return GetMoneyValue("discountamount");
            }
            set {
                SetMoneyValue("discountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Invoice Discount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Invoice Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("discountamount_base")]
        public decimal? DiscountAmount_Base {
            get {
                return GetMoneyValue("discountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type the discount rate that should be applied to the Detail Amount field, for use in calculating the Pre-Freight Amount and Total Amount values for the invoice.</para>
        /// <para>Display Name: Invoice Discount (%)</para>
        /// </summary>
        [AttributeLogicalName("discountpercentage")]
        public decimal? DiscountPercentage {
            get {
                return GetAttributeValue<decimal?>("discountpercentage");
            }
            set {
                SetAttributeValue("discountpercentage", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date by which the invoice should be paid by the customer.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("duedate")]
        public DateTime? DueDate {
            get {
                return GetAttributeValue<DateTime?>("duedate");
            }
            set {
                SetAttributeValue("duedate", value);
            }
        }
        
        /// <summary>
        /// <para>The primary email address for the entity.</para>
        /// <para>Display Name: Email Address</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EmailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Type the cost of freight or shipping for the products included in the invoice for use in calculating the total amount due.</para>
        /// <para>Display Name: Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("freightamount")]
        public decimal? FreightAmount {
            get {
                return GetMoneyValue("freightamount");
            }
            set {
                SetMoneyValue("freightamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("freightamount_base")]
        public decimal? FreightAmount_Base {
            get {
                return GetMoneyValue("freightamount_base");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the identifying number or code of the invoice.</para>
        /// <para>Display Name: Invoice ID</para>
        /// </summary>
        [AttributeLogicalName("invoicenumber")]
        public string InvoiceNumber {
            get {
                return GetAttributeValue<string>("invoicenumber");
            }
            set {
                SetAttributeValue("invoicenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether prices specified on the invoice are locked from any further updates.</para>
        /// <para>Display Name: Prices Locked</para>
        /// </summary>
        [AttributeLogicalName("ispricelocked")]
        public bool? IsPriceLocked {
            get {
                return GetAttributeValue<bool?>("ispricelocked");
            }
            set {
                SetAttributeValue("ispricelocked", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time when the invoice was last submitted to an accounting or ERP system for processing.</para>
        /// <para>Display Name: Last Submitted to Back Office</para>
        /// </summary>
        [AttributeLogicalName("lastbackofficesubmit")]
        public DateTime? LastBackofficeSubmit {
            get {
                return GetAttributeValue<DateTime?>("lastbackofficesubmit");
            }
            set {
                SetAttributeValue("lastbackofficesubmit", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>lk_invoicebase_modifiedby</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>lk_invoice_modifiedonbehalfby</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the invoice.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the invoice was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>opportunity_invoices</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public EntityReference OpportunityId {
            get {
                return GetAttributeValue<EntityReference>("opportunityid");
            }
            set {
                SetAttributeValue("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>owner_invoices</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>business_unit_invoices</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>team_invoices</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>system_user_invoices</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public Invoice_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Invoice_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>price_level_invoices</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("pricelevelid")]
        public EntityReference PriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("pricelevelid");
            }
            set {
                SetAttributeValue("pricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of pricing error for the invoice.</para>
        /// <para>Display Name: Pricing Error </para>
        /// </summary>
        [AttributeLogicalName("pricingerrorcode")]
        public qooi_pricingerrorcode? PricingErrorCode {
            get {
                return GetOptionSetValue<qooi_pricingerrorcode>("pricingerrorcode");
            }
            set {
                SetOptionSetValue("pricingerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Invoice_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Invoice_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>manualsla_invoice</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>sla_invoice</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>order_invoices</para>
        /// <para>Display Name: Order</para>
        /// </summary>
        [AttributeLogicalName("salesorderid")]
        public EntityReference SalesOrderId {
            get {
                return GetAttributeValue<EntityReference>("salesorderid");
            }
            set {
                SetAttributeValue("salesorderid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's shipping address.</para>
        /// <para>Display Name: Ship To City</para>
        /// </summary>
        [AttributeLogicalName("shipto_city")]
        public string ShipTo_City {
            get {
                return GetAttributeValue<string>("shipto_city");
            }
            set {
                SetAttributeValue("shipto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Ship To address.</para>
        /// <para>Display Name: Ship To Address</para>
        /// </summary>
        [AttributeLogicalName("shipto_composite")]
        public string ShipTo_Composite {
            get {
                return GetAttributeValue<string>("shipto_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("shipto_country")]
        public string ShipTo_Country {
            get {
                return GetAttributeValue<string>("shipto_country");
            }
            set {
                SetAttributeValue("shipto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Fax</para>
        /// </summary>
        [AttributeLogicalName("shipto_fax")]
        public string ShipTo_Fax {
            get {
                return GetAttributeValue<string>("shipto_fax");
            }
            set {
                SetAttributeValue("shipto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Ship To Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("shipto_freighttermscode")]
        public Invoice_ShipTo_FreightTermsCode? ShipTo_FreightTermsCode {
            get {
                return GetOptionSetValue<Invoice_ShipTo_FreightTermsCode>("shipto_freighttermscode");
            }
            set {
                SetOptionSetValue("shipto_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 1</para>
        /// </summary>
        [AttributeLogicalName("shipto_line1")]
        public string ShipTo_Line1 {
            get {
                return GetAttributeValue<string>("shipto_line1");
            }
            set {
                SetAttributeValue("shipto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 2</para>
        /// </summary>
        [AttributeLogicalName("shipto_line2")]
        public string ShipTo_Line2 {
            get {
                return GetAttributeValue<string>("shipto_line2");
            }
            set {
                SetAttributeValue("shipto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the shipping address.</para>
        /// <para>Display Name: Ship To Street 3</para>
        /// </summary>
        [AttributeLogicalName("shipto_line3")]
        public string ShipTo_Line3 {
            get {
                return GetAttributeValue<string>("shipto_line3");
            }
            set {
                SetAttributeValue("shipto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's shipping address, such as "Headquarters" or "Field office",  to identify the address.</para>
        /// <para>Display Name: Ship To Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_name")]
        public string ShipTo_Name {
            get {
                return GetAttributeValue<string>("shipto_name");
            }
            set {
                SetAttributeValue("shipto_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the shipping address.</para>
        /// <para>Display Name: Ship To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("shipto_postalcode")]
        public string ShipTo_PostalCode {
            get {
                return GetAttributeValue<string>("shipto_postalcode");
            }
            set {
                SetAttributeValue("shipto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the shipping address.</para>
        /// <para>Display Name: Ship To State/Province</para>
        /// </summary>
        [AttributeLogicalName("shipto_stateorprovince")]
        public string ShipTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("shipto_stateorprovince");
            }
            set {
                SetAttributeValue("shipto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Phone</para>
        /// </summary>
        [AttributeLogicalName("shipto_telephone")]
        public string ShipTo_Telephone {
            get {
                return GetAttributeValue<string>("shipto_telephone");
            }
            set {
                SetAttributeValue("shipto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public Invoice_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Invoice_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Skip Price Calculation (For Internal Use)</para>
        /// <para>Display Name: Skip Price Calculation</para>
        /// </summary>
        [AttributeLogicalName("skippricecalculation")]
        public qooi_skippricecalculation? SkipPriceCalculation {
            get {
                return GetOptionSetValue<qooi_skippricecalculation>("skippricecalculation");
            }
            set {
                SetOptionSetValue("skippricecalculation", value);
            }
        }
        
        /// <summary>
        /// <para>processstage_invoices</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the invoice is active, paid, or canceled. Paid and canceled invoices are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public InvoiceState? StateCode {
            get {
                return GetOptionSetValue<InvoiceState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the invoice's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Invoice_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Invoice_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total amount due, calculated as the sum of the products, discount, freight, and taxes for the invoice.</para>
        /// <para>Display Name: Total Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamount")]
        public decimal? TotalAmount {
            get {
                return GetMoneyValue("totalamount");
            }
            set {
                SetMoneyValue("totalamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total product amount due, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount due for the invoice.</para>
        /// <para>Display Name: Total Pre-Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight")]
        public decimal? TotalAmountLessFreight {
            get {
                return GetMoneyValue("totalamountlessfreight");
            }
            set {
                SetMoneyValue("totalamountlessfreight", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Pre-Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Pre-Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight_base")]
        public decimal? TotalAmountLessFreight_Base {
            get {
                return GetMoneyValue("totalamountlessfreight_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamount_base")]
        public decimal? TotalAmount_Base {
            get {
                return GetMoneyValue("totalamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the total discount amount, based on the discount price and rate entered on the invoice.</para>
        /// <para>Display Name: Total Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount")]
        public decimal? TotalDiscountAmount {
            get {
                return GetMoneyValue("totaldiscountamount");
            }
            set {
                SetMoneyValue("totaldiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount_base")]
        public decimal? TotalDiscountAmount_Base {
            get {
                return GetMoneyValue("totaldiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of all existing and write-in products included on the invoice, based on the specified price list and quantities.</para>
        /// <para>Display Name: Total Detail Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount")]
        public decimal? TotalLineItemAmount {
            get {
                return GetMoneyValue("totallineitemamount");
            }
            set {
                SetMoneyValue("totallineitemamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Detail Amount field converted to the system's default base currency. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Detail Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount_base")]
        public decimal? TotalLineItemAmount_Base {
            get {
                return GetMoneyValue("totallineitemamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the Manual Discount amounts specified on all products included in the invoice. This value is reflected in the Detail Amount field on the invoice and is added to any discount amount or rate specified on the invoice.</para>
        /// <para>Display Name: Total Line Item Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount")]
        public decimal? TotalLineItemDiscountAmount {
            get {
                return GetMoneyValue("totallineitemdiscountamount");
            }
            set {
                SetMoneyValue("totallineitemdiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Manual Discount amounts specified on all products included in the invoice. This value is reflected in the Detail Amount field on the invoice and is added to any discount amount or rate specified on the invoice.</para>
        /// <para>Display Name: Total Line Item Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount_base")]
        public decimal? TotalLineItemDiscountAmount_Base {
            get {
                return GetMoneyValue("totallineitemdiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Tax amounts specified on all products included in the invoice, included in the Total Amount due calculation for the invoice.</para>
        /// <para>Display Name: Total Tax</para>
        /// </summary>
        [AttributeLogicalName("totaltax")]
        public decimal? TotalTax {
            get {
                return GetMoneyValue("totaltax");
            }
            set {
                SetMoneyValue("totaltax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Tax field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Tax (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaltax_base")]
        public decimal? TotalTax_Base {
            get {
                return GetMoneyValue("totaltax_base");
            }
        }
        
        /// <summary>
        /// <para>transactioncurrency_invoice</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the invoice.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Select whether the products included in the invoice should be shipped to the specified address or held until the customer calls with further pick up or delivery instructions.</para>
        /// <para>Display Name: Ship To</para>
        /// </summary>
        [AttributeLogicalName("willcall")]
        public bool? WillCall {
            get {
                return GetAttributeValue<bool?>("willcall");
            }
            set {
                SetAttributeValue("willcall", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the amount due on this invoice.</para>
        /// <para>Display Name: Amount Due</para>
        /// </summary>
        [AttributeLogicalName("msdyn_amountdue")]
        public decimal? msdyn_AmountDue {
            get {
                return GetMoneyValue("msdyn_amountdue");
            }
            set {
                SetMoneyValue("msdyn_amountdue", value);
            }
        }
        
        /// <summary>
        /// <para>Document date of the Invoice for use in calculation of payment due date</para>
        /// <para>Display Name: Invoice Date</para>
        /// </summary>
        [AttributeLogicalName("msdyn_invoicedate")]
        public DateTime? msdyn_InvoiceDate {
            get {
                return GetAttributeValue<DateTime?>("msdyn_invoicedate");
            }
            set {
                SetAttributeValue("msdyn_invoicedate", value);
            }
        }
        
        /// <summary>
        /// <para>Whether the Invoice is for an Item-based or a service maintainence-based sale</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_ordertype")]
        public Invoice_msdyn_OrderType? msdyn_OrderType {
            get {
                return GetOptionSetValue<Invoice_msdyn_OrderType>("msdyn_ordertype");
            }
            set {
                SetOptionSetValue("msdyn_ordertype", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Amount Due in base currency.</para>
        /// <para>Display Name: Amount Due (Base)</para>
        /// </summary>
        [AttributeLogicalName("msdyn_amountdue_base")]
        public decimal? msdyn_amountdue_Base {
            get {
                return GetMoneyValue("msdyn_amountdue_base");
            }
        }
        
        [RelationshipSchemaName("Invoice_ActivityPointers")]
        public IEnumerable<ActivityPointer> Invoice_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Invoice_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Invoice_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_Emails")]
        public IEnumerable<Email> Invoice_Emails {
            get {
                return GetRelatedEntities<Email>("Invoice_Emails", null);
            }
            set {
                SetRelatedEntities("Invoice_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_Tasks")]
        public IEnumerable<Task> Invoice_Tasks {
            get {
                return GetRelatedEntities<Task>("Invoice_Tasks", null);
            }
            set {
                SetRelatedEntities("Invoice_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_invoices")]
        public BusinessUnit business_unit_invoices {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_invoices", null);
            }
            set {
                SetRelatedEntity("business_unit_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("contactinvoices_association")]
        public IEnumerable<Contact> contactinvoices_association {
            get {
                return GetRelatedEntities<Contact>("contactinvoices_association", null);
            }
            set {
                SetRelatedEntities("contactinvoices_association", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_Teams")]
        public IEnumerable<Team> invoice_Teams {
            get {
                return GetRelatedEntities<Team>("invoice_Teams", null);
            }
            set {
                SetRelatedEntities("invoice_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_activity_parties")]
        public IEnumerable<ActivityParty> invoice_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("invoice_activity_parties", null);
            }
            set {
                SetRelatedEntities("invoice_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("invoice_customer_accounts")]
        public Account invoice_customer_accounts {
            get {
                return GetRelatedEntity<Account>("invoice_customer_accounts", null);
            }
            set {
                SetRelatedEntity("invoice_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("invoice_customer_contacts")]
        public Contact invoice_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("invoice_customer_contacts", null);
            }
            set {
                SetRelatedEntity("invoice_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_invoice_createdonbehalfby")]
        public SystemUser lk_invoice_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_invoice_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_invoice_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_invoice_modifiedonbehalfby")]
        public SystemUser lk_invoice_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_invoice_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_invoice_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_invoicebase_createdby")]
        public SystemUser lk_invoicebase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_invoicebase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_invoicebase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_invoicebase_modifiedby")]
        public SystemUser lk_invoicebase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_invoicebase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_invoicebase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("opportunityid")]
        [RelationshipSchemaName("opportunity_invoices")]
        public Opportunity opportunity_invoices {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_invoices", null);
            }
            set {
                SetRelatedEntity("opportunity_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_invoices")]
        public SystemUser system_user_invoices {
            get {
                return GetRelatedEntity<SystemUser>("system_user_invoices", null);
            }
            set {
                SetRelatedEntity("system_user_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_invoices")]
        public Team team_invoices {
            get {
                return GetRelatedEntity<Team>("team_invoices", null);
            }
            set {
                SetRelatedEntity("team_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_invoice")]
        public TransactionCurrency transactioncurrency_invoice {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_invoice", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_invoice", null, value);
            }
        }
        
        public static Invoice Retrieve(IOrganizationService service, Guid id, params Expression<Func<Invoice,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Prospect or potential sales opportunity. Leads are converted into accounts, contacts, or opportunities when they are qualified. Otherwise, they are deleted or archived.</para>
    /// <para>Display Name: Lead</para>
    /// </summary>
    [EntityLogicalName("lead")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Lead : ExtendedEntity<LeadState, Lead_StatusCode> {
        
        public const string EntityLogicalName = "lead";
        
        public const int EntityTypeCode = 4;
        
        public Lead() : 
                base(EntityLogicalName) {
        }
        
        public Lead(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("leadid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("leadid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the lead.</para>
        /// <para>Display Name: Lead</para>
        /// </summary>
        [AttributeLogicalName("leadid")]
        public Guid? LeadId {
            get {
                return GetAttributeValue<Guid?>("leadid");
            }
            set {
                SetId("leadid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the lead is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public Lead_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<Lead_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>Display Name: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address 1</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>Display Name: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>Display Name: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>Display Name: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>Display Name: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>Display Name: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public Lead_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<Lead_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>Display Name: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public Lead_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<Lead_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>Display Name: Address 2: City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Address 2</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>Display Name: Address 2: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>Display Name: Address 2: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public Lead_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<Lead_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>Display Name: Address 2: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Information about the budget amount of the lead's company or organization.</para>
        /// <para>Display Name: Budget Amount</para>
        /// </summary>
        [AttributeLogicalName("budgetamount")]
        public decimal? BudgetAmount {
            get {
                return GetMoneyValue("budgetamount");
            }
            set {
                SetMoneyValue("budgetamount", value);
            }
        }
        
        /// <summary>
        /// <para>Base currency equivalent of the estimated budget of the lead.</para>
        /// <para>Display Name: Budget Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("budgetamount_base")]
        public decimal? BudgetAmount_Base {
            get {
                return GetMoneyValue("budgetamount_base");
            }
        }
        
        /// <summary>
        /// <para>Information about the budget status of the lead's company or organization.</para>
        /// <para>Display Name: Budget</para>
        /// </summary>
        [AttributeLogicalName("budgetstatus")]
        public budgetstatus? BudgetStatus {
            get {
                return GetOptionSetValue<budgetstatus>("budgetstatus");
            }
            set {
                SetOptionSetValue("budgetstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Stores Image of the Business Card</para>
        /// <para>Display Name: Business Card</para>
        /// </summary>
        [AttributeLogicalName("businesscard")]
        public string BusinessCard {
            get {
                return GetAttributeValue<string>("businesscard");
            }
            set {
                SetAttributeValue("businesscard", value);
            }
        }
        
        /// <summary>
        /// <para>Stores Business Card Control Properties.</para>
        /// <para>Display Name: BusinessCardAttributes</para>
        /// </summary>
        [AttributeLogicalName("businesscardattributes")]
        public string BusinessCardAttributes {
            get {
                return GetAttributeValue<string>("businesscardattributes");
            }
            set {
                SetAttributeValue("businesscardattributes", value);
            }
        }
        
        /// <summary>
        /// <para>campaign_leads</para>
        /// <para>Display Name: Source Campaign</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public EntityReference CampaignId {
            get {
                return GetAttributeValue<EntityReference>("campaignid");
            }
            set {
                SetAttributeValue("campaignid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the company associated with the lead. This becomes the account name when the lead is qualified and converted to a customer account.</para>
        /// <para>Display Name: Company Name</para>
        /// </summary>
        [AttributeLogicalName("companyname")]
        public string CompanyName {
            get {
                return GetAttributeValue<string>("companyname");
            }
            set {
                SetAttributeValue("companyname", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality.</para>
        /// <para>Display Name: Confirm Interest</para>
        /// </summary>
        [AttributeLogicalName("confirminterest")]
        public bool? ConfirmInterest {
            get {
                return GetAttributeValue<bool?>("confirminterest");
            }
            set {
                SetAttributeValue("confirminterest", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact with which the lead is associated.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>lk_lead_createdonbehalfby</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>lead_customer_contacts</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether your notes include information about who makes the purchase decisions at the lead's company.</para>
        /// <para>Display Name: Decision Maker?</para>
        /// </summary>
        [AttributeLogicalName("decisionmaker")]
        public bool? DecisionMaker {
            get {
                return GetAttributeValue<bool?>("decisionmaker");
            }
            set {
                SetAttributeValue("decisionmaker", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the lead, such as an excerpt from the company's website.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the lead can be added to marketing lists, but will be excluded from the email.</para>
        /// <para>Display Name: Do not allow Bulk Emails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        public bool? DoNotBulkEMail {
            get {
                return GetAttributeValue<bool?>("donotbulkemail");
            }
            set {
                SetAttributeValue("donotbulkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead allows direct email sent from Microsoft Dynamics 365.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEMail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
            set {
                SetAttributeValue("donotemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead allows faxes.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
            set {
                SetAttributeValue("donotfax", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead allows phone calls.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
            set {
                SetAttributeValue("donotphone", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead allows direct mail.</para>
        /// <para>Display Name: Do not allow Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
            set {
                SetAttributeValue("donotpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead accepts marketing materials, such as brochures or catalogs. Leads that opt out can be excluded from marketing initiatives.</para>
        /// <para>Display Name: Marketing Material</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        public bool? DoNotSendMM {
            get {
                return GetAttributeValue<bool?>("donotsendmm");
            }
            set {
                SetAttributeValue("donotsendmm", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary email address for the lead.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        public string EMailAddress1 {
            get {
                return GetAttributeValue<string>("emailaddress1");
            }
            set {
                SetAttributeValue("emailaddress1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the secondary email address for the lead.</para>
        /// <para>Display Name: Email Address 2</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        public string EMailAddress2 {
            get {
                return GetAttributeValue<string>("emailaddress2");
            }
            set {
                SetAttributeValue("emailaddress2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third email address for the lead.</para>
        /// <para>Display Name: Email Address 3</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        public string EMailAddress3 {
            get {
                return GetAttributeValue<string>("emailaddress3");
            }
            set {
                SetAttributeValue("emailaddress3", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Type the estimated revenue value that this lead will generate to assist in sales forecasting and planning.</para>
        /// <para>Display Name: Est. Value</para>
        /// </summary>
        [AttributeLogicalName("estimatedamount")]
        public decimal? EstimatedAmount {
            get {
                return GetMoneyValue("estimatedamount");
            }
            set {
                SetMoneyValue("estimatedamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Est. Value field converted to the system's default base currency. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Est. Value (Base)</para>
        /// </summary>
        [AttributeLogicalName("estimatedamount_base")]
        public decimal? EstimatedAmount_Base {
            get {
                return GetMoneyValue("estimatedamount_base");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected close date for the lead, so that the sales team can schedule timely follow-up meetings to move the prospect to the next sales stage.</para>
        /// <para>Display Name: Est. Close Date</para>
        /// </summary>
        [AttributeLogicalName("estimatedclosedate")]
        public DateTime? EstimatedCloseDate {
            get {
                return GetAttributeValue<DateTime?>("estimatedclosedate");
            }
            set {
                SetAttributeValue("estimatedclosedate", value);
            }
        }
        
        /// <summary>
        /// <para>Type a numeric value of the lead's estimated value, such as a product quantity, if no revenue amount can be specified in the Est. Value field. This can be used for sales forecasting and planning.</para>
        /// <para>Display Name: Est. Value (deprecated)</para>
        /// </summary>
        [AttributeLogicalName("estimatedvalue")]
        public double? EstimatedValue {
            get {
                return GetAttributeValue<double?>("estimatedvalue");
            }
            set {
                SetAttributeValue("estimatedvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the fit between the lead's requirements and your offerings was evaluated.</para>
        /// <para>Display Name: Evaluate Fit</para>
        /// </summary>
        [AttributeLogicalName("evaluatefit")]
        public bool? EvaluateFit {
            get {
                return GetAttributeValue<bool?>("evaluatefit");
            }
            set {
                SetAttributeValue("evaluatefit", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the primary contact for the lead.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the lead.</para>
        /// <para>Display Name: Follow Email Activity</para>
        /// </summary>
        [AttributeLogicalName("followemail")]
        public bool? FollowEmail {
            get {
                return GetAttributeValue<bool?>("followemail");
            }
            set {
                SetAttributeValue("followemail", value);
            }
        }
        
        /// <summary>
        /// <para>Combines and shows the lead's first and last names so the full name can be displayed in views and reports.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary industry in which the lead's business is focused, for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: Industry</para>
        /// </summary>
        [AttributeLogicalName("industrycode")]
        public Lead_IndustryCode? IndustryCode {
            get {
                return GetOptionSetValue<Lead_IndustryCode>("industrycode");
            }
            set {
                SetOptionSetValue("industrycode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether someone from the sales team contacted this lead earlier.</para>
        /// <para>Display Name: Initial Communication</para>
        /// </summary>
        [AttributeLogicalName("initialcommunication")]
        public initialcommunication? InitialCommunication {
            get {
                return GetOptionSetValue<initialcommunication>("initialcommunication");
            }
            set {
                SetOptionSetValue("initialcommunication", value);
            }
        }
        
        /// <summary>
        /// <para>Type the job title of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Job Title</para>
        /// </summary>
        [AttributeLogicalName("jobtitle")]
        public string JobTitle {
            get {
                return GetAttributeValue<string>("jobtitle");
            }
            set {
                SetAttributeValue("jobtitle", value);
            }
        }
        
        /// <summary>
        /// <para>Type the last name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the lead was last included in a marketing campaign or quick campaign.</para>
        /// <para>Display Name: Last Campaign Date</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? LastUsedInCampaign {
            get {
                return GetAttributeValue<DateTime?>("lastusedincampaign");
            }
            set {
                SetAttributeValue("lastusedincampaign", value);
            }
        }
        
        /// <summary>
        /// <para>Select a rating value to indicate the lead's potential to become a customer.</para>
        /// <para>Display Name: Rating</para>
        /// </summary>
        [AttributeLogicalName("leadqualitycode")]
        public Lead_LeadQualityCode? LeadQualityCode {
            get {
                return GetOptionSetValue<Lead_LeadQualityCode>("leadqualitycode");
            }
            set {
                SetOptionSetValue("leadqualitycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary marketing source that prompted the lead to contact you.</para>
        /// <para>Display Name: Lead Source</para>
        /// </summary>
        [AttributeLogicalName("leadsourcecode")]
        public Lead_LeadSourceCode? LeadSourceCode {
            get {
                return GetOptionSetValue<Lead_LeadSourceCode>("leadsourcecode");
            }
            set {
                SetOptionSetValue("leadsourcecode", value);
            }
        }
        
        /// <summary>
        /// <para>lead_master_lead</para>
        /// <para>Display Name: Master ID</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
        }
        
        /// <summary>
        /// <para>Tells whether the lead has been merged with another lead.</para>
        /// <para>Display Name: Merged</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Type the middle name or initial of the primary contact for the lead to make sure the prospect is addressed correctly.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Type the mobile phone number for the primary contact for the lead.</para>
        /// <para>Display Name: Mobile Phone</para>
        /// </summary>
        [AttributeLogicalName("mobilephone")]
        public string MobilePhone {
            get {
                return GetAttributeValue<string>("mobilephone");
            }
            set {
                SetAttributeValue("mobilephone", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>lk_lead_modifiedonbehalfby</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Choose how high the level of need is for the lead's company.</para>
        /// <para>Display Name: Need</para>
        /// </summary>
        [AttributeLogicalName("need")]
        public need? Need {
            get {
                return GetOptionSetValue<need>("need");
            }
            set {
                SetOptionSetValue("need", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of employees that work at the company associated with the lead, for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: No. of Employees</para>
        /// </summary>
        [AttributeLogicalName("numberofemployees")]
        public int? NumberOfEmployees {
            get {
                return GetAttributeValue<int?>("numberofemployees");
            }
            set {
                SetAttributeValue("numberofemployees", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>OriginatingCase_Lead</para>
        /// <para>Display Name: Originating Case</para>
        /// </summary>
        [AttributeLogicalName("originatingcaseid")]
        public EntityReference OriginatingCaseId {
            get {
                return GetAttributeValue<EntityReference>("originatingcaseid");
            }
            set {
                SetAttributeValue("originatingcaseid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>owner_leads</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>business_unit_leads</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>lead_owning_team</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>lead_owning_user</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the pager number for the primary contact for the lead.</para>
        /// <para>Display Name: Pager</para>
        /// </summary>
        [AttributeLogicalName("pager")]
        public string Pager {
            get {
                return GetAttributeValue<string>("pager");
            }
            set {
                SetAttributeValue("pager", value);
            }
        }
        
        /// <summary>
        /// <para>lead_parent_account</para>
        /// <para>Display Name: Parent Account for lead</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference ParentAccountId {
            get {
                return GetAttributeValue<EntityReference>("parentaccountid");
            }
            set {
                SetAttributeValue("parentaccountid", value);
            }
        }
        
        /// <summary>
        /// <para>lead_parent_contact</para>
        /// <para>Display Name: Parent Contact for lead</para>
        /// </summary>
        [AttributeLogicalName("parentcontactid")]
        public EntityReference ParentContactId {
            get {
                return GetAttributeValue<EntityReference>("parentcontactid");
            }
            set {
                SetAttributeValue("parentcontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the lead participates in workflow rules.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Display Name: Preferred Method of Contact</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public Lead_PreferredContactMethodCode? PreferredContactMethodCode {
            get {
                return GetOptionSetValue<Lead_PreferredContactMethodCode>("preferredcontactmethodcode");
            }
            set {
                SetOptionSetValue("preferredcontactmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Lead_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Lead_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether an individual or a committee will be involved in the  purchase process for the lead.</para>
        /// <para>Display Name: Purchase Process</para>
        /// </summary>
        [AttributeLogicalName("purchaseprocess")]
        public purchaseprocess? PurchaseProcess {
            get {
                return GetOptionSetValue<purchaseprocess>("purchaseprocess");
            }
            set {
                SetOptionSetValue("purchaseprocess", value);
            }
        }
        
        /// <summary>
        /// <para>Choose how long the lead will likely take to make the purchase, so the sales team will be aware.</para>
        /// <para>Display Name: Purchase Timeframe</para>
        /// </summary>
        [AttributeLogicalName("purchasetimeframe")]
        public purchasetimeframe? PurchaseTimeFrame {
            get {
                return GetOptionSetValue<purchasetimeframe>("purchasetimeframe");
            }
            set {
                SetOptionSetValue("purchasetimeframe", value);
            }
        }
        
        /// <summary>
        /// <para>Type comments about the qualification or scoring of the lead.</para>
        /// <para>Display Name: Qualification Comments</para>
        /// </summary>
        [AttributeLogicalName("qualificationcomments")]
        public string QualificationComments {
            get {
                return GetAttributeValue<string>("qualificationcomments");
            }
            set {
                SetAttributeValue("qualificationcomments", value);
            }
        }
        
        /// <summary>
        /// <para>lead_qualifying_opportunity</para>
        /// <para>Display Name: Qualifying Opportunity</para>
        /// </summary>
        [AttributeLogicalName("qualifyingopportunityid")]
        public EntityReference QualifyingOpportunityId {
            get {
                return GetAttributeValue<EntityReference>("qualifyingopportunityid");
            }
            set {
                SetAttributeValue("qualifyingopportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>CampaignResponse_Lead</para>
        /// <para>Display Name: Related Campaign Response</para>
        /// </summary>
        [AttributeLogicalName("relatedobjectid")]
        public EntityReference RelatedObjectId {
            get {
                return GetAttributeValue<EntityReference>("relatedobjectid");
            }
            set {
                SetAttributeValue("relatedobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the annual revenue of the company associated with the lead to provide an understanding of the prospect's business.</para>
        /// <para>Display Name: Annual Revenue</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        public decimal? Revenue {
            get {
                return GetMoneyValue("revenue");
            }
            set {
                SetMoneyValue("revenue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Annual Revenue field converted to the system's default base currency. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Annual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        public decimal? Revenue_Base {
            get {
                return GetMoneyValue("revenue_base");
            }
        }
        
        /// <summary>
        /// <para>Type the Standard Industrial Classification (SIC) code that indicates the lead's primary industry of business for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: SIC Code</para>
        /// </summary>
        [AttributeLogicalName("sic")]
        public string SIC {
            get {
                return GetAttributeValue<string>("sic");
            }
            set {
                SetAttributeValue("sic", value);
            }
        }
        
        /// <summary>
        /// <para>manualsla_lead</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>sla_lead</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Select the sales stage of this lead to aid the sales team in their efforts to convert this lead to an opportunity.</para>
        /// <para>Display Name: Sales Stage</para>
        /// </summary>
        [AttributeLogicalName("salesstage")]
        public lead_salesstage? SalesStage {
            get {
                return GetOptionSetValue<lead_salesstage>("salesstage");
            }
            set {
                SetOptionSetValue("salesstage", value);
            }
        }
        
        /// <summary>
        /// <para>Select the sales process stage for the lead to help determine the probability of the lead converting to an opportunity.</para>
        /// <para>Display Name: Sales Stage Code</para>
        /// </summary>
        [AttributeLogicalName("salesstagecode")]
        public Lead_SalesStageCode? SalesStageCode {
            get {
                return GetOptionSetValue<Lead_SalesStageCode>("salesstagecode");
            }
            set {
                SetOptionSetValue("salesstagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the salutation of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
        /// <para>Display Name: Salutation</para>
        /// </summary>
        [AttributeLogicalName("salutation")]
        public string Salutation {
            get {
                return GetAttributeValue<string>("salutation");
            }
            set {
                SetAttributeValue("salutation", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the prospecting follow-up meeting with the lead.</para>
        /// <para>Display Name: Schedule Follow Up (Prospect)</para>
        /// </summary>
        [AttributeLogicalName("schedulefollowup_prospect")]
        public DateTime? ScheduleFollowUp_Prospect {
            get {
                return GetAttributeValue<DateTime?>("schedulefollowup_prospect");
            }
            set {
                SetAttributeValue("schedulefollowup_prospect", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the qualifying follow-up meeting with the lead.</para>
        /// <para>Display Name: Schedule Follow Up (Qualify)</para>
        /// </summary>
        [AttributeLogicalName("schedulefollowup_qualify")]
        public DateTime? ScheduleFollowUp_Qualify {
            get {
                return GetAttributeValue<DateTime?>("schedulefollowup_qualify");
            }
            set {
                SetAttributeValue("schedulefollowup_qualify", value);
            }
        }
        
        /// <summary>
        /// <para>processstage_lead</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the lead is open, qualified, or disqualified. Qualified and disqualified leads are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public LeadState? StateCode {
            get {
                return GetOptionSetValue<LeadState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the lead's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Lead_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Lead_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subject or descriptive name, such as the expected order, company name, or marketing source list, to identify the lead.</para>
        /// <para>Display Name: Topic</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Number of users or conversations followed the record</para>
        /// <para>Display Name: TeamsFollowed</para>
        /// </summary>
        [AttributeLogicalName("teamsfollowed")]
        public int? TeamsFollowed {
            get {
                return GetAttributeValue<int?>("teamsfollowed");
            }
            set {
                SetAttributeValue("teamsfollowed", value);
            }
        }
        
        /// <summary>
        /// <para>Type the work phone number for the primary contact for the lead.</para>
        /// <para>Display Name: Business Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        public string Telephone1 {
            get {
                return GetAttributeValue<string>("telephone1");
            }
            set {
                SetAttributeValue("telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the home phone number for the primary contact for the lead.</para>
        /// <para>Display Name: Home Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        public string Telephone2 {
            get {
                return GetAttributeValue<string>("telephone2");
            }
            set {
                SetAttributeValue("telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type an alternate phone number for the primary contact for the lead.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        public string Telephone3 {
            get {
                return GetAttributeValue<string>("telephone3");
            }
            set {
                SetAttributeValue("telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Total time spent for emails (read and write) and meetings by me in relation to the lead record.</para>
        /// <para>Display Name: Time Spent by me</para>
        /// </summary>
        [AttributeLogicalName("timespentbymeonemailandmeetings")]
        public string TimeSpentByMeOnEmailAndMeetings {
            get {
                return GetAttributeValue<string>("timespentbymeonemailandmeetings");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the lead.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type the website URL for the company associated with this lead.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteUrl {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the lead's company name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
        /// <para>Display Name: Yomi Company Name</para>
        /// </summary>
        [AttributeLogicalName("yomicompanyname")]
        public string YomiCompanyName {
            get {
                return GetAttributeValue<string>("yomicompanyname");
            }
            set {
                SetAttributeValue("yomicompanyname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the lead's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Combines and shows the lead's Yomi first and last names so the full phonetic name can be displayed in views and reports.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the lead's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the lead's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Lead Grade</para>
        /// </summary>
        [AttributeLogicalName("msdyn_leadgrade")]
        public msdyn_leadgradeoptset? msdyn_LeadGrade {
            get {
                return GetOptionSetValue<msdyn_leadgradeoptset>("msdyn_leadgrade");
            }
            set {
                SetOptionSetValue("msdyn_leadgrade", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Lead Score</para>
        /// </summary>
        [AttributeLogicalName("msdyn_leadscore")]
        public int? msdyn_LeadScore {
            get {
                return GetAttributeValue<int?>("msdyn_leadscore");
            }
            set {
                SetAttributeValue("msdyn_leadscore", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Lead Score Trend</para>
        /// </summary>
        [AttributeLogicalName("msdyn_leadscoretrend")]
        public msdyn_leadscoretrendoptset? msdyn_LeadScoreTrend {
            get {
                return GetOptionSetValue<msdyn_leadscoretrendoptset>("msdyn_leadscoretrend");
            }
            set {
                SetOptionSetValue("msdyn_leadscoretrend", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Score History</para>
        /// </summary>
        [AttributeLogicalName("msdyn_scorehistory")]
        public string msdyn_ScoreHistory {
            get {
                return GetAttributeValue<string>("msdyn_scorehistory");
            }
            set {
                SetAttributeValue("msdyn_scorehistory", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Score Reasons</para>
        /// </summary>
        [AttributeLogicalName("msdyn_scorereasons")]
        public string msdyn_ScoreReasons {
            get {
                return GetAttributeValue<string>("msdyn_scorereasons");
            }
            set {
                SetAttributeValue("msdyn_scorereasons", value);
            }
        }
        
        /// <summary>
        /// <para>Describes whether lead is opted out or not</para>
        /// <para>Display Name: GDPR Optout</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gdproptout")]
        public bool? msdyn_gdproptout {
            get {
                return GetAttributeValue<bool?>("msdyn_gdproptout");
            }
            set {
                SetAttributeValue("msdyn_gdproptout", value);
            }
        }
        
        /// <summary>
        /// <para>LeadKPIId</para>
        /// <para>Display Name: KPI</para>
        /// </summary>
        [AttributeLogicalName("msdyn_leadkpiid")]
        public EntityReference msdyn_leadkpiid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_leadkpiid");
            }
            set {
                SetAttributeValue("msdyn_leadkpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Whether the Opportunity created when qualifying this Lead is for an Item- based or a Work-based sale</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_ordertype")]
        public Lead_msdyn_ordertype? msdyn_ordertype {
            get {
                return GetOptionSetValue<Lead_msdyn_ordertype>("msdyn_ordertype");
            }
            set {
                SetOptionSetValue("msdyn_ordertype", value);
            }
        }
        
        [RelationshipSchemaName("Lead_ActivityPointers")]
        public IEnumerable<ActivityPointer> Lead_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Lead_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Lead_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Email_EmailSender")]
        public IEnumerable<Email> Lead_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("Lead_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("Lead_Email_EmailSender", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Emails")]
        public IEnumerable<Email> Lead_Emails {
            get {
                return GetRelatedEntities<Email>("Lead_Emails", null);
            }
            set {
                SetRelatedEntities("Lead_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Tasks")]
        public IEnumerable<Task> Lead_Tasks {
            get {
                return GetRelatedEntities<Task>("Lead_Tasks", null);
            }
            set {
                SetRelatedEntities("Lead_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("originatingcaseid")]
        [RelationshipSchemaName("OriginatingCase_Lead")]
        public Incident OriginatingCase_Lead {
            get {
                return GetRelatedEntity<Incident>("OriginatingCase_Lead", null);
            }
            set {
                SetRelatedEntity("OriginatingCase_Lead", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_master_lead", EntityRole.Referenced)]
        public IEnumerable<Lead> Referencedlead_master_lead {
            get {
                return GetRelatedEntities<Lead>("lead_master_lead", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lead_master_lead", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("lead_master_lead", EntityRole.Referencing)]
        public Lead Referencinglead_master_lead {
            get {
                return GetRelatedEntity<Lead>("lead_master_lead", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lead_master_lead", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("account_originating_lead")]
        public IEnumerable<Account> account_originating_lead {
            get {
                return GetRelatedEntities<Account>("account_originating_lead", null);
            }
            set {
                SetRelatedEntities("account_originating_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("accountleads_association")]
        public IEnumerable<Account> accountleads_association {
            get {
                return GetRelatedEntities<Account>("accountleads_association", null);
            }
            set {
                SetRelatedEntities("accountleads_association", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_leads")]
        public BusinessUnit business_unit_leads {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_leads", null);
            }
            set {
                SetRelatedEntity("business_unit_leads", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_originating_lead")]
        public IEnumerable<Contact> contact_originating_lead {
            get {
                return GetRelatedEntities<Contact>("contact_originating_lead", null);
            }
            set {
                SetRelatedEntities("contact_originating_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("contactleads_association")]
        public IEnumerable<Contact> contactleads_association {
            get {
                return GetRelatedEntities<Contact>("contactleads_association", null);
            }
            set {
                SetRelatedEntities("contactleads_association", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_IncidentResolutions")]
        public IEnumerable<IncidentResolution> lead_IncidentResolutions {
            get {
                return GetRelatedEntities<IncidentResolution>("lead_IncidentResolutions", null);
            }
            set {
                SetRelatedEntities("lead_IncidentResolutions", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_OpportunityCloses")]
        public IEnumerable<OpportunityClose> lead_OpportunityCloses {
            get {
                return GetRelatedEntities<OpportunityClose>("lead_OpportunityCloses", null);
            }
            set {
                SetRelatedEntities("lead_OpportunityCloses", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_Teams")]
        public IEnumerable<Team> lead_Teams {
            get {
                return GetRelatedEntities<Team>("lead_Teams", null);
            }
            set {
                SetRelatedEntities("lead_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_activity_parties")]
        public IEnumerable<ActivityParty> lead_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("lead_activity_parties", null);
            }
            set {
                SetRelatedEntities("lead_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("lead_customer_accounts")]
        public Account lead_customer_accounts {
            get {
                return GetRelatedEntity<Account>("lead_customer_accounts", null);
            }
            set {
                SetRelatedEntity("lead_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("lead_customer_contacts")]
        public Contact lead_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("lead_customer_contacts", null);
            }
            set {
                SetRelatedEntity("lead_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("lead_owning_team")]
        public Team lead_owning_team {
            get {
                return GetRelatedEntity<Team>("lead_owning_team", null);
            }
            set {
                SetRelatedEntity("lead_owning_team", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("lead_owning_user")]
        public SystemUser lead_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("lead_owning_user", null);
            }
            set {
                SetRelatedEntity("lead_owning_user", null, value);
            }
        }
        
        [AttributeLogicalName("parentaccountid")]
        [RelationshipSchemaName("lead_parent_account")]
        public Account lead_parent_account {
            get {
                return GetRelatedEntity<Account>("lead_parent_account", null);
            }
            set {
                SetRelatedEntity("lead_parent_account", null, value);
            }
        }
        
        [AttributeLogicalName("parentcontactid")]
        [RelationshipSchemaName("lead_parent_contact")]
        public Contact lead_parent_contact {
            get {
                return GetRelatedEntity<Contact>("lead_parent_contact", null);
            }
            set {
                SetRelatedEntity("lead_parent_contact", null, value);
            }
        }
        
        [AttributeLogicalName("qualifyingopportunityid")]
        [RelationshipSchemaName("lead_qualifying_opportunity")]
        public Opportunity lead_qualifying_opportunity {
            get {
                return GetRelatedEntity<Opportunity>("lead_qualifying_opportunity", null);
            }
            set {
                SetRelatedEntity("lead_qualifying_opportunity", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_lead_createdonbehalfby")]
        public SystemUser lk_lead_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_lead_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_lead_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_lead_modifiedonbehalfby")]
        public SystemUser lk_lead_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_lead_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_lead_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_leadbase_createdby")]
        public SystemUser lk_leadbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_leadbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_leadbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_leadbase_modifiedby")]
        public SystemUser lk_leadbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_leadbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_leadbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_originating_lead")]
        public IEnumerable<Opportunity> opportunity_originating_lead {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_originating_lead", null);
            }
            set {
                SetRelatedEntities("opportunity_originating_lead", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_lead")]
        public TransactionCurrency transactioncurrency_lead {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_lead", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_lead", null, value);
            }
        }
        
        public static Lead Retrieve(IOrganizationService service, Guid id, params Expression<Func<Lead,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Potential revenue-generating event, or sale to an account, which needs to be tracked through a sales process to completion.</para>
    /// <para>Display Name: Opportunity</para>
    /// </summary>
    [EntityLogicalName("opportunity")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Opportunity : ExtendedEntity<OpportunityState, Opportunity_StatusCode> {
        
        public const string EntityLogicalName = "opportunity";
        
        public const int EntityTypeCode = 3;
        
        public Opportunity() : 
                base(EntityLogicalName) {
        }
        
        public Opportunity(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("opportunityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the opportunity.</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public Guid? OpportunityId {
            get {
                return GetAttributeValue<Guid?>("opportunityid");
            }
            set {
                SetId("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the opportunity is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the opportunity was closed or canceled.</para>
        /// <para>Display Name: Actual Close Date</para>
        /// </summary>
        [AttributeLogicalName("actualclosedate")]
        public DateTime? ActualCloseDate {
            get {
                return GetAttributeValue<DateTime?>("actualclosedate");
            }
            set {
                SetAttributeValue("actualclosedate", value);
            }
        }
        
        /// <summary>
        /// <para>Type the actual revenue amount for the opportunity for reporting and analysis of estimated versus actual sales. Field defaults to the Est. Revenue value when an opportunity is won.</para>
        /// <para>Display Name: Actual Revenue</para>
        /// </summary>
        [AttributeLogicalName("actualvalue")]
        public decimal? ActualValue {
            get {
                return GetMoneyValue("actualvalue");
            }
            set {
                SetMoneyValue("actualvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Actual Revenue field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Actual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("actualvalue_base")]
        public decimal? ActualValue_Base {
            get {
                return GetMoneyValue("actualvalue_base");
            }
        }
        
        /// <summary>
        /// <para>Type a value between 0 and 1,000,000,000,000 to indicate the lead's potential available budget.</para>
        /// <para>Display Name: Budget Amount</para>
        /// </summary>
        [AttributeLogicalName("budgetamount")]
        public decimal? BudgetAmount {
            get {
                return GetMoneyValue("budgetamount");
            }
            set {
                SetMoneyValue("budgetamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the budget amount converted to the system's base currency.</para>
        /// <para>Display Name: Budget Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("budgetamount_base")]
        public decimal? BudgetAmount_Base {
            get {
                return GetMoneyValue("budgetamount_base");
            }
        }
        
        /// <summary>
        /// <para>Select the likely budget status for the lead's company. This may help determine the lead rating or your sales approach.</para>
        /// <para>Display Name: Budget</para>
        /// </summary>
        [AttributeLogicalName("budgetstatus")]
        public budgetstatus? BudgetStatus {
            get {
                return GetOptionSetValue<budgetstatus>("budgetstatus");
            }
            set {
                SetOptionSetValue("budgetstatus", value);
            }
        }
        
        /// <summary>
        /// <para>campaign_opportunities</para>
        /// <para>Display Name: Source Campaign</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public EntityReference CampaignId {
            get {
                return GetAttributeValue<EntityReference>("campaignid");
            }
            set {
                SetAttributeValue("campaignid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether the proposal feedback has been captured for the opportunity.</para>
        /// <para>Display Name: Proposal Feedback Captured</para>
        /// </summary>
        [AttributeLogicalName("captureproposalfeedback")]
        public bool? CaptureProposalFeedback {
            get {
                return GetAttributeValue<bool?>("captureproposalfeedback");
            }
            set {
                SetAttributeValue("captureproposalfeedback", value);
            }
        }
        
        /// <summary>
        /// <para>Type a number from 0 to 100 that represents the likelihood of closing the opportunity. This can aid the sales team in their efforts to convert the opportunity in a sale.</para>
        /// <para>Display Name: Probability</para>
        /// </summary>
        [AttributeLogicalName("closeprobability")]
        public int? CloseProbability {
            get {
                return GetAttributeValue<int?>("closeprobability");
            }
            set {
                SetAttributeValue("closeprobability", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether a final proposal has been completed for the opportunity.</para>
        /// <para>Display Name: Final Proposal Ready</para>
        /// </summary>
        [AttributeLogicalName("completefinalproposal")]
        public bool? CompleteFinalProposal {
            get {
                return GetAttributeValue<bool?>("completefinalproposal");
            }
            set {
                SetAttributeValue("completefinalproposal", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether an internal review has been completed for this opportunity.</para>
        /// <para>Display Name: Complete Internal Review</para>
        /// </summary>
        [AttributeLogicalName("completeinternalreview")]
        public bool? CompleteInternalReview {
            get {
                return GetAttributeValue<bool?>("completeinternalreview");
            }
            set {
                SetAttributeValue("completeinternalreview", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality and the probability of it turning into an opportunity.</para>
        /// <para>Display Name: Confirm Interest</para>
        /// </summary>
        [AttributeLogicalName("confirminterest")]
        public bool? ConfirmInterest {
            get {
                return GetAttributeValue<bool?>("confirminterest");
            }
            set {
                SetAttributeValue("confirminterest", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact associated with the opportunity.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>lk_opportunitybase_createdby</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>lk_opportunity_createdonbehalfby</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type notes about the company or organization associated with the opportunity.</para>
        /// <para>Display Name: Current Situation</para>
        /// </summary>
        [AttributeLogicalName("currentsituation")]
        public string CurrentSituation {
            get {
                return GetAttributeValue<string>("currentsituation");
            }
            set {
                SetAttributeValue("currentsituation", value);
            }
        }
        
        /// <summary>
        /// <para>opportunity_customer_contacts</para>
        /// <para>Display Name: Potential Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Type some notes about the customer's requirements, to help the sales team identify products and services that could meet their requirements.</para>
        /// <para>Display Name: Customer Need</para>
        /// </summary>
        [AttributeLogicalName("customerneed")]
        public string CustomerNeed {
            get {
                return GetAttributeValue<string>("customerneed");
            }
            set {
                SetAttributeValue("customerneed", value);
            }
        }
        
        /// <summary>
        /// <para>Type notes about the customer's pain points to help the sales team identify products and services that could address these pain points.</para>
        /// <para>Display Name: Customer Pain Points</para>
        /// </summary>
        [AttributeLogicalName("customerpainpoints")]
        public string CustomerPainPoints {
            get {
                return GetAttributeValue<string>("customerpainpoints");
            }
            set {
                SetAttributeValue("customerpainpoints", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether your notes include information about who makes the purchase decisions at the lead's company.</para>
        /// <para>Display Name: Decision Maker?</para>
        /// </summary>
        [AttributeLogicalName("decisionmaker")]
        public bool? DecisionMaker {
            get {
                return GetAttributeValue<bool?>("decisionmaker");
            }
            set {
                SetAttributeValue("decisionmaker", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the opportunity, such as possible products to sell or past purchases from the customer.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether a proposal has been developed for the opportunity.</para>
        /// <para>Display Name: Develop Proposal</para>
        /// </summary>
        [AttributeLogicalName("developproposal")]
        public bool? DevelopProposal {
            get {
                return GetAttributeValue<bool?>("developproposal");
            }
            set {
                SetAttributeValue("developproposal", value);
            }
        }
        
        /// <summary>
        /// <para>Type the discount amount for the opportunity if the customer is eligible for special savings.</para>
        /// <para>Display Name: Opportunity Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("discountamount")]
        public decimal? DiscountAmount {
            get {
                return GetMoneyValue("discountamount");
            }
            set {
                SetMoneyValue("discountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Opportunity Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Opportunity Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("discountamount_base")]
        public decimal? DiscountAmount_Base {
            get {
                return GetMoneyValue("discountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type the discount rate that should be applied to the Product Totals field to include additional savings for the customer in the opportunity.</para>
        /// <para>Display Name: Opportunity Discount (%)</para>
        /// </summary>
        [AttributeLogicalName("discountpercentage")]
        public decimal? DiscountPercentage {
            get {
                return GetAttributeValue<decimal?>("discountpercentage");
            }
            set {
                SetAttributeValue("discountpercentage", value);
            }
        }
        
        /// <summary>
        /// <para>The primary email address for the entity.</para>
        /// <para>Display Name: Email Address</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EmailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected closing date of the opportunity to help make accurate revenue forecasts.</para>
        /// <para>Display Name: Est. Close Date</para>
        /// </summary>
        [AttributeLogicalName("estimatedclosedate")]
        public DateTime? EstimatedCloseDate {
            get {
                return GetAttributeValue<DateTime?>("estimatedclosedate");
            }
            set {
                SetAttributeValue("estimatedclosedate", value);
            }
        }
        
        /// <summary>
        /// <para>Type the estimated revenue amount to indicate the potential sale or value of the opportunity for revenue forecasting. This field can be either system-populated or editable based on the selection in the Revenue field.</para>
        /// <para>Display Name: Est. Revenue</para>
        /// </summary>
        [AttributeLogicalName("estimatedvalue")]
        public decimal? EstimatedValue {
            get {
                return GetMoneyValue("estimatedvalue");
            }
            set {
                SetMoneyValue("estimatedvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Actual Revenue field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Est. Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("estimatedvalue_base")]
        public decimal? EstimatedValue_Base {
            get {
                return GetMoneyValue("estimatedvalue_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the fit between the lead's requirements and your offerings was evaluated.</para>
        /// <para>Display Name: Evaluate Fit</para>
        /// </summary>
        [AttributeLogicalName("evaluatefit")]
        public bool? EvaluateFit {
            get {
                return GetAttributeValue<bool?>("evaluatefit");
            }
            set {
                SetAttributeValue("evaluatefit", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Choose whether the sales team has recorded detailed notes on the proposals and the account's responses.</para>
        /// <para>Display Name: File Debrief</para>
        /// </summary>
        [AttributeLogicalName("filedebrief")]
        public bool? FileDebrief {
            get {
                return GetAttributeValue<bool?>("filedebrief");
            }
            set {
                SetAttributeValue("filedebrief", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time when the final decision of the opportunity was made.</para>
        /// <para>Display Name: Final Decision Date</para>
        /// </summary>
        [AttributeLogicalName("finaldecisiondate")]
        public DateTime? FinalDecisionDate {
            get {
                return GetAttributeValue<DateTime?>("finaldecisiondate");
            }
            set {
                SetAttributeValue("finaldecisiondate", value);
            }
        }
        
        /// <summary>
        /// <para>Type the cost of freight or shipping for the products included in the opportunity for use in calculating the Total Amount field.</para>
        /// <para>Display Name: Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("freightamount")]
        public decimal? FreightAmount {
            get {
                return GetMoneyValue("freightamount");
            }
            set {
                SetMoneyValue("freightamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("freightamount_base")]
        public decimal? FreightAmount_Base {
            get {
                return GetMoneyValue("freightamount_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether information about competitors is included.</para>
        /// <para>Display Name: Identify Competitors</para>
        /// </summary>
        [AttributeLogicalName("identifycompetitors")]
        public bool? IdentifyCompetitors {
            get {
                return GetAttributeValue<bool?>("identifycompetitors");
            }
            set {
                SetAttributeValue("identifycompetitors", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the customer contacts for this opportunity have been identified.</para>
        /// <para>Display Name: Identify Customer Contacts</para>
        /// </summary>
        [AttributeLogicalName("identifycustomercontacts")]
        public bool? IdentifyCustomerContacts {
            get {
                return GetAttributeValue<bool?>("identifycustomercontacts");
            }
            set {
                SetAttributeValue("identifycustomercontacts", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether you have recorded who will pursue the opportunity.</para>
        /// <para>Display Name: Identify Sales Team</para>
        /// </summary>
        [AttributeLogicalName("identifypursuitteam")]
        public bool? IdentifyPursuitTeam {
            get {
                return GetAttributeValue<bool?>("identifypursuitteam");
            }
            set {
                SetAttributeValue("identifypursuitteam", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether someone from the sales team contacted this lead earlier.</para>
        /// <para>Display Name: Initial Communication</para>
        /// </summary>
        [AttributeLogicalName("initialcommunication")]
        public initialcommunication? InitialCommunication {
            get {
                return GetOptionSetValue<initialcommunication>("initialcommunication");
            }
            set {
                SetOptionSetValue("initialcommunication", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the estimated revenue for the opportunity is calculated automatically based on the products entered or entered manually by a user.</para>
        /// <para>Display Name: Revenue</para>
        /// </summary>
        [AttributeLogicalName("isrevenuesystemcalculated")]
        public bool? IsRevenueSystemCalculated {
            get {
                return GetAttributeValue<bool?>("isrevenuesystemcalculated");
            }
            set {
                SetAttributeValue("isrevenuesystemcalculated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>lk_opportunitybase_modifiedby</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>lk_opportunity_modifiedonbehalfby</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type a subject or descriptive name, such as the expected order or company name, for the opportunity.</para>
        /// <para>Display Name: Topic</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Choose how high the level of need is for the lead's company.</para>
        /// <para>Display Name: Need</para>
        /// </summary>
        [AttributeLogicalName("need")]
        public need? Need {
            get {
                return GetOptionSetValue<need>("need");
            }
            set {
                SetOptionSetValue("need", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the opportunity was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Select the expected value or priority of the opportunity based on revenue, customer status, or closing probability.</para>
        /// <para>Display Name: Rating</para>
        /// </summary>
        [AttributeLogicalName("opportunityratingcode")]
        public Opportunity_OpportunityRatingCode? OpportunityRatingCode {
            get {
                return GetOptionSetValue<Opportunity_OpportunityRatingCode>("opportunityratingcode");
            }
            set {
                SetOptionSetValue("opportunityratingcode", value);
            }
        }
        
        /// <summary>
        /// <para>opportunity_originating_lead</para>
        /// <para>Display Name: Originating Lead</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference OriginatingLeadId {
            get {
                return GetAttributeValue<EntityReference>("originatingleadid");
            }
            set {
                SetAttributeValue("originatingleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>owner_opportunitys</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>business_unit_opportunities</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>team_opportunities</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>opportunity_owning_user</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>opportunity_parent_account</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference ParentAccountId {
            get {
                return GetAttributeValue<EntityReference>("parentaccountid");
            }
            set {
                SetAttributeValue("parentaccountid", value);
            }
        }
        
        /// <summary>
        /// <para>opportunity_parent_contact</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("parentcontactid")]
        public EntityReference ParentContactId {
            get {
                return GetAttributeValue<EntityReference>("parentcontactid");
            }
            set {
                SetAttributeValue("parentcontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the opportunity participates in workflow rules.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the final proposal has been presented to the account.</para>
        /// <para>Display Name: Present Final Proposal</para>
        /// </summary>
        [AttributeLogicalName("presentfinalproposal")]
        public bool? PresentFinalProposal {
            get {
                return GetAttributeValue<bool?>("presentfinalproposal");
            }
            set {
                SetAttributeValue("presentfinalproposal", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether a proposal for the opportunity has been presented to the account.</para>
        /// <para>Display Name: Presented Proposal</para>
        /// </summary>
        [AttributeLogicalName("presentproposal")]
        public bool? PresentProposal {
            get {
                return GetAttributeValue<bool?>("presentproposal");
            }
            set {
                SetAttributeValue("presentproposal", value);
            }
        }
        
        /// <summary>
        /// <para>price_level_opportunties</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("pricelevelid")]
        public EntityReference PriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("pricelevelid");
            }
            set {
                SetAttributeValue("pricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Pricing error for the opportunity.</para>
        /// <para>Display Name: Pricing Error </para>
        /// </summary>
        [AttributeLogicalName("pricingerrorcode")]
        public qooi_pricingerrorcode? PricingErrorCode {
            get {
                return GetOptionSetValue<qooi_pricingerrorcode>("pricingerrorcode");
            }
            set {
                SetOptionSetValue("pricingerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Opportunity_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Opportunity_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type notes about the proposed solution for the opportunity.</para>
        /// <para>Display Name: Proposed Solution</para>
        /// </summary>
        [AttributeLogicalName("proposedsolution")]
        public string ProposedSolution {
            get {
                return GetAttributeValue<string>("proposedsolution");
            }
            set {
                SetAttributeValue("proposedsolution", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether an individual or a committee will be involved in the  purchase process for the lead.</para>
        /// <para>Display Name: Purchase Process</para>
        /// </summary>
        [AttributeLogicalName("purchaseprocess")]
        public purchaseprocess? PurchaseProcess {
            get {
                return GetOptionSetValue<purchaseprocess>("purchaseprocess");
            }
            set {
                SetOptionSetValue("purchaseprocess", value);
            }
        }
        
        /// <summary>
        /// <para>Choose how long the lead will likely take to make the purchase.</para>
        /// <para>Display Name: Purchase Timeframe</para>
        /// </summary>
        [AttributeLogicalName("purchasetimeframe")]
        public purchasetimeframe? PurchaseTimeframe {
            get {
                return GetOptionSetValue<purchasetimeframe>("purchasetimeframe");
            }
            set {
                SetOptionSetValue("purchasetimeframe", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the decision about pursuing the opportunity has been made.</para>
        /// <para>Display Name: Decide Go/No-Go</para>
        /// </summary>
        [AttributeLogicalName("pursuitdecision")]
        public bool? PursuitDecision {
            get {
                return GetAttributeValue<bool?>("pursuitdecision");
            }
            set {
                SetAttributeValue("pursuitdecision", value);
            }
        }
        
        /// <summary>
        /// <para>Type comments about the qualification or scoring of the lead.</para>
        /// <para>Display Name: Qualification Comments</para>
        /// </summary>
        [AttributeLogicalName("qualificationcomments")]
        public string QualificationComments {
            get {
                return GetAttributeValue<string>("qualificationcomments");
            }
            set {
                SetAttributeValue("qualificationcomments", value);
            }
        }
        
        /// <summary>
        /// <para>Type comments about the quotes associated with the opportunity.</para>
        /// <para>Display Name: Quote Comments</para>
        /// </summary>
        [AttributeLogicalName("quotecomments")]
        public string QuoteComments {
            get {
                return GetAttributeValue<string>("quotecomments");
            }
            set {
                SetAttributeValue("quotecomments", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether the proposal feedback has been captured and resolved for the opportunity.</para>
        /// <para>Display Name: Feedback Resolved</para>
        /// </summary>
        [AttributeLogicalName("resolvefeedback")]
        public bool? ResolveFeedback {
            get {
                return GetAttributeValue<bool?>("resolvefeedback");
            }
            set {
                SetAttributeValue("resolvefeedback", value);
            }
        }
        
        /// <summary>
        /// <para>manualsla_opportunity</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>sla_opportunity</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Select the sales stage of this opportunity to aid the sales team in their efforts to win this opportunity.</para>
        /// <para>Display Name: Sales Stage</para>
        /// </summary>
        [AttributeLogicalName("salesstage")]
        public opportunity_salesstage? SalesStage {
            get {
                return GetOptionSetValue<opportunity_salesstage>("salesstage");
            }
            set {
                SetOptionSetValue("salesstage", value);
            }
        }
        
        /// <summary>
        /// <para>Select the sales process stage for the opportunity to indicate the probability of closing the opportunity.</para>
        /// <para>Display Name: Process Code</para>
        /// </summary>
        [AttributeLogicalName("salesstagecode")]
        public Opportunity_SalesStageCode? SalesStageCode {
            get {
                return GetOptionSetValue<Opportunity_SalesStageCode>("salesstagecode");
            }
            set {
                SetOptionSetValue("salesstagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the prospecting follow-up meeting with the lead.</para>
        /// <para>Display Name: Scheduled Follow up (Prospect)</para>
        /// </summary>
        [AttributeLogicalName("schedulefollowup_prospect")]
        public DateTime? ScheduleFollowup_Prospect {
            get {
                return GetAttributeValue<DateTime?>("schedulefollowup_prospect");
            }
            set {
                SetAttributeValue("schedulefollowup_prospect", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the qualifying follow-up meeting with the lead.</para>
        /// <para>Display Name: Scheduled Follow up (Qualify)</para>
        /// </summary>
        [AttributeLogicalName("schedulefollowup_qualify")]
        public DateTime? ScheduleFollowup_Qualify {
            get {
                return GetAttributeValue<DateTime?>("schedulefollowup_qualify");
            }
            set {
                SetAttributeValue("schedulefollowup_qualify", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the proposal meeting for the opportunity.</para>
        /// <para>Display Name: Schedule Proposal Meeting</para>
        /// </summary>
        [AttributeLogicalName("scheduleproposalmeeting")]
        public DateTime? ScheduleProposalMeeting {
            get {
                return GetAttributeValue<DateTime?>("scheduleproposalmeeting");
            }
            set {
                SetAttributeValue("scheduleproposalmeeting", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether a thank you note has been sent to the account for considering the proposal.</para>
        /// <para>Display Name: Send Thank You Note</para>
        /// </summary>
        [AttributeLogicalName("sendthankyounote")]
        public bool? SendThankYouNote {
            get {
                return GetAttributeValue<bool?>("sendthankyounote");
            }
            set {
                SetAttributeValue("sendthankyounote", value);
            }
        }
        
        /// <summary>
        /// <para>Skip Price Calculation (For Internal Use)</para>
        /// <para>Display Name: Skip Price Calculation</para>
        /// </summary>
        [AttributeLogicalName("skippricecalculation")]
        public qooi_skippricecalculation? SkipPriceCalculation {
            get {
                return GetOptionSetValue<qooi_skippricecalculation>("skippricecalculation");
            }
            set {
                SetOptionSetValue("skippricecalculation", value);
            }
        }
        
        /// <summary>
        /// <para>processstage_opportunity</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the opportunity is open, won, or lost. Won and lost opportunities are read-only and can't be edited until they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OpportunityState? StateCode {
            get {
                return GetOptionSetValue<OpportunityState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the opportunity's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Opportunity_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Opportunity_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the workflow step.</para>
        /// <para>Display Name: Step</para>
        /// </summary>
        [AttributeLogicalName("stepid")]
        public Guid? StepId {
            get {
                return GetAttributeValue<Guid?>("stepid");
            }
            set {
                SetAttributeValue("stepid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the current phase in the sales pipeline for the opportunity. This is updated by a workflow.</para>
        /// <para>Display Name: Pipeline Phase</para>
        /// </summary>
        [AttributeLogicalName("stepname")]
        public string StepName {
            get {
                return GetAttributeValue<string>("stepname");
            }
            set {
                SetAttributeValue("stepname", value);
            }
        }
        
        /// <summary>
        /// <para>Number of users or conversations followed the record</para>
        /// <para>Display Name: TeamsFollowed</para>
        /// </summary>
        [AttributeLogicalName("teamsfollowed")]
        public int? TeamsFollowed {
            get {
                return GetAttributeValue<int?>("teamsfollowed");
            }
            set {
                SetAttributeValue("teamsfollowed", value);
            }
        }
        
        /// <summary>
        /// <para>Select when the opportunity is likely to be closed.</para>
        /// <para>Display Name: Timeline</para>
        /// </summary>
        [AttributeLogicalName("timeline")]
        public Opportunity_TimeLine? TimeLine {
            get {
                return GetOptionSetValue<Opportunity_TimeLine>("timeline");
            }
            set {
                SetOptionSetValue("timeline", value);
            }
        }
        
        /// <summary>
        /// <para>Total time spent for emails (read and write) and meetings by me in relation to the opportunity record.</para>
        /// <para>Display Name: Time Spent by me</para>
        /// </summary>
        [AttributeLogicalName("timespentbymeonemailandmeetings")]
        public string TimeSpentByMeOnEmailAndMeetings {
            get {
                return GetAttributeValue<string>("timespentbymeonemailandmeetings");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the opportunity.</para>
        /// <para>Display Name: Total Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamount")]
        public decimal? TotalAmount {
            get {
                return GetMoneyValue("totalamount");
            }
            set {
                SetMoneyValue("totalamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total product amount for the opportunity, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount of the opportunity.</para>
        /// <para>Display Name: Total Pre-Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight")]
        public decimal? TotalAmountLessFreight {
            get {
                return GetMoneyValue("totalamountlessfreight");
            }
            set {
                SetMoneyValue("totalamountlessfreight", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Pre-Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Pre-Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight_base")]
        public decimal? TotalAmountLessFreight_Base {
            get {
                return GetMoneyValue("totalamountlessfreight_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamount_base")]
        public decimal? TotalAmount_Base {
            get {
                return GetMoneyValue("totalamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the total discount amount, based on the discount price and rate entered on the opportunity.</para>
        /// <para>Display Name: Total Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount")]
        public decimal? TotalDiscountAmount {
            get {
                return GetMoneyValue("totaldiscountamount");
            }
            set {
                SetMoneyValue("totaldiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount_base")]
        public decimal? TotalDiscountAmount_Base {
            get {
                return GetMoneyValue("totaldiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of all existing and write-in products included on the opportunity, based on the specified price list and quantities.</para>
        /// <para>Display Name: Total Detail Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount")]
        public decimal? TotalLineItemAmount {
            get {
                return GetMoneyValue("totallineitemamount");
            }
            set {
                SetMoneyValue("totallineitemamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Detail Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Detail Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount_base")]
        public decimal? TotalLineItemAmount_Base {
            get {
                return GetMoneyValue("totallineitemamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Manual Discount amounts specified on all products included in the opportunity. This value is reflected in the Total Detail Amount field on the opportunity and is added to any discount amount or rate specified on the opportunity.</para>
        /// <para>Display Name: Total Line Item Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount")]
        public decimal? TotalLineItemDiscountAmount {
            get {
                return GetMoneyValue("totallineitemdiscountamount");
            }
            set {
                SetMoneyValue("totallineitemdiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Line Item Discount Amount field to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Line Item Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount_base")]
        public decimal? TotalLineItemDiscountAmount_Base {
            get {
                return GetMoneyValue("totallineitemdiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Tax amounts specified on all products included in the opportunity, included in the Total Amount field calculation for the opportunity.</para>
        /// <para>Display Name: Total Tax</para>
        /// </summary>
        [AttributeLogicalName("totaltax")]
        public decimal? TotalTax {
            get {
                return GetMoneyValue("totaltax");
            }
            set {
                SetMoneyValue("totaltax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Tax field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Tax (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaltax_base")]
        public decimal? TotalTax_Base {
            get {
                return GetMoneyValue("totaltax_base");
            }
        }
        
        /// <summary>
        /// <para>transactioncurrency_opportunity</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the opportunity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Opportunity Grade</para>
        /// </summary>
        [AttributeLogicalName("msdyn_opportunitygrade")]
        public msdyn_opportunitygradeoptset? msdyn_OpportunityGrade {
            get {
                return GetOptionSetValue<msdyn_opportunitygradeoptset>("msdyn_opportunitygrade");
            }
            set {
                SetOptionSetValue("msdyn_opportunitygrade", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Opportunity Score</para>
        /// </summary>
        [AttributeLogicalName("msdyn_opportunityscore")]
        public int? msdyn_OpportunityScore {
            get {
                return GetAttributeValue<int?>("msdyn_opportunityscore");
            }
            set {
                SetAttributeValue("msdyn_opportunityscore", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Opportunity Score Trend</para>
        /// </summary>
        [AttributeLogicalName("msdyn_opportunityscoretrend")]
        public msdyn_opportunityscoretrendoptset? msdyn_OpportunityScoreTrend {
            get {
                return GetOptionSetValue<msdyn_opportunityscoretrendoptset>("msdyn_opportunityscoretrend");
            }
            set {
                SetOptionSetValue("msdyn_opportunityscoretrend", value);
            }
        }
        
        /// <summary>
        /// <para>Internal use only.</para>
        /// <para>Display Name: Order Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_ordertype")]
        public Opportunity_msdyn_OrderType? msdyn_OrderType {
            get {
                return GetOptionSetValue<Opportunity_msdyn_OrderType>("msdyn_ordertype");
            }
            set {
                SetOptionSetValue("msdyn_ordertype", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Score History</para>
        /// </summary>
        [AttributeLogicalName("msdyn_scorehistory")]
        public string msdyn_ScoreHistory {
            get {
                return GetAttributeValue<string>("msdyn_scorehistory");
            }
            set {
                SetAttributeValue("msdyn_scorehistory", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Score Reasons</para>
        /// </summary>
        [AttributeLogicalName("msdyn_scorereasons")]
        public string msdyn_ScoreReasons {
            get {
                return GetAttributeValue<string>("msdyn_scorereasons");
            }
            set {
                SetAttributeValue("msdyn_scorereasons", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Work Order Type associated with Opportunity.</para>
        /// <para>Display Name: Work Order Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_workordertype")]
        public EntityReference msdyn_WorkOrderType {
            get {
                return GetAttributeValue<EntityReference>("msdyn_workordertype");
            }
            set {
                SetAttributeValue("msdyn_workordertype", value);
            }
        }
        
        /// <summary>
        /// <para>Categories used for forecasting.</para>
        /// <para>Display Name: Forecast category</para>
        /// </summary>
        [AttributeLogicalName("msdyn_forecastcategory")]
        public Opportunity_msdyn_forecastcategory? msdyn_forecastcategory {
            get {
                return GetOptionSetValue<Opportunity_msdyn_forecastcategory>("msdyn_forecastcategory");
            }
            set {
                SetOptionSetValue("msdyn_forecastcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Describes whether opportunity is opted out or not</para>
        /// <para>Display Name: GDPR Optout</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gdproptout")]
        public bool? msdyn_gdproptout {
            get {
                return GetAttributeValue<bool?>("msdyn_gdproptout");
            }
            set {
                SetAttributeValue("msdyn_gdproptout", value);
            }
        }
        
        /// <summary>
        /// <para>Maps to opportunity KPI records</para>
        /// <para>Display Name: KPI</para>
        /// </summary>
        [AttributeLogicalName("msdyn_opportunitykpiid")]
        public EntityReference msdyn_opportunitykpiid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_opportunitykpiid");
            }
            set {
                SetAttributeValue("msdyn_opportunitykpiid", value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_ActivityPointers")]
        public IEnumerable<ActivityPointer> Opportunity_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Opportunity_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Opportunity_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_Emails")]
        public IEnumerable<Email> Opportunity_Emails {
            get {
                return GetRelatedEntities<Email>("Opportunity_Emails", null);
            }
            set {
                SetRelatedEntities("Opportunity_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_OpportunityClose")]
        public IEnumerable<OpportunityClose> Opportunity_OpportunityClose {
            get {
                return GetRelatedEntities<OpportunityClose>("Opportunity_OpportunityClose", null);
            }
            set {
                SetRelatedEntities("Opportunity_OpportunityClose", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_Tasks")]
        public IEnumerable<Task> Opportunity_Tasks {
            get {
                return GetRelatedEntities<Task>("Opportunity_Tasks", null);
            }
            set {
                SetRelatedEntities("Opportunity_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_opportunities")]
        public BusinessUnit business_unit_opportunities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_opportunities", null);
            }
            set {
                SetRelatedEntity("business_unit_opportunities", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_qualifying_opportunity")]
        public IEnumerable<Lead> lead_qualifying_opportunity {
            get {
                return GetRelatedEntities<Lead>("lead_qualifying_opportunity", null);
            }
            set {
                SetRelatedEntities("lead_qualifying_opportunity", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_opportunity_createdonbehalfby")]
        public SystemUser lk_opportunity_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunity_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_opportunity_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_opportunity_modifiedonbehalfby")]
        public SystemUser lk_opportunity_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunity_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_opportunity_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_opportunitybase_createdby")]
        public SystemUser lk_opportunitybase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunitybase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_opportunitybase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_opportunitybase_modifiedby")]
        public SystemUser lk_opportunitybase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunitybase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_opportunitybase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_OpportunityCloses")]
        public IEnumerable<OpportunityClose> opportunity_OpportunityCloses {
            get {
                return GetRelatedEntities<OpportunityClose>("opportunity_OpportunityCloses", null);
            }
            set {
                SetRelatedEntities("opportunity_OpportunityCloses", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_Teams")]
        public IEnumerable<Team> opportunity_Teams {
            get {
                return GetRelatedEntities<Team>("opportunity_Teams", null);
            }
            set {
                SetRelatedEntities("opportunity_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_activity_parties")]
        public IEnumerable<ActivityParty> opportunity_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("opportunity_activity_parties", null);
            }
            set {
                SetRelatedEntities("opportunity_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("opportunity_customer_accounts")]
        public Account opportunity_customer_accounts {
            get {
                return GetRelatedEntity<Account>("opportunity_customer_accounts", null);
            }
            set {
                SetRelatedEntity("opportunity_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("opportunity_customer_contacts")]
        public Contact opportunity_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("opportunity_customer_contacts", null);
            }
            set {
                SetRelatedEntity("opportunity_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_invoices")]
        public IEnumerable<Invoice> opportunity_invoices {
            get {
                return GetRelatedEntities<Invoice>("opportunity_invoices", null);
            }
            set {
                SetRelatedEntities("opportunity_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("originatingleadid")]
        [RelationshipSchemaName("opportunity_originating_lead")]
        public Lead opportunity_originating_lead {
            get {
                return GetRelatedEntity<Lead>("opportunity_originating_lead", null);
            }
            set {
                SetRelatedEntity("opportunity_originating_lead", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("opportunity_owning_user")]
        public SystemUser opportunity_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("opportunity_owning_user", null);
            }
            set {
                SetRelatedEntity("opportunity_owning_user", null, value);
            }
        }
        
        [AttributeLogicalName("parentaccountid")]
        [RelationshipSchemaName("opportunity_parent_account")]
        public Account opportunity_parent_account {
            get {
                return GetRelatedEntity<Account>("opportunity_parent_account", null);
            }
            set {
                SetRelatedEntity("opportunity_parent_account", null, value);
            }
        }
        
        [AttributeLogicalName("parentcontactid")]
        [RelationshipSchemaName("opportunity_parent_contact")]
        public Contact opportunity_parent_contact {
            get {
                return GetRelatedEntity<Contact>("opportunity_parent_contact", null);
            }
            set {
                SetRelatedEntity("opportunity_parent_contact", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_opportunities")]
        public Team team_opportunities {
            get {
                return GetRelatedEntity<Team>("team_opportunities", null);
            }
            set {
                SetRelatedEntity("team_opportunities", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_opportunity")]
        public TransactionCurrency transactioncurrency_opportunity {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_opportunity", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_opportunity", null, value);
            }
        }
        
        public static Opportunity Retrieve(IOrganizationService service, Guid id, params Expression<Func<Opportunity,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Activity that is created automatically when an opportunity is closed, containing information such as the description of the closing and actual revenue.</para>
    /// <para>Display Name: Opportunity Close</para>
    /// </summary>
    [EntityLogicalName("opportunityclose")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class OpportunityClose : ExtendedEntity<OpportunityCloseState, OpportunityClose_StatusCode> {
        
        public const string EntityLogicalName = "opportunityclose";
        
        public const int EntityTypeCode = 4208;
        
        public OpportunityClose() : 
                base(EntityLogicalName) {
        }
        
        public OpportunityClose(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>activity_pointer_opportunity_close</para>
        /// <para>Display Name: Opportunity Close</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Additional information provided by the external application as JSON. For internal use only.</para>
        /// <para>Display Name: Activity Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Actual duration of the opportunity close activity in minutes.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Actual end time of the opportunity close activity.</para>
        /// <para>Display Name: Closed On</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Actual revenue generated for the opportunity.</para>
        /// <para>Display Name: Actual Revenue</para>
        /// </summary>
        [AttributeLogicalName("actualrevenue")]
        public decimal? ActualRevenue {
            get {
                return GetMoneyValue("actualrevenue");
            }
            set {
                SetMoneyValue("actualrevenue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Actual Revenue field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Actual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("actualrevenue_base")]
        public decimal? ActualRevenue_Base {
            get {
                return GetMoneyValue("actualrevenue_base");
            }
        }
        
        /// <summary>
        /// <para>Actual start time of the opportunity close activity.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Blind Carbon-copy (bcc) recipients of the activity.</para>
        /// <para>Display Name: BCC</para>
        /// </summary>
        [AttributeLogicalName("bcc")]
        public IEnumerable<ActivityParty> Bcc {
            get {
                return GetEntityCollection<ActivityParty>("bcc");
            }
            set {
                SetEntityCollection("bcc", value);
            }
        }
        
        /// <summary>
        /// <para>Category of the opportunity close activity.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Carbon-copy (cc) recipients of the activity.</para>
        /// <para>Display Name: CC</para>
        /// </summary>
        [AttributeLogicalName("cc")]
        public IEnumerable<ActivityParty> Cc {
            get {
                return GetEntityCollection<ActivityParty>("cc");
            }
            set {
                SetEntityCollection("cc", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.</para>
        /// <para>Display Name: Social Channel</para>
        /// </summary>
        [AttributeLogicalName("community")]
        public socialprofile_community? Community {
            get {
                return GetOptionSetValue<socialprofile_community>("community");
            }
            set {
                SetOptionSetValue("community", value);
            }
        }
        
        /// <summary>
        /// <para>competitor_opportunity_activities</para>
        /// <para>Display Name: Competitor</para>
        /// </summary>
        [AttributeLogicalName("competitorid")]
        public EntityReference CompetitorId {
            get {
                return GetAttributeValue<EntityReference>("competitorid");
            }
            set {
                SetAttributeValue("competitorid", value);
            }
        }
        
        /// <summary>
        /// <para>lk_opportunityclose_createdby</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>lk_externalparty_opportunityclose_createdby</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the opportunity close activity was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>lk_opportunityclose_createdonbehalfby</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Customer with which the activity is associated.</para>
        /// <para>Display Name: Customers</para>
        /// </summary>
        [AttributeLogicalName("customers")]
        public IEnumerable<ActivityParty> Customers {
            get {
                return GetEntityCollection<ActivityParty>("customers");
            }
            set {
                SetEntityCollection("customers", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the delivery of the activity was last attempted.</para>
        /// <para>Display Name: Date Delivery Last Attempted</para>
        /// </summary>
        [AttributeLogicalName("deliverylastattemptedon")]
        public DateTime? DeliveryLastAttemptedOn {
            get {
                return GetAttributeValue<DateTime?>("deliverylastattemptedon");
            }
        }
        
        /// <summary>
        /// <para>Priority of delivery of the activity to the email server.</para>
        /// <para>Display Name: Delivery Priority</para>
        /// </summary>
        [AttributeLogicalName("deliveryprioritycode")]
        public activitypointer_deliveryprioritycode? DeliveryPriorityCode {
            get {
                return GetOptionSetValue<activitypointer_deliveryprioritycode>("deliveryprioritycode");
            }
            set {
                SetOptionSetValue("deliveryprioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Activity that is created automatically when an opportunity is closed, containing information such as the description of the closing and actual revenue.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>The message id of activity which is returned from Exchange Server.</para>
        /// <para>Display Name: Exchange Item ID</para>
        /// </summary>
        [AttributeLogicalName("exchangeitemid")]
        public string ExchangeItemId {
            get {
                return GetAttributeValue<string>("exchangeitemid");
            }
            set {
                SetAttributeValue("exchangeitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the web link of Activity of type email.</para>
        /// <para>Display Name: Exchange WebLink</para>
        /// </summary>
        [AttributeLogicalName("exchangeweblink")]
        public string ExchangeWebLink {
            get {
                return GetAttributeValue<string>("exchangeweblink");
            }
            set {
                SetAttributeValue("exchangeweblink", value);
            }
        }
        
        /// <summary>
        /// <para>Person who the activity is from.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Recurring Instance Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public OpportunityClose_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<OpportunityClose_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>Information about whether the opportunity close activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("ismapiprivate")]
        public bool? IsMapiPrivate {
            get {
                return GetAttributeValue<bool?>("ismapiprivate");
            }
            set {
                SetAttributeValue("ismapiprivate", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Information that specifies if the opportunity close activity was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Left the voice mail</para>
        /// <para>Display Name: Left Voice Mail</para>
        /// </summary>
        [AttributeLogicalName("leftvoicemail")]
        public bool? LeftVoiceMail {
            get {
                return GetAttributeValue<bool?>("leftvoicemail");
            }
            set {
                SetAttributeValue("leftvoicemail", value);
            }
        }
        
        /// <summary>
        /// <para>lk_opportunityclose_modifiedby</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>lk_externalparty_opportunityclose_modifiedby</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the opportunity close activity was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>lk_opportunityclose_modifiedonbehalfby</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Opportunity_OpportunityClose</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public EntityReference OpportunityId {
            get {
                return GetAttributeValue<EntityReference>("opportunityid");
            }
            set {
                SetAttributeValue("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the opportunity.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("opportunitystatecode")]
        public OpportunityClose_OpportunityStateCode? OpportunityStateCode {
            get {
                return GetOptionSetValue<OpportunityClose_OpportunityStateCode>("opportunitystatecode");
            }
            set {
                SetOptionSetValue("opportunitystatecode", value);
            }
        }
        
        /// <summary>
        /// <para>Status reason of the opportunity.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("opportunitystatuscode")]
        public OpportunityClose_OpportunityStatusCode? OpportunityStatusCode {
            get {
                return GetOptionSetValue<OpportunityClose_OpportunityStatusCode>("opportunitystatuscode");
            }
            set {
                SetOptionSetValue("opportunitystatuscode", value);
            }
        }
        
        /// <summary>
        /// <para>List of optional attendees for the activity.</para>
        /// <para>Display Name: Optional Attendees</para>
        /// </summary>
        [AttributeLogicalName("optionalattendees")]
        public IEnumerable<ActivityParty> OptionalAttendees {
            get {
                return GetEntityCollection<ActivityParty>("optionalattendees");
            }
            set {
                SetEntityCollection("optionalattendees", value);
            }
        }
        
        /// <summary>
        /// <para>Person who organized the activity.</para>
        /// <para>Display Name: Organizer</para>
        /// </summary>
        [AttributeLogicalName("organizer")]
        public IEnumerable<ActivityParty> Organizer {
            get {
                return GetEntityCollection<ActivityParty>("organizer");
            }
            set {
                SetEntityCollection("organizer", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the opportunity close activity.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>business_unit_opportunity_close_activities</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>team_opportunityclose</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>user_opportunityclose</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Outsource vendor with which activity is associated.</para>
        /// <para>Display Name: Outsource Vendors</para>
        /// </summary>
        [AttributeLogicalName("partners")]
        public IEnumerable<ActivityParty> Partners {
            get {
                return GetEntityCollection<ActivityParty>("partners");
            }
            set {
                SetEntityCollection("partners", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Delay activity processing until</para>
        /// </summary>
        [AttributeLogicalName("postponeactivityprocessinguntil")]
        public DateTime? PostponeActivityProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeactivityprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Priority of the activity.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public OpportunityClose_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<OpportunityClose_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>List of required attendees for the activity.</para>
        /// <para>Display Name: Required Attendees</para>
        /// </summary>
        [AttributeLogicalName("requiredattendees")]
        public IEnumerable<ActivityParty> RequiredAttendees {
            get {
                return GetEntityCollection<ActivityParty>("requiredattendees");
            }
            set {
                SetEntityCollection("requiredattendees", value);
            }
        }
        
        /// <summary>
        /// <para>Users or facility/equipment that are required for the activity.</para>
        /// <para>Display Name: Resources</para>
        /// </summary>
        [AttributeLogicalName("resources")]
        public IEnumerable<ActivityParty> Resources {
            get {
                return GetEntityCollection<ActivityParty>("resources");
            }
            set {
                SetEntityCollection("resources", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the case record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the opportunity close activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the opportunity close activity.</para>
        /// <para>Display Name: Scheduled End</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the opportunity close activity.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the mailbox associated with the sender of the email message.</para>
        /// <para>Display Name: Sender's Mailbox</para>
        /// </summary>
        [AttributeLogicalName("sendermailboxid")]
        public EntityReference SenderMailboxId {
            get {
                return GetAttributeValue<EntityReference>("sendermailboxid");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was sent.</para>
        /// <para>Display Name: Date Sent</para>
        /// </summary>
        [AttributeLogicalName("senton")]
        public DateTime? SentOn {
            get {
                return GetAttributeValue<DateTime?>("senton");
            }
        }
        
        /// <summary>
        /// <para>Uniqueidentifier specifying the id of recurring series of an instance.</para>
        /// <para>Display Name: Series Id</para>
        /// </summary>
        [AttributeLogicalName("seriesid")]
        public Guid? SeriesId {
            get {
                return GetAttributeValue<Guid?>("seriesid");
            }
        }
        
        /// <summary>
        /// <para>service_opportunityclose</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>Display Name: Sort Date</para>
        /// </summary>
        [AttributeLogicalName("sortdate")]
        public DateTime? SortDate {
            get {
                return GetAttributeValue<DateTime?>("sortdate");
            }
            set {
                SetAttributeValue("sortdate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the opportunity close activity is open, completed, or canceled.  By default, opportunity close activities are completed unless the opportunity is reactivated,  which updates them to canceled.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OpportunityCloseState? StateCode {
            get {
                return GetOptionSetValue<OpportunityCloseState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the opportunity close activity.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public OpportunityClose_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<OpportunityClose_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Subcategory of the opportunity close activity.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the opportunity close activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Person who is the receiver of the activity.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        /// <summary>
        /// <para>transactioncurrency_opportunityclose</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the opportunity close activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("opportunityid")]
        [RelationshipSchemaName("Opportunity_OpportunityClose")]
        public Opportunity Opportunity_OpportunityClose {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_OpportunityClose", null);
            }
            set {
                SetRelatedEntity("Opportunity_OpportunityClose", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("account_OpportunityCloses")]
        public Account account_OpportunityCloses {
            get {
                return GetRelatedEntity<Account>("account_OpportunityCloses", null);
            }
            set {
                SetRelatedEntity("account_OpportunityCloses", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_opportunity_close")]
        public ActivityPointer activity_pointer_opportunity_close {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_opportunity_close", null);
            }
            set {
                SetRelatedEntity("activity_pointer_opportunity_close", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_opportunity_close_activities")]
        public BusinessUnit business_unit_opportunity_close_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_opportunity_close_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_opportunity_close_activities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("incident_OpportunityCloses")]
        public Incident incident_OpportunityCloses {
            get {
                return GetRelatedEntity<Incident>("incident_OpportunityCloses", null);
            }
            set {
                SetRelatedEntity("incident_OpportunityCloses", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("lead_OpportunityCloses")]
        public Lead lead_OpportunityCloses {
            get {
                return GetRelatedEntity<Lead>("lead_OpportunityCloses", null);
            }
            set {
                SetRelatedEntity("lead_OpportunityCloses", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_opportunityclose_createdby")]
        public SystemUser lk_opportunityclose_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunityclose_createdby", null);
            }
            set {
                SetRelatedEntity("lk_opportunityclose_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_opportunityclose_createdonbehalfby")]
        public SystemUser lk_opportunityclose_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunityclose_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_opportunityclose_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_opportunityclose_modifiedby")]
        public SystemUser lk_opportunityclose_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunityclose_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_opportunityclose_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_opportunityclose_modifiedonbehalfby")]
        public SystemUser lk_opportunityclose_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunityclose_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_opportunityclose_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("opportunity_OpportunityCloses")]
        public Opportunity opportunity_OpportunityCloses {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_OpportunityCloses", null);
            }
            set {
                SetRelatedEntity("opportunity_OpportunityCloses", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunityclose_Teams")]
        public IEnumerable<Team> opportunityclose_Teams {
            get {
                return GetRelatedEntities<Team>("opportunityclose_Teams", null);
            }
            set {
                SetRelatedEntities("opportunityclose_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunityclose_activity_parties")]
        public IEnumerable<ActivityParty> opportunityclose_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("opportunityclose_activity_parties", null);
            }
            set {
                SetRelatedEntities("opportunityclose_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_opportunityclose")]
        public Team team_opportunityclose {
            get {
                return GetRelatedEntity<Team>("team_opportunityclose", null);
            }
            set {
                SetRelatedEntity("team_opportunityclose", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_opportunityclose")]
        public TransactionCurrency transactioncurrency_opportunityclose {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_opportunityclose", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_opportunityclose", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_opportunityclose")]
        public SystemUser user_opportunityclose {
            get {
                return GetRelatedEntity<SystemUser>("user_opportunityclose", null);
            }
            set {
                SetRelatedEntity("user_opportunityclose", null, value);
            }
        }
        
        public static OpportunityClose Retrieve(IOrganizationService service, Guid id, params Expression<Func<OpportunityClose,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>A specific item in a queue, such as a case record or an activity record.</para>
    /// <para>Display Name: Queue Item</para>
    /// </summary>
    [EntityLogicalName("queueitem")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class QueueItem : ExtendedEntity<QueueItemState, QueueItem_StatusCode> {
        
        public const string EntityLogicalName = "queueitem";
        
        public const int EntityTypeCode = 2029;
        
        public QueueItem() : 
                base(EntityLogicalName) {
        }
        
        public QueueItem(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("queueitemid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("queueitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the queue item.</para>
        /// <para>Display Name: Queue Item</para>
        /// </summary>
        [AttributeLogicalName("queueitemid")]
        public Guid? QueueItemId {
            get {
                return GetAttributeValue<Guid?>("queueitemid");
            }
            set {
                SetId("queueitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date the record was assigned to the queue.</para>
        /// <para>Display Name: Entered Queue</para>
        /// </summary>
        [AttributeLogicalName("enteredon")]
        public DateTime? EnteredOn {
            get {
                return GetAttributeValue<DateTime?>("enteredon");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the queueitem.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>ServiceAppointment_QueueItem</para>
        /// <para>Display Name: Object</para>
        /// </summary>
        [AttributeLogicalName("objectid")]
        public EntityReference ObjectId {
            get {
                return GetAttributeValue<EntityReference>("objectid");
            }
            set {
                SetAttributeValue("objectid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the type of the queue item, such as activity, case, or appointment.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("objecttypecode")]
        public QueueItem_ObjectTypeCode? ObjectTypeCode {
            get {
                return GetOptionSetValue<QueueItem_ObjectTypeCode>("objecttypecode");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization with which the queue item is associated.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the queue item.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the queue item.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the queue item.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Priority of the queue item.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("priority")]
        public int? Priority {
            get {
                return GetAttributeValue<int?>("priority");
            }
            set {
                SetAttributeValue("priority", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the queue that the item is assigned to.</para>
        /// <para>Display Name: Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        public EntityReference QueueId {
            get {
                return GetAttributeValue<EntityReference>("queueid");
            }
            set {
                SetAttributeValue("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Sender who created the queue item.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("sender")]
        public string Sender {
            get {
                return GetAttributeValue<string>("sender");
            }
            set {
                SetAttributeValue("sender", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the queue item.</para>
        /// <para>Display Name: Status (deprecated)</para>
        /// </summary>
        [AttributeLogicalName("state")]
        public int? State {
            get {
                return GetAttributeValue<int?>("state");
            }
            set {
                SetAttributeValue("state", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the queue record is active or inactive. Inactive queue records are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public QueueItemState? StateCode {
            get {
                return GetOptionSetValue<QueueItemState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the queue item.</para>
        /// <para>Display Name: Status Reason (deprecated)</para>
        /// </summary>
        [AttributeLogicalName("status")]
        public int? Status {
            get {
                return GetAttributeValue<int?>("status");
            }
            set {
                SetAttributeValue("status", value);
            }
        }
        
        /// <summary>
        /// <para>Select the item's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public QueueItem_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<QueueItem_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the title or name that describes the queue record. This value is copied from the record that was assigned to the queue.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
        }
        
        /// <summary>
        /// <para>Recipients listed on the To line of the message for email queue items.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("torecipients")]
        public string ToRecipients {
            get {
                return GetAttributeValue<string>("torecipients");
            }
            set {
                SetAttributeValue("torecipients", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the queue item.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Shows who is working on the queue item.</para>
        /// <para>Display Name: Worked By</para>
        /// </summary>
        [AttributeLogicalName("workerid")]
        public EntityReference WorkerId {
            get {
                return GetAttributeValue<EntityReference>("workerid");
            }
            set {
                SetAttributeValue("workerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the queue item was last assigned to a user.</para>
        /// <para>Display Name: Worked On</para>
        /// </summary>
        [AttributeLogicalName("workeridmodifiedon")]
        public DateTime? WorkerIdModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("workeridmodifiedon");
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("ActivityPointer_QueueItem")]
        public ActivityPointer ActivityPointer_QueueItem {
            get {
                return GetRelatedEntity<ActivityPointer>("ActivityPointer_QueueItem", null);
            }
            set {
                SetRelatedEntity("ActivityPointer_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Email_QueueItem")]
        public Email Email_QueueItem {
            get {
                return GetRelatedEntity<Email>("Email_QueueItem", null);
            }
            set {
                SetRelatedEntity("Email_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Incident_QueueItem")]
        public Incident Incident_QueueItem {
            get {
                return GetRelatedEntity<Incident>("Incident_QueueItem", null);
            }
            set {
                SetRelatedEntity("Incident_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Task_QueueItem")]
        public Task Task_QueueItem {
            get {
                return GetRelatedEntity<Task>("Task_QueueItem", null);
            }
            set {
                SetRelatedEntity("Task_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_QueueItem")]
        public TransactionCurrency TransactionCurrency_QueueItem {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_QueueItem", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_queueitem_createdonbehalfby")]
        public SystemUser lk_queueitem_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitem_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_queueitem_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_queueitem_modifiedonbehalfby")]
        public SystemUser lk_queueitem_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitem_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_queueitem_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_queueitembase_createdby")]
        public SystemUser lk_queueitembase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitembase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_queueitembase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_queueitembase_modifiedby")]
        public SystemUser lk_queueitembase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitembase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_queueitembase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("workerid")]
        [RelationshipSchemaName("lk_queueitembase_workerid")]
        public SystemUser lk_queueitembase_workerid {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitembase_workerid", null);
            }
            set {
                SetRelatedEntity("lk_queueitembase_workerid", null, value);
            }
        }
        
        [AttributeLogicalName("workerid")]
        [RelationshipSchemaName("team_queueitembase_workerid")]
        public Team team_queueitembase_workerid {
            get {
                return GetRelatedEntity<Team>("team_queueitembase_workerid", null);
            }
            set {
                SetRelatedEntity("team_queueitembase_workerid", null, value);
            }
        }
        
        public static QueueItem Retrieve(IOrganizationService service, Guid id, params Expression<Func<QueueItem,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.</para>
    /// <para>Display Name: User</para>
    /// </summary>
    [EntityLogicalName("systemuser")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SystemUser : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "systemuser";
        
        public const int EntityTypeCode = 8;
        
        public SystemUser() : 
                base(EntityLogicalName) {
        }
        
        public SystemUser(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("systemuserid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("systemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user.</para>
        /// <para>Display Name: User</para>
        /// </summary>
        [AttributeLogicalName("systemuserid")]
        public Guid? SystemUserId {
            get {
                return GetAttributeValue<Guid?>("systemuserid");
            }
            set {
                SetId("systemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of user.</para>
        /// <para>Display Name: Access Mode</para>
        /// </summary>
        [AttributeLogicalName("accessmode")]
        public SystemUser_AccessMode? AccessMode {
            get {
                return GetOptionSetValue<SystemUser_AccessMode>("accessmode");
            }
            set {
                SetOptionSetValue("accessmode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 1, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public SystemUser_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<SystemUser_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 1.</para>
        /// <para>Display Name: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Country/region name in address 1.</para>
        /// <para>Display Name: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>County name for address 1.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 1.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 1.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 1 information.</para>
        /// <para>Display Name: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 1 information.</para>
        /// <para>Display Name: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 1 information.</para>
        /// <para>Display Name: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 1.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 1.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 1.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 1.</para>
        /// <para>Display Name: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 1.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public SystemUser_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<SystemUser_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 1.</para>
        /// <para>Display Name: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 1.</para>
        /// <para>Display Name: Main Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 1.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 1.</para>
        /// <para>Display Name: Pager</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 1.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 2, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public SystemUser_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<SystemUser_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 2.</para>
        /// <para>Display Name: Other City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Other Address</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Country/region name in address 2.</para>
        /// <para>Display Name: Other Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>County name for address 2.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 2.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 2.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 2.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 2.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 2.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 2.</para>
        /// <para>Display Name: Other ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 2.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public SystemUser_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<SystemUser_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 2.</para>
        /// <para>Display Name: Other State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 2.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>The identifier for the application. This is used to access data in another application.</para>
        /// <para>Display Name: Application ID</para>
        /// </summary>
        [AttributeLogicalName("applicationid")]
        public Guid? ApplicationId {
            get {
                return GetAttributeValue<Guid?>("applicationid");
            }
            set {
                SetAttributeValue("applicationid", value);
            }
        }
        
        /// <summary>
        /// <para>The URI used as a unique logical identifier for the external app. This can be used to validate the application.</para>
        /// <para>Display Name: Application ID URI</para>
        /// </summary>
        [AttributeLogicalName("applicationiduri")]
        public string ApplicationIdUri {
            get {
                return GetAttributeValue<string>("applicationiduri");
            }
        }
        
        /// <summary>
        /// <para>This is the application directory object Id.</para>
        /// <para>Display Name: Azure AD Object ID</para>
        /// </summary>
        [AttributeLogicalName("azureactivedirectoryobjectid")]
        public Guid? AzureActiveDirectoryObjectId {
            get {
                return GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the user is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>License type of user.</para>
        /// <para>Display Name: License Type</para>
        /// </summary>
        [AttributeLogicalName("caltype")]
        public SystemUser_CALType? CALType {
            get {
                return GetOptionSetValue<SystemUser_CALType>("caltype");
            }
            set {
                SetOptionSetValue("caltype", value);
            }
        }
        
        /// <summary>
        /// <para>Fiscal calendar associated with the user.</para>
        /// <para>Display Name: Calendar</para>
        /// </summary>
        [AttributeLogicalName("calendarid")]
        public EntityReference CalendarId {
            get {
                return GetAttributeValue<EntityReference>("calendarid");
            }
            set {
                SetAttributeValue("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the user.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the user was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the systemuser.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Indicates if default outlook filters have been populated.</para>
        /// <para>Display Name: Default Filters Populated</para>
        /// </summary>
        [AttributeLogicalName("defaultfilterspopulated")]
        public bool? DefaultFiltersPopulated {
            get {
                return GetAttributeValue<bool?>("defaultfilterspopulated");
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox associated with this user.</para>
        /// <para>Display Name: Mailbox</para>
        /// </summary>
        [AttributeLogicalName("defaultmailbox")]
        public EntityReference DefaultMailbox {
            get {
                return GetAttributeValue<EntityReference>("defaultmailbox");
            }
        }
        
        /// <summary>
        /// <para>Type a default folder name for the user's OneDrive For Business location.</para>
        /// <para>Display Name: Default OneDrive for Business Folder Name</para>
        /// </summary>
        [AttributeLogicalName("defaultodbfoldername")]
        public string DefaultOdbFolderName {
            get {
                return GetAttributeValue<string>("defaultodbfoldername");
            }
        }
        
        /// <summary>
        /// <para>Reason for disabling the user.</para>
        /// <para>Display Name: Disabled Reason</para>
        /// </summary>
        [AttributeLogicalName("disabledreason")]
        public string DisabledReason {
            get {
                return GetAttributeValue<string>("disabledreason");
            }
        }
        
        /// <summary>
        /// <para>Whether to display the user in service views.</para>
        /// <para>Display Name: Display in Service Views</para>
        /// </summary>
        [AttributeLogicalName("displayinserviceviews")]
        public bool? DisplayInServiceViews {
            get {
                return GetAttributeValue<bool?>("displayinserviceviews");
            }
            set {
                SetAttributeValue("displayinserviceviews", value);
            }
        }
        
        /// <summary>
        /// <para>Active Directory domain of which the user is a member.</para>
        /// <para>Display Name: User Name</para>
        /// </summary>
        [AttributeLogicalName("domainname")]
        public string DomainName {
            get {
                return GetAttributeValue<string>("domainname");
            }
            set {
                SetAttributeValue("domainname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the primary email address.</para>
        /// <para>Display Name: Primary Email Status</para>
        /// </summary>
        [AttributeLogicalName("emailrouteraccessapproval")]
        public SystemUser_EmailRouterAccessApproval? EmailRouterAccessApproval {
            get {
                return GetOptionSetValue<SystemUser_EmailRouterAccessApproval>("emailrouteraccessapproval");
            }
            set {
                SetOptionSetValue("emailrouteraccessapproval", value);
            }
        }
        
        /// <summary>
        /// <para>Employee identifier for the user.</para>
        /// <para>Display Name: Employee</para>
        /// </summary>
        [AttributeLogicalName("employeeid")]
        public string EmployeeId {
            get {
                return GetAttributeValue<string>("employeeid");
            }
            set {
                SetAttributeValue("employeeid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the systemuser with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>First name of the user.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Full name of the user.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Government identifier for the user.</para>
        /// <para>Display Name: Government</para>
        /// </summary>
        [AttributeLogicalName("governmentid")]
        public string GovernmentId {
            get {
                return GetAttributeValue<string>("governmentid");
            }
            set {
                SetAttributeValue("governmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Home phone number for the user.</para>
        /// <para>Display Name: Home Phone</para>
        /// </summary>
        [AttributeLogicalName("homephone")]
        public string HomePhone {
            get {
                return GetAttributeValue<string>("homephone");
            }
            set {
                SetAttributeValue("homephone", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Unique user identity id</para>
        /// </summary>
        [AttributeLogicalName("identityid")]
        public int? IdentityId {
            get {
                return GetAttributeValue<int?>("identityid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Incoming email delivery method for the user.</para>
        /// <para>Display Name: Incoming Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("incomingemaildeliverymethod")]
        public SystemUser_IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<SystemUser_IncomingEmailDeliveryMethod>("incomingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("incomingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Internal email address for the user.</para>
        /// <para>Display Name: Primary Email</para>
        /// </summary>
        [AttributeLogicalName("internalemailaddress")]
        public string InternalEMailAddress {
            get {
                return GetAttributeValue<string>("internalemailaddress");
            }
            set {
                SetAttributeValue("internalemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>User invitation status.</para>
        /// <para>Display Name: Invitation Status</para>
        /// </summary>
        [AttributeLogicalName("invitestatuscode")]
        public SystemUser_InviteStatusCode? InviteStatusCode {
            get {
                return GetOptionSetValue<SystemUser_InviteStatusCode>("invitestatuscode");
            }
            set {
                SetOptionSetValue("invitestatuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is enabled.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("isdisabled")]
        public bool? IsDisabled {
            get {
                return GetAttributeValue<bool?>("isdisabled");
            }
            set {
                SetAttributeValue("isdisabled", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of approval of the email address by O365 Admin.</para>
        /// <para>Display Name: Email Address O365 Admin Approval Status</para>
        /// </summary>
        [AttributeLogicalName("isemailaddressapprovedbyo365admin")]
        public bool? IsEmailAddressApprovedByO365Admin {
            get {
                return GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
            }
        }
        
        /// <summary>
        /// <para>Check if user is an integration user.</para>
        /// <para>Display Name: Integration user mode</para>
        /// </summary>
        [AttributeLogicalName("isintegrationuser")]
        public bool? IsIntegrationUser {
            get {
                return GetAttributeValue<bool?>("isintegrationuser");
            }
            set {
                SetAttributeValue("isintegrationuser", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is licensed.</para>
        /// <para>Display Name: User Licensed</para>
        /// </summary>
        [AttributeLogicalName("islicensed")]
        public bool? IsLicensed {
            get {
                return GetAttributeValue<bool?>("islicensed");
            }
            set {
                SetAttributeValue("islicensed", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is synced with the directory.</para>
        /// <para>Display Name: User Synced</para>
        /// </summary>
        [AttributeLogicalName("issyncwithdirectory")]
        public bool? IsSyncWithDirectory {
            get {
                return GetAttributeValue<bool?>("issyncwithdirectory");
            }
            set {
                SetAttributeValue("issyncwithdirectory", value);
            }
        }
        
        /// <summary>
        /// <para>Job title of the user.</para>
        /// <para>Display Name: Job Title</para>
        /// </summary>
        [AttributeLogicalName("jobtitle")]
        public string JobTitle {
            get {
                return GetAttributeValue<string>("jobtitle");
            }
            set {
                SetAttributeValue("jobtitle", value);
            }
        }
        
        /// <summary>
        /// <para>Last name of the user.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Middle name of the user.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Mobile alert email address for the user.</para>
        /// <para>Display Name: Mobile Alert Email</para>
        /// </summary>
        [AttributeLogicalName("mobilealertemail")]
        public string MobileAlertEMail {
            get {
                return GetAttributeValue<string>("mobilealertemail");
            }
            set {
                SetAttributeValue("mobilealertemail", value);
            }
        }
        
        /// <summary>
        /// <para>Items contained with a particular SystemUser.</para>
        /// <para>Display Name: Mobile Offline Profile</para>
        /// </summary>
        [AttributeLogicalName("mobileofflineprofileid")]
        public EntityReference MobileOfflineProfileId {
            get {
                return GetAttributeValue<EntityReference>("mobileofflineprofileid");
            }
            set {
                SetAttributeValue("mobileofflineprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Mobile phone number for the user.</para>
        /// <para>Display Name: Mobile Phone</para>
        /// </summary>
        [AttributeLogicalName("mobilephone")]
        public string MobilePhone {
            get {
                return GetAttributeValue<string>("mobilephone");
            }
            set {
                SetAttributeValue("mobilephone", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the user.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the user was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the systemuser.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Nickname of the user.</para>
        /// <para>Display Name: Nickname</para>
        /// </summary>
        [AttributeLogicalName("nickname")]
        public string NickName {
            get {
                return GetAttributeValue<string>("nickname");
            }
            set {
                SetAttributeValue("nickname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the user.</para>
        /// <para>Display Name: Organization </para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public Guid? OrganizationId {
            get {
                return GetAttributeValue<Guid?>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Outgoing email delivery method for the user.</para>
        /// <para>Display Name: Outgoing Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("outgoingemaildeliverymethod")]
        public SystemUser_OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<SystemUser_OutgoingEmailDeliveryMethod>("outgoingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("outgoingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the manager of the user.</para>
        /// <para>Display Name: Manager</para>
        /// </summary>
        [AttributeLogicalName("parentsystemuserid")]
        public EntityReference ParentSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("parentsystemuserid");
            }
            set {
                SetAttributeValue("parentsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Passport Hi</para>
        /// </summary>
        [AttributeLogicalName("passporthi")]
        public int? PassportHi {
            get {
                return GetAttributeValue<int?>("passporthi");
            }
            set {
                SetAttributeValue("passporthi", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Passport Lo</para>
        /// </summary>
        [AttributeLogicalName("passportlo")]
        public int? PassportLo {
            get {
                return GetAttributeValue<int?>("passportlo");
            }
            set {
                SetAttributeValue("passportlo", value);
            }
        }
        
        /// <summary>
        /// <para>Personal email address of the user.</para>
        /// <para>Display Name: Email 2</para>
        /// </summary>
        [AttributeLogicalName("personalemailaddress")]
        public string PersonalEMailAddress {
            get {
                return GetAttributeValue<string>("personalemailaddress");
            }
            set {
                SetAttributeValue("personalemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>URL for the Website on which a photo of the user is located.</para>
        /// <para>Display Name: Photo URL</para>
        /// </summary>
        [AttributeLogicalName("photourl")]
        public string PhotoUrl {
            get {
                return GetAttributeValue<string>("photourl");
            }
            set {
                SetAttributeValue("photourl", value);
            }
        }
        
        /// <summary>
        /// <para>User's position in hierarchical security model.</para>
        /// <para>Display Name: Position</para>
        /// </summary>
        [AttributeLogicalName("positionid")]
        public EntityReference PositionId {
            get {
                return GetAttributeValue<EntityReference>("positionid");
            }
            set {
                SetAttributeValue("positionid", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred address for the user.</para>
        /// <para>Display Name: Preferred Address</para>
        /// </summary>
        [AttributeLogicalName("preferredaddresscode")]
        public SystemUser_PreferredAddressCode? PreferredAddressCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredAddressCode>("preferredaddresscode");
            }
            set {
                SetOptionSetValue("preferredaddresscode", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred email address for the user.</para>
        /// <para>Display Name: Preferred Email</para>
        /// </summary>
        [AttributeLogicalName("preferredemailcode")]
        public SystemUser_PreferredEmailCode? PreferredEmailCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredEmailCode>("preferredemailcode");
            }
            set {
                SetOptionSetValue("preferredemailcode", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred phone number for the user.</para>
        /// <para>Display Name: Preferred Phone</para>
        /// </summary>
        [AttributeLogicalName("preferredphonecode")]
        public SystemUser_PreferredPhoneCode? PreferredPhoneCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredPhoneCode>("preferredphonecode");
            }
            set {
                SetOptionSetValue("preferredphonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default queue for the user.</para>
        /// <para>Display Name: Default Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        public EntityReference QueueId {
            get {
                return GetAttributeValue<EntityReference>("queueid");
            }
            set {
                SetAttributeValue("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Salutation for correspondence with the user.</para>
        /// <para>Display Name: Salutation</para>
        /// </summary>
        [AttributeLogicalName("salutation")]
        public string Salutation {
            get {
                return GetAttributeValue<string>("salutation");
            }
            set {
                SetAttributeValue("salutation", value);
            }
        }
        
        /// <summary>
        /// <para>Check if user is a setup user.</para>
        /// <para>Display Name: Restricted Access Mode</para>
        /// </summary>
        [AttributeLogicalName("setupuser")]
        public bool? SetupUser {
            get {
                return GetAttributeValue<bool?>("setupuser");
            }
            set {
                SetAttributeValue("setupuser", value);
            }
        }
        
        /// <summary>
        /// <para>SharePoint Work Email Address</para>
        /// <para>Display Name: SharePoint Email Address</para>
        /// </summary>
        [AttributeLogicalName("sharepointemailaddress")]
        public string SharePointEmailAddress {
            get {
                return GetAttributeValue<string>("sharepointemailaddress");
            }
            set {
                SetAttributeValue("sharepointemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>site_system_users</para>
        /// <para>Display Name: Site</para>
        /// </summary>
        [AttributeLogicalName("siteid")]
        public EntityReference SiteId {
            get {
                return GetAttributeValue<EntityReference>("siteid");
            }
            set {
                SetAttributeValue("siteid", value);
            }
        }
        
        /// <summary>
        /// <para>Skill set of the user.</para>
        /// <para>Display Name: Skills</para>
        /// </summary>
        [AttributeLogicalName("skills")]
        public string Skills {
            get {
                return GetAttributeValue<string>("skills");
            }
            set {
                SetAttributeValue("skills", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>territory_system_users</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territoryid")]
        public EntityReference TerritoryId {
            get {
                return GetAttributeValue<EntityReference>("territoryid");
            }
            set {
                SetAttributeValue("territoryid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Title of the user.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the systemuser.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of user license.</para>
        /// <para>Display Name: User License Type</para>
        /// </summary>
        [AttributeLogicalName("userlicensetype")]
        public int? UserLicenseType {
            get {
                return GetAttributeValue<int?>("userlicensetype");
            }
            set {
                SetAttributeValue("userlicensetype", value);
            }
        }
        
        /// <summary>
        /// <para> User PUID User Identifiable Information</para>
        /// <para>Display Name: User PUID</para>
        /// </summary>
        [AttributeLogicalName("userpuid")]
        public string UserPuid {
            get {
                return GetAttributeValue<string>("userpuid");
            }
        }
        
        /// <summary>
        /// <para>Version number of the user.</para>
        /// <para>Display Name: Version number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Windows Live ID</para>
        /// <para>Display Name: Windows Live ID</para>
        /// </summary>
        [AttributeLogicalName("windowsliveid")]
        public string WindowsLiveID {
            get {
                return GetAttributeValue<string>("windowsliveid");
            }
            set {
                SetAttributeValue("windowsliveid", value);
            }
        }
        
        /// <summary>
        /// <para>User's Yammer login email address</para>
        /// <para>Display Name: Yammer Email</para>
        /// </summary>
        [AttributeLogicalName("yammeremailaddress")]
        public string YammerEmailAddress {
            get {
                return GetAttributeValue<string>("yammeremailaddress");
            }
            set {
                SetAttributeValue("yammeremailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>User's Yammer ID</para>
        /// <para>Display Name: Yammer User ID</para>
        /// </summary>
        [AttributeLogicalName("yammeruserid")]
        public string YammerUserId {
            get {
                return GetAttributeValue<string>("yammeruserid");
            }
            set {
                SetAttributeValue("yammeruserid", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Describes whether user is opted out or not</para>
        /// <para>Display Name: GDPR Optout</para>
        /// </summary>
        [AttributeLogicalName("msdyn_gdproptout")]
        public bool? msdyn_gdproptout {
            get {
                return GetAttributeValue<bool?>("msdyn_gdproptout");
            }
            set {
                SetAttributeValue("msdyn_gdproptout", value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuser_createdonbehalfby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuser_createdonbehalfby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuser_createdonbehalfby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuser_createdonbehalfby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuser_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuserbase_createdby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuserbase_createdby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuserbase_createdby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuserbase_createdby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuserbase_modifiedby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuserbase_modifiedby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuserbase_modifiedby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuserbase_modifiedby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("user_parent_user", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referenceduser_parent_user {
            get {
                return GetRelatedEntities<SystemUser>("user_parent_user", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("user_parent_user", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_systemuser_createdonbehalfby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuser_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuser_createdonbehalfby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuser_createdonbehalfby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuser_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_systemuserbase_createdby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuserbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuserbase_createdby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuserbase_createdby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_systemuserbase_modifiedby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuserbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuserbase_modifiedby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuserbase_modifiedby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentsystemuserid")]
        [RelationshipSchemaName("user_parent_user", EntityRole.Referencing)]
        public SystemUser Referencinguser_parent_user {
            get {
                return GetRelatedEntity<SystemUser>("user_parent_user", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("user_parent_user", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("SystemUser_Email_EmailSender")]
        public IEnumerable<Email> SystemUser_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("SystemUser_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("SystemUser_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_SystemUser")]
        public TransactionCurrency TransactionCurrency_SystemUser {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_SystemUser", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_SystemUser", null, value);
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        [RelationshipSchemaName("business_unit_system_users")]
        public BusinessUnit business_unit_system_users {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_system_users", null);
            }
            set {
                SetRelatedEntity("business_unit_system_users", null, value);
            }
        }
        
        [AttributeLogicalName("calendarid")]
        [RelationshipSchemaName("calendar_system_users")]
        public Calendar calendar_system_users {
            get {
                return GetRelatedEntity<Calendar>("calendar_system_users", null);
            }
            set {
                SetRelatedEntity("calendar_system_users", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_owning_user")]
        public IEnumerable<Contact> contact_owning_user {
            get {
                return GetRelatedEntities<Contact>("contact_owning_user", null);
            }
            set {
                SetRelatedEntities("contact_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_owning_user")]
        public IEnumerable<Lead> lead_owning_user {
            get {
                return GetRelatedEntities<Lead>("lead_owning_user", null);
            }
            set {
                SetRelatedEntities("lead_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_createdby")]
        public IEnumerable<Account> lk_accountbase_createdby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_createdonbehalfby")]
        public IEnumerable<Account> lk_accountbase_createdonbehalfby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_modifiedby")]
        public IEnumerable<Account> lk_accountbase_modifiedby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_modifiedonbehalfby")]
        public IEnumerable<Account> lk_accountbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_activitypointer_createdby")]
        public IEnumerable<ActivityPointer> lk_activitypointer_createdby {
            get {
                return GetRelatedEntities<ActivityPointer>("lk_activitypointer_createdby", null);
            }
            set {
                SetRelatedEntities("lk_activitypointer_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_activitypointer_createdonbehalfby")]
        public IEnumerable<ActivityPointer> lk_activitypointer_createdonbehalfby {
            get {
                return GetRelatedEntities<ActivityPointer>("lk_activitypointer_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_activitypointer_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_activitypointer_modifiedby")]
        public IEnumerable<ActivityPointer> lk_activitypointer_modifiedby {
            get {
                return GetRelatedEntities<ActivityPointer>("lk_activitypointer_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_activitypointer_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_activitypointer_modifiedonbehalfby")]
        public IEnumerable<ActivityPointer> lk_activitypointer_modifiedonbehalfby {
            get {
                return GetRelatedEntities<ActivityPointer>("lk_activitypointer_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_activitypointer_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_businessunit_createdonbehalfby")]
        public IEnumerable<BusinessUnit> lk_businessunit_createdonbehalfby {
            get {
                return GetRelatedEntities<BusinessUnit>("lk_businessunit_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_businessunit_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_businessunit_modifiedonbehalfby")]
        public IEnumerable<BusinessUnit> lk_businessunit_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BusinessUnit>("lk_businessunit_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_businessunit_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_businessunitbase_createdby")]
        public IEnumerable<BusinessUnit> lk_businessunitbase_createdby {
            get {
                return GetRelatedEntities<BusinessUnit>("lk_businessunitbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_businessunitbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_businessunitbase_modifiedby")]
        public IEnumerable<BusinessUnit> lk_businessunitbase_modifiedby {
            get {
                return GetRelatedEntities<BusinessUnit>("lk_businessunitbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_businessunitbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_calendar_createdby")]
        public IEnumerable<Calendar> lk_calendar_createdby {
            get {
                return GetRelatedEntities<Calendar>("lk_calendar_createdby", null);
            }
            set {
                SetRelatedEntities("lk_calendar_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_calendar_createdonbehalfby")]
        public IEnumerable<Calendar> lk_calendar_createdonbehalfby {
            get {
                return GetRelatedEntities<Calendar>("lk_calendar_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_calendar_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_calendar_modifiedby")]
        public IEnumerable<Calendar> lk_calendar_modifiedby {
            get {
                return GetRelatedEntities<Calendar>("lk_calendar_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_calendar_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_calendar_modifiedonbehalfby")]
        public IEnumerable<Calendar> lk_calendar_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Calendar>("lk_calendar_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_calendar_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contact_createdonbehalfby")]
        public IEnumerable<Contact> lk_contact_createdonbehalfby {
            get {
                return GetRelatedEntities<Contact>("lk_contact_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_contact_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contact_modifiedonbehalfby")]
        public IEnumerable<Contact> lk_contact_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Contact>("lk_contact_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_contact_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contactbase_createdby")]
        public IEnumerable<Contact> lk_contactbase_createdby {
            get {
                return GetRelatedEntities<Contact>("lk_contactbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_contactbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contactbase_modifiedby")]
        public IEnumerable<Contact> lk_contactbase_modifiedby {
            get {
                return GetRelatedEntities<Contact>("lk_contactbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_contactbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_autonumberentity_createdby")]
        public IEnumerable<dg_autonumberentity> lk_dg_autonumberentity_createdby {
            get {
                return GetRelatedEntities<dg_autonumberentity>("lk_dg_autonumberentity_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_autonumberentity_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_autonumberentity_createdonbehalfby")]
        public IEnumerable<dg_autonumberentity> lk_dg_autonumberentity_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_autonumberentity>("lk_dg_autonumberentity_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_autonumberentity_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_autonumberentity_modifiedby")]
        public IEnumerable<dg_autonumberentity> lk_dg_autonumberentity_modifiedby {
            get {
                return GetRelatedEntities<dg_autonumberentity>("lk_dg_autonumberentity_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_autonumberentity_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_autonumberentity_modifiedonbehalfby")]
        public IEnumerable<dg_autonumberentity> lk_dg_autonumberentity_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_autonumberentity>("lk_dg_autonumberentity_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_autonumberentity_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_bus_createdby")]
        public IEnumerable<dg_bus> lk_dg_bus_createdby {
            get {
                return GetRelatedEntities<dg_bus>("lk_dg_bus_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_bus_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_bus_createdonbehalfby")]
        public IEnumerable<dg_bus> lk_dg_bus_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_bus>("lk_dg_bus_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_bus_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_bus_modifiedby")]
        public IEnumerable<dg_bus> lk_dg_bus_modifiedby {
            get {
                return GetRelatedEntities<dg_bus>("lk_dg_bus_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_bus_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_bus_modifiedonbehalfby")]
        public IEnumerable<dg_bus> lk_dg_bus_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_bus>("lk_dg_bus_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_bus_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_child_createdby")]
        public IEnumerable<dg_child> lk_dg_child_createdby {
            get {
                return GetRelatedEntities<dg_child>("lk_dg_child_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_child_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_child_createdonbehalfby")]
        public IEnumerable<dg_child> lk_dg_child_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_child>("lk_dg_child_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_child_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_child_modifiedby")]
        public IEnumerable<dg_child> lk_dg_child_modifiedby {
            get {
                return GetRelatedEntities<dg_child>("lk_dg_child_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_child_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_child_modifiedonbehalfby")]
        public IEnumerable<dg_child> lk_dg_child_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_child>("lk_dg_child_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_child_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_field_createdby")]
        public IEnumerable<dg_field> lk_dg_field_createdby {
            get {
                return GetRelatedEntities<dg_field>("lk_dg_field_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_field_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_field_createdonbehalfby")]
        public IEnumerable<dg_field> lk_dg_field_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_field>("lk_dg_field_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_field_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_field_modifiedby")]
        public IEnumerable<dg_field> lk_dg_field_modifiedby {
            get {
                return GetRelatedEntities<dg_field>("lk_dg_field_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_field_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_field_modifiedonbehalfby")]
        public IEnumerable<dg_field> lk_dg_field_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_field>("lk_dg_field_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_field_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_man_createdby")]
        public IEnumerable<dg_man> lk_dg_man_createdby {
            get {
                return GetRelatedEntities<dg_man>("lk_dg_man_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_man_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_man_createdonbehalfby")]
        public IEnumerable<dg_man> lk_dg_man_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_man>("lk_dg_man_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_man_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_man_modifiedby")]
        public IEnumerable<dg_man> lk_dg_man_modifiedby {
            get {
                return GetRelatedEntities<dg_man>("lk_dg_man_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_man_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_man_modifiedonbehalfby")]
        public IEnumerable<dg_man> lk_dg_man_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_man>("lk_dg_man_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_man_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_email_createdby")]
        public IEnumerable<Email> lk_email_createdby {
            get {
                return GetRelatedEntities<Email>("lk_email_createdby", null);
            }
            set {
                SetRelatedEntities("lk_email_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_email_createdonbehalfby")]
        public IEnumerable<Email> lk_email_createdonbehalfby {
            get {
                return GetRelatedEntities<Email>("lk_email_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_email_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_email_modifiedby")]
        public IEnumerable<Email> lk_email_modifiedby {
            get {
                return GetRelatedEntities<Email>("lk_email_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_email_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_email_modifiedonbehalfby")]
        public IEnumerable<Email> lk_email_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Email>("lk_email_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_email_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentbase_createdby")]
        public IEnumerable<Incident> lk_incidentbase_createdby {
            get {
                return GetRelatedEntities<Incident>("lk_incidentbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_incidentbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentbase_createdonbehalfby")]
        public IEnumerable<Incident> lk_incidentbase_createdonbehalfby {
            get {
                return GetRelatedEntities<Incident>("lk_incidentbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_incidentbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentbase_modifiedby")]
        public IEnumerable<Incident> lk_incidentbase_modifiedby {
            get {
                return GetRelatedEntities<Incident>("lk_incidentbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_incidentbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentbase_modifiedonbehalfby")]
        public IEnumerable<Incident> lk_incidentbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Incident>("lk_incidentbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_incidentbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentresolution_createdby")]
        public IEnumerable<IncidentResolution> lk_incidentresolution_createdby {
            get {
                return GetRelatedEntities<IncidentResolution>("lk_incidentresolution_createdby", null);
            }
            set {
                SetRelatedEntities("lk_incidentresolution_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentresolution_createdonbehalfby")]
        public IEnumerable<IncidentResolution> lk_incidentresolution_createdonbehalfby {
            get {
                return GetRelatedEntities<IncidentResolution>("lk_incidentresolution_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_incidentresolution_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentresolution_modifiedby")]
        public IEnumerable<IncidentResolution> lk_incidentresolution_modifiedby {
            get {
                return GetRelatedEntities<IncidentResolution>("lk_incidentresolution_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_incidentresolution_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentresolution_modifiedonbehalfby")]
        public IEnumerable<IncidentResolution> lk_incidentresolution_modifiedonbehalfby {
            get {
                return GetRelatedEntities<IncidentResolution>("lk_incidentresolution_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_incidentresolution_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_invoice_createdonbehalfby")]
        public IEnumerable<Invoice> lk_invoice_createdonbehalfby {
            get {
                return GetRelatedEntities<Invoice>("lk_invoice_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_invoice_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_invoice_modifiedonbehalfby")]
        public IEnumerable<Invoice> lk_invoice_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Invoice>("lk_invoice_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_invoice_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_invoicebase_createdby")]
        public IEnumerable<Invoice> lk_invoicebase_createdby {
            get {
                return GetRelatedEntities<Invoice>("lk_invoicebase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_invoicebase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_invoicebase_modifiedby")]
        public IEnumerable<Invoice> lk_invoicebase_modifiedby {
            get {
                return GetRelatedEntities<Invoice>("lk_invoicebase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_invoicebase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_lead_createdonbehalfby")]
        public IEnumerable<Lead> lk_lead_createdonbehalfby {
            get {
                return GetRelatedEntities<Lead>("lk_lead_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_lead_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_lead_modifiedonbehalfby")]
        public IEnumerable<Lead> lk_lead_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Lead>("lk_lead_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_lead_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_leadbase_createdby")]
        public IEnumerable<Lead> lk_leadbase_createdby {
            get {
                return GetRelatedEntities<Lead>("lk_leadbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_leadbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_leadbase_modifiedby")]
        public IEnumerable<Lead> lk_leadbase_modifiedby {
            get {
                return GetRelatedEntities<Lead>("lk_leadbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_leadbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunity_createdonbehalfby")]
        public IEnumerable<Opportunity> lk_opportunity_createdonbehalfby {
            get {
                return GetRelatedEntities<Opportunity>("lk_opportunity_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_opportunity_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunity_modifiedonbehalfby")]
        public IEnumerable<Opportunity> lk_opportunity_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Opportunity>("lk_opportunity_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_opportunity_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunitybase_createdby")]
        public IEnumerable<Opportunity> lk_opportunitybase_createdby {
            get {
                return GetRelatedEntities<Opportunity>("lk_opportunitybase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_opportunitybase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunitybase_modifiedby")]
        public IEnumerable<Opportunity> lk_opportunitybase_modifiedby {
            get {
                return GetRelatedEntities<Opportunity>("lk_opportunitybase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_opportunitybase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunityclose_createdby")]
        public IEnumerable<OpportunityClose> lk_opportunityclose_createdby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_opportunityclose_createdby", null);
            }
            set {
                SetRelatedEntities("lk_opportunityclose_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunityclose_createdonbehalfby")]
        public IEnumerable<OpportunityClose> lk_opportunityclose_createdonbehalfby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_opportunityclose_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_opportunityclose_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunityclose_modifiedby")]
        public IEnumerable<OpportunityClose> lk_opportunityclose_modifiedby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_opportunityclose_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_opportunityclose_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunityclose_modifiedonbehalfby")]
        public IEnumerable<OpportunityClose> lk_opportunityclose_modifiedonbehalfby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_opportunityclose_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_opportunityclose_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitem_createdonbehalfby")]
        public IEnumerable<QueueItem> lk_queueitem_createdonbehalfby {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitem_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_queueitem_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitem_modifiedonbehalfby")]
        public IEnumerable<QueueItem> lk_queueitem_modifiedonbehalfby {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitem_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_queueitem_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitembase_createdby")]
        public IEnumerable<QueueItem> lk_queueitembase_createdby {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitembase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_queueitembase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitembase_modifiedby")]
        public IEnumerable<QueueItem> lk_queueitembase_modifiedby {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitembase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_queueitembase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitembase_workerid")]
        public IEnumerable<QueueItem> lk_queueitembase_workerid {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitembase_workerid", null);
            }
            set {
                SetRelatedEntities("lk_queueitembase_workerid", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_createdby")]
        public IEnumerable<Task> lk_task_createdby {
            get {
                return GetRelatedEntities<Task>("lk_task_createdby", null);
            }
            set {
                SetRelatedEntities("lk_task_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_createdonbehalfby")]
        public IEnumerable<Task> lk_task_createdonbehalfby {
            get {
                return GetRelatedEntities<Task>("lk_task_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_task_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_modifiedby")]
        public IEnumerable<Task> lk_task_modifiedby {
            get {
                return GetRelatedEntities<Task>("lk_task_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_task_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_modifiedonbehalfby")]
        public IEnumerable<Task> lk_task_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Task>("lk_task_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_task_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_team_createdonbehalfby")]
        public IEnumerable<Team> lk_team_createdonbehalfby {
            get {
                return GetRelatedEntities<Team>("lk_team_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_team_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_team_modifiedonbehalfby")]
        public IEnumerable<Team> lk_team_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Team>("lk_team_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_team_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_teambase_administratorid")]
        public IEnumerable<Team> lk_teambase_administratorid {
            get {
                return GetRelatedEntities<Team>("lk_teambase_administratorid", null);
            }
            set {
                SetRelatedEntities("lk_teambase_administratorid", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_teambase_createdby")]
        public IEnumerable<Team> lk_teambase_createdby {
            get {
                return GetRelatedEntities<Team>("lk_teambase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_teambase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_teambase_modifiedby")]
        public IEnumerable<Team> lk_teambase_modifiedby {
            get {
                return GetRelatedEntities<Team>("lk_teambase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_teambase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_transactioncurrency_createdonbehalfby")]
        public IEnumerable<TransactionCurrency> lk_transactioncurrency_createdonbehalfby {
            get {
                return GetRelatedEntities<TransactionCurrency>("lk_transactioncurrency_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_transactioncurrency_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_transactioncurrency_modifiedonbehalfby")]
        public IEnumerable<TransactionCurrency> lk_transactioncurrency_modifiedonbehalfby {
            get {
                return GetRelatedEntities<TransactionCurrency>("lk_transactioncurrency_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_transactioncurrency_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_transactioncurrencybase_createdby")]
        public IEnumerable<TransactionCurrency> lk_transactioncurrencybase_createdby {
            get {
                return GetRelatedEntities<TransactionCurrency>("lk_transactioncurrencybase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_transactioncurrencybase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_transactioncurrencybase_modifiedby")]
        public IEnumerable<TransactionCurrency> lk_transactioncurrencybase_modifiedby {
            get {
                return GetRelatedEntities<TransactionCurrency>("lk_transactioncurrencybase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_transactioncurrencybase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_owning_user")]
        public IEnumerable<Opportunity> opportunity_owning_user {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_owning_user", null);
            }
            set {
                SetRelatedEntities("opportunity_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_accounts")]
        public IEnumerable<Account> system_user_accounts {
            get {
                return GetRelatedEntities<Account>("system_user_accounts", null);
            }
            set {
                SetRelatedEntities("system_user_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_activity_parties")]
        public IEnumerable<ActivityParty> system_user_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("system_user_activity_parties", null);
            }
            set {
                SetRelatedEntities("system_user_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_contacts")]
        public IEnumerable<Contact> system_user_contacts {
            get {
                return GetRelatedEntities<Contact>("system_user_contacts", null);
            }
            set {
                SetRelatedEntities("system_user_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_incidents")]
        public IEnumerable<Incident> system_user_incidents {
            get {
                return GetRelatedEntities<Incident>("system_user_incidents", null);
            }
            set {
                SetRelatedEntities("system_user_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_invoices")]
        public IEnumerable<Invoice> system_user_invoices {
            get {
                return GetRelatedEntities<Invoice>("system_user_invoices", null);
            }
            set {
                SetRelatedEntities("system_user_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_workflow")]
        public IEnumerable<Workflow> system_user_workflow {
            get {
                return GetRelatedEntities<Workflow>("system_user_workflow", null);
            }
            set {
                SetRelatedEntities("system_user_workflow", null, value);
            }
        }
        
        [RelationshipSchemaName("teammembership_association")]
        public IEnumerable<Team> teammembership_association {
            get {
                return GetRelatedEntities<Team>("teammembership_association", null);
            }
            set {
                SetRelatedEntities("teammembership_association", null, value);
            }
        }
        
        [RelationshipSchemaName("user_accounts")]
        public IEnumerable<Account> user_accounts {
            get {
                return GetRelatedEntities<Account>("user_accounts", null);
            }
            set {
                SetRelatedEntities("user_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("user_activity")]
        public IEnumerable<ActivityPointer> user_activity {
            get {
                return GetRelatedEntities<ActivityPointer>("user_activity", null);
            }
            set {
                SetRelatedEntities("user_activity", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_autonumberentity")]
        public IEnumerable<dg_autonumberentity> user_dg_autonumberentity {
            get {
                return GetRelatedEntities<dg_autonumberentity>("user_dg_autonumberentity", null);
            }
            set {
                SetRelatedEntities("user_dg_autonumberentity", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_bus")]
        public IEnumerable<dg_bus> user_dg_bus {
            get {
                return GetRelatedEntities<dg_bus>("user_dg_bus", null);
            }
            set {
                SetRelatedEntities("user_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_child")]
        public IEnumerable<dg_child> user_dg_child {
            get {
                return GetRelatedEntities<dg_child>("user_dg_child", null);
            }
            set {
                SetRelatedEntities("user_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_field")]
        public IEnumerable<dg_field> user_dg_field {
            get {
                return GetRelatedEntities<dg_field>("user_dg_field", null);
            }
            set {
                SetRelatedEntities("user_dg_field", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_man")]
        public IEnumerable<dg_man> user_dg_man {
            get {
                return GetRelatedEntities<dg_man>("user_dg_man", null);
            }
            set {
                SetRelatedEntities("user_dg_man", null, value);
            }
        }
        
        [RelationshipSchemaName("user_email")]
        public IEnumerable<Email> user_email {
            get {
                return GetRelatedEntities<Email>("user_email", null);
            }
            set {
                SetRelatedEntities("user_email", null, value);
            }
        }
        
        [RelationshipSchemaName("user_incidentresolution")]
        public IEnumerable<IncidentResolution> user_incidentresolution {
            get {
                return GetRelatedEntities<IncidentResolution>("user_incidentresolution", null);
            }
            set {
                SetRelatedEntities("user_incidentresolution", null, value);
            }
        }
        
        [RelationshipSchemaName("user_opportunityclose")]
        public IEnumerable<OpportunityClose> user_opportunityclose {
            get {
                return GetRelatedEntities<OpportunityClose>("user_opportunityclose", null);
            }
            set {
                SetRelatedEntities("user_opportunityclose", null, value);
            }
        }
        
        [RelationshipSchemaName("user_task")]
        public IEnumerable<Task> user_task {
            get {
                return GetRelatedEntities<Task>("user_task", null);
            }
            set {
                SetRelatedEntities("user_task", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_createdby")]
        public IEnumerable<Workflow> workflow_createdby {
            get {
                return GetRelatedEntities<Workflow>("workflow_createdby", null);
            }
            set {
                SetRelatedEntities("workflow_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_createdonbehalfby")]
        public IEnumerable<Workflow> workflow_createdonbehalfby {
            get {
                return GetRelatedEntities<Workflow>("workflow_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("workflow_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_modifiedby")]
        public IEnumerable<Workflow> workflow_modifiedby {
            get {
                return GetRelatedEntities<Workflow>("workflow_modifiedby", null);
            }
            set {
                SetRelatedEntities("workflow_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_modifiedonbehalfby")]
        public IEnumerable<Workflow> workflow_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Workflow>("workflow_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("workflow_modifiedonbehalfby", null, value);
            }
        }
        
        public static SystemUser Retrieve(IOrganizationService service, Guid id, params Expression<Func<SystemUser,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Generic activity representing work needed to be done.</para>
    /// <para>Display Name: Task</para>
    /// </summary>
    [EntityLogicalName("task")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Task : ExtendedEntity<TaskState, Task_StatusCode> {
        
        public const string EntityLogicalName = "task";
        
        public const int EntityTypeCode = 4212;
        
        public Task() : 
                base(EntityLogicalName) {
        }
        
        public Task(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the task.</para>
        /// <para>Display Name: Task</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent on the task. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the task. By default, it displays when the activity was completed or canceled.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the task. By default, it displays when the task was created.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the task type, such as lead gathering or customer follow up, to tie the task to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Assigned Task Unique Id</para>
        /// <para>Display Name: Assigned Task Unique Id</para>
        /// </summary>
        [AttributeLogicalName("crmtaskassigneduniqueid")]
        public Guid? CrmTaskAssignedUniqueId {
            get {
                return GetAttributeValue<Guid?>("crmtaskassigneduniqueid");
            }
            set {
                SetAttributeValue("crmtaskassigneduniqueid", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the task.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Information which specifies whether the task was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Information which specifies if the task was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the record owner's business unit.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the task.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the task.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the percentage complete value for the task to track tasks to completion.</para>
        /// <para>Display Name: Percent Complete</para>
        /// </summary>
        [AttributeLogicalName("percentcomplete")]
        public int? PercentComplete {
            get {
                return GetAttributeValue<int?>("percentcomplete");
            }
            set {
                SetAttributeValue("percentcomplete", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Task_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Task_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the task is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Task record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this Task. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the task, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>service_tasks</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time by which the activities are sorted.</para>
        /// <para>Display Name: Sort Date</para>
        /// </summary>
        [AttributeLogicalName("sortdate")]
        public DateTime? SortDate {
            get {
                return GetAttributeValue<DateTime?>("sortdate");
            }
            set {
                SetAttributeValue("sortdate", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the task is open, completed, or canceled. Completed and canceled tasks are read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public TaskState? StateCode {
            get {
                return GetOptionSetValue<TaskState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the task's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Task_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Task_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the task type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the task.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the task.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Tasks")]
        public Account Account_Tasks {
            get {
                return GetRelatedEntity<Account>("Account_Tasks", null);
            }
            set {
                SetRelatedEntity("Account_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Tasks")]
        public Contact Contact_Tasks {
            get {
                return GetRelatedEntity<Contact>("Contact_Tasks", null);
            }
            set {
                SetRelatedEntity("Contact_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Tasks")]
        public Incident Incident_Tasks {
            get {
                return GetRelatedEntity<Incident>("Incident_Tasks", null);
            }
            set {
                SetRelatedEntity("Incident_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_Tasks")]
        public Invoice Invoice_Tasks {
            get {
                return GetRelatedEntity<Invoice>("Invoice_Tasks", null);
            }
            set {
                SetRelatedEntity("Invoice_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_Tasks")]
        public Lead Lead_Tasks {
            get {
                return GetRelatedEntity<Lead>("Lead_Tasks", null);
            }
            set {
                SetRelatedEntity("Lead_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_Tasks")]
        public Opportunity Opportunity_Tasks {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_Tasks", null);
            }
            set {
                SetRelatedEntity("Opportunity_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("Task_QueueItem")]
        public IEnumerable<QueueItem> Task_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Task_QueueItem", null);
            }
            set {
                SetRelatedEntities("Task_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Task")]
        public TransactionCurrency TransactionCurrency_Task {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Task", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Task", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_task")]
        public ActivityPointer activity_pointer_task {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_task", null);
            }
            set {
                SetRelatedEntity("activity_pointer_task", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_task_activities")]
        public BusinessUnit business_unit_task_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_task_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_task_activities", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_task_createdby")]
        public SystemUser lk_task_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_createdby", null);
            }
            set {
                SetRelatedEntity("lk_task_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_task_createdonbehalfby")]
        public SystemUser lk_task_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_task_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_task_modifiedby")]
        public SystemUser lk_task_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_task_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_task_modifiedonbehalfby")]
        public SystemUser lk_task_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_task_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("task_activity_parties")]
        public IEnumerable<ActivityParty> task_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("task_activity_parties", null);
            }
            set {
                SetRelatedEntities("task_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_task")]
        public Team team_task {
            get {
                return GetRelatedEntity<Team>("team_task", null);
            }
            set {
                SetRelatedEntity("team_task", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_task")]
        public SystemUser user_task {
            get {
                return GetRelatedEntity<SystemUser>("user_task", null);
            }
            set {
                SetRelatedEntity("user_task", null, value);
            }
        }
        
        public static Task Retrieve(IOrganizationService service, Guid id, params Expression<Func<Task,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Collection of system users that routinely collaborate. Teams can be used to simplify record sharing and provide team members with common access to organization data when team members belong to different Business Units.</para>
    /// <para>Display Name: Team</para>
    /// </summary>
    [EntityLogicalName("team")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Team : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "team";
        
        public const int EntityTypeCode = 9;
        
        public Team() : 
                base(EntityLogicalName) {
        }
        
        public Team(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("teamid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("teamid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team.</para>
        /// <para>Display Name: Team</para>
        /// </summary>
        [AttributeLogicalName("teamid")]
        public Guid? TeamId {
            get {
                return GetAttributeValue<Guid?>("teamid");
            }
            set {
                SetId("teamid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user primary responsible for the team.</para>
        /// <para>Display Name: Administrator</para>
        /// </summary>
        [AttributeLogicalName("administratorid")]
        public EntityReference AdministratorId {
            get {
                return GetAttributeValue<EntityReference>("administratorid");
            }
            set {
                SetAttributeValue("administratorid", value);
            }
        }
        
        /// <summary>
        /// <para>The Azure active directory object Id for a group.</para>
        /// <para>Display Name: Azure AD Object Id for a group</para>
        /// </summary>
        [AttributeLogicalName("azureactivedirectoryobjectid")]
        public Guid? AzureActiveDirectoryObjectId {
            get {
                return GetAttributeValue<Guid?>("azureactivedirectoryobjectid");
            }
            set {
                SetAttributeValue("azureactivedirectoryobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the team is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the team.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the team was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the team.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Description of the team.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Email address for the team.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EMailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the team with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the team is a default business unit team.</para>
        /// <para>Display Name: Is Default</para>
        /// </summary>
        [AttributeLogicalName("isdefault")]
        public bool? IsDefault {
            get {
                return GetAttributeValue<bool?>("isdefault");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the team.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the team was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the team.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the team.</para>
        /// <para>Display Name: Team Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the team.</para>
        /// <para>Display Name: Organization </para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public Guid? OrganizationId {
            get {
                return GetAttributeValue<Guid?>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default queue for the team.</para>
        /// <para>Display Name: Default Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        public EntityReference QueueId {
            get {
                return GetAttributeValue<EntityReference>("queueid");
            }
            set {
                SetAttributeValue("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>opportunity_Teams</para>
        /// <para>Display Name: Regarding Object Id</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: (Deprecated) Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the team will be managed by the system.</para>
        /// <para>Display Name: Is System Managed</para>
        /// </summary>
        [AttributeLogicalName("systemmanaged")]
        public bool? SystemManaged {
            get {
                return GetAttributeValue<bool?>("systemmanaged");
            }
        }
        
        /// <summary>
        /// <para>Shows the team template that is associated with the team.</para>
        /// <para>Display Name: Team Template Identifier</para>
        /// </summary>
        [AttributeLogicalName("teamtemplateid")]
        public EntityReference TeamTemplateId {
            get {
                return GetAttributeValue<EntityReference>("teamtemplateid");
            }
            set {
                SetAttributeValue("teamtemplateid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the team type.</para>
        /// <para>Display Name: Team Type</para>
        /// </summary>
        [AttributeLogicalName("teamtype")]
        public Team_TeamType? TeamType {
            get {
                return GetOptionSetValue<Team_TeamType>("teamtype");
            }
            set {
                SetOptionSetValue("teamtype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the team.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: (Deprecated) Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the team.</para>
        /// <para>Display Name: Version number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the full name of the team, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Name</para>
        /// </summary>
        [AttributeLogicalName("yominame")]
        public string YomiName {
            get {
                return GetAttributeValue<string>("yominame");
            }
            set {
                SetAttributeValue("yominame", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Team")]
        public TransactionCurrency TransactionCurrency_Team {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Team", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Team", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("accountleads_Teams")]
        public AccountLeads accountleads_Teams {
            get {
                return GetRelatedEntity<AccountLeads>("accountleads_Teams", null);
            }
            set {
                SetRelatedEntity("accountleads_Teams", null, value);
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        [RelationshipSchemaName("business_unit_teams")]
        public BusinessUnit business_unit_teams {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_teams", null);
            }
            set {
                SetRelatedEntity("business_unit_teams", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("contactinvoices_Teams")]
        public ContactInvoices contactinvoices_Teams {
            get {
                return GetRelatedEntity<ContactInvoices>("contactinvoices_Teams", null);
            }
            set {
                SetRelatedEntity("contactinvoices_Teams", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("contactleads_Teams")]
        public ContactLeads contactleads_Teams {
            get {
                return GetRelatedEntity<ContactLeads>("contactleads_Teams", null);
            }
            set {
                SetRelatedEntity("contactleads_Teams", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("incident_Teams")]
        public Incident incident_Teams {
            get {
                return GetRelatedEntity<Incident>("incident_Teams", null);
            }
            set {
                SetRelatedEntity("incident_Teams", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("incidentresolution_Teams")]
        public IncidentResolution incidentresolution_Teams {
            get {
                return GetRelatedEntity<IncidentResolution>("incidentresolution_Teams", null);
            }
            set {
                SetRelatedEntity("incidentresolution_Teams", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("invoice_Teams")]
        public Invoice invoice_Teams {
            get {
                return GetRelatedEntity<Invoice>("invoice_Teams", null);
            }
            set {
                SetRelatedEntity("invoice_Teams", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("lead_Teams")]
        public Lead lead_Teams {
            get {
                return GetRelatedEntity<Lead>("lead_Teams", null);
            }
            set {
                SetRelatedEntity("lead_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_owning_team")]
        public IEnumerable<Lead> lead_owning_team {
            get {
                return GetRelatedEntities<Lead>("lead_owning_team", null);
            }
            set {
                SetRelatedEntities("lead_owning_team", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_team_createdonbehalfby")]
        public SystemUser lk_team_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_team_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_team_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_team_modifiedonbehalfby")]
        public SystemUser lk_team_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_team_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_team_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("administratorid")]
        [RelationshipSchemaName("lk_teambase_administratorid")]
        public SystemUser lk_teambase_administratorid {
            get {
                return GetRelatedEntity<SystemUser>("lk_teambase_administratorid", null);
            }
            set {
                SetRelatedEntity("lk_teambase_administratorid", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_teambase_createdby")]
        public SystemUser lk_teambase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_teambase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_teambase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_teambase_modifiedby")]
        public SystemUser lk_teambase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_teambase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_teambase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("opportunity_Teams")]
        public Opportunity opportunity_Teams {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_Teams", null);
            }
            set {
                SetRelatedEntity("opportunity_Teams", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("opportunityclose_Teams")]
        public OpportunityClose opportunityclose_Teams {
            get {
                return GetRelatedEntity<OpportunityClose>("opportunityclose_Teams", null);
            }
            set {
                SetRelatedEntity("opportunityclose_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("team_accounts")]
        public IEnumerable<Account> team_accounts {
            get {
                return GetRelatedEntities<Account>("team_accounts", null);
            }
            set {
                SetRelatedEntities("team_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("team_activity")]
        public IEnumerable<ActivityPointer> team_activity {
            get {
                return GetRelatedEntities<ActivityPointer>("team_activity", null);
            }
            set {
                SetRelatedEntities("team_activity", null, value);
            }
        }
        
        [RelationshipSchemaName("team_contacts")]
        public IEnumerable<Contact> team_contacts {
            get {
                return GetRelatedEntities<Contact>("team_contacts", null);
            }
            set {
                SetRelatedEntities("team_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_autonumberentity")]
        public IEnumerable<dg_autonumberentity> team_dg_autonumberentity {
            get {
                return GetRelatedEntities<dg_autonumberentity>("team_dg_autonumberentity", null);
            }
            set {
                SetRelatedEntities("team_dg_autonumberentity", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_bus")]
        public IEnumerable<dg_bus> team_dg_bus {
            get {
                return GetRelatedEntities<dg_bus>("team_dg_bus", null);
            }
            set {
                SetRelatedEntities("team_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_child")]
        public IEnumerable<dg_child> team_dg_child {
            get {
                return GetRelatedEntities<dg_child>("team_dg_child", null);
            }
            set {
                SetRelatedEntities("team_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_field")]
        public IEnumerable<dg_field> team_dg_field {
            get {
                return GetRelatedEntities<dg_field>("team_dg_field", null);
            }
            set {
                SetRelatedEntities("team_dg_field", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_man")]
        public IEnumerable<dg_man> team_dg_man {
            get {
                return GetRelatedEntities<dg_man>("team_dg_man", null);
            }
            set {
                SetRelatedEntities("team_dg_man", null, value);
            }
        }
        
        [RelationshipSchemaName("team_email")]
        public IEnumerable<Email> team_email {
            get {
                return GetRelatedEntities<Email>("team_email", null);
            }
            set {
                SetRelatedEntities("team_email", null, value);
            }
        }
        
        [RelationshipSchemaName("team_incidentresolution")]
        public IEnumerable<IncidentResolution> team_incidentresolution {
            get {
                return GetRelatedEntities<IncidentResolution>("team_incidentresolution", null);
            }
            set {
                SetRelatedEntities("team_incidentresolution", null, value);
            }
        }
        
        [RelationshipSchemaName("team_incidents")]
        public IEnumerable<Incident> team_incidents {
            get {
                return GetRelatedEntities<Incident>("team_incidents", null);
            }
            set {
                SetRelatedEntities("team_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("team_invoices")]
        public IEnumerable<Invoice> team_invoices {
            get {
                return GetRelatedEntities<Invoice>("team_invoices", null);
            }
            set {
                SetRelatedEntities("team_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("team_opportunities")]
        public IEnumerable<Opportunity> team_opportunities {
            get {
                return GetRelatedEntities<Opportunity>("team_opportunities", null);
            }
            set {
                SetRelatedEntities("team_opportunities", null, value);
            }
        }
        
        [RelationshipSchemaName("team_opportunityclose")]
        public IEnumerable<OpportunityClose> team_opportunityclose {
            get {
                return GetRelatedEntities<OpportunityClose>("team_opportunityclose", null);
            }
            set {
                SetRelatedEntities("team_opportunityclose", null, value);
            }
        }
        
        [RelationshipSchemaName("team_queueitembase_workerid")]
        public IEnumerable<QueueItem> team_queueitembase_workerid {
            get {
                return GetRelatedEntities<QueueItem>("team_queueitembase_workerid", null);
            }
            set {
                SetRelatedEntities("team_queueitembase_workerid", null, value);
            }
        }
        
        [RelationshipSchemaName("team_task")]
        public IEnumerable<Task> team_task {
            get {
                return GetRelatedEntities<Task>("team_task", null);
            }
            set {
                SetRelatedEntities("team_task", null, value);
            }
        }
        
        [RelationshipSchemaName("team_workflow")]
        public IEnumerable<Workflow> team_workflow {
            get {
                return GetRelatedEntities<Workflow>("team_workflow", null);
            }
            set {
                SetRelatedEntities("team_workflow", null, value);
            }
        }
        
        [RelationshipSchemaName("teammembership_association")]
        public IEnumerable<SystemUser> teammembership_association {
            get {
                return GetRelatedEntities<SystemUser>("teammembership_association", null);
            }
            set {
                SetRelatedEntities("teammembership_association", null, value);
            }
        }
        
        public static Team Retrieve(IOrganizationService service, Guid id, params Expression<Func<Team,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("teammembership")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class TeamMembership : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "teammembership";
        
        public const int EntityTypeCode = 23;
        
        public TeamMembership() : 
                base(EntityLogicalName) {
        }
        
        public TeamMembership(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("teammembershipid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("teammembershipid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team membership.</para>
        /// </summary>
        [AttributeLogicalName("teammembershipid")]
        public Guid? TeamMembershipId {
            get {
                return GetAttributeValue<Guid?>("teammembershipid");
            }
            set {
                SetId("teammembershipid", value);
            }
        }
        
        [AttributeLogicalName("systemuserid")]
        public Guid? SystemUserId {
            get {
                return GetAttributeValue<Guid?>("systemuserid");
            }
        }
        
        [AttributeLogicalName("teamid")]
        public Guid? TeamId {
            get {
                return GetAttributeValue<Guid?>("teamid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static TeamMembership Retrieve(IOrganizationService service, Guid id, params Expression<Func<TeamMembership,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Currency in which a financial transaction is carried out.</para>
    /// <para>Display Name: Currency</para>
    /// </summary>
    [EntityLogicalName("transactioncurrency")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class TransactionCurrency : ExtendedEntity<TransactionCurrencyState, TransactionCurrency_StatusCode> {
        
        public const string EntityLogicalName = "transactioncurrency";
        
        public const int EntityTypeCode = 9105;
        
        public TransactionCurrency() : 
                base(EntityLogicalName) {
        }
        
        public TransactionCurrency(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("currencyname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the transaction currency.</para>
        /// <para>Display Name: Transaction Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public Guid? TransactionCurrencyId {
            get {
                return GetAttributeValue<Guid?>("transactioncurrencyid");
            }
            set {
                SetId("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the transaction currency.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the transaction currency was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the transactioncurrency.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the transaction currency.</para>
        /// <para>Display Name: Currency Name</para>
        /// </summary>
        [AttributeLogicalName("currencyname")]
        public string CurrencyName {
            get {
                return GetAttributeValue<string>("currencyname");
            }
            set {
                SetAttributeValue("currencyname", value);
            }
        }
        
        /// <summary>
        /// <para>Number of decimal places that can be used for currency.</para>
        /// <para>Display Name: Currency Precision</para>
        /// </summary>
        [AttributeLogicalName("currencyprecision")]
        public int? CurrencyPrecision {
            get {
                return GetAttributeValue<int?>("currencyprecision");
            }
            set {
                SetAttributeValue("currencyprecision", value);
            }
        }
        
        /// <summary>
        /// <para>Symbol for the transaction currency.</para>
        /// <para>Display Name: Currency Symbol</para>
        /// </summary>
        [AttributeLogicalName("currencysymbol")]
        public string CurrencySymbol {
            get {
                return GetAttributeValue<string>("currencysymbol");
            }
            set {
                SetAttributeValue("currencysymbol", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate between the transaction currency and the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
            set {
                SetAttributeValue("exchangerate", value);
            }
        }
        
        /// <summary>
        /// <para>ISO currency code for the transaction currency.</para>
        /// <para>Display Name: Currency Code</para>
        /// </summary>
        [AttributeLogicalName("isocurrencycode")]
        public string ISOCurrencyCode {
            get {
                return GetAttributeValue<string>("isocurrencycode");
            }
            set {
                SetAttributeValue("isocurrencycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the transaction currency.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the transaction currency was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the transactioncurrency.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the transaction currency.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the transaction currency.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public TransactionCurrencyState? StateCode {
            get {
                return GetOptionSetValue<TransactionCurrencyState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the transaction currency.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public TransactionCurrency_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<TransactionCurrency_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the transaction currency.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_ActivityPointer")]
        public IEnumerable<ActivityPointer> TransactionCurrency_ActivityPointer {
            get {
                return GetRelatedEntities<ActivityPointer>("TransactionCurrency_ActivityPointer", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_ActivityPointer", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_BusinessUnit")]
        public IEnumerable<BusinessUnit> TransactionCurrency_BusinessUnit {
            get {
                return GetRelatedEntities<BusinessUnit>("TransactionCurrency_BusinessUnit", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_BusinessUnit", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Email")]
        public IEnumerable<Email> TransactionCurrency_Email {
            get {
                return GetRelatedEntities<Email>("TransactionCurrency_Email", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Email", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Incident")]
        public IEnumerable<Incident> TransactionCurrency_Incident {
            get {
                return GetRelatedEntities<Incident>("TransactionCurrency_Incident", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Incident", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_QueueItem")]
        public IEnumerable<QueueItem> TransactionCurrency_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("TransactionCurrency_QueueItem", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_SystemUser")]
        public IEnumerable<SystemUser> TransactionCurrency_SystemUser {
            get {
                return GetRelatedEntities<SystemUser>("TransactionCurrency_SystemUser", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_SystemUser", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Task")]
        public IEnumerable<Task> TransactionCurrency_Task {
            get {
                return GetRelatedEntities<Task>("TransactionCurrency_Task", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Task", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Team")]
        public IEnumerable<Team> TransactionCurrency_Team {
            get {
                return GetRelatedEntities<Team>("TransactionCurrency_Team", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Team", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_dg_bus")]
        public IEnumerable<dg_bus> TransactionCurrency_dg_bus {
            get {
                return GetRelatedEntities<dg_bus>("TransactionCurrency_dg_bus", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_dg_child")]
        public IEnumerable<dg_child> TransactionCurrency_dg_child {
            get {
                return GetRelatedEntities<dg_child>("TransactionCurrency_dg_child", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("incidentresolution_transactioncurrency_transactioncurrencyid")]
        public IEnumerable<IncidentResolution> incidentresolution_transactioncurrency_transactioncurrencyid {
            get {
                return GetRelatedEntities<IncidentResolution>("incidentresolution_transactioncurrency_transactioncurrencyid", null);
            }
            set {
                SetRelatedEntities("incidentresolution_transactioncurrency_transactioncurrencyid", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_transactioncurrency_createdonbehalfby")]
        public SystemUser lk_transactioncurrency_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_transactioncurrency_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_transactioncurrency_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_transactioncurrency_modifiedonbehalfby")]
        public SystemUser lk_transactioncurrency_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_transactioncurrency_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_transactioncurrency_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_transactioncurrencybase_createdby")]
        public SystemUser lk_transactioncurrencybase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_transactioncurrencybase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_transactioncurrencybase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_transactioncurrencybase_modifiedby")]
        public SystemUser lk_transactioncurrencybase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_transactioncurrencybase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_transactioncurrencybase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_account")]
        public IEnumerable<Account> transactioncurrency_account {
            get {
                return GetRelatedEntities<Account>("transactioncurrency_account", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_account", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_contact")]
        public IEnumerable<Contact> transactioncurrency_contact {
            get {
                return GetRelatedEntities<Contact>("transactioncurrency_contact", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_invoice")]
        public IEnumerable<Invoice> transactioncurrency_invoice {
            get {
                return GetRelatedEntities<Invoice>("transactioncurrency_invoice", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_invoice", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_lead")]
        public IEnumerable<Lead> transactioncurrency_lead {
            get {
                return GetRelatedEntities<Lead>("transactioncurrency_lead", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_opportunity")]
        public IEnumerable<Opportunity> transactioncurrency_opportunity {
            get {
                return GetRelatedEntities<Opportunity>("transactioncurrency_opportunity", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_opportunity", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_opportunityclose")]
        public IEnumerable<OpportunityClose> transactioncurrency_opportunityclose {
            get {
                return GetRelatedEntities<OpportunityClose>("transactioncurrency_opportunityclose", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_opportunityclose", null, value);
            }
        }
        
        public static TransactionCurrency Retrieve(IOrganizationService service, Guid id, params Expression<Func<TransactionCurrency,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Set of logical rules that define the steps necessary to automate a specific business process, task, or set of actions to be performed.</para>
    /// <para>Display Name: Process</para>
    /// </summary>
    [EntityLogicalName("workflow")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Workflow : ExtendedEntity<WorkflowState, Workflow_StatusCode> {
        
        public const string EntityLogicalName = "workflow";
        
        public const int EntityTypeCode = 4703;
        
        public Workflow() : 
                base(EntityLogicalName) {
        }
        
        public Workflow(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("workflowid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("workflowid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("workflowid")]
        public Guid? WorkflowId {
            get {
                return GetAttributeValue<Guid?>("workflowid");
            }
            set {
                SetId("workflowid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the latest activation record for the process.</para>
        /// <para>Display Name: Active Process ID</para>
        /// </summary>
        [AttributeLogicalName("activeworkflowid")]
        public EntityReference ActiveWorkflowId {
            get {
                return GetAttributeValue<EntityReference>("activeworkflowid");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the asynchronous system job is automatically deleted on completion.</para>
        /// <para>Display Name: Delete Job On Completion</para>
        /// </summary>
        [AttributeLogicalName("asyncautodelete")]
        public bool? AsyncAutoDelete {
            get {
                return GetAttributeValue<bool?>("asyncautodelete");
            }
            set {
                SetAttributeValue("asyncautodelete", value);
            }
        }
        
        /// <summary>
        /// <para>Business Process Type.</para>
        /// <para>Display Name: Business Process Type</para>
        /// </summary>
        [AttributeLogicalName("businessprocesstype")]
        public Workflow_BusinessProcessType? BusinessProcessType {
            get {
                return GetOptionSetValue<Workflow_BusinessProcessType>("businessprocesstype");
            }
            set {
                SetOptionSetValue("businessprocesstype", value);
            }
        }
        
        /// <summary>
        /// <para>Category of the process.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public Workflow_Category? Category {
            get {
                return GetOptionSetValue<Workflow_Category>("category");
            }
            set {
                SetOptionSetValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Business logic converted into client data</para>
        /// <para>Display Name: Client Data</para>
        /// </summary>
        [AttributeLogicalName("clientdata")]
        public string ClientData {
            get {
                return GetAttributeValue<string>("clientdata");
            }
            set {
                SetAttributeValue("clientdata", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Stage of the process when triggered on Create.</para>
        /// <para>Display Name: Create Stage</para>
        /// </summary>
        [AttributeLogicalName("createstage")]
        public workflow_stage? CreateStage {
            get {
                return GetOptionSetValue<workflow_stage>("createstage");
            }
            set {
                SetOptionSetValue("createstage", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the process.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the process was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the process.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Stage of the process when triggered on Delete.</para>
        /// <para>Display Name: Delete stage</para>
        /// </summary>
        [AttributeLogicalName("deletestage")]
        public workflow_stage? DeleteStage {
            get {
                return GetOptionSetValue<workflow_stage>("deletestage");
            }
            set {
                SetOptionSetValue("deletestage", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the process.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated form.</para>
        /// <para>Display Name: Form ID</para>
        /// </summary>
        [AttributeLogicalName("formid")]
        public Guid? FormId {
            get {
                return GetAttributeValue<Guid?>("formid");
            }
            set {
                SetAttributeValue("formid", value);
            }
        }
        
        /// <summary>
        /// <para>Input parameters to the process.</para>
        /// <para>Display Name: Input Parameters</para>
        /// </summary>
        [AttributeLogicalName("inputparameters")]
        public string InputParameters {
            get {
                return GetAttributeValue<string>("inputparameters");
            }
            set {
                SetAttributeValue("inputparameters", value);
            }
        }
        
        /// <summary>
        /// <para>Version in which the form is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process was created using the Microsoft Dynamics 365 Web application.</para>
        /// <para>Display Name: Is CRM Process</para>
        /// </summary>
        [AttributeLogicalName("iscrmuiworkflow")]
        public bool? IsCrmUIWorkflow {
            get {
                return GetAttributeValue<bool?>("iscrmuiworkflow");
            }
        }
        
        /// <summary>
        /// <para>Defines whether other publishers can attach custom processing steps to this action</para>
        /// <para>Display Name: Allow custom processing step for other publishers</para>
        /// </summary>
        [AttributeLogicalName("iscustomprocessingstepallowedforotherpublishers")]
        public BooleanManagedProperty IsCustomProcessingStepAllowedForOtherPublishers {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomprocessingstepallowedforotherpublishers");
            }
            set {
                SetAttributeValue("iscustomprocessingstepallowedforotherpublishers", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether this component can be customized.</para>
        /// <para>Display Name: Customizable</para>
        /// </summary>
        [AttributeLogicalName("iscustomizable")]
        public BooleanManagedProperty IsCustomizable {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
            }
            set {
                SetAttributeValue("iscustomizable", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the solution component is part of a managed solution.</para>
        /// <para>Display Name: Is Managed</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Whether or not the steps in the process are executed in a single transaction.</para>
        /// <para>Display Name: Is Transacted</para>
        /// </summary>
        [AttributeLogicalName("istransacted")]
        public bool? IsTransacted {
            get {
                return GetAttributeValue<bool?>("istransacted");
            }
            set {
                SetAttributeValue("istransacted", value);
            }
        }
        
        /// <summary>
        /// <para>Language of the process.</para>
        /// <para>Display Name: Language</para>
        /// </summary>
        [AttributeLogicalName("languagecode")]
        public int? LanguageCode {
            get {
                return GetAttributeValue<int?>("languagecode");
            }
            set {
                SetAttributeValue("languagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the mode of the process.</para>
        /// <para>Display Name: Mode</para>
        /// </summary>
        [AttributeLogicalName("mode")]
        public Workflow_Mode? Mode {
            get {
                return GetOptionSetValue<Workflow_Mode>("mode");
            }
            set {
                SetOptionSetValue("mode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the process.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the process was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the process.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the process.</para>
        /// <para>Display Name: Process Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process is able to run as an on-demand process.</para>
        /// <para>Display Name: Run as On Demand</para>
        /// </summary>
        [AttributeLogicalName("ondemand")]
        public bool? OnDemand {
            get {
                return GetAttributeValue<bool?>("ondemand");
            }
            set {
                SetAttributeValue("ondemand", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the process.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the process.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the process.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the process.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the definition for process activation.</para>
        /// <para>Display Name: Parent Process ID</para>
        /// </summary>
        [AttributeLogicalName("parentworkflowid")]
        public EntityReference ParentWorkflowId {
            get {
                return GetAttributeValue<EntityReference>("parentworkflowid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the plug-in type.</para>
        /// </summary>
        [AttributeLogicalName("plugintypeid")]
        public EntityReference PluginTypeId {
            get {
                return GetAttributeValue<EntityReference>("plugintypeid");
            }
        }
        
        /// <summary>
        /// <para>Primary entity for the process. The process can be associated for one or more SDK operations defined on the primary entity.</para>
        /// <para>Display Name: Primary Entity</para>
        /// </summary>
        [AttributeLogicalName("primaryentity")]
        public string PrimaryEntity {
            get {
                return GetAttributeValue<string>("primaryentity");
            }
            set {
                SetAttributeValue("primaryentity", value);
            }
        }
        
        /// <summary>
        /// <para>Type the business process flow order.</para>
        /// <para>Display Name: Process Order</para>
        /// </summary>
        [AttributeLogicalName("processorder")]
        public int? ProcessOrder {
            get {
                return GetAttributeValue<int?>("processorder");
            }
            set {
                SetAttributeValue("processorder", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the role assignment for the process.</para>
        /// <para>Display Name: Role assignment for Process</para>
        /// </summary>
        [AttributeLogicalName("processroleassignment")]
        public string ProcessRoleAssignment {
            get {
                return GetAttributeValue<string>("processroleassignment");
            }
            set {
                SetAttributeValue("processroleassignment", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated form for process trigger.</para>
        /// <para>Display Name: ProcessTriggerFormId</para>
        /// </summary>
        [AttributeLogicalName("processtriggerformid")]
        public Guid? ProcessTriggerFormId {
            get {
                return GetAttributeValue<Guid?>("processtriggerformid");
            }
            set {
                SetAttributeValue("processtriggerformid", value);
            }
        }
        
        /// <summary>
        /// <para>Scope of the process trigger.</para>
        /// <para>Display Name: ProcessTriggerScope</para>
        /// </summary>
        [AttributeLogicalName("processtriggerscope")]
        public Workflow_ProcessTriggerScope? ProcessTriggerScope {
            get {
                return GetOptionSetValue<Workflow_ProcessTriggerScope>("processtriggerscope");
            }
            set {
                SetOptionSetValue("processtriggerscope", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates the rank for order of execution for the synchronous workflow.</para>
        /// <para>Display Name: Rank</para>
        /// </summary>
        [AttributeLogicalName("rank")]
        public int? Rank {
            get {
                return GetAttributeValue<int?>("rank");
            }
            set {
                SetAttributeValue("rank", value);
            }
        }
        
        /// <summary>
        /// <para>The renderer type of Workflow</para>
        /// <para>Display Name: Renderer Type</para>
        /// </summary>
        [AttributeLogicalName("rendererobjecttypecode")]
        public string RendererObjectTypeCode {
            get {
                return GetAttributeValue<string>("rendererobjecttypecode");
            }
            set {
                SetAttributeValue("rendererobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the system user account under which a workflow executes.</para>
        /// <para>Display Name: Run As User</para>
        /// </summary>
        [AttributeLogicalName("runas")]
        public workflow_runas? RunAs {
            get {
                return GetOptionSetValue<workflow_runas>("runas");
            }
            set {
                SetOptionSetValue("runas", value);
            }
        }
        
        /// <summary>
        /// <para>Scope of the process.</para>
        /// <para>Display Name: Scope</para>
        /// </summary>
        [AttributeLogicalName("scope")]
        public Workflow_Scope? Scope {
            get {
                return GetOptionSetValue<Workflow_Scope>("scope");
            }
            set {
                SetOptionSetValue("scope", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the SDK Message associated with this workflow.</para>
        /// <para>Display Name: SDK Message</para>
        /// </summary>
        [AttributeLogicalName("sdkmessageid")]
        public EntityReference SdkMessageId {
            get {
                return GetAttributeValue<EntityReference>("sdkmessageid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>Status of the process.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public WorkflowState? StateCode {
            get {
                return GetOptionSetValue<WorkflowState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Additional information about status of the process.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Workflow_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Workflow_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process can be included in other processes as a child process.</para>
        /// <para>Display Name: Is Child Process</para>
        /// </summary>
        [AttributeLogicalName("subprocess")]
        public bool? Subprocess {
            get {
                return GetAttributeValue<bool?>("subprocess");
            }
            set {
                SetAttributeValue("subprocess", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether synchronous workflow failures will be saved to log files.</para>
        /// <para>Display Name: Log upon Failure</para>
        /// </summary>
        [AttributeLogicalName("syncworkflowlogonfailure")]
        public bool? SyncWorkflowLogOnFailure {
            get {
                return GetAttributeValue<bool?>("syncworkflowlogonfailure");
            }
            set {
                SetAttributeValue("syncworkflowlogonfailure", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process will be triggered when the primary entity is created.</para>
        /// <para>Display Name: Trigger On Create</para>
        /// </summary>
        [AttributeLogicalName("triggeroncreate")]
        public bool? TriggerOnCreate {
            get {
                return GetAttributeValue<bool?>("triggeroncreate");
            }
            set {
                SetAttributeValue("triggeroncreate", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process will be triggered on deletion of the primary entity.</para>
        /// <para>Display Name: Trigger On Delete</para>
        /// </summary>
        [AttributeLogicalName("triggerondelete")]
        public bool? TriggerOnDelete {
            get {
                return GetAttributeValue<bool?>("triggerondelete");
            }
            set {
                SetAttributeValue("triggerondelete", value);
            }
        }
        
        /// <summary>
        /// <para>Attributes that trigger the process when updated.</para>
        /// <para>Display Name: Trigger On Update Attribute List</para>
        /// </summary>
        [AttributeLogicalName("triggeronupdateattributelist")]
        public string TriggerOnUpdateAttributeList {
            get {
                return GetAttributeValue<string>("triggeronupdateattributelist");
            }
            set {
                SetAttributeValue("triggeronupdateattributelist", value);
            }
        }
        
        /// <summary>
        /// <para>Type of the process.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("type")]
        public Workflow_Type? Type {
            get {
                return GetOptionSetValue<Workflow_Type>("type");
            }
            set {
                SetOptionSetValue("type", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: UI Data</para>
        /// </summary>
        [AttributeLogicalName("uidata")]
        public string UIData {
            get {
                return GetAttributeValue<string>("uidata");
            }
        }
        
        /// <summary>
        /// <para>Type of the UI Flow process.</para>
        /// <para>Display Name: UI Flow Type</para>
        /// </summary>
        [AttributeLogicalName("uiflowtype")]
        public Workflow_UIFlowType? UIFlowType {
            get {
                return GetOptionSetValue<Workflow_UIFlowType>("uiflowtype");
            }
            set {
                SetOptionSetValue("uiflowtype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique name of the process</para>
        /// <para>Display Name: Unique Name</para>
        /// </summary>
        [AttributeLogicalName("uniquename")]
        public string UniqueName {
            get {
                return GetAttributeValue<string>("uniquename");
            }
            set {
                SetAttributeValue("uniquename", value);
            }
        }
        
        /// <summary>
        /// <para>Select the stage a process will be triggered on update.</para>
        /// <para>Display Name: Update Stage</para>
        /// </summary>
        [AttributeLogicalName("updatestage")]
        public workflow_stage? UpdateStage {
            get {
                return GetOptionSetValue<workflow_stage>("updatestage");
            }
            set {
                SetOptionSetValue("updatestage", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("workflowidunique")]
        public Guid? WorkflowIdUnique {
            get {
                return GetAttributeValue<Guid?>("workflowidunique");
            }
        }
        
        /// <summary>
        /// <para>XAML that defines the process.</para>
        /// </summary>
        [AttributeLogicalName("xaml")]
        public string Xaml {
            get {
                return GetAttributeValue<string>("xaml");
            }
            set {
                SetAttributeValue("xaml", value);
            }
        }
        
        [RelationshipSchemaName("workflow_active_workflow", EntityRole.Referenced)]
        public IEnumerable<Workflow> Referencedworkflow_active_workflow {
            get {
                return GetRelatedEntities<Workflow>("workflow_active_workflow", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("workflow_active_workflow", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("workflow_parent_workflow", EntityRole.Referenced)]
        public IEnumerable<Workflow> Referencedworkflow_parent_workflow {
            get {
                return GetRelatedEntities<Workflow>("workflow_parent_workflow", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("workflow_parent_workflow", EntityRole.Referenced, value);
            }
        }
        
        [AttributeLogicalName("activeworkflowid")]
        [RelationshipSchemaName("workflow_active_workflow", EntityRole.Referencing)]
        public Workflow Referencingworkflow_active_workflow {
            get {
                return GetRelatedEntity<Workflow>("workflow_active_workflow", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("workflow_active_workflow", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentworkflowid")]
        [RelationshipSchemaName("workflow_parent_workflow", EntityRole.Referencing)]
        public Workflow Referencingworkflow_parent_workflow {
            get {
                return GetRelatedEntity<Workflow>("workflow_parent_workflow", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("workflow_parent_workflow", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_workflow")]
        public BusinessUnit business_unit_workflow {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_workflow", null);
            }
            set {
                SetRelatedEntity("business_unit_workflow", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_workflow")]
        public SystemUser system_user_workflow {
            get {
                return GetRelatedEntity<SystemUser>("system_user_workflow", null);
            }
            set {
                SetRelatedEntity("system_user_workflow", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_workflow")]
        public Team team_workflow {
            get {
                return GetRelatedEntity<Team>("team_workflow", null);
            }
            set {
                SetRelatedEntity("team_workflow", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("workflow_createdby")]
        public SystemUser workflow_createdby {
            get {
                return GetRelatedEntity<SystemUser>("workflow_createdby", null);
            }
            set {
                SetRelatedEntity("workflow_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("workflow_createdonbehalfby")]
        public SystemUser workflow_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("workflow_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("workflow_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("workflow_modifiedby")]
        public SystemUser workflow_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("workflow_modifiedby", null);
            }
            set {
                SetRelatedEntity("workflow_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("workflow_modifiedonbehalfby")]
        public SystemUser workflow_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("workflow_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("workflow_modifiedonbehalfby", null, value);
            }
        }
        
        public static Workflow Retrieve(IOrganizationService service, Guid id, params Expression<Func<Workflow,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("dg_hasridden")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_HasRidden : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "dg_hasridden";
        
        public const int EntityTypeCode = 10017;
        
        public dg_HasRidden() : 
                base(EntityLogicalName) {
        }
        
        public dg_HasRidden(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("dg_hasriddenid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_hasriddenid", value);
            }
        }
        
        [AttributeLogicalName("dg_hasriddenid")]
        public Guid? dg_HasRiddenId {
            get {
                return GetAttributeValue<Guid?>("dg_hasriddenid");
            }
            set {
                SetId("dg_hasriddenid", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("dg_busid")]
        public Guid? dg_busid {
            get {
                return GetAttributeValue<Guid?>("dg_busid");
            }
        }
        
        [AttributeLogicalName("dg_childid")]
        public Guid? dg_childid {
            get {
                return GetAttributeValue<Guid?>("dg_childid");
            }
        }
        
        public static dg_HasRidden Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_HasRidden,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("dg_account_account")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_account_account : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "dg_account_account";
        
        public const int EntityTypeCode = 10018;
        
        public dg_account_account() : 
                base(EntityLogicalName) {
        }
        
        public dg_account_account(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("dg_account_accountid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_account_accountid", value);
            }
        }
        
        [AttributeLogicalName("dg_account_accountid")]
        public Guid? dg_account_accountId {
            get {
                return GetAttributeValue<Guid?>("dg_account_accountid");
            }
            set {
                SetId("dg_account_accountid", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("accountidone")]
        public Guid? accountidOne {
            get {
                return GetAttributeValue<Guid?>("accountidone");
            }
        }
        
        [AttributeLogicalName("accountidtwo")]
        public Guid? accountidTwo {
            get {
                return GetAttributeValue<Guid?>("accountidtwo");
            }
        }
        
        public static dg_account_account Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_account_account,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("dg_account_contact")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_account_contact : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "dg_account_contact";
        
        public const int EntityTypeCode = 10005;
        
        public dg_account_contact() : 
                base(EntityLogicalName) {
        }
        
        public dg_account_contact(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("dg_account_contactid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_account_contactid", value);
            }
        }
        
        [AttributeLogicalName("dg_account_contactid")]
        public Guid? dg_account_contactId {
            get {
                return GetAttributeValue<Guid?>("dg_account_contactid");
            }
            set {
                SetId("dg_account_contactid", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("accountid")]
        public Guid? accountid {
            get {
                return GetAttributeValue<Guid?>("accountid");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? contactid {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        public static dg_account_contact Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_account_contact,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: AutoNumberEntity</para>
    /// </summary>
    [EntityLogicalName("dg_autonumberentity")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_autonumberentity : ExtendedEntity<dg_autonumberentityState, dg_autonumberentity_statuscode> {
        
        public const string EntityLogicalName = "dg_autonumberentity";
        
        public const int EntityTypeCode = 10363;
        
        public dg_autonumberentity() : 
                base(EntityLogicalName) {
        }
        
        public dg_autonumberentity(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_autonumberentityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_autonumberentityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: AutoNumberEntity</para>
        /// </summary>
        [AttributeLogicalName("dg_autonumberentityid")]
        public Guid? dg_autonumberentityId {
            get {
                return GetAttributeValue<Guid?>("dg_autonumberentityid");
            }
            set {
                SetId("dg_autonumberentityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Version Number</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: AutoNumberingCombi</para>
        /// </summary>
        [AttributeLogicalName("dg_autonumberingcombi")]
        public string dg_AutoNumberingCombi {
            get {
                return GetAttributeValue<string>("dg_autonumberingcombi");
            }
            set {
                SetAttributeValue("dg_autonumberingcombi", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateTimeFormat</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimeformat")]
        public string dg_DateTimeFormat {
            get {
                return GetAttributeValue<string>("dg_datetimeformat");
            }
            set {
                SetAttributeValue("dg_datetimeformat", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: RandomString</para>
        /// </summary>
        [AttributeLogicalName("dg_randomstring")]
        public string dg_RandomString {
            get {
                return GetAttributeValue<string>("dg_randomstring");
            }
            set {
                SetAttributeValue("dg_randomstring", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Sequential Number</para>
        /// </summary>
        [AttributeLogicalName("dg_sequentialnumber")]
        public string dg_sequentialnumber {
            get {
                return GetAttributeValue<string>("dg_sequentialnumber");
            }
            set {
                SetAttributeValue("dg_sequentialnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the AutoNumberEntity</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_autonumberentityState? statecode {
            get {
                return GetOptionSetValue<dg_autonumberentityState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the AutoNumberEntity</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_autonumberentity_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_autonumberentity_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_autonumberentity")]
        public BusinessUnit business_unit_dg_autonumberentity {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_autonumberentity", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_autonumberentity", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_autonumberentity_createdby")]
        public SystemUser lk_dg_autonumberentity_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_autonumberentity_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_autonumberentity_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_autonumberentity_createdonbehalfby")]
        public SystemUser lk_dg_autonumberentity_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_autonumberentity_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_autonumberentity_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_autonumberentity_modifiedby")]
        public SystemUser lk_dg_autonumberentity_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_autonumberentity_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_autonumberentity_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_autonumberentity_modifiedonbehalfby")]
        public SystemUser lk_dg_autonumberentity_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_autonumberentity_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_autonumberentity_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_autonumberentity")]
        public Team team_dg_autonumberentity {
            get {
                return GetRelatedEntity<Team>("team_dg_autonumberentity", null);
            }
            set {
                SetRelatedEntity("team_dg_autonumberentity", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_autonumberentity")]
        public SystemUser user_dg_autonumberentity {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_autonumberentity", null);
            }
            set {
                SetRelatedEntity("user_dg_autonumberentity", null, value);
            }
        }
        
        public static dg_autonumberentity Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_autonumberentity,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Bus</para>
    /// </summary>
    [EntityLogicalName("dg_bus")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_bus : ExtendedEntity<dg_busState, dg_bus_statuscode> {
        
        public const string EntityLogicalName = "dg_bus";
        
        public const int EntityTypeCode = 10016;
        
        public dg_bus() : 
                base(EntityLogicalName) {
        }
        
        public dg_bus(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_busid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_busid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Bus</para>
        /// </summary>
        [AttributeLogicalName("dg_busid")]
        public Guid? dg_busId {
            get {
                return GetAttributeValue<Guid?>("dg_busid");
            }
            set {
                SetId("dg_busid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the entity.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: AllConditions</para>
        /// </summary>
        [AttributeLogicalName("dg_allconditions")]
        public string dg_AllConditions {
            get {
                return GetAttributeValue<string>("dg_allconditions");
            }
        }
        
        /// <summary>
        /// <para>Display Name: AvgAllowance</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance")]
        public decimal? dg_AvgAllowance {
            get {
                return GetMoneyValue("dg_avgallowance");
            }
        }
        
        /// <summary>
        /// <para>dg_AvgAllowance (CountAverageDescription)</para>
        /// <para>Display Name: dg_AvgAllowance (CountAverage)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_count")]
        public int? dg_AvgAllowance_Count {
            get {
                return GetAttributeValue<int?>("dg_avgallowance_count");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field AvgAllowance.</para>
        /// <para>Display Name: AvgAllowance (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_date")]
        public DateTime? dg_AvgAllowance_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_avgallowance_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field AvgAllowance.</para>
        /// <para>Display Name: AvgAllowance (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_state")]
        public int? dg_AvgAllowance_State {
            get {
                return GetAttributeValue<int?>("dg_avgallowance_state");
            }
        }
        
        /// <summary>
        /// <para>dg_AvgAllowance (SumAverageDescription)</para>
        /// <para>Display Name: dg_AvgAllowance (SumAverage)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_sum")]
        public decimal? dg_AvgAllowance_Sum {
            get {
                return GetMoneyValue("dg_avgallowance_sum");
            }
        }
        
        /// <summary>
        /// <para>Display Name: BooleanUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_booleanudregnet")]
        public bool? dg_BooleanUdregnet {
            get {
                return GetAttributeValue<bool?>("dg_booleanudregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateTimeRollUp</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimerollup")]
        public DateTime? dg_DateTimeRollUp {
            get {
                return GetAttributeValue<DateTime?>("dg_datetimerollup");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field DateTimeRollUp.</para>
        /// <para>Display Name: DateTimeRollUp (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimerollup_date")]
        public DateTime? dg_DateTimeRollUp_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_datetimerollup_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field DateTimeRollUp.</para>
        /// <para>Display Name: DateTimeRollUp (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimerollup_state")]
        public int? dg_DateTimeRollUp_State {
            get {
                return GetAttributeValue<int?>("dg_datetimerollup_state");
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateTimeUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimeudregnet")]
        public DateTime? dg_DateTimeUdregnet {
            get {
                return GetAttributeValue<DateTime?>("dg_datetimeudregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: DecimalUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_decimaludregnet")]
        public decimal? dg_DecimalUdregnet {
            get {
                return GetAttributeValue<decimal?>("dg_decimaludregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Driver</para>
        /// </summary>
        [AttributeLogicalName("dg_driver")]
        public EntityReference dg_Driver {
            get {
                return GetAttributeValue<EntityReference>("dg_driver");
            }
            set {
                SetAttributeValue("dg_driver", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: EndnuUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_endnuudregnet")]
        public decimal? dg_EndnuUdregnet {
            get {
                return GetMoneyValue("dg_endnuudregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: EtHelTal</para>
        /// </summary>
        [AttributeLogicalName("dg_etheltal")]
        public int? dg_EtHelTal {
            get {
                return GetAttributeValue<int?>("dg_etheltal");
            }
            set {
                SetAttributeValue("dg_etheltal", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: MaxAllowance</para>
        /// </summary>
        [AttributeLogicalName("dg_maxallowance")]
        public decimal? dg_MaxAllowance {
            get {
                return GetMoneyValue("dg_maxallowance");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field MaxAllowance.</para>
        /// <para>Display Name: MaxAllowance (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_maxallowance_date")]
        public DateTime? dg_MaxAllowance_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_maxallowance_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field MaxAllowance.</para>
        /// <para>Display Name: MaxAllowance (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_maxallowance_state")]
        public int? dg_MaxAllowance_State {
            get {
                return GetAttributeValue<int?>("dg_maxallowance_state");
            }
        }
        
        /// <summary>
        /// <para>Display Name: MinAllowance</para>
        /// </summary>
        [AttributeLogicalName("dg_minallowance")]
        public decimal? dg_MinAllowance {
            get {
                return GetMoneyValue("dg_minallowance");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field MinAllowance.</para>
        /// <para>Display Name: MinAllowance (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_minallowance_date")]
        public DateTime? dg_MinAllowance_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_minallowance_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field MinAllowance.</para>
        /// <para>Display Name: MinAllowance (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_minallowance_state")]
        public int? dg_MinAllowance_State {
            get {
                return GetAttributeValue<int?>("dg_minallowance_state");
            }
        }
        
        /// <summary>
        /// <para>Display Name: NoValue</para>
        /// </summary>
        [AttributeLogicalName("dg_novalue")]
        public string dg_NoValue {
            get {
                return GetAttributeValue<string>("dg_novalue");
            }
            set {
                SetAttributeValue("dg_novalue", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: PicklistUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_picklistudregnet")]
        public dg_bus_dg_PicklistUdregnet? dg_PicklistUdregnet {
            get {
                return GetOptionSetValue<dg_bus_dg_PicklistUdregnet>("dg_picklistudregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Some Optionset</para>
        /// </summary>
        [AttributeLogicalName("dg_someoptionset")]
        public dg_myoptionset? dg_SomeOptionset {
            get {
                return GetOptionSetValue<dg_myoptionset>("dg_someoptionset");
            }
            set {
                SetOptionSetValue("dg_someoptionset", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: StringUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_stringudregnet")]
        public string dg_StringUdregnet {
            get {
                return GetAttributeValue<string>("dg_stringudregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Ticket price</para>
        /// </summary>
        [AttributeLogicalName("dg_ticketprice")]
        public decimal? dg_Ticketprice {
            get {
                return GetMoneyValue("dg_ticketprice");
            }
            set {
                SetMoneyValue("dg_ticketprice", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Total allowance</para>
        /// </summary>
        [AttributeLogicalName("dg_totalallowance")]
        public decimal? dg_Totalallowance {
            get {
                return GetMoneyValue("dg_totalallowance");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field Total allowance.</para>
        /// <para>Display Name: Total allowance (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_totalallowance_date")]
        public DateTime? dg_Totalallowance_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_totalallowance_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field Total allowance.</para>
        /// <para>Display Name: Total allowance (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_totalallowance_state")]
        public int? dg_Totalallowance_State {
            get {
                return GetAttributeValue<int?>("dg_totalallowance_state");
            }
        }
        
        /// <summary>
        /// <para>Display Name: TrimLeft</para>
        /// </summary>
        [AttributeLogicalName("dg_trimleft")]
        public string dg_TrimLeft {
            get {
                return GetAttributeValue<string>("dg_trimleft");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Udkørselsdato</para>
        /// </summary>
        [AttributeLogicalName("dg_udkoerselsdato")]
        public DateTime? dg_Udkoerselsdato {
            get {
                return GetAttributeValue<DateTime?>("dg_udkoerselsdato");
            }
            set {
                SetAttributeValue("dg_udkoerselsdato", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Udregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_udregnet")]
        public decimal? dg_Udregnet {
            get {
                return GetMoneyValue("dg_udregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Whole numberUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_wholenumberudregnet")]
        public int? dg_WholenumberUdregnet {
            get {
                return GetAttributeValue<int?>("dg_wholenumberudregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: asdasasdasds</para>
        /// </summary>
        [AttributeLogicalName("dg_asdas")]
        public decimal? dg_asdas {
            get {
                return GetMoneyValue("dg_asdas");
            }
        }
        
        /// <summary>
        /// <para>Value of the asdas in base currency.</para>
        /// <para>Display Name: asdas (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_asdas_base")]
        public decimal? dg_asdas_Base {
            get {
                return GetMoneyValue("dg_asdas_base");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field asdas.</para>
        /// <para>Display Name: asdas (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_asdas_date")]
        public DateTime? dg_asdas_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_asdas_date");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field asdas.</para>
        /// <para>Display Name: asdas (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_asdas_state")]
        public int? dg_asdas_State {
            get {
                return GetAttributeValue<int?>("dg_asdas_state");
            }
        }
        
        /// <summary>
        /// <para>Value of the AvgAllowance in base currency.</para>
        /// <para>Display Name: AvgAllowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_base")]
        public decimal? dg_avgallowance_Base {
            get {
                return GetMoneyValue("dg_avgallowance_base");
            }
        }
        
        /// <summary>
        /// <para>Value of the EndnuUdregnet in base currency.</para>
        /// <para>Display Name: EndnuUdregnet (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_endnuudregnet_base")]
        public decimal? dg_endnuudregnet_Base {
            get {
                return GetMoneyValue("dg_endnuudregnet_base");
            }
        }
        
        /// <summary>
        /// <para>Value of the MaxAllowance in base currency.</para>
        /// <para>Display Name: MaxAllowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_maxallowance_base")]
        public decimal? dg_maxallowance_Base {
            get {
                return GetMoneyValue("dg_maxallowance_base");
            }
        }
        
        /// <summary>
        /// <para>Value of the MinAllowance in base currency.</para>
        /// <para>Display Name: MinAllowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_minallowance_base")]
        public decimal? dg_minallowance_Base {
            get {
                return GetMoneyValue("dg_minallowance_base");
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Ticket price in base currency.</para>
        /// <para>Display Name: Ticket price (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_ticketprice_base")]
        public decimal? dg_ticketprice_Base {
            get {
                return GetMoneyValue("dg_ticketprice_base");
            }
        }
        
        /// <summary>
        /// <para>Value of the Total allowance in base currency.</para>
        /// <para>Display Name: Total allowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_totalallowance_base")]
        public decimal? dg_totalallowance_Base {
            get {
                return GetMoneyValue("dg_totalallowance_base");
            }
        }
        
        /// <summary>
        /// <para>Value of the Udregnet in base currency.</para>
        /// <para>Display Name: Udregnet (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_udregnet_base")]
        public decimal? dg_udregnet_Base {
            get {
                return GetMoneyValue("dg_udregnet_base");
            }
        }
        
        /// <summary>
        /// <para>Status of the Bus</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_busState? statecode {
            get {
                return GetOptionSetValue<dg_busState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Bus</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_bus_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_bus_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_dg_bus")]
        public TransactionCurrency TransactionCurrency_dg_bus {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_dg_bus", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_dg_bus", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_bus")]
        public BusinessUnit business_unit_dg_bus {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_bus", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_HasRidden")]
        public IEnumerable<dg_child> dg_HasRidden {
            get {
                return GetRelatedEntities<dg_child>("dg_HasRidden", null);
            }
            set {
                SetRelatedEntities("dg_HasRidden", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_bus_parental")]
        public IEnumerable<dg_child> dg_bus_parental {
            get {
                return GetRelatedEntities<dg_child>("dg_bus_parental", null);
            }
            set {
                SetRelatedEntities("dg_bus_parental", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_dg_bus_dg_child_Skolebus")]
        public IEnumerable<dg_child> dg_dg_bus_dg_child_Skolebus {
            get {
                return GetRelatedEntities<dg_child>("dg_dg_bus_dg_child_Skolebus", null);
            }
            set {
                SetRelatedEntities("dg_dg_bus_dg_child_Skolebus", null, value);
            }
        }
        
        [AttributeLogicalName("dg_driver")]
        [RelationshipSchemaName("dg_dg_man_dg_bus_Driver")]
        public dg_man dg_dg_man_dg_bus_Driver {
            get {
                return GetRelatedEntity<dg_man>("dg_dg_man_dg_bus_Driver", null);
            }
            set {
                SetRelatedEntity("dg_dg_man_dg_bus_Driver", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_bus_createdby")]
        public SystemUser lk_dg_bus_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_bus_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_bus_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_bus_createdonbehalfby")]
        public SystemUser lk_dg_bus_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_bus_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_bus_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_bus_modifiedby")]
        public SystemUser lk_dg_bus_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_bus_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_bus_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_bus_modifiedonbehalfby")]
        public SystemUser lk_dg_bus_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_bus_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_bus_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_bus")]
        public Team team_dg_bus {
            get {
                return GetRelatedEntity<Team>("team_dg_bus", null);
            }
            set {
                SetRelatedEntity("team_dg_bus", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_bus")]
        public SystemUser user_dg_bus {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_bus", null);
            }
            set {
                SetRelatedEntity("user_dg_bus", null, value);
            }
        }
        
        public static dg_bus Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_bus,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Child</para>
    /// </summary>
    [EntityLogicalName("dg_child")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_child : ExtendedEntity<dg_childState, dg_child_statuscode> {
        
        public const string EntityLogicalName = "dg_child";
        
        public const int EntityTypeCode = 10014;
        
        public dg_child() : 
                base(EntityLogicalName) {
        }
        
        public dg_child(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_childid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_childid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Child</para>
        /// </summary>
        [AttributeLogicalName("dg_childid")]
        public Guid? dg_childId {
            get {
                return GetAttributeValue<Guid?>("dg_childid");
            }
            set {
                SetId("dg_childid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the entity.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Allowance</para>
        /// </summary>
        [AttributeLogicalName("dg_allowance")]
        public decimal? dg_Allowance {
            get {
                return GetMoneyValue("dg_allowance");
            }
            set {
                SetMoneyValue("dg_allowance", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Skolebus</para>
        /// </summary>
        [AttributeLogicalName("dg_skolebus")]
        public EntityReference dg_Skolebus {
            get {
                return GetAttributeValue<EntityReference>("dg_skolebus");
            }
            set {
                SetAttributeValue("dg_skolebus", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Allowance in base currency.</para>
        /// <para>Display Name: Allowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_allowance_base")]
        public decimal? dg_allowance_Base {
            get {
                return GetMoneyValue("dg_allowance_base");
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Bus associated with Child.</para>
        /// <para>Display Name: parentBus</para>
        /// </summary>
        [AttributeLogicalName("dg_parentbusid")]
        public EntityReference dg_parentBusId {
            get {
                return GetAttributeValue<EntityReference>("dg_parentbusid");
            }
            set {
                SetAttributeValue("dg_parentbusid", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Child</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_childState? statecode {
            get {
                return GetOptionSetValue<dg_childState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Child</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_child_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_child_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_dg_child")]
        public TransactionCurrency TransactionCurrency_dg_child {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_dg_child", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_dg_child", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_child")]
        public BusinessUnit business_unit_dg_child {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_child", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_HasRidden")]
        public IEnumerable<dg_bus> dg_HasRidden {
            get {
                return GetRelatedEntities<dg_bus>("dg_HasRidden", null);
            }
            set {
                SetRelatedEntities("dg_HasRidden", null, value);
            }
        }
        
        [AttributeLogicalName("dg_parentbusid")]
        [RelationshipSchemaName("dg_bus_parental")]
        public dg_bus dg_bus_parental {
            get {
                return GetRelatedEntity<dg_bus>("dg_bus_parental", null);
            }
            set {
                SetRelatedEntity("dg_bus_parental", null, value);
            }
        }
        
        [AttributeLogicalName("dg_skolebus")]
        [RelationshipSchemaName("dg_dg_bus_dg_child_Skolebus")]
        public dg_bus dg_dg_bus_dg_child_Skolebus {
            get {
                return GetRelatedEntity<dg_bus>("dg_dg_bus_dg_child_Skolebus", null);
            }
            set {
                SetRelatedEntity("dg_dg_bus_dg_child_Skolebus", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_child_createdby")]
        public SystemUser lk_dg_child_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_child_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_child_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_child_createdonbehalfby")]
        public SystemUser lk_dg_child_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_child_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_child_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_child_modifiedby")]
        public SystemUser lk_dg_child_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_child_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_child_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_child_modifiedonbehalfby")]
        public SystemUser lk_dg_child_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_child_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_child_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_child")]
        public Team team_dg_child {
            get {
                return GetRelatedEntity<Team>("team_dg_child", null);
            }
            set {
                SetRelatedEntity("team_dg_child", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_child")]
        public SystemUser user_dg_child {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_child", null);
            }
            set {
                SetRelatedEntity("user_dg_child", null, value);
            }
        }
        
        public static dg_child Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_child,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Field</para>
    /// </summary>
    [EntityLogicalName("dg_field")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_field : ExtendedEntity<dg_fieldState, dg_field_statuscode> {
        
        public const string EntityLogicalName = "dg_field";
        
        public const int EntityTypeCode = 10011;
        
        public dg_field() : 
                base(EntityLogicalName) {
        }
        
        public dg_field(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_fieldid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_fieldid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Field</para>
        /// </summary>
        [AttributeLogicalName("dg_fieldid")]
        public Guid? dg_fieldId {
            get {
                return GetAttributeValue<Guid?>("dg_fieldid");
            }
            set {
                SetId("dg_fieldid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Field</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_fieldState? statecode {
            get {
                return GetOptionSetValue<dg_fieldState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Field</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_field_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_field_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_field")]
        public BusinessUnit business_unit_dg_field {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_field", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_field", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_field_createdby")]
        public SystemUser lk_dg_field_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_field_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_field_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_field_createdonbehalfby")]
        public SystemUser lk_dg_field_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_field_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_field_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_field_modifiedby")]
        public SystemUser lk_dg_field_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_field_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_field_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_field_modifiedonbehalfby")]
        public SystemUser lk_dg_field_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_field_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_field_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_field")]
        public Team team_dg_field {
            get {
                return GetRelatedEntity<Team>("team_dg_field", null);
            }
            set {
                SetRelatedEntity("team_dg_field", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_field")]
        public SystemUser user_dg_field {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_field", null);
            }
            set {
                SetRelatedEntity("user_dg_field", null, value);
            }
        }
        
        public static dg_field Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_field,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Man</para>
    /// </summary>
    [EntityLogicalName("dg_man")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_man : ExtendedEntity<dg_manState, dg_man_statuscode> {
        
        public const string EntityLogicalName = "dg_man";
        
        public const int EntityTypeCode = 10013;
        
        public dg_man() : 
                base(EntityLogicalName) {
        }
        
        public dg_man(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_manid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_manid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Man</para>
        /// </summary>
        [AttributeLogicalName("dg_manid")]
        public Guid? dg_manId {
            get {
                return GetAttributeValue<Guid?>("dg_manid");
            }
            set {
                SetId("dg_manid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: testbool</para>
        /// </summary>
        [AttributeLogicalName("dg_testbool")]
        public bool? dg_testbool {
            get {
                return GetAttributeValue<bool?>("dg_testbool");
            }
            set {
                SetAttributeValue("dg_testbool", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: testoption</para>
        /// </summary>
        [AttributeLogicalName("dg_testoption")]
        public dg_threeoptionset? dg_testoption {
            get {
                return GetOptionSetValue<dg_threeoptionset>("dg_testoption");
            }
            set {
                SetOptionSetValue("dg_testoption", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Man</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_manState? statecode {
            get {
                return GetOptionSetValue<dg_manState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Man</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_man_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_man_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_man")]
        public BusinessUnit business_unit_dg_man {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_man", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_man", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_dg_man_dg_bus_Driver")]
        public IEnumerable<dg_bus> dg_dg_man_dg_bus_Driver {
            get {
                return GetRelatedEntities<dg_bus>("dg_dg_man_dg_bus_Driver", null);
            }
            set {
                SetRelatedEntities("dg_dg_man_dg_bus_Driver", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_man_createdby")]
        public SystemUser lk_dg_man_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_man_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_man_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_man_createdonbehalfby")]
        public SystemUser lk_dg_man_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_man_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_man_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_man_modifiedby")]
        public SystemUser lk_dg_man_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_man_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_man_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_man_modifiedonbehalfby")]
        public SystemUser lk_dg_man_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_man_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_man_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_man")]
        public Team team_dg_man {
            get {
                return GetRelatedEntity<Team>("team_dg_man", null);
            }
            set {
                SetRelatedEntity("team_dg_man", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_man")]
        public SystemUser user_dg_man {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_man", null);
            }
            set {
                SetRelatedEntity("user_dg_man", null, value);
            }
        }
        
        public static dg_man Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_man,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    public partial class Xrm : ExtendedOrganizationServiceContext {
        
        public Xrm(IOrganizationService service) : 
                base(service) {
        }
        
        public IQueryable<Account> AccountSet {
            get {
                return CreateQuery<Account>();
            }
        }
        
        public IQueryable<AccountLeads> AccountLeadsSet {
            get {
                return CreateQuery<AccountLeads>();
            }
        }
        
        public IQueryable<ActivityParty> ActivityPartySet {
            get {
                return CreateQuery<ActivityParty>();
            }
        }
        
        public IQueryable<ActivityPointer> ActivityPointerSet {
            get {
                return CreateQuery<ActivityPointer>();
            }
        }
        
        public IQueryable<BusinessUnit> BusinessUnitSet {
            get {
                return CreateQuery<BusinessUnit>();
            }
        }
        
        public IQueryable<Calendar> CalendarSet {
            get {
                return CreateQuery<Calendar>();
            }
        }
        
        public IQueryable<Contact> ContactSet {
            get {
                return CreateQuery<Contact>();
            }
        }
        
        public IQueryable<ContactInvoices> ContactInvoicesSet {
            get {
                return CreateQuery<ContactInvoices>();
            }
        }
        
        public IQueryable<ContactLeads> ContactLeadsSet {
            get {
                return CreateQuery<ContactLeads>();
            }
        }
        
        public IQueryable<Email> EmailSet {
            get {
                return CreateQuery<Email>();
            }
        }
        
        public IQueryable<Incident> IncidentSet {
            get {
                return CreateQuery<Incident>();
            }
        }
        
        public IQueryable<IncidentResolution> IncidentResolutionSet {
            get {
                return CreateQuery<IncidentResolution>();
            }
        }
        
        public IQueryable<Invoice> InvoiceSet {
            get {
                return CreateQuery<Invoice>();
            }
        }
        
        public IQueryable<Lead> LeadSet {
            get {
                return CreateQuery<Lead>();
            }
        }
        
        public IQueryable<Opportunity> OpportunitySet {
            get {
                return CreateQuery<Opportunity>();
            }
        }
        
        public IQueryable<OpportunityClose> OpportunityCloseSet {
            get {
                return CreateQuery<OpportunityClose>();
            }
        }
        
        public IQueryable<QueueItem> QueueItemSet {
            get {
                return CreateQuery<QueueItem>();
            }
        }
        
        public IQueryable<SystemUser> SystemUserSet {
            get {
                return CreateQuery<SystemUser>();
            }
        }
        
        public IQueryable<Task> TaskSet {
            get {
                return CreateQuery<Task>();
            }
        }
        
        public IQueryable<Team> TeamSet {
            get {
                return CreateQuery<Team>();
            }
        }
        
        public IQueryable<TeamMembership> TeamMembershipSet {
            get {
                return CreateQuery<TeamMembership>();
            }
        }
        
        public IQueryable<TransactionCurrency> TransactionCurrencySet {
            get {
                return CreateQuery<TransactionCurrency>();
            }
        }
        
        public IQueryable<Workflow> WorkflowSet {
            get {
                return CreateQuery<Workflow>();
            }
        }
        
        public IQueryable<dg_HasRidden> dg_HasRiddenSet {
            get {
                return CreateQuery<dg_HasRidden>();
            }
        }
        
        public IQueryable<dg_account_account> dg_account_accountSet {
            get {
                return CreateQuery<dg_account_account>();
            }
        }
        
        public IQueryable<dg_account_contact> dg_account_contactSet {
            get {
                return CreateQuery<dg_account_contact>();
            }
        }
        
        public IQueryable<dg_autonumberentity> dg_autonumberentitySet {
            get {
                return CreateQuery<dg_autonumberentity>();
            }
        }
        
        public IQueryable<dg_bus> dg_busSet {
            get {
                return CreateQuery<dg_bus>();
            }
        }
        
        public IQueryable<dg_child> dg_childSet {
            get {
                return CreateQuery<dg_child>();
            }
        }
        
        public IQueryable<dg_field> dg_fieldSet {
            get {
                return CreateQuery<dg_field>();
            }
        }
        
        public IQueryable<dg_man> dg_manSet {
            get {
                return CreateQuery<dg_man>();
            }
        }
    }
    
    [DataContract()]
    public enum Account_Address1_AddressTypeCode {
        
        [EnumMember()]
        BillTo = 1,
        
        [EnumMember()]
        ShipTo = 2,
        
        [EnumMember()]
        Primary = 3,
        
        [EnumMember()]
        Other = 4,
    }
    
    [DataContract()]
    public enum Account_Address1_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Account_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
        
        [EnumMember()]
        Somestatus = 122930000,
    }
    
    [DataContract()]
    public enum Account_Address1_FreightTermsCode {
        
        [EnumMember()]
        FOB = 1,
        
        [EnumMember()]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum Account_PreferredAppointmentTimeCode {
        
        [EnumMember()]
        Morning = 1,
        
        [EnumMember()]
        Afternoon = 2,
        
        [EnumMember()]
        Evening = 3,
    }
    
    [DataContract()]
    public enum Account_AccountClassificationCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_CustomerTypeCode {
        
        [EnumMember()]
        Competitor = 1,
        
        [EnumMember()]
        Consultant = 2,
        
        [EnumMember()]
        Customer = 3,
        
        [EnumMember()]
        Investor = 4,
        
        [EnumMember()]
        Partner = 5,
        
        [EnumMember()]
        Influencer = 6,
        
        [EnumMember()]
        Press = 7,
        
        [EnumMember()]
        Prospect = 8,
        
        [EnumMember()]
        Reseller = 9,
        
        [EnumMember()]
        Supplier = 10,
        
        [EnumMember()]
        Vendor = 11,
        
        [EnumMember()]
        Other = 12,
    }
    
    [DataContract()]
    public enum Account_PreferredContactMethodCode {
        
        [EnumMember()]
        Any = 1,
        
        [EnumMember()]
        Email = 2,
        
        [EnumMember()]
        Phone = 3,
        
        [EnumMember()]
        Fax = 4,
        
        [EnumMember()]
        Mail = 5,
    }
    
    [DataContract()]
    public enum Account_OwnershipCode {
        
        [EnumMember()]
        Public = 1,
        
        [EnumMember()]
        Private = 2,
        
        [EnumMember()]
        Subsidiary = 3,
        
        [EnumMember()]
        Other = 4,
    }
    
    [DataContract()]
    public enum Account_IndustryCode {
        
        [EnumMember()]
        Accounting = 1,
        
        [EnumMember()]
        AgricultureandNonpetrolNaturalResourceExtraction = 2,
        
        [EnumMember()]
        BroadcastingPrintingandPublishing = 3,
        
        [EnumMember()]
        Brokers = 4,
        
        [EnumMember()]
        BuildingSupplyRetail = 5,
        
        [EnumMember()]
        BusinessServices = 6,
        
        [EnumMember()]
        Consulting = 7,
        
        [EnumMember()]
        ConsumerServices = 8,
        
        [EnumMember()]
        DesignDirectionandCreativeManagement = 9,
        
        [EnumMember()]
        DistributorsDispatchersandProcessors = 10,
        
        [EnumMember()]
        DoctorsOfficesandClinics = 11,
        
        [EnumMember()]
        DurableManufacturing = 12,
        
        [EnumMember()]
        EatingandDrinkingPlaces = 13,
        
        [EnumMember()]
        EntertainmentRetail = 14,
        
        [EnumMember()]
        EquipmentRentalandLeasing = 15,
        
        [EnumMember()]
        Financial = 16,
        
        [EnumMember()]
        FoodandTobaccoProcessing = 17,
        
        [EnumMember()]
        InboundCapitalIntensiveProcessing = 18,
        
        [EnumMember()]
        InboundRepairandServices = 19,
        
        [EnumMember()]
        Insurance = 20,
        
        [EnumMember()]
        LegalServices = 21,
        
        [EnumMember()]
        NonDurableMerchandiseRetail = 22,
        
        [EnumMember()]
        OutboundConsumerService = 23,
        
        [EnumMember()]
        PetrochemicalExtractionandDistribution = 24,
        
        [EnumMember()]
        ServiceRetail = 25,
        
        [EnumMember()]
        SIGAffiliations = 26,
        
        [EnumMember()]
        SocialServices = 27,
        
        [EnumMember()]
        SpecialOutboundTradeContractors = 28,
        
        [EnumMember()]
        SpecialtyRealty = 29,
        
        [EnumMember()]
        Transportation = 30,
        
        [EnumMember()]
        UtilityCreationandDistribution = 31,
        
        [EnumMember()]
        VehicleRetail = 32,
        
        [EnumMember()]
        Wholesale = 33,
    }
    
    [DataContract()]
    public enum Account_BusinessTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum Account_AccountRatingCode {
        
        [EnumMember()]
        Low = 1,
        
        [EnumMember()]
        Medium = 100000000,
        
        [EnumMember()]
        High = 100000001,
    }
    
    [DataContract()]
    public enum AccountState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Account_dg_Multiselect {
        
        [EnumMember()]
        Item1 = 122930000,
        
        [EnumMember()]
        Item2 = 122930001,
        
        [EnumMember()]
        Item3 = 122930002,
        
        [EnumMember()]
        Item4 = 122930003,
        
        [EnumMember()]
        Item5 = 122930004,
        
        [EnumMember()]
        Item = 122930005,
    }
    
    [DataContract()]
    public enum Account_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_CustomerSizeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_AccountCategoryCode {
        
        [EnumMember()]
        PreferredCustomer = 1,
        
        [EnumMember()]
        Standard = 2,
    }
    
    [DataContract()]
    public enum Account_PreferredAppointmentDayCode {
        
        [EnumMember()]
        Sunday = 0,
        
        [EnumMember()]
        Monday = 1,
        
        [EnumMember()]
        Tuesday = 2,
        
        [EnumMember()]
        Wednesday = 3,
        
        [EnumMember()]
        Thursday = 4,
        
        [EnumMember()]
        Friday = 5,
        
        [EnumMember()]
        Saturday = 6,
    }
    
    [DataContract()]
    public enum Account_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_Address2_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_TerritoryCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum ActivityParty_ParticipationTypeMask {
        
        [EnumMember()]
        Sender = 1,
        
        [EnumMember()]
        ToRecipient = 2,
        
        [EnumMember()]
        CCRecipient = 3,
        
        [EnumMember()]
        BCCRecipient = 4,
        
        [EnumMember()]
        Requiredattendee = 5,
        
        [EnumMember()]
        Optionalattendee = 6,
        
        [EnumMember()]
        Organizer = 7,
        
        [EnumMember()]
        Regarding = 8,
        
        [EnumMember()]
        Owner = 9,
        
        [EnumMember()]
        Resource = 10,
        
        [EnumMember()]
        Customer = 11,
    }
    
    [DataContract()]
    public enum ActivityParty_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum ActivityPointer_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum ActivityPointer_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum ActivityPointerState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Scheduled = 3,
    }
    
    [DataContract()]
    public enum ActivityPointer_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Canceled = 3,
        
        [EnumMember()]
        Scheduled = 4,
    }
    
    [DataContract()]
    public enum BusinessUnit_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum BusinessUnit_Address1_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum BusinessUnit_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum BusinessUnit_Address1_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Calendar_Type {
        
        [EnumMember()]
        InnerCalendartype = -1,
        
        [EnumMember()]
        Default = 0,
        
        [EnumMember()]
        CustomerService = 1,
        
        [EnumMember()]
        HolidaySchedule = 2,
    }
    
    [DataContract()]
    public enum Contact_Address3_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address1_AddressTypeCode {
        
        [EnumMember()]
        BillTo = 1,
        
        [EnumMember()]
        ShipTo = 2,
        
        [EnumMember()]
        Primary = 3,
        
        [EnumMember()]
        Other = 4,
    }
    
    [DataContract()]
    public enum Contact_Address1_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Contact_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum Contact_GenderCode {
        
        [EnumMember()]
        Male = 1,
        
        [EnumMember()]
        Female = 2,
    }
    
    [DataContract()]
    public enum Contact_PreferredAppointmentTimeCode {
        
        [EnumMember()]
        Morning = 1,
        
        [EnumMember()]
        Afternoon = 2,
        
        [EnumMember()]
        Evening = 3,
    }
    
    [DataContract()]
    public enum Contact_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
        
        [EnumMember()]
        Anotherstatus = 123500000,
    }
    
    [DataContract()]
    public enum Contact_Address1_FreightTermsCode {
        
        [EnumMember()]
        FOB = 1,
        
        [EnumMember()]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum Contact_Address3_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_CustomerTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_EducationCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_PreferredContactMethodCode {
        
        [EnumMember()]
        Any = 1,
        
        [EnumMember()]
        Email = 2,
        
        [EnumMember()]
        Phone = 3,
        
        [EnumMember()]
        Fax = 4,
        
        [EnumMember()]
        Mail = 5,
    }
    
    [DataContract()]
    public enum Contact_LeadSourceCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_msdyn_orgchangestatus {
        
        [EnumMember()]
        NoFeedback = 0,
        
        [EnumMember()]
        NotatCompany = 1,
        
        [EnumMember()]
        Ignore = 2,
    }
    
    [DataContract()]
    public enum Contact_AccountRoleCode {
        
        [EnumMember()]
        DecisionMaker = 1,
        
        [EnumMember()]
        Employee = 2,
        
        [EnumMember()]
        Influencer = 3,
    }
    
    [DataContract()]
    public enum Contact_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address3_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum ContactState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Contact_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_CustomerSizeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_PreferredAppointmentDayCode {
        
        [EnumMember()]
        Sunday = 0,
        
        [EnumMember()]
        Monday = 1,
        
        [EnumMember()]
        Tuesday = 2,
        
        [EnumMember()]
        Wednesday = 3,
        
        [EnumMember()]
        Thursday = 4,
        
        [EnumMember()]
        Friday = 5,
        
        [EnumMember()]
        Saturday = 6,
    }
    
    [DataContract()]
    public enum Contact_HasChildrenCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_FamilyStatusCode {
        
        [EnumMember()]
        Single = 1,
        
        [EnumMember()]
        Married = 2,
        
        [EnumMember()]
        Divorced = 3,
        
        [EnumMember()]
        Widowed = 4,
    }
    
    [DataContract()]
    public enum Contact_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address2_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_TerritoryCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Email_Notifications {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        ThemessagewassavedasaMicrosoftDynamics365emailrecordbutnotalltheattachmentscouldbesavedwithitAnattachmentcannotbesavedifitisblockedorifitsfiletypeisinvalid = 1,
        
        [EnumMember()]
        Truncatedbody = 2,
    }
    
    [DataContract()]
    public enum Email_StatusCode {
        
        [EnumMember()]
        Draft = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Sent = 3,
        
        [EnumMember()]
        Received = 4,
        
        [EnumMember()]
        Canceled = 5,
        
        [EnumMember()]
        PendingSend = 6,
        
        [EnumMember()]
        Sending = 7,
        
        [EnumMember()]
        Failed = 8,
    }
    
    [DataContract()]
    public enum Email_EmailReminderStatus {
        
        [EnumMember()]
        NotSet = 0,
        
        [EnumMember()]
        ReminderSet = 1,
        
        [EnumMember()]
        ReminderExpired = 2,
        
        [EnumMember()]
        ReminderInvalid = 3,
    }
    
    [DataContract()]
    public enum Email_EmailReminderType {
        
        [EnumMember()]
        IfIdonotreceiveareplyby = 0,
        
        [EnumMember()]
        Iftheemailisnotopenedby = 1,
        
        [EnumMember()]
        Remindmeanywaysat = 2,
    }
    
    [DataContract()]
    public enum Email_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum Email_CorrelationMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        Skipped = 1,
        
        [EnumMember()]
        XHeader = 2,
        
        [EnumMember()]
        InReplyTo = 3,
        
        [EnumMember()]
        TrackingToken = 4,
        
        [EnumMember()]
        ConversationIndex = 5,
        
        [EnumMember()]
        SmartMatching = 6,
        
        [EnumMember()]
        CustomCorrelation = 7,
    }
    
    [DataContract()]
    public enum EmailState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Incident_StatusCode {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        OnHold = 2,
        
        [EnumMember()]
        WaitingforDetails = 3,
        
        [EnumMember()]
        Researching = 4,
        
        [EnumMember()]
        ProblemSolved = 5,
        
        [EnumMember()]
        Canceled = 6,
        
        [EnumMember()]
        InformationProvided = 1000,
        
        [EnumMember()]
        Merged = 2000,
    }
    
    [DataContract()]
    public enum Incident_FirstResponseSLAStatus {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        NearingNoncompliance = 2,
        
        [EnumMember()]
        Succeeded = 3,
        
        [EnumMember()]
        Noncompliant = 4,
    }
    
    [DataContract()]
    public enum Incident_ContractServiceLevelCode {
        
        [EnumMember()]
        Gold = 1,
        
        [EnumMember()]
        Silver = 2,
        
        [EnumMember()]
        Bronze = 3,
    }
    
    [DataContract()]
    public enum Incident_CaseTypeCode {
        
        [EnumMember()]
        Question = 1,
        
        [EnumMember()]
        Problem = 2,
        
        [EnumMember()]
        Request = 3,
    }
    
    [DataContract()]
    public enum Incident_SeverityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Incident_CustomerSatisfactionCode {
        
        [EnumMember()]
        VeryDissatisfied = 1,
        
        [EnumMember()]
        Dissatisfied = 2,
        
        [EnumMember()]
        Neutral = 3,
        
        [EnumMember()]
        Satisfied = 4,
        
        [EnumMember()]
        VerySatisfied = 5,
    }
    
    [DataContract()]
    public enum IncidentState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Resolved = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Incident_ResolveBySLAStatus {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        NearingNoncompliance = 2,
        
        [EnumMember()]
        Succeeded = 3,
        
        [EnumMember()]
        Noncompliant = 4,
    }
    
    [DataContract()]
    public enum Incident_IncidentStageCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Incident_PriorityCode {
        
        [EnumMember()]
        High = 1,
        
        [EnumMember()]
        Normal = 2,
        
        [EnumMember()]
        Low = 3,
    }
    
    [DataContract()]
    public enum IncidentResolution_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum IncidentResolutionState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Scheduled = 3,
    }
    
    [DataContract()]
    public enum IncidentResolution_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum IncidentResolution_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Closed = 2,
        
        [EnumMember()]
        Canceled = 3,
        
        [EnumMember()]
        Scheduled = 4,
    }
    
    [DataContract()]
    public enum IncidentResolution_ResolutionTypeCode {
        
        [EnumMember()]
        ProblemSolved = 5,
        
        [EnumMember()]
        InformationProvided = 1000,
    }
    
    [DataContract()]
    public enum Invoice_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum Invoice_StatusCode {
        
        [EnumMember()]
        New = 1,
        
        [EnumMember()]
        PartiallyShipped = 2,
        
        [EnumMember()]
        Canceleddeprecated = 3,
        
        [EnumMember()]
        Billed = 4,
        
        [EnumMember()]
        Bookedappliestoservices = 5,
        
        [EnumMember()]
        Installedappliestoservices = 6,
        
        [EnumMember()]
        PaidinFulldeprecated = 7,
        
        [EnumMember()]
        Complete = 100001,
        
        [EnumMember()]
        Partial = 100002,
        
        [EnumMember()]
        Canceled = 100003,
    }
    
    [DataContract()]
    public enum Invoice_ShipTo_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Invoice_PriorityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Invoice_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Invoice_msdyn_OrderType {
        
        [EnumMember()]
        Itembased = 192350000,
        
        [EnumMember()]
        ServiceMaintenanceBased = 690970002,
    }
    
    [DataContract()]
    public enum InvoiceState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Closeddeprecated = 1,
        
        [EnumMember()]
        Paid = 2,
        
        [EnumMember()]
        Canceled = 3,
    }
    
    [DataContract()]
    public enum Lead_Address1_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Lead_Address1_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Lead_StatusCode {
        
        [EnumMember()]
        New = 1,
        
        [EnumMember()]
        Contacted = 2,
        
        [EnumMember()]
        Qualified = 3,
        
        [EnumMember()]
        Lost = 4,
        
        [EnumMember()]
        CannotContact = 5,
        
        [EnumMember()]
        NoLongerInterested = 6,
        
        [EnumMember()]
        Canceled = 7,
    }
    
    [DataContract()]
    public enum Lead_IndustryCode {
        
        [EnumMember()]
        Accounting = 1,
        
        [EnumMember()]
        AgricultureandNonpetrolNaturalResourceExtraction = 2,
        
        [EnumMember()]
        BroadcastingPrintingandPublishing = 3,
        
        [EnumMember()]
        Brokers = 4,
        
        [EnumMember()]
        BuildingSupplyRetail = 5,
        
        [EnumMember()]
        BusinessServices = 6,
        
        [EnumMember()]
        Consulting = 7,
        
        [EnumMember()]
        ConsumerServices = 8,
        
        [EnumMember()]
        DesignDirectionandCreativeManagement = 9,
        
        [EnumMember()]
        DistributorsDispatchersandProcessors = 10,
        
        [EnumMember()]
        DoctorsOfficesandClinics = 11,
        
        [EnumMember()]
        DurableManufacturing = 12,
        
        [EnumMember()]
        EatingandDrinkingPlaces = 13,
        
        [EnumMember()]
        EntertainmentRetail = 14,
        
        [EnumMember()]
        EquipmentRentalandLeasing = 15,
        
        [EnumMember()]
        Financial = 16,
        
        [EnumMember()]
        FoodandTobaccoProcessing = 17,
        
        [EnumMember()]
        InboundCapitalIntensiveProcessing = 18,
        
        [EnumMember()]
        InboundRepairandServices = 19,
        
        [EnumMember()]
        Insurance = 20,
        
        [EnumMember()]
        LegalServices = 21,
        
        [EnumMember()]
        NonDurableMerchandiseRetail = 22,
        
        [EnumMember()]
        OutboundConsumerService = 23,
        
        [EnumMember()]
        PetrochemicalExtractionandDistribution = 24,
        
        [EnumMember()]
        ServiceRetail = 25,
        
        [EnumMember()]
        SIGAffiliations = 26,
        
        [EnumMember()]
        SocialServices = 27,
        
        [EnumMember()]
        SpecialOutboundTradeContractors = 28,
        
        [EnumMember()]
        SpecialtyRealty = 29,
        
        [EnumMember()]
        Transportation = 30,
        
        [EnumMember()]
        UtilityCreationandDistribution = 31,
        
        [EnumMember()]
        VehicleRetail = 32,
        
        [EnumMember()]
        Wholesale = 33,
    }
    
    [DataContract()]
    public enum Lead_PreferredContactMethodCode {
        
        [EnumMember()]
        Any = 1,
        
        [EnumMember()]
        Email = 2,
        
        [EnumMember()]
        Phone = 3,
        
        [EnumMember()]
        Fax = 4,
        
        [EnumMember()]
        Mail = 5,
    }
    
    [DataContract()]
    public enum Lead_LeadSourceCode {
        
        [EnumMember()]
        Advertisement = 1,
        
        [EnumMember()]
        EmployeeReferral = 2,
        
        [EnumMember()]
        ExternalReferral = 3,
        
        [EnumMember()]
        Partner = 4,
        
        [EnumMember()]
        PublicRelations = 5,
        
        [EnumMember()]
        Seminar = 6,
        
        [EnumMember()]
        TradeShow = 7,
        
        [EnumMember()]
        Web = 8,
        
        [EnumMember()]
        WordofMouth = 9,
        
        [EnumMember()]
        Other = 10,
    }
    
    [DataContract()]
    public enum Lead_SalesStageCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Lead_LeadQualityCode {
        
        [EnumMember()]
        Hot = 1,
        
        [EnumMember()]
        Warm = 2,
        
        [EnumMember()]
        Cold = 3,
    }
    
    [DataContract()]
    public enum LeadState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Qualified = 1,
        
        [EnumMember()]
        Disqualified = 2,
    }
    
    [DataContract()]
    public enum Lead_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Lead_PriorityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Lead_msdyn_ordertype {
        
        [EnumMember()]
        Itembased = 192350000,
        
        [EnumMember()]
        ServiceMaintenanceBased = 690970002,
    }
    
    [DataContract()]
    public enum Lead_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Opportunity_StatusCode {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        OnHold = 2,
        
        [EnumMember()]
        Won = 3,
        
        [EnumMember()]
        Canceled = 4,
        
        [EnumMember()]
        OutSold = 5,
    }
    
    [DataContract()]
    public enum Opportunity_OpportunityRatingCode {
        
        [EnumMember()]
        Hot = 1,
        
        [EnumMember()]
        Warm = 2,
        
        [EnumMember()]
        Cold = 3,
    }
    
    [DataContract()]
    public enum Opportunity_TimeLine {
        
        [EnumMember()]
        Immediate = 0,
        
        [EnumMember()]
        ThisQuarter = 1,
        
        [EnumMember()]
        NextQuarter = 2,
        
        [EnumMember()]
        ThisYear = 3,
        
        [EnumMember()]
        Notknown = 4,
    }
    
    [DataContract()]
    public enum Opportunity_msdyn_forecastcategory {
        
        [EnumMember()]
        Pipeline = 100000001,
        
        [EnumMember()]
        Bestcase = 100000002,
        
        [EnumMember()]
        Committed = 100000003,
        
        [EnumMember()]
        Omitted = 100000004,
        
        [EnumMember()]
        Won = 100000005,
        
        [EnumMember()]
        Lost = 100000006,
    }
    
    [DataContract()]
    public enum Opportunity_SalesStageCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum OpportunityState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Won = 1,
        
        [EnumMember()]
        Lost = 2,
    }
    
    [DataContract()]
    public enum Opportunity_msdyn_OrderType {
        
        [EnumMember()]
        Itembased = 192350000,
        
        [EnumMember()]
        ServiceMaintenanceBased = 690970002,
    }
    
    [DataContract()]
    public enum Opportunity_PriorityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum OpportunityClose_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum OpportunityClose_OpportunityStatusCode {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        OnHold = 2,
        
        [EnumMember()]
        Won = 3,
        
        [EnumMember()]
        Canceled = 4,
        
        [EnumMember()]
        OutSold = 5,
    }
    
    [DataContract()]
    public enum OpportunityCloseState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Scheduled = 3,
    }
    
    [DataContract()]
    public enum OpportunityClose_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum OpportunityClose_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Canceled = 3,
        
        [EnumMember()]
        Scheduled = 4,
    }
    
    [DataContract()]
    public enum OpportunityClose_OpportunityStateCode {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Won = 1,
        
        [EnumMember()]
        Lost = 2,
    }
    
    [DataContract()]
    public enum QueueItemState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum QueueItem_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum QueueItem_ObjectTypeCode {
        
        [EnumMember()]
        Case = 112,
        
        [EnumMember()]
        Activity = 4200,
        
        [EnumMember()]
        Appointment = 4201,
        
        [EnumMember()]
        Email = 4202,
        
        [EnumMember()]
        Fax = 4204,
        
        [EnumMember()]
        Letter = 4207,
        
        [EnumMember()]
        PhoneCall = 4210,
        
        [EnumMember()]
        Task = 4212,
        
        [EnumMember()]
        ServiceActivity = 4214,
        
        [EnumMember()]
        SocialActivity = 4216,
        
        [EnumMember()]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        CampaignResponse = 4401,
        
        [EnumMember()]
        CampaignActivity = 4402,
        
        [EnumMember()]
        QuickCampaign = 4406,
        
        [EnumMember()]
        KnowledgeArticle = 9953,
        
        [EnumMember()]
        FormsProsurveyinvite = 10086,
        
        [EnumMember()]
        FormsProsurveyresponse = 10087,
        
        [EnumMember()]
        inMail = 10145,
        
        [EnumMember()]
        Message = 10146,
        
        [EnumMember()]
        PointDrivePresentationViewed = 10147,
        
        [EnumMember()]
        BookingAlert = 10164,
        
        [EnumMember()]
        FulfillmentPreference = 10187,
        
        [EnumMember()]
        TimeGroupDetail = 10188,
        
        [EnumMember()]
        AgreementBookingDate = 10192,
        
        [EnumMember()]
        AgreementBookingSetup = 10197,
        
        [EnumMember()]
        AgreementInvoiceDate = 10198,
        
        [EnumMember()]
        AgreementInvoiceSetup = 10200,
        
        [EnumMember()]
        InventoryAdjustment = 10222,
        
        [EnumMember()]
        InventoryTransfer = 10225,
        
        [EnumMember()]
        WorkOrder = 10265,
        
        [EnumMember()]
        WorkOrderIncident = 10268,
        
        [EnumMember()]
        WorkOrderService = 10271,
        
        [EnumMember()]
        WorkOrderServiceTask = 10272,
        
        [EnumMember()]
        IoTAlert = 10276,
        
        [EnumMember()]
        KnowledgeArticleTemplate = 10309,
    }
    
    [DataContract()]
    public enum SystemUser_Address1_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_Address1_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredAddressCode {
        
        [EnumMember()]
        MailingAddress = 1,
        
        [EnumMember()]
        OtherAddress = 2,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredEmailCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_OutgoingEmailDeliveryMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        MicrosoftDynamics365forOutlook = 1,
        
        [EnumMember()]
        ServerSideSynchronizationorEmailRouter = 2,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredPhoneCode {
        
        [EnumMember()]
        MainPhone = 1,
        
        [EnumMember()]
        OtherPhone = 2,
        
        [EnumMember()]
        HomePhone = 3,
        
        [EnumMember()]
        MobilePhone = 4,
    }
    
    [DataContract()]
    public enum SystemUser_EmailRouterAccessApproval {
        
        [EnumMember()]
        Empty = 0,
        
        [EnumMember()]
        Approved = 1,
        
        [EnumMember()]
        PendingApproval = 2,
        
        [EnumMember()]
        Rejected = 3,
    }
    
    [DataContract()]
    public enum SystemUser_IncomingEmailDeliveryMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        MicrosoftDynamics365forOutlook = 1,
        
        [EnumMember()]
        ServerSideSynchronizationorEmailRouter = 2,
        
        [EnumMember()]
        ForwardMailbox = 3,
    }
    
    [DataContract()]
    public enum SystemUser_CALType {
        
        [EnumMember()]
        Professional = 0,
        
        [EnumMember()]
        Administrative = 1,
        
        [EnumMember()]
        Basic = 2,
        
        [EnumMember()]
        DeviceProfessional = 3,
        
        [EnumMember()]
        DeviceBasic = 4,
        
        [EnumMember()]
        Essential = 5,
        
        [EnumMember()]
        DeviceEssential = 6,
        
        [EnumMember()]
        Enterprise = 7,
        
        [EnumMember()]
        DeviceEnterprise = 8,
        
        [EnumMember()]
        Sales = 9,
        
        [EnumMember()]
        Service = 10,
        
        [EnumMember()]
        FieldService = 11,
        
        [EnumMember()]
        ProjectService = 12,
    }
    
    [DataContract()]
    public enum SystemUser_AccessMode {
        
        [EnumMember()]
        ReadWrite = 0,
        
        [EnumMember()]
        Administrative = 1,
        
        [EnumMember()]
        Read = 2,
        
        [EnumMember()]
        SupportUser = 3,
        
        [EnumMember()]
        Noninteractive = 4,
        
        [EnumMember()]
        DelegatedAdmin = 5,
    }
    
    [DataContract()]
    public enum SystemUser_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_InviteStatusCode {
        
        [EnumMember()]
        InvitationNotSent = 0,
        
        [EnumMember()]
        Invited = 1,
        
        [EnumMember()]
        InvitationNearExpired = 2,
        
        [EnumMember()]
        InvitationExpired = 3,
        
        [EnumMember()]
        InvitationAccepted = 4,
        
        [EnumMember()]
        InvitationRejected = 5,
        
        [EnumMember()]
        InvitationRevoked = 6,
    }
    
    [DataContract()]
    public enum SystemUser_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Task_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum TaskState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Task_StatusCode {
        
        [EnumMember()]
        NotStarted = 2,
        
        [EnumMember()]
        InProgress = 3,
        
        [EnumMember()]
        Waitingonsomeoneelse = 4,
        
        [EnumMember()]
        Completed = 5,
        
        [EnumMember()]
        Canceled = 6,
        
        [EnumMember()]
        Deferred = 7,
    }
    
    [DataContract()]
    public enum Team_TeamType {
        
        [EnumMember()]
        Owner = 0,
        
        [EnumMember()]
        Access = 1,
        
        [EnumMember()]
        AADSecurityGroup = 2,
        
        [EnumMember()]
        AADOfficeGroup = 3,
    }
    
    [DataContract()]
    public enum TransactionCurrencyState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum TransactionCurrency_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum Workflow_ProcessTriggerScope {
        
        [EnumMember()]
        Form = 1,
        
        [EnumMember()]
        Entity = 2,
    }
    
    [DataContract()]
    public enum WorkflowState {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Activated = 1,
    }
    
    [DataContract()]
    public enum Workflow_Mode {
        
        [EnumMember()]
        Background = 0,
        
        [EnumMember()]
        Realtime = 1,
    }
    
    [DataContract()]
    public enum Workflow_Type {
        
        [EnumMember()]
        Definition = 1,
        
        [EnumMember()]
        Activation = 2,
        
        [EnumMember()]
        Template = 3,
    }
    
    [DataContract()]
    public enum Workflow_Scope {
        
        [EnumMember()]
        User = 1,
        
        [EnumMember()]
        BusinessUnit = 2,
        
        [EnumMember()]
        ParentChildBusinessUnits = 3,
        
        [EnumMember()]
        Organization = 4,
    }
    
    [DataContract()]
    public enum Workflow_StatusCode {
        
        [EnumMember()]
        Draft = 1,
        
        [EnumMember()]
        Activated = 2,
    }
    
    [DataContract()]
    public enum Workflow_BusinessProcessType {
        
        [EnumMember()]
        BusinessFlow = 0,
        
        [EnumMember()]
        TaskFlow = 1,
    }
    
    [DataContract()]
    public enum Workflow_Category {
        
        [EnumMember()]
        Workflow = 0,
        
        [EnumMember()]
        Dialog = 1,
        
        [EnumMember()]
        BusinessRule = 2,
        
        [EnumMember()]
        Action = 3,
        
        [EnumMember()]
        BusinessProcessFlow = 4,
        
        [EnumMember()]
        ModernFlow = 5,
        
        [EnumMember()]
        Reserved = 6,
    }
    
    [DataContract()]
    public enum Workflow_UIFlowType {
        
        [EnumMember()]
        Desktop = 0,
        
        [EnumMember()]
        SeleniumIDE = 1,
        
        [EnumMember()]
        PowerShell = 2,
    }
    
    [DataContract()]
    public enum dg_autonumberentityState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_autonumberentity_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_busState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_bus_dg_PicklistUdregnet {
        
        [EnumMember()]
        Item1 = 123500000,
        
        [EnumMember()]
        Item2 = 123500001,
        
        [EnumMember()]
        Item3 = 123500002,
    }
    
    [DataContract()]
    public enum dg_bus_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_childState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_child_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_fieldState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_field_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_manState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_man_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum msdyn_travelchargetype {
        
        [EnumMember()]
        Hourly = 690970000,
        
        [EnumMember()]
        Mileage = 690970001,
        
        [EnumMember()]
        Fixed = 690970002,
        
        [EnumMember()]
        None = 690970003,
    }
    
    [DataContract()]
    public enum activitypointer_deliveryprioritycode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum socialprofile_community {
        
        [EnumMember()]
        Other = 0,
        
        [EnumMember()]
        Facebook = 1,
        
        [EnumMember()]
        Twitter = 2,
    }
    
    [DataContract()]
    public enum activitypointer_activitytypecode {
        
        [EnumMember()]
        Appointment = 4201,
        
        [EnumMember()]
        Email = 4202,
        
        [EnumMember()]
        Fax = 4204,
        
        [EnumMember()]
        CaseResolution = 4206,
        
        [EnumMember()]
        Letter = 4207,
        
        [EnumMember()]
        OpportunityClose = 4208,
        
        [EnumMember()]
        OrderClose = 4209,
        
        [EnumMember()]
        PhoneCall = 4210,
        
        [EnumMember()]
        QuoteClose = 4211,
        
        [EnumMember()]
        Task = 4212,
        
        [EnumMember()]
        ServiceActivity = 4214,
        
        [EnumMember()]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        CampaignResponse = 4401,
        
        [EnumMember()]
        CampaignActivity = 4402,
        
        [EnumMember()]
        BulkOperation = 4406,
        
        [EnumMember()]
        Surveyinvite = 10086,
        
        [EnumMember()]
        Surveyresponse = 10087,
        
        [EnumMember()]
        inMail = 10145,
        
        [EnumMember()]
        Message = 10146,
        
        [EnumMember()]
        PointDrivePresentationViewed = 10147,
        
        [EnumMember()]
        BookingAlert = 10164,
    }
    
    [DataContract()]
    public enum incident_caseorigincode {
        
        [EnumMember()]
        Phone = 1,
        
        [EnumMember()]
        Email = 2,
        
        [EnumMember()]
        Web = 3,
        
        [EnumMember()]
        Facebook = 2483,
        
        [EnumMember()]
        Twitter = 3986,
        
        [EnumMember()]
        IoT = 700610000,
    }
    
    [DataContract()]
    public enum servicestage {
        
        [EnumMember()]
        Identify = 0,
        
        [EnumMember()]
        Research = 1,
        
        [EnumMember()]
        Resolve = 2,
    }
    
    [DataContract()]
    public enum socialactivity_postmessagetype {
        
        [EnumMember()]
        PublicMessage = 0,
        
        [EnumMember()]
        PrivateMessage = 1,
    }
    
    [DataContract()]
    public enum qooi_skippricecalculation {
        
        [EnumMember()]
        DoPriceCalcAlways = 0,
        
        [EnumMember()]
        SkipPriceCalcOnRetrieve = 1,
    }
    
    [DataContract()]
    public enum qooi_pricingerrorcode {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        DetailError = 1,
        
        [EnumMember()]
        MissingPriceLevel = 2,
        
        [EnumMember()]
        InactivePriceLevel = 3,
        
        [EnumMember()]
        MissingQuantity = 4,
        
        [EnumMember()]
        MissingUnitPrice = 5,
        
        [EnumMember()]
        MissingProduct = 6,
        
        [EnumMember()]
        InvalidProduct = 7,
        
        [EnumMember()]
        MissingPricingCode = 8,
        
        [EnumMember()]
        InvalidPricingCode = 9,
        
        [EnumMember()]
        MissingUOM = 10,
        
        [EnumMember()]
        ProductNotInPriceLevel = 11,
        
        [EnumMember()]
        MissingPriceLevelAmount = 12,
        
        [EnumMember()]
        MissingPriceLevelPercentage = 13,
        
        [EnumMember()]
        MissingPrice = 14,
        
        [EnumMember()]
        MissingCurrentCost = 15,
        
        [EnumMember()]
        MissingStandardCost = 16,
        
        [EnumMember()]
        InvalidPriceLevelAmount = 17,
        
        [EnumMember()]
        InvalidPriceLevelPercentage = 18,
        
        [EnumMember()]
        InvalidPrice = 19,
        
        [EnumMember()]
        InvalidCurrentCost = 20,
        
        [EnumMember()]
        InvalidStandardCost = 21,
        
        [EnumMember()]
        InvalidRoundingPolicy = 22,
        
        [EnumMember()]
        InvalidRoundingOption = 23,
        
        [EnumMember()]
        InvalidRoundingAmount = 24,
        
        [EnumMember()]
        PriceCalculationError = 25,
        
        [EnumMember()]
        InvalidDiscountType = 26,
        
        [EnumMember()]
        DiscountTypeInvalidState = 27,
        
        [EnumMember()]
        InvalidDiscount = 28,
        
        [EnumMember()]
        InvalidQuantity = 29,
        
        [EnumMember()]
        InvalidPricingPrecision = 30,
        
        [EnumMember()]
        MissingProductDefaultUOM = 31,
        
        [EnumMember()]
        MissingProductUOMSchedule = 32,
        
        [EnumMember()]
        InactiveDiscountType = 33,
        
        [EnumMember()]
        InvalidPriceLevelCurrency = 34,
        
        [EnumMember()]
        PriceAttributeOutOfRange = 35,
        
        [EnumMember()]
        BaseCurrencyAttributeOverflow = 36,
        
        [EnumMember()]
        BaseCurrencyAttributeUnderflow = 37,
        
        [EnumMember()]
        Transactioncurrencyisnotsetfortheproductpricelistitem = 38,
    }
    
    [DataContract()]
    public enum budgetstatus {
        
        [EnumMember()]
        NoCommittedBudget = 0,
        
        [EnumMember()]
        MayBuy = 1,
        
        [EnumMember()]
        CanBuy = 2,
        
        [EnumMember()]
        WillBuy = 3,
    }
    
    [DataContract()]
    public enum msdyn_leadscoretrendoptset {
        
        [EnumMember()]
        Improving = 0,
        
        [EnumMember()]
        Steady = 1,
        
        [EnumMember()]
        Declining = 2,
        
        [EnumMember()]
        Notenoughinfo = 3,
    }
    
    [DataContract()]
    public enum initialcommunication {
        
        [EnumMember()]
        Contacted = 0,
        
        [EnumMember()]
        NotContacted = 1,
    }
    
    [DataContract()]
    public enum lead_salesstage {
        
        [EnumMember()]
        Qualify = 0,
    }
    
    [DataContract()]
    public enum msdyn_leadgradeoptset {
        
        [EnumMember()]
        GradeA = 0,
        
        [EnumMember()]
        GradeB = 1,
        
        [EnumMember()]
        GradeC = 2,
        
        [EnumMember()]
        GradeD = 3,
    }
    
    [DataContract()]
    public enum purchasetimeframe {
        
        [EnumMember()]
        Immediate = 0,
        
        [EnumMember()]
        ThisQuarter = 1,
        
        [EnumMember()]
        NextQuarter = 2,
        
        [EnumMember()]
        ThisYear = 3,
        
        [EnumMember()]
        Unknown = 4,
    }
    
    [DataContract()]
    public enum purchaseprocess {
        
        [EnumMember()]
        Individual = 0,
        
        [EnumMember()]
        Committee = 1,
        
        [EnumMember()]
        Unknown = 2,
    }
    
    [DataContract()]
    public enum need {
        
        [EnumMember()]
        Musthave = 0,
        
        [EnumMember()]
        Shouldhave = 1,
        
        [EnumMember()]
        Goodtohave = 2,
        
        [EnumMember()]
        Noneed = 3,
    }
    
    [DataContract()]
    public enum opportunity_salesstage {
        
        [EnumMember()]
        Qualify = 0,
        
        [EnumMember()]
        Develop = 1,
        
        [EnumMember()]
        Propose = 2,
        
        [EnumMember()]
        Close = 3,
    }
    
    [DataContract()]
    public enum msdyn_opportunityscoretrendoptset {
        
        [EnumMember()]
        Improving = 0,
        
        [EnumMember()]
        Steady = 1,
        
        [EnumMember()]
        Declining = 2,
        
        [EnumMember()]
        Notenoughinfo = 3,
    }
    
    [DataContract()]
    public enum msdyn_opportunitygradeoptset {
        
        [EnumMember()]
        GradeA = 0,
        
        [EnumMember()]
        GradeB = 1,
        
        [EnumMember()]
        GradeC = 2,
        
        [EnumMember()]
        GradeD = 3,
    }
    
    [DataContract()]
    public enum workflow_stage {
        
        [EnumMember()]
        Preoperation = 20,
        
        [EnumMember()]
        Postoperation = 40,
    }
    
    [DataContract()]
    public enum workflow_runas {
        
        [EnumMember()]
        Owner = 0,
        
        [EnumMember()]
        CallingUser = 1,
    }
    
    [DataContract()]
    public enum componentstate {
        
        [EnumMember()]
        Published = 0,
        
        [EnumMember()]
        Unpublished = 1,
        
        [EnumMember()]
        Deleted = 2,
        
        [EnumMember()]
        DeletedUnpublished = 3,
    }
    
    [DataContract()]
    public enum dg_myoptionset {
        
        [EnumMember()]
        Item1 = 10016,
        
        [EnumMember()]
        Item2 = 10017,
    }
    
    [DataContract()]
    public enum dg_threeoptionset {
        
        [EnumMember()]
        One = 122930000,
        
        [EnumMember()]
        Two = 122930001,
        
        [EnumMember()]
        Three = 122930002,
    }
}
