//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DG.XrmContext;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;

[assembly: ProxyTypesAssembly()]


namespace DG.XrmFramework.BusinessDomain.ServiceContext {
    
    
    /// <summary>
    /// <para>Business that represents a customer or potential customer. The company that is billed in business transactions.</para>
    /// <para>Display Name: Account</para>
    /// </summary>
    [EntityLogicalName("account")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Account : ExtendedEntity<AccountState, Account_StatusCode> {
        
        public const string EntityLogicalName = "account";
        
        public const int EntityTypeCode = 1;
        
        public Account() : 
                base(EntityLogicalName) {
        }
        
        public Account(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("accountid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("accountid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public Guid? AccountId {
            get {
                return GetAttributeValue<Guid?>("accountid");
            }
            set {
                SetId("accountid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account is active or inactive. Inactive accounts are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public AccountState? StateCode {
            get {
                return GetOptionSetValue<AccountState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Number of open opportunities against an account and its child accounts.</para>
        /// <para>Display Name: Open Deals</para>
        /// </summary>
        [AttributeLogicalName("opendeals")]
        public int? OpenDeals {
            get {
                return GetAttributeValue<int?>("opendeals");
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's secondary address.</para>
        /// <para>Display Name: Address 2: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address2_primarycontactname")]
        public string Address2_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address2_primarycontactname");
            }
            set {
                SetAttributeValue("address2_primarycontactname", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 2: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        public Account_Address2_FreightTermsCode? Address2_FreightTermsCode {
            get {
                return GetOptionSetValue<Account_Address2_FreightTermsCode>("address2_freighttermscode");
            }
            set {
                SetOptionSetValue("address2_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: TestCalculated</para>
        /// </summary>
        [AttributeLogicalName("dg_testcalculated")]
        public decimal? dg_TestCalculated {
            get {
                return GetMoneyValue("dg_testcalculated");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the preferred day of the week for service appointments.</para>
        /// <para>Display Name: Preferred Day</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public Account_PreferredAppointmentDayCode? PreferredAppointmentDayCode {
            get {
                return GetOptionSetValue<Account_PreferredAppointmentDayCode>("preferredappointmentdaycode");
            }
            set {
                SetOptionSetValue("preferredappointmentdaycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public Account_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Test_Med_Underscore</para>
        /// </summary>
        [AttributeLogicalName("dg_test_med_underscore")]
        public string dg_Test_Med_Underscore {
            get {
                return GetAttributeValue<string>("dg_test_med_underscore");
            }
            set {
                SetAttributeValue("dg_test_med_underscore", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 30 field.</para>
        /// <para>Display Name: Aging 30 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        public decimal? Aging30_Base {
            get {
                return GetMoneyValue("aging30_base");
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number for this account.</para>
        /// <para>Display Name: Main Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        public string Telephone1 {
            get {
                return GetAttributeValue<string>("telephone1");
            }
            set {
                SetAttributeValue("telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the preferred service representative for reference when you schedule service activities for the account.</para>
        /// <para>Display Name: Preferred User</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuserid")]
        public EntityReference PreferredSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("preferredsystemuserid");
            }
            set {
                SetAttributeValue("preferredsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the account.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number for this account.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        public string Telephone2 {
            get {
                return GetAttributeValue<string>("telephone2");
            }
            set {
                SetAttributeValue("telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Display Name: Preferred Method of Contact</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public Account_PreferredContactMethodCode? PreferredContactMethodCode {
            get {
                return GetOptionSetValue<Account_PreferredContactMethodCode>("preferredcontactmethodcode");
            }
            set {
                SetOptionSetValue("preferredcontactmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the account's preferred service for reference when you schedule service activities.</para>
        /// <para>Display Name: Preferred Service</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceid")]
        public EntityReference PreferredServiceId {
            get {
                return GetAttributeValue<EntityReference>("preferredserviceid");
            }
            set {
                SetAttributeValue("preferredserviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the stock exchange at which the account is listed to track their stock and financial performance of the company.</para>
        /// <para>Display Name: Stock Exchange</para>
        /// </summary>
        [AttributeLogicalName("stockexchange")]
        public string StockExchange {
            get {
                return GetAttributeValue<string>("stockexchange");
            }
            set {
                SetAttributeValue("stockexchange", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only. Legacy Microsoft Dynamics CRM 3.0 workflow data.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        [AttributeLogicalName("createdbyexternalpartyname")]
        public string CreatedByExternalPartyName {
            get {
                return GetAttributeValue<string>("createdbyexternalpartyname");
            }
        }
        
        [AttributeLogicalName("preferredserviceidname")]
        public string PreferredServiceIdName {
            get {
                return GetAttributeValue<string>("preferredserviceidname");
            }
        }
        
        /// <summary>
        /// <para>Select the size category or range of the account for segmentation and reporting purposes.</para>
        /// <para>Display Name: Customer Size</para>
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        public Account_CustomerSizeCode? CustomerSizeCode {
            get {
                return GetOptionSetValue<Account_CustomerSizeCode>("customersizecode");
            }
            set {
                SetOptionSetValue("customersizecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the stock exchange symbol for the account to track financial performance of the company. You can click the code entered in this field to access the latest trading information from MSN Money.</para>
        /// <para>Display Name: Ticker Symbol</para>
        /// </summary>
        [AttributeLogicalName("tickersymbol")]
        public string TickerSymbol {
            get {
                return GetAttributeValue<string>("tickersymbol");
            }
            set {
                SetAttributeValue("tickersymbol", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>Display Name: Address 1: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Some Decimal</para>
        /// </summary>
        [AttributeLogicalName("dg_somedecimal")]
        public decimal? dg_SomeDecimal {
            get {
                return GetAttributeValue<decimal?>("dg_somedecimal");
            }
            set {
                SetAttributeValue("dg_somedecimal", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the market capitalization converted to the system's default base currency.</para>
        /// <para>Display Name: Market Capitalization (Base)</para>
        /// </summary>
        [AttributeLogicalName("marketcap_base")]
        public decimal? MarketCap_Base {
            get {
                return GetMoneyValue("marketcap_base");
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>The date time for Open Revenue.</para>
        /// <para>Display Name: Open Revenue(Last Updated Time)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_date")]
        public DateTime? OpenRevenue_Date {
            get {
                return GetAttributeValue<DateTime?>("openrevenue_date");
            }
        }
        
        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public Account_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<Account_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's primary address.</para>
        /// <para>Display Name: Address 1: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address1_primarycontactname")]
        public string Address1_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address1_primarycontactname");
            }
            set {
                SetAttributeValue("address1_primarycontactname", value);
            }
        }
        
        [AttributeLogicalName("defaultpricelevelidname")]
        public string DefaultPriceLevelIdName {
            get {
                return GetAttributeValue<string>("defaultpricelevelidname");
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 90 field.</para>
        /// <para>Display Name: Aging 90 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        public decimal? Aging90_Base {
            get {
                return GetMoneyValue("aging90_base");
            }
        }
        
        [AttributeLogicalName("preferredequipmentidname")]
        public string PreferredEquipmentIdName {
            get {
                return GetAttributeValue<string>("preferredequipmentidname");
            }
        }
        
        /// <summary>
        /// <para>Type the URL for the account's FTP site to enable users to access data and share documents.</para>
        /// <para>Display Name: FTP Site</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        public string FtpSiteURL {
            get {
                return GetAttributeValue<string>("ftpsiteurl");
            }
            set {
                SetAttributeValue("ftpsiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the default price list associated with the account to make sure the correct product prices for this customer are applied in sales opportunities, quotes, and orders.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelid")]
        public EntityReference DefaultPriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("defaultpricelevelid");
            }
            set {
                SetAttributeValue("defaultpricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account has been merged with another account.</para>
        /// <para>Display Name: Merged</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Shows the annual revenue converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Annual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        public decimal? Revenue_Base {
            get {
                return GetMoneyValue("revenue_base");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type an ID number or code for the account to quickly search and identify the account in system views.</para>
        /// <para>Display Name: Account Number</para>
        /// </summary>
        [AttributeLogicalName("accountnumber")]
        public string AccountNumber {
            get {
                return GetAttributeValue<string>("accountnumber");
            }
            set {
                SetAttributeValue("accountnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the Standard Industrial Classification (SIC) code that indicates the account's primary industry of business, for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: SIC Code</para>
        /// </summary>
        [AttributeLogicalName("sic")]
        public string SIC {
            get {
                return GetAttributeValue<string>("sic");
            }
            set {
                SetAttributeValue("sic", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the master account that the account was merged with.</para>
        /// <para>Display Name: Master ID</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the account.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>Display Name: Address Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Select a rating to indicate the value of the customer account.</para>
        /// <para>Display Name: Account Rating</para>
        /// </summary>
        [AttributeLogicalName("accountratingcode")]
        public Account_AccountRatingCode? AccountRatingCode {
            get {
                return GetOptionSetValue<Account_AccountRatingCode>("accountratingcode");
            }
            set {
                SetOptionSetValue("accountratingcode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Choose the account's preferred service facility or equipment to make sure services are scheduled correctly for the customer.</para>
        /// <para>Display Name: Preferred Facility/Equipment</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentid")]
        public EntityReference PreferredEquipmentId {
            get {
                return GetAttributeValue<EntityReference>("preferredequipmentid");
            }
            set {
                SetAttributeValue("preferredequipmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public Account_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Account_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>Display Name: Address 1: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the account.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>Display Name: Address 1: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to the account's address to designate the preferred carrier or other delivery option.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public Account_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Address 2</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Primary Twitter ID for Account</para>
        /// <para>Display Name: Primary Twitter ID</para>
        /// </summary>
        [AttributeLogicalName("primarytwitterid")]
        public string PrimaryTwitterId {
            get {
                return GetAttributeValue<string>("primarytwitterid");
            }
            set {
                SetAttributeValue("primarytwitterid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the legal designation or other business type of the account for contracts or reporting purposes.</para>
        /// <para>Display Name: Business Type</para>
        /// </summary>
        [AttributeLogicalName("businesstypecode")]
        public Account_BusinessTypeCode? BusinessTypeCode {
            get {
                return GetOptionSetValue<Account_BusinessTypeCode>("businesstypecode");
            }
            set {
                SetOptionSetValue("businesstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows phone calls. If Do Not Allow is selected, the account will be excluded from phone call activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
            set {
                SetAttributeValue("donotphone", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Type the company or business name.</para>
        /// <para>Display Name: Account Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Primary Satori ID for Account</para>
        /// <para>Display Name: Primary Satori ID</para>
        /// </summary>
        [AttributeLogicalName("primarysatoriid")]
        public string PrimarySatoriId {
            get {
                return GetAttributeValue<string>("primarysatoriid");
            }
            set {
                SetAttributeValue("primarysatoriid", value);
            }
        }
        
        /// <summary>
        /// <para>State of Open Revenue.</para>
        /// <para>Display Name: Open Revenue(State)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_state")]
        public int? OpenRevenue_State {
            get {
                return GetAttributeValue<int?>("openrevenue_state");
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account's primary industry for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: Industry</para>
        /// </summary>
        [AttributeLogicalName("industrycode")]
        public Account_IndustryCode? IndustryCode {
            get {
                return GetOptionSetValue<Account_IndustryCode>("industrycode");
            }
            set {
                SetOptionSetValue("industrycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the account.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the company name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
        /// <para>Display Name: Yomi Account Name</para>
        /// </summary>
        [AttributeLogicalName("yominame")]
        public string YomiName {
            get {
                return GetAttributeValue<string>("yominame");
            }
            set {
                SetAttributeValue("yominame", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the credit limit converted to the system's default base currency for reporting purposes.</para>
        /// <para>Display Name: Credit Limit (Base)</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        public decimal? CreditLimit_Base {
            get {
                return GetMoneyValue("creditlimit_base");
            }
        }
        
        [AttributeLogicalName("territoryidname")]
        public string TerritoryIdName {
            get {
                return GetAttributeValue<string>("territoryidname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 60</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        public decimal? Aging60 {
            get {
                return GetMoneyValue("aging60");
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Select a region or territory for the account for use in segmentation and analysis.</para>
        /// <para>Display Name: Territory Code</para>
        /// </summary>
        [AttributeLogicalName("territorycode")]
        public Account_TerritoryCode? TerritoryCode {
            get {
                return GetOptionSetValue<Account_TerritoryCode>("territorycode");
            }
            set {
                SetOptionSetValue("territorycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows direct email sent from Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEMail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
            set {
                SetAttributeValue("donotemail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the account, such as an excerpt from the company's website.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the account was last included in a marketing campaign or quick campaign.</para>
        /// <para>Display Name: Last Date Included in Campaign</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? LastUsedInCampaign {
            get {
                return GetAttributeValue<DateTime?>("lastusedincampaign");
            }
            set {
                SetAttributeValue("lastusedincampaign", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>Display Name: Address 2: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>State of Open Deals.</para>
        /// <para>Display Name: Open Deals(State)</para>
        /// </summary>
        [AttributeLogicalName("opendeals_state")]
        public int? OpenDeals_State {
            get {
                return GetAttributeValue<int?>("opendeals_state");
            }
        }
        
        /// <summary>
        /// <para>Select the account's ownership structure, such as public or private.</para>
        /// <para>Display Name: Ownership</para>
        /// </summary>
        [AttributeLogicalName("ownershipcode")]
        public Account_OwnershipCode? OwnershipCode {
            get {
                return GetOptionSetValue<Account_OwnershipCode>("ownershipcode");
            }
            set {
                SetOptionSetValue("ownershipcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address 1</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the market capitalization of the account to identify the company's equity, used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Market Capitalization</para>
        /// </summary>
        [AttributeLogicalName("marketcap")]
        public decimal? MarketCap {
            get {
                return GetMoneyValue("marketcap");
            }
            set {
                SetMoneyValue("marketcap", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows faxes. If Do Not Allow is selected, the account will be excluded from fax activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
            set {
                SetAttributeValue("donotfax", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows bulk email sent through campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but is excluded from email.</para>
        /// <para>Display Name: Do not allow Bulk Emails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        public bool? DoNotBulkEMail {
            get {
                return GetAttributeValue<bool?>("donotbulkemail");
            }
            set {
                SetAttributeValue("donotbulkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Account_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Account_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>Display Name: Address 2: City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the parent account associated with this account to show parent and child businesses in reporting and analytics.</para>
        /// <para>Display Name: Parent Account</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference ParentAccountId {
            get {
                return GetAttributeValue<EntityReference>("parentaccountid");
            }
            set {
                SetAttributeValue("parentaccountid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number for this account.</para>
        /// <para>Display Name: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        public string Telephone3 {
            get {
                return GetAttributeValue<string>("telephone3");
            }
            set {
                SetAttributeValue("telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the primary contact for the account to provide quick access to contact details.</para>
        /// <para>Display Name: Primary Contact</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference PrimaryContactId {
            get {
                return GetAttributeValue<EntityReference>("primarycontactid");
            }
            set {
                SetAttributeValue("primarycontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Select the category that best describes the relationship between the account and your organization.</para>
        /// <para>Display Name: Relationship Type</para>
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        public Account_CustomerTypeCode? CustomerTypeCode {
            get {
                return GetOptionSetValue<Account_CustomerTypeCode>("customertypecode");
            }
            set {
                SetOptionSetValue("customertypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateOnly</para>
        /// </summary>
        [AttributeLogicalName("new_dateonly")]
        public DateTime? new_DateOnly {
            get {
                return GetAttributeValue<DateTime?>("new_dateonly");
            }
            set {
                SetAttributeValue("new_dateonly", value);
            }
        }
        
        /// <summary>
        /// <para>Type the annual revenue for the account, used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Annual Revenue</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        public decimal? Revenue {
            get {
                return GetMoneyValue("revenue");
            }
            set {
                SetMoneyValue("revenue", value);
            }
        }
        
        /// <summary>
        /// <para>Select a classification code to indicate the potential value of the customer account based on the projected return on investment, cooperation level, sales cycle length or other criteria.</para>
        /// <para>Display Name: Classification</para>
        /// </summary>
        [AttributeLogicalName("accountclassificationcode")]
        public Account_AccountClassificationCode? AccountClassificationCode {
            get {
                return GetOptionSetValue<Account_AccountClassificationCode>("accountclassificationcode");
            }
            set {
                SetOptionSetValue("accountclassificationcode", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyexternalpartyname")]
        public string ModifiedByExternalPartyName {
            get {
                return GetAttributeValue<string>("modifiedbyexternalpartyname");
            }
        }
        
        /// <summary>
        /// <para>Type the number of employees that work at the account for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: No. of Employees</para>
        /// </summary>
        [AttributeLogicalName("numberofemployees")]
        public int? NumberOfEmployees {
            get {
                return GetAttributeValue<int?>("numberofemployees");
            }
            set {
                SetAttributeValue("numberofemployees", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred time of day for service appointments.</para>
        /// <para>Display Name: Preferred Time</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public Account_PreferredAppointmentTimeCode? PreferredAppointmentTimeCode {
            get {
                return GetOptionSetValue<Account_PreferredAppointmentTimeCode>("preferredappointmenttimecode");
            }
            set {
                SetOptionSetValue("preferredappointmenttimecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        [AttributeLogicalName("originatingleadidname")]
        public string OriginatingLeadIdName {
            get {
                return GetAttributeValue<string>("originatingleadidname");
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateTime</para>
        /// </summary>
        [AttributeLogicalName("new_datetime")]
        public DateTime? new_DateTime {
            get {
                return GetAttributeValue<DateTime?>("new_datetime");
            }
            set {
                SetAttributeValue("new_datetime", value);
            }
        }
        
        [AttributeLogicalName("parentaccountidname")]
        public string ParentAccountIdName {
            get {
                return GetAttributeValue<string>("parentaccountidname");
            }
        }
        
        /// <summary>
        /// <para>Sum of open revenue against an account and its child accounts.</para>
        /// <para>Display Name: Open Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_base")]
        public decimal? OpenRevenue_Base {
            get {
                return GetMoneyValue("openrevenue_base");
            }
        }
        
        /// <summary>
        /// <para>Type the credit limit of the account. This is a useful reference when you address invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Limit</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public decimal? CreditLimit {
            get {
                return GetMoneyValue("creditlimit");
            }
            set {
                SetMoneyValue("creditlimit", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 1: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        public Account_Address1_FreightTermsCode? Address1_FreightTermsCode {
            get {
                return GetOptionSetValue<Account_Address1_FreightTermsCode>("address1_freighttermscode");
            }
            set {
                SetOptionSetValue("address1_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the TestCalculated in base currency.</para>
        /// <para>Display Name: TestCalculated (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_testcalculated_base")]
        public decimal? dg_testcalculated_Base {
            get {
                return GetMoneyValue("dg_testcalculated_base");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>The base currency equivalent of the aging 60 field.</para>
        /// <para>Display Name: Aging 60 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        public decimal? Aging60_Base {
            get {
                return GetMoneyValue("aging60_base");
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>Display Name: Address 2: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the sales region or territory for the account to make sure the account is assigned to the correct representative and for use in segmentation and analysis.</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territoryid")]
        public EntityReference TerritoryId {
            get {
                return GetAttributeValue<EntityReference>("territoryid");
            }
            set {
                SetAttributeValue("territoryid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>Display Name: Address 2: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Select a category to indicate whether the customer account is standard or preferred.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("accountcategorycode")]
        public Account_AccountCategoryCode? AccountCategoryCode {
            get {
                return GetOptionSetValue<Account_AccountCategoryCode>("accountcategorycode");
            }
            set {
                SetOptionSetValue("accountcategorycode", value);
            }
        }
        
        [AttributeLogicalName("preferredsystemuseridname")]
        public string PreferredSystemUserIdName {
            get {
                return GetAttributeValue<string>("preferredsystemuseridname");
            }
        }
        
        [AttributeLogicalName("masteraccountidname")]
        public string MasterAccountIdName {
            get {
                return GetAttributeValue<string>("masteraccountidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the lead that the account was created from if the account was created by converting a lead in Microsoft Dynamics CRM. This is used to relate the account to data on the originating lead for use in reporting and analytics.</para>
        /// <para>Display Name: Originating Lead</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference OriginatingLeadId {
            get {
                return GetAttributeValue<EntityReference>("originatingleadid");
            }
            set {
                SetAttributeValue("originatingleadid", value);
            }
        }
        
        /// <summary>
        /// <para>The date time for Open Deals.</para>
        /// <para>Display Name: Open Deals(Last Updated Time)</para>
        /// </summary>
        [AttributeLogicalName("opendeals_date")]
        public DateTime? OpenDeals_Date {
            get {
                return GetAttributeValue<DateTime?>("opendeals_date");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public Account_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<Account_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but will be excluded from the postal mail.</para>
        /// <para>Display Name: Do not allow Bulk Mails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkpostalmail")]
        public bool? DoNotBulkPostalMail {
            get {
                return GetAttributeValue<bool?>("donotbulkpostalmail");
            }
            set {
                SetAttributeValue("donotbulkpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 30</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        public decimal? Aging30 {
            get {
                return GetMoneyValue("aging30");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the credit for the account is on hold. This is a useful reference while addressing the invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Hold</para>
        /// </summary>
        [AttributeLogicalName("creditonhold")]
        public bool? CreditOnHold {
            get {
                return GetAttributeValue<bool?>("creditonhold");
            }
            set {
                SetAttributeValue("creditonhold", value);
            }
        }
        
        [AttributeLogicalName("primarycontactidname")]
        public string PrimaryContactIdName {
            get {
                return GetAttributeValue<string>("primarycontactidname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the account accepts marketing materials, such as brochures or catalogs.</para>
        /// <para>Display Name: Send Marketing Materials</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        public bool? DoNotSendMM {
            get {
                return GetAttributeValue<bool?>("donotsendmm");
            }
            set {
                SetAttributeValue("donotsendmm", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of shares available to the public for the account. This number is used as an indicator in financial performance analysis.</para>
        /// <para>Display Name: Shares Outstanding</para>
        /// </summary>
        [AttributeLogicalName("sharesoutstanding")]
        public int? SharesOutstanding {
            get {
                return GetAttributeValue<int?>("sharesoutstanding");
            }
            set {
                SetAttributeValue("sharesoutstanding", value);
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public Account_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<Account_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sum of open revenue against an account and its child accounts.</para>
        /// <para>Display Name: Open Revenue</para>
        /// </summary>
        [AttributeLogicalName("openrevenue")]
        public decimal? OpenRevenue {
            get {
                return GetMoneyValue("openrevenue");
            }
        }
        
        /// <summary>
        /// <para>Select whether the account allows direct mail. If Do Not Allow is selected, the account will be excluded from letter activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
            set {
                SetAttributeValue("donotpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the account's website URL to get quick details about the company profile.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteURL {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 90</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        public decimal? Aging90 {
            get {
                return GetMoneyValue("aging90");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Account record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>Display Name: Address 1: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary email address for the account.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        public string EMailAddress1 {
            get {
                return GetAttributeValue<string>("emailaddress1");
            }
            set {
                SetAttributeValue("emailaddress1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the secondary email address for the account.</para>
        /// <para>Display Name: Email Address 2</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        public string EMailAddress2 {
            get {
                return GetAttributeValue<string>("emailaddress2");
            }
            set {
                SetAttributeValue("emailaddress2", value);
            }
        }
        
        /// <summary>
        /// <para>Type an alternate email address for the account.</para>
        /// <para>Display Name: Email Address 3</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        public string EMailAddress3 {
            get {
                return GetAttributeValue<string>("emailaddress3");
            }
            set {
                SetAttributeValue("emailaddress3", value);
            }
        }
        
        [RelationshipSchemaName("dg_account_contact")]
        public IEnumerable<Contact> dg_account_contact {
            get {
                return GetRelatedEntities<Contact>("dg_account_contact", null);
            }
            set {
                SetRelatedEntities("dg_account_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_account_account")]
        public IEnumerable<Account> dg_account_account {
            get {
                return GetRelatedEntities<Account>("dg_account_account", null);
            }
            set {
                SetRelatedEntities("dg_account_account", null, value);
            }
        }
        
        [RelationshipSchemaName("accountleads_association")]
        public IEnumerable<Lead> accountleads_association {
            get {
                return GetRelatedEntities<Lead>("accountleads_association", null);
            }
            set {
                SetRelatedEntities("accountleads_association", null, value);
            }
        }
        
        [RelationshipSchemaName("listaccount_association")]
        public IEnumerable<List> listaccount_association {
            get {
                return GetRelatedEntities<List>("listaccount_association", null);
            }
            set {
                SetRelatedEntities("listaccount_association", null, value);
            }
        }
        
        [AttributeLogicalName("originatingleadid")]
        [RelationshipSchemaName("account_originating_lead")]
        public Lead account_originating_lead {
            get {
                return GetRelatedEntity<Lead>("account_originating_lead", null);
            }
            set {
                SetRelatedEntity("account_originating_lead", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_accounts")]
        public Team team_accounts {
            get {
                return GetRelatedEntity<Team>("team_accounts", null);
            }
            set {
                SetRelatedEntity("team_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_accountbase_modifiedonbehalfby")]
        public SystemUser lk_accountbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_account")]
        public SLA sla_account {
            get {
                return GetRelatedEntity<SLA>("sla_account", null);
            }
            set {
                SetRelatedEntity("sla_account", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedbyexternalparty")]
        [RelationshipSchemaName("lk_externalparty_account_modifiedby")]
        public ExternalParty lk_externalparty_account_modifiedby {
            get {
                return GetRelatedEntity<ExternalParty>("lk_externalparty_account_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_account_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_accountbase_createdby")]
        public SystemUser lk_accountbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_account")]
        public SLA manualsla_account {
            get {
                return GetRelatedEntity<SLA>("manualsla_account", null);
            }
            set {
                SetRelatedEntity("manualsla_account", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_accountbase_createdonbehalfby")]
        public SystemUser lk_accountbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_accounts")]
        public SystemUser user_accounts {
            get {
                return GetRelatedEntity<SystemUser>("user_accounts", null);
            }
            set {
                SetRelatedEntity("user_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_account")]
        public TransactionCurrency transactioncurrency_account {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_account", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_account", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_accounts")]
        public BusinessUnit business_unit_accounts {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_accounts", null);
            }
            set {
                SetRelatedEntity("business_unit_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("parentaccountid")]
        [RelationshipSchemaName("account_parent_account", EntityRole.Referencing)]
        public Account Referencingaccount_parent_account {
            get {
                return GetRelatedEntity<Account>("account_parent_account", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("account_parent_account", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_accountbase_modifiedby")]
        public SystemUser lk_accountbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_accountbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_accountbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdbyexternalparty")]
        [RelationshipSchemaName("lk_externalparty_account_createdby")]
        public ExternalParty lk_externalparty_account_createdby {
            get {
                return GetRelatedEntity<ExternalParty>("lk_externalparty_account_createdby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_account_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("preferredsystemuserid")]
        [RelationshipSchemaName("system_user_accounts")]
        public SystemUser system_user_accounts {
            get {
                return GetRelatedEntity<SystemUser>("system_user_accounts", null);
            }
            set {
                SetRelatedEntity("system_user_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("account_master_account", EntityRole.Referencing)]
        public Account Referencingaccount_master_account {
            get {
                return GetRelatedEntity<Account>("account_master_account", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("account_master_account", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("primarycontactid")]
        [RelationshipSchemaName("account_primary_contact")]
        public Contact account_primary_contact {
            get {
                return GetRelatedEntity<Contact>("account_primary_contact", null);
            }
            set {
                SetRelatedEntity("account_primary_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_account_contact_TestAccount")]
        public IEnumerable<Contact> dg_account_contact_TestAccount {
            get {
                return GetRelatedEntities<Contact>("dg_account_contact_TestAccount", null);
            }
            set {
                SetRelatedEntities("dg_account_contact_TestAccount", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_parent_account")]
        public IEnumerable<Opportunity> opportunity_parent_account {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_parent_account", null);
            }
            set {
                SetRelatedEntities("opportunity_parent_account", null, value);
            }
        }
        
        [RelationshipSchemaName("account_connections2")]
        public IEnumerable<Connection> account_connections2 {
            get {
                return GetRelatedEntities<Connection>("account_connections2", null);
            }
            set {
                SetRelatedEntities("account_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_SharepointDocumentLocation")]
        public IEnumerable<SharePointDocumentLocation> Account_SharepointDocumentLocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("Account_SharepointDocumentLocation", null);
            }
            set {
                SetRelatedEntities("Account_SharepointDocumentLocation", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_customer_accounts")]
        public IEnumerable<Contract> contract_customer_accounts {
            get {
                return GetRelatedEntities<Contract>("contract_customer_accounts", null);
            }
            set {
                SetRelatedEntities("contract_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_parent_account")]
        public IEnumerable<Lead> lead_parent_account {
            get {
                return GetRelatedEntities<Lead>("lead_parent_account", null);
            }
            set {
                SetRelatedEntities("lead_parent_account", null, value);
            }
        }
        
        [RelationshipSchemaName("account_master_account", EntityRole.Referenced)]
        public IEnumerable<Account> Referencedaccount_master_account {
            get {
                return GetRelatedEntities<Account>("account_master_account", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("account_master_account", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("Account_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Account_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Account_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Account_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_customer_accounts")]
        public IEnumerable<Contact> contact_customer_accounts {
            get {
                return GetRelatedEntities<Contact>("contact_customer_accounts", null);
            }
            set {
                SetRelatedEntities("contact_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_customer_accounts")]
        public IEnumerable<Lead> lead_customer_accounts {
            get {
                return GetRelatedEntities<Lead>("lead_customer_accounts", null);
            }
            set {
                SetRelatedEntities("lead_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("account_parent_account", EntityRole.Referenced)]
        public IEnumerable<Account> Referencedaccount_parent_account {
            get {
                return GetRelatedEntities<Account>("account_parent_account", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("account_parent_account", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("Account_Email_EmailSender")]
        public IEnumerable<Email> Account_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("Account_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("Account_Email_EmailSender", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Account_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Account_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Account_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("quote_customer_accounts")]
        public IEnumerable<Quote> quote_customer_accounts {
            get {
                return GetRelatedEntities<Quote>("quote_customer_accounts", null);
            }
            set {
                SetRelatedEntities("quote_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_customer_accounts")]
        public IEnumerable<Invoice> invoice_customer_accounts {
            get {
                return GetRelatedEntities<Invoice>("invoice_customer_accounts", null);
            }
            set {
                SetRelatedEntities("invoice_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Letters")]
        public IEnumerable<Letter> Account_Letters {
            get {
                return GetRelatedEntities<Letter>("Account_Letters", null);
            }
            set {
                SetRelatedEntities("Account_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_billingcustomer_accounts")]
        public IEnumerable<Contract> contract_billingcustomer_accounts {
            get {
                return GetRelatedEntities<Contract>("contract_billingcustomer_accounts", null);
            }
            set {
                SetRelatedEntities("contract_billingcustomer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_customer_accounts")]
        public IEnumerable<Opportunity> opportunity_customer_accounts {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_customer_accounts", null);
            }
            set {
                SetRelatedEntities("opportunity_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_customer_accounts")]
        public IEnumerable<Incident> incident_customer_accounts {
            get {
                return GetRelatedEntities<Incident>("incident_customer_accounts", null);
            }
            set {
                SetRelatedEntities("incident_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_SocialActivities")]
        public IEnumerable<SocialActivity> Account_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("Account_SocialActivities", null);
            }
            set {
                SetRelatedEntities("Account_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Phonecalls")]
        public IEnumerable<PhoneCall> Account_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Account_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Account_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("account_activity_parties")]
        public IEnumerable<ActivityParty> account_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("account_activity_parties", null);
            }
            set {
                SetRelatedEntities("account_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Emails")]
        public IEnumerable<Email> Account_Emails {
            get {
                return GetRelatedEntities<Email>("Account_Emails", null);
            }
            set {
                SetRelatedEntities("Account_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Appointments")]
        public IEnumerable<Appointment> Account_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Account_Appointments", null);
            }
            set {
                SetRelatedEntities("Account_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Email_SendersAccount")]
        public IEnumerable<Email> Account_Email_SendersAccount {
            get {
                return GetRelatedEntities<Email>("Account_Email_SendersAccount", null);
            }
            set {
                SetRelatedEntities("Account_Email_SendersAccount", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_ActivityPointers")]
        public IEnumerable<ActivityPointer> Account_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Account_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Account_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_SyncErrors")]
        public IEnumerable<SyncError> Account_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Account_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Account_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("SocialActivity_PostAuthor_accounts")]
        public IEnumerable<SocialActivity> SocialActivity_PostAuthor_accounts {
            get {
                return GetRelatedEntities<SocialActivity>("SocialActivity_PostAuthor_accounts", null);
            }
            set {
                SetRelatedEntities("SocialActivity_PostAuthor_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("SocialActivity_PostAuthorAccount_accounts")]
        public IEnumerable<SocialActivity> SocialActivity_PostAuthorAccount_accounts {
            get {
                return GetRelatedEntities<SocialActivity>("SocialActivity_PostAuthorAccount_accounts", null);
            }
            set {
                SetRelatedEntities("SocialActivity_PostAuthorAccount_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("account_connections1")]
        public IEnumerable<Connection> account_connections1 {
            get {
                return GetRelatedEntities<Connection>("account_connections1", null);
            }
            set {
                SetRelatedEntities("account_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Tasks")]
        public IEnumerable<Task> Account_Tasks {
            get {
                return GetRelatedEntities<Task>("Account_Tasks", null);
            }
            set {
                SetRelatedEntities("Account_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("order_customer_accounts")]
        public IEnumerable<SalesOrder> order_customer_accounts {
            get {
                return GetRelatedEntities<SalesOrder>("order_customer_accounts", null);
            }
            set {
                SetRelatedEntities("order_customer_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("Account_Faxes")]
        public IEnumerable<Fax> Account_Faxes {
            get {
                return GetRelatedEntities<Fax>("Account_Faxes", null);
            }
            set {
                SetRelatedEntities("Account_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("account_bookableresource_AccountId")]
        public IEnumerable<BookableResource> account_bookableresource_AccountId {
            get {
                return GetRelatedEntities<BookableResource>("account_bookableresource_AccountId", null);
            }
            set {
                SetRelatedEntities("account_bookableresource_AccountId", null, value);
            }
        }
        
        [RelationshipSchemaName("account_entitlement_Account")]
        public IEnumerable<Entitlement> account_entitlement_Account {
            get {
                return GetRelatedEntities<Entitlement>("account_entitlement_Account", null);
            }
            set {
                SetRelatedEntities("account_entitlement_Account", null, value);
            }
        }
        
        [RelationshipSchemaName("account_entitlement_Customer")]
        public IEnumerable<Entitlement> account_entitlement_Customer {
            get {
                return GetRelatedEntities<Entitlement>("account_entitlement_Customer", null);
            }
            set {
                SetRelatedEntities("account_entitlement_Customer", null, value);
            }
        }
        
        public static Account Retrieve(IOrganizationService service, Guid id, params Expression<Func<Account,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
        
        /// <summary>
        /// <para>Retrieves the record using the alternate key called 'name'</para>
        /// </summary>
        public static Account Retrieve_dg_name(IOrganizationService service, string Name, params Expression<Func<Account,object>>[] attrs) {
            KeyAttributeCollection keys = new KeyAttributeCollection();
            keys.Add("name", Name);
            return Retrieve_AltKey(service, keys, attrs);
        }
        
        /// <summary>
        /// <para>Set values for the alternate key called 'name'</para>
        /// </summary>
        public void AltKey_dg_name(string Name) {
            KeyAttributes.Clear();
            KeyAttributes.Add("name", Name);
        }
    }
    
    [EntityLogicalName("accountleads")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class AccountLeads : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "accountleads";
        
        public const int EntityTypeCode = 16;
        
        public AccountLeads() : 
                base(EntityLogicalName) {
        }
        
        public AccountLeads(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("accountleadid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("accountleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the lead for the account.</para>
        /// </summary>
        [AttributeLogicalName("accountleadid")]
        public Guid? AccountLeadId {
            get {
                return GetAttributeValue<Guid?>("accountleadid");
            }
            set {
                SetId("accountleadid", value);
            }
        }
        
        [AttributeLogicalName("leadid")]
        public Guid? LeadId {
            get {
                return GetAttributeValue<Guid?>("leadid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("accountid")]
        public Guid? AccountId {
            get {
                return GetAttributeValue<Guid?>("accountid");
            }
        }
        
        public static AccountLeads Retrieve(IOrganizationService service, Guid id, params Expression<Func<AccountLeads,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Person or group associated with an activity. An activity can have multiple activity parties.</para>
    /// <para>Display Name: Activity Party</para>
    /// </summary>
    [EntityLogicalName("activityparty")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ActivityParty : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "activityparty";
        
        public const int EntityTypeCode = 135;
        
        public ActivityParty() : 
                base(EntityLogicalName) {
        }
        
        public ActivityParty(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("partyidname");
            }
        }
        
        [AttributeLogicalName("activitypartyid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activitypartyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity party.</para>
        /// <para>Display Name: Activity Party</para>
        /// </summary>
        [AttributeLogicalName("activitypartyid")]
        public Guid? ActivityPartyId {
            get {
                return GetAttributeValue<Guid?>("activitypartyid");
            }
            set {
                SetId("activitypartyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the activity_party.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity associated with the activity party. (A "party" is any person who is associated with an activity.)</para>
        /// <para>Display Name: Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public EntityReference ActivityId {
            get {
                return GetAttributeValue<EntityReference>("activityid");
            }
            set {
                SetAttributeValue("activityid", value);
            }
        }
        
        [AttributeLogicalName("partyobjecttypecode")]
        public string PartyObjectTypeCode {
            get {
                return GetAttributeValue<string>("partyobjecttypecode");
            }
            set {
                SetAttributeValue("partyobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the activity.</para>
        /// <para>Display Name: Scheduled End</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
        }
        
        /// <summary>
        /// <para>Information about whether the underlying entity record is deleted.</para>
        /// <para>Display Name: Is Party Deleted</para>
        /// </summary>
        [AttributeLogicalName("ispartydeleted")]
        public bool? IsPartyDeleted {
            get {
                return GetAttributeValue<bool?>("ispartydeleted");
            }
        }
        
        /// <summary>
        /// <para>Amount of effort used by the resource in a service appointment activity.</para>
        /// <para>Display Name: Effort</para>
        /// </summary>
        [AttributeLogicalName("effort")]
        public double? Effort {
            get {
                return GetAttributeValue<double?>("effort");
            }
            set {
                SetAttributeValue("effort", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the activity.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow phone calls to the lead.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
        }
        
        [AttributeLogicalName("resourcespecidname")]
        public string ResourceSpecIdName {
            get {
                return GetAttributeValue<string>("resourcespecidname");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
        }
        
        /// <summary>
        /// <para>Email address column number from associated party.</para>
        /// <para>Display Name: Email column number of party</para>
        /// </summary>
        [AttributeLogicalName("addressusedemailcolumnnumber")]
        public int? AddressUsedEmailColumnNumber {
            get {
                return GetAttributeValue<int?>("addressusedemailcolumnnumber");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending email to the activity party.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEmail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Appointment Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public ActivityParty_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<ActivityParty_InstanceTypeCode>("instancetypecode");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending faxes to the activity party.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
        }
        
        /// <summary>
        /// <para>Role of the person in the activity, such as sender, to, cc, bcc, required, optional, organizer, regarding, or owner.</para>
        /// <para>Display Name: Participation Type</para>
        /// </summary>
        [AttributeLogicalName("participationtypemask")]
        public ActivityParty_ParticipationTypeMask? ParticipationTypeMask {
            get {
                return GetOptionSetValue<ActivityParty_ParticipationTypeMask>("participationtypemask");
            }
            set {
                SetOptionSetValue("participationtypemask", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the party associated with the activity.</para>
        /// <para>Display Name: Party</para>
        /// </summary>
        [AttributeLogicalName("partyid")]
        public EntityReference PartyId {
            get {
                return GetAttributeValue<EntityReference>("partyid");
            }
            set {
                SetAttributeValue("partyid", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether to allow sending postal mail to the lead.</para>
        /// <para>Display Name: Do not allow Postal Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource specification for the activity party.</para>
        /// <para>Display Name: Resource Specification</para>
        /// </summary>
        [AttributeLogicalName("resourcespecid")]
        public EntityReference ResourceSpecId {
            get {
                return GetAttributeValue<EntityReference>("resourcespecid");
            }
            set {
                SetAttributeValue("resourcespecid", value);
            }
        }
        
        [AttributeLogicalName("partyidname")]
        public string PartyIdName {
            get {
                return GetAttributeValue<string>("partyidname");
            }
            set {
                SetAttributeValue("partyidname", value);
            }
        }
        
        /// <summary>
        /// <para>Email address to which an email is delivered, and which is associated with the target entity.</para>
        /// <para>Display Name: Address </para>
        /// </summary>
        [AttributeLogicalName("addressused")]
        public string AddressUsed {
            get {
                return GetAttributeValue<string>("addressused");
            }
            set {
                SetAttributeValue("addressused", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Exchange Entry</para>
        /// </summary>
        [AttributeLogicalName("exchangeentryid")]
        public string ExchangeEntryId {
            get {
                return GetAttributeValue<string>("exchangeentryid");
            }
            set {
                SetAttributeValue("exchangeentryid", value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activitypointer_activity_parties")]
        public ActivityPointer activitypointer_activity_parties {
            get {
                return GetRelatedEntity<ActivityPointer>("activitypointer_activity_parties", null);
            }
            set {
                SetRelatedEntity("activitypointer_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("fax_activity_parties")]
        public Fax fax_activity_parties {
            get {
                return GetRelatedEntity<Fax>("fax_activity_parties", null);
            }
            set {
                SetRelatedEntity("fax_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("quote_activity_parties")]
        public Quote quote_activity_parties {
            get {
                return GetRelatedEntity<Quote>("quote_activity_parties", null);
            }
            set {
                SetRelatedEntity("quote_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("serviceappointment_activity_parties")]
        public ServiceAppointment serviceappointment_activity_parties {
            get {
                return GetRelatedEntity<ServiceAppointment>("serviceappointment_activity_parties", null);
            }
            set {
                SetRelatedEntity("serviceappointment_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("email_activity_parties")]
        public Email email_activity_parties {
            get {
                return GetRelatedEntity<Email>("email_activity_parties", null);
            }
            set {
                SetRelatedEntity("email_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("knowledgearticle_activity_parties")]
        public KnowledgeArticle knowledgearticle_activity_parties {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_activity_parties", null);
            }
            set {
                SetRelatedEntity("knowledgearticle_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("campaignactivity_activityparties")]
        public CampaignActivity campaignactivity_activityparties {
            get {
                return GetRelatedEntity<CampaignActivity>("campaignactivity_activityparties", null);
            }
            set {
                SetRelatedEntity("campaignactivity_activityparties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("campaignactivity_activity_parties")]
        public CampaignActivity campaignactivity_activity_parties {
            get {
                return GetRelatedEntity<CampaignActivity>("campaignactivity_activity_parties", null);
            }
            set {
                SetRelatedEntity("campaignactivity_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("lead_activity_parties")]
        public Lead lead_activity_parties {
            get {
                return GetRelatedEntity<Lead>("lead_activity_parties", null);
            }
            set {
                SetRelatedEntity("lead_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("socialactivity_activity_parties")]
        public SocialActivity socialactivity_activity_parties {
            get {
                return GetRelatedEntity<SocialActivity>("socialactivity_activity_parties", null);
            }
            set {
                SetRelatedEntity("socialactivity_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("opportunityclose_activity_parties")]
        public OpportunityClose opportunityclose_activity_parties {
            get {
                return GetRelatedEntity<OpportunityClose>("opportunityclose_activity_parties", null);
            }
            set {
                SetRelatedEntity("opportunityclose_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("appointment_activity_parties")]
        public Appointment appointment_activity_parties {
            get {
                return GetRelatedEntity<Appointment>("appointment_activity_parties", null);
            }
            set {
                SetRelatedEntity("appointment_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("salesorder_activity_parties")]
        public SalesOrder salesorder_activity_parties {
            get {
                return GetRelatedEntity<SalesOrder>("salesorder_activity_parties", null);
            }
            set {
                SetRelatedEntity("salesorder_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("incident_activity_parties")]
        public Incident incident_activity_parties {
            get {
                return GetRelatedEntity<Incident>("incident_activity_parties", null);
            }
            set {
                SetRelatedEntity("incident_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("system_user_activity_parties")]
        public SystemUser system_user_activity_parties {
            get {
                return GetRelatedEntity<SystemUser>("system_user_activity_parties", null);
            }
            set {
                SetRelatedEntity("system_user_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("invoice_activity_parties")]
        public Invoice invoice_activity_parties {
            get {
                return GetRelatedEntity<Invoice>("invoice_activity_parties", null);
            }
            set {
                SetRelatedEntity("invoice_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("campaign_activity_parties")]
        public Campaign campaign_activity_parties {
            get {
                return GetRelatedEntity<Campaign>("campaign_activity_parties", null);
            }
            set {
                SetRelatedEntity("campaign_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("contact_activity_parties")]
        public Contact contact_activity_parties {
            get {
                return GetRelatedEntity<Contact>("contact_activity_parties", null);
            }
            set {
                SetRelatedEntity("contact_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("contract_activity_parties")]
        public Contract contract_activity_parties {
            get {
                return GetRelatedEntity<Contract>("contract_activity_parties", null);
            }
            set {
                SetRelatedEntity("contract_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("opportunity_activity_parties")]
        public Opportunity opportunity_activity_parties {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_activity_parties", null);
            }
            set {
                SetRelatedEntity("opportunity_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("recurringappointmentmaster_activity_parties")]
        public RecurringAppointmentMaster recurringappointmentmaster_activity_parties {
            get {
                return GetRelatedEntity<RecurringAppointmentMaster>("recurringappointmentmaster_activity_parties", null);
            }
            set {
                SetRelatedEntity("recurringappointmentmaster_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("task_activity_parties")]
        public Task task_activity_parties {
            get {
                return GetRelatedEntity<Task>("task_activity_parties", null);
            }
            set {
                SetRelatedEntity("task_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("phonecall_activity_parties")]
        public PhoneCall phonecall_activity_parties {
            get {
                return GetRelatedEntity<PhoneCall>("phonecall_activity_parties", null);
            }
            set {
                SetRelatedEntity("phonecall_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("letter_activity_parties")]
        public Letter letter_activity_parties {
            get {
                return GetRelatedEntity<Letter>("letter_activity_parties", null);
            }
            set {
                SetRelatedEntity("letter_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("partyid")]
        [RelationshipSchemaName("account_activity_parties")]
        public Account account_activity_parties {
            get {
                return GetRelatedEntity<Account>("account_activity_parties", null);
            }
            set {
                SetRelatedEntity("account_activity_parties", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("campaignresponse_activity_parties")]
        public CampaignResponse campaignresponse_activity_parties {
            get {
                return GetRelatedEntity<CampaignResponse>("campaignresponse_activity_parties", null);
            }
            set {
                SetRelatedEntity("campaignresponse_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("ActivityParty_SyncErrors")]
        public IEnumerable<SyncError> ActivityParty_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("ActivityParty_SyncErrors", null);
            }
            set {
                SetRelatedEntities("ActivityParty_SyncErrors", null, value);
            }
        }
        
        public static ActivityParty Retrieve(IOrganizationService service, Guid id, params Expression<Func<ActivityParty,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Task performed, or to be performed, by a user. An activity is any action for which an entry can be made on a calendar.</para>
    /// <para>Display Name: Activity</para>
    /// </summary>
    [EntityLogicalName("activitypointer")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ActivityPointer : ExtendedEntity<ActivityPointerState, ActivityPointer_StatusCode> {
        
        public const string EntityLogicalName = "activitypointer";
        
        public const int EntityTypeCode = 4200;
        
        public ActivityPointer() : 
                base(EntityLogicalName) {
        }
        
        public ActivityPointer(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity.</para>
        /// <para>Display Name: Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Actual duration of the activity in minutes.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the activity.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public ActivityPointer_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<ActivityPointer_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the activity.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        [AttributeLogicalName("serviceidname")]
        public string ServiceIdName {
            get {
                return GetAttributeValue<string>("serviceidname");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Actual end time of the activity.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of user who last modified the activity.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the activity.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the activitypointer.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Left the voice mail</para>
        /// <para>Display Name: Left Voice Mail</para>
        /// </summary>
        [AttributeLogicalName("leftvoicemail")]
        public bool? LeftVoiceMail {
            get {
                return GetAttributeValue<bool?>("leftvoicemail");
            }
            set {
                SetAttributeValue("leftvoicemail", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was sent.</para>
        /// <para>Display Name: Date Sent</para>
        /// </summary>
        [AttributeLogicalName("senton")]
        public DateTime? SentOn {
            get {
                return GetAttributeValue<DateTime?>("senton");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("ismapiprivate")]
        public bool? IsMapiPrivate {
            get {
                return GetAttributeValue<bool?>("ismapiprivate");
            }
            set {
                SetAttributeValue("ismapiprivate", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Description of the activity.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of an associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Delay activity processing until</para>
        /// </summary>
        [AttributeLogicalName("postponeactivityprocessinguntil")]
        public DateTime? PostponeActivityProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeactivityprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Recurring Instance Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public ActivityPointer_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<ActivityPointer_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>All activity parties associated with this activity.</para>
        /// <para>Display Name: All Activity Parties</para>
        /// </summary>
        [AttributeLogicalName("allparties")]
        public IEnumerable<ActivityParty> allparties {
            get {
                return GetEntityCollection<ActivityParty>("allparties");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the case record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
            set {
                SetAttributeValue("scheduleddurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Actual start time of the activity.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Additional information provided by the external application as JSON. For internal use only.</para>
        /// <para>Display Name: Activity Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
            set {
                SetAttributeValue("regardingobjectidname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.</para>
        /// <para>Display Name: Social Channel</para>
        /// </summary>
        [AttributeLogicalName("community")]
        public socialprofile_community? Community {
            get {
                return GetOptionSetValue<socialprofile_community>("community");
            }
            set {
                SetOptionSetValue("community", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the activitypointer.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Uniqueidentifier specifying the id of recurring series of an instance.</para>
        /// <para>Display Name: Series Id</para>
        /// </summary>
        [AttributeLogicalName("seriesid")]
        public Guid? SeriesId {
            get {
                return GetAttributeValue<Guid?>("seriesid");
            }
        }
        
        /// <summary>
        /// <para>Status of the activity.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ActivityPointerState? StateCode {
            get {
                return GetOptionSetValue<ActivityPointerState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the mailbox associated with the sender of the email message.</para>
        /// <para>Display Name: Sender's Mailbox</para>
        /// </summary>
        [AttributeLogicalName("sendermailboxid")]
        public EntityReference SenderMailboxId {
            get {
                return GetAttributeValue<EntityReference>("sendermailboxid");
            }
        }
        
        /// <summary>
        /// <para>Priority of delivery of the activity to the email server.</para>
        /// <para>Display Name: Delivery Priority</para>
        /// </summary>
        [AttributeLogicalName("deliveryprioritycode")]
        public activitypointer_deliveryprioritycode? DeliveryPriorityCode {
            get {
                return GetOptionSetValue<activitypointer_deliveryprioritycode>("deliveryprioritycode");
            }
            set {
                SetOptionSetValue("deliveryprioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the activitypointer with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the activity.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when activity was last modified.</para>
        /// <para>Display Name: Last Updated</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Priority of the activity.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public ActivityPointer_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<ActivityPointer_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("sendermailboxidname")]
        public string SenderMailboxIdName {
            get {
                return GetAttributeValue<string>("sendermailboxidname");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the activity.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the delivery of the activity was last attempted.</para>
        /// <para>Display Name: Date Delivery Last Attempted</para>
        /// </summary>
        [AttributeLogicalName("deliverylastattemptedon")]
        public DateTime? DeliveryLastAttemptedOn {
            get {
                return GetAttributeValue<DateTime?>("deliverylastattemptedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the activitypointer.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was created.</para>
        /// <para>Display Name: Date Created</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_ActivityPointers")]
        public msdyn_PostAlbum msdyn_postalbum_ActivityPointers {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_ActivityPointers")]
        public dg_event dg_event_ActivityPointers {
            get {
                return GetRelatedEntity<dg_event>("dg_event_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("dg_event_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_ActivityPointers")]
        public dg_participant dg_participant_ActivityPointers {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("dg_participant_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_activity")]
        public SystemUser user_activity {
            get {
                return GetRelatedEntity<SystemUser>("user_activity", null);
            }
            set {
                SetRelatedEntity("user_activity", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_ActivityPointers")]
        public Lead Lead_ActivityPointers {
            get {
                return GetRelatedEntity<Lead>("Lead_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Lead_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_ActivityPointers")]
        public Opportunity Opportunity_ActivityPointers {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Opportunity_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_activitypointer_createdby")]
        public SystemUser lk_activitypointer_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_createdby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_ActivityPointers")]
        public Quote Quote_ActivityPointers {
            get {
                return GetRelatedEntity<Quote>("Quote_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Quote_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_activitypointer_modifiedby")]
        public SystemUser lk_activitypointer_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_activity")]
        public Team team_activity {
            get {
                return GetRelatedEntity<Team>("team_activity", null);
            }
            set {
                SetRelatedEntity("team_activity", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_activitypointer")]
        public SLA manualsla_activitypointer {
            get {
                return GetRelatedEntity<SLA>("manualsla_activitypointer", null);
            }
            set {
                SetRelatedEntity("manualsla_activitypointer", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_ActivityPointers")]
        public SalesOrder SalesOrder_ActivityPointers {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("SalesOrder_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_ActivityPointers")]
        public Account Account_ActivityPointers {
            get {
                return GetRelatedEntity<Account>("Account_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Account_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_activitypointer")]
        public BusinessUnit business_unit_activitypointer {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_activitypointer", null);
            }
            set {
                SetRelatedEntity("business_unit_activitypointer", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_activitypointer")]
        public SLA sla_activitypointer {
            get {
                return GetRelatedEntity<SLA>("sla_activitypointer", null);
            }
            set {
                SetRelatedEntity("sla_activitypointer", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_ActivityPointer")]
        public TransactionCurrency TransactionCurrency_ActivityPointer {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_ActivityPointer", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_ActivityPointer", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_activitypointer_modifiedonbehalfby")]
        public SystemUser lk_activitypointer_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_ActivityPointers")]
        public CampaignActivity CampaignActivity_ActivityPointers {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_ActivityPointers")]
        public Contact Contact_ActivityPointers {
            get {
                return GetRelatedEntity<Contact>("Contact_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Contact_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_ActivityPointers")]
        public Incident Incident_ActivityPointers {
            get {
                return GetRelatedEntity<Incident>("Incident_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Incident_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_ActivityPointers")]
        public Campaign Campaign_ActivityPointers {
            get {
                return GetRelatedEntity<Campaign>("Campaign_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Campaign_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_activitypointer_createdonbehalfby")]
        public SystemUser lk_activitypointer_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_activitypointer_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_activitypointer_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("sendermailboxid")]
        [RelationshipSchemaName("activitypointer_sendermailboxid_mailbox")]
        public Mailbox activitypointer_sendermailboxid_mailbox {
            get {
                return GetRelatedEntity<Mailbox>("activitypointer_sendermailboxid_mailbox", null);
            }
            set {
                SetRelatedEntity("activitypointer_sendermailboxid_mailbox", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_ActivityPointers")]
        public KnowledgeArticle KnowledgeArticle_ActivityPointers {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_ActivityPointers")]
        public Contract Contract_ActivityPointers {
            get {
                return GetRelatedEntity<Contract>("Contract_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Contract_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_ActivityPointers")]
        public Invoice Invoice_ActivityPointers {
            get {
                return GetRelatedEntity<Invoice>("Invoice_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("Invoice_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_ActivityPointers")]
        public BookableResourceBookingHeader bookableresourcebookingheader_ActivityPointers {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_ActivityPointers")]
        public BookableResourceBooking bookableresourcebooking_ActivityPointers {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_ActivityPointers", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_ActivityPointers")]
        public Entitlement entitlement_ActivityPointers {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_ActivityPointers", null);
            }
            set {
                SetRelatedEntity("entitlement_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_recurringappointmentmaster")]
        public IEnumerable<RecurringAppointmentMaster> activity_pointer_recurringappointmentmaster {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("activity_pointer_recurringappointmentmaster", null);
            }
            set {
                SetRelatedEntities("activity_pointer_recurringappointmentmaster", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_service_appointment")]
        public IEnumerable<ServiceAppointment> activity_pointer_service_appointment {
            get {
                return GetRelatedEntities<ServiceAppointment>("activity_pointer_service_appointment", null);
            }
            set {
                SetRelatedEntities("activity_pointer_service_appointment", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_socialactivity")]
        public IEnumerable<SocialActivity> activity_pointer_socialactivity {
            get {
                return GetRelatedEntities<SocialActivity>("activity_pointer_socialactivity", null);
            }
            set {
                SetRelatedEntities("activity_pointer_socialactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("ActivityPointer_CampaignActivityItems")]
        public IEnumerable<CampaignActivityItem> ActivityPointer_CampaignActivityItems {
            get {
                return GetRelatedEntities<CampaignActivityItem>("ActivityPointer_CampaignActivityItems", null);
            }
            set {
                SetRelatedEntities("ActivityPointer_CampaignActivityItems", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_campaignactivity")]
        public IEnumerable<CampaignActivity> activity_pointer_campaignactivity {
            get {
                return GetRelatedEntities<CampaignActivity>("activity_pointer_campaignactivity", null);
            }
            set {
                SetRelatedEntities("activity_pointer_campaignactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_opportunity_close")]
        public IEnumerable<OpportunityClose> activity_pointer_opportunity_close {
            get {
                return GetRelatedEntities<OpportunityClose>("activity_pointer_opportunity_close", null);
            }
            set {
                SetRelatedEntities("activity_pointer_opportunity_close", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_task")]
        public IEnumerable<Task> activity_pointer_task {
            get {
                return GetRelatedEntities<Task>("activity_pointer_task", null);
            }
            set {
                SetRelatedEntities("activity_pointer_task", null, value);
            }
        }
        
        [RelationshipSchemaName("ActivityPointer_QueueItem")]
        public IEnumerable<QueueItem> ActivityPointer_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("ActivityPointer_QueueItem", null);
            }
            set {
                SetRelatedEntities("ActivityPointer_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_campaignresponse")]
        public IEnumerable<CampaignResponse> activity_pointer_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("activity_pointer_campaignresponse", null);
            }
            set {
                SetRelatedEntities("activity_pointer_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_campaignresponse")]
        public IEnumerable<CampaignResponse> activity_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("activity_campaignresponse", null);
            }
            set {
                SetRelatedEntities("activity_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("activitypointer_connections2")]
        public IEnumerable<Connection> activitypointer_connections2 {
            get {
                return GetRelatedEntities<Connection>("activitypointer_connections2", null);
            }
            set {
                SetRelatedEntities("activitypointer_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_appointment")]
        public IEnumerable<Appointment> activity_pointer_appointment {
            get {
                return GetRelatedEntities<Appointment>("activity_pointer_appointment", null);
            }
            set {
                SetRelatedEntities("activity_pointer_appointment", null, value);
            }
        }
        
        [RelationshipSchemaName("activitypointer_activity_parties")]
        public IEnumerable<ActivityParty> activitypointer_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("activitypointer_activity_parties", null);
            }
            set {
                SetRelatedEntities("activitypointer_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_email")]
        public IEnumerable<Email> activity_pointer_email {
            get {
                return GetRelatedEntities<Email>("activity_pointer_email", null);
            }
            set {
                SetRelatedEntities("activity_pointer_email", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_phonecall")]
        public IEnumerable<PhoneCall> activity_pointer_phonecall {
            get {
                return GetRelatedEntities<PhoneCall>("activity_pointer_phonecall", null);
            }
            set {
                SetRelatedEntities("activity_pointer_phonecall", null, value);
            }
        }
        
        [RelationshipSchemaName("activitypointer_connections1")]
        public IEnumerable<Connection> activitypointer_connections1 {
            get {
                return GetRelatedEntities<Connection>("activitypointer_connections1", null);
            }
            set {
                SetRelatedEntities("activitypointer_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_letter")]
        public IEnumerable<Letter> activity_pointer_letter {
            get {
                return GetRelatedEntities<Letter>("activity_pointer_letter", null);
            }
            set {
                SetRelatedEntities("activity_pointer_letter", null, value);
            }
        }
        
        [RelationshipSchemaName("activity_pointer_fax")]
        public IEnumerable<Fax> activity_pointer_fax {
            get {
                return GetRelatedEntities<Fax>("activity_pointer_fax", null);
            }
            set {
                SetRelatedEntities("activity_pointer_fax", null, value);
            }
        }
        
        public static ActivityPointer Retrieve(IOrganizationService service, Guid id, params Expression<Func<ActivityPointer,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Commitment representing a time interval with start/end times and duration.</para>
    /// <para>Display Name: Appointment</para>
    /// </summary>
    [EntityLogicalName("appointment")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Appointment : ExtendedEntity<AppointmentState, Appointment_StatusCode> {
        
        public const string EntityLogicalName = "appointment";
        
        public const int EntityTypeCode = 4201;
        
        public Appointment() : 
                base(EntityLogicalName) {
        }
        
        public Appointment(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the appointment.</para>
        /// <para>Display Name: Appointment</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the appointment type, such as sales demo, prospect call, or service call, to tie the appointment to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Microsoft Office Outlook appointment owner that correlates to the PR_OWNER_APPT_ID MAPI property.</para>
        /// <para>Display Name: Outlook Appointment Owner</para>
        /// </summary>
        [AttributeLogicalName("outlookownerapptid")]
        public int? OutlookOwnerApptId {
            get {
                return GetAttributeValue<int?>("outlookownerapptid");
            }
            set {
                SetAttributeValue("outlookownerapptid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only. </para>
        /// <para>Display Name: Modified Fields Mask</para>
        /// </summary>
        [AttributeLogicalName("modifiedfieldsmask")]
        public string ModifiedFieldsMask {
            get {
                return GetAttributeValue<string>("modifiedfieldsmask");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the appointment's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Appointment_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Appointment_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the appointment. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual duration of the appointment.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the appointment.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time for the activity to be completed to provide details about the timing of the appointment.</para>
        /// <para>Display Name: End Time</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for an associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the appointment is an all-day event to make sure that the required resources are scheduled for the full day.</para>
        /// <para>Display Name: All Day Event</para>
        /// </summary>
        [AttributeLogicalName("isalldayevent")]
        public bool? IsAllDayEvent {
            get {
                return GetAttributeValue<bool?>("isalldayevent");
            }
            set {
                SetAttributeValue("isalldayevent", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this appointment. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, user, or other equipment resources that are not needed at the appointment, but can optionally attend.</para>
        /// <para>Display Name: Optional Attendees</para>
        /// </summary>
        [AttributeLogicalName("optionalattendees")]
        public IEnumerable<ActivityParty> OptionalAttendees {
            get {
                return GetEntityCollection<ActivityParty>("optionalattendees");
            }
            set {
                SetEntityCollection("optionalattendees", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, user, or other equipment resources that are required to attend the appointment.</para>
        /// <para>Display Name: Required Attendees</para>
        /// </summary>
        [AttributeLogicalName("requiredattendees")]
        public IEnumerable<ActivityParty> RequiredAttendees {
            get {
                return GetEntityCollection<ActivityParty>("requiredattendees");
            }
            set {
                SetEntityCollection("requiredattendees", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("ismapiprivate")]
        public bool? IsMapiPrivate {
            get {
                return GetAttributeValue<bool?>("ismapiprivate");
            }
            set {
                SetAttributeValue("ismapiprivate", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the appointment in Microsoft Office Outlook. The ID is used to synchronize the appointment between Microsoft Dynamics CRM and the correct Exchange account.</para>
        /// <para>Display Name: Outlook Appointment</para>
        /// </summary>
        [AttributeLogicalName("globalobjectid")]
        public string GlobalObjectId {
            get {
                return GetAttributeValue<string>("globalobjectid");
            }
            set {
                SetAttributeValue("globalobjectid", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the location where the appointment will take place, such as a conference room or customer office.</para>
        /// <para>Display Name: Location</para>
        /// </summary>
        [AttributeLogicalName("location")]
        public string Location {
            get {
                return GetAttributeValue<string>("location");
            }
            set {
                SetAttributeValue("location", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the purpose of the appointment.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the expected duration of the appointment, in minutes.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
            set {
                SetAttributeValue("scheduleddurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the appointment record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the value selected in the Duration field on the appointment at the time that the appointment is closed as completed. The duration is used to report the time spent on the activity.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Version number of the appointment.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the appointment.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the recurring series of an instance.</para>
        /// <para>Display Name: Series Id</para>
        /// </summary>
        [AttributeLogicalName("seriesid")]
        public Guid? SeriesId {
            get {
                return GetAttributeValue<Guid?>("seriesid");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the appointment is open, completed, or canceled. Completed and canceled appointments are read-only and can't be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public AppointmentState? StateCode {
            get {
                return GetOptionSetValue<AppointmentState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the appointment is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the appointment.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the appointment type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the appointment. By default, it displays the date and time when the activity was created, but can be edited to capture the actual duration of the appointment.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected start date and time for the activity to provide details about the timing of the appointment.</para>
        /// <para>Display Name: Start Time</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Appointment_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Appointment_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user who is in charge of coordinating or leading the appointment to make sure the appointment is displayed in the user's My Activities view.</para>
        /// <para>Display Name: Organizer</para>
        /// </summary>
        [AttributeLogicalName("organizer")]
        public IEnumerable<ActivityParty> Organizer {
            get {
                return GetEntityCollection<ActivityParty>("organizer");
            }
            set {
                SetEntityCollection("organizer", value);
            }
        }
        
        /// <summary>
        /// <para>Select the error code to identify issues with the outlook item recipients or attachments, such as blocked attachments.</para>
        /// <para>Display Name: AttachmentErrors</para>
        /// </summary>
        [AttributeLogicalName("attachmenterrors")]
        public Appointment_AttachmentErrors? AttachmentErrors {
            get {
                return GetOptionSetValue<Appointment_AttachmentErrors>("attachmenterrors");
            }
            set {
                SetOptionSetValue("attachmenterrors", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the number of attachments on the appointment.</para>
        /// <para>Display Name: Attachment Count</para>
        /// </summary>
        [AttributeLogicalName("attachmentcount")]
        public int? AttachmentCount {
            get {
                return GetAttributeValue<int?>("attachmentcount");
            }
        }
        
        /// <summary>
        /// <para>The original start date of the appointment.</para>
        /// <para>Display Name: Original Start Date</para>
        /// </summary>
        [AttributeLogicalName("originalstartdate")]
        public DateTime? OriginalStartDate {
            get {
                return GetAttributeValue<DateTime?>("originalstartdate");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the appointment was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring series.</para>
        /// <para>Display Name: Appointment Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public Appointment_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<Appointment_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the appointment was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_Appointments")]
        public msdyn_PostAlbum msdyn_postalbum_Appointments {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_Appointments", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_Appointments")]
        public dg_event dg_event_Appointments {
            get {
                return GetRelatedEntity<dg_event>("dg_event_Appointments", null);
            }
            set {
                SetRelatedEntity("dg_event_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_Appointments")]
        public dg_participant dg_participant_Appointments {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_Appointments", null);
            }
            set {
                SetRelatedEntity("dg_participant_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_Appointments")]
        public Campaign Campaign_Appointments {
            get {
                return GetRelatedEntity<Campaign>("Campaign_Appointments", null);
            }
            set {
                SetRelatedEntity("Campaign_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_appointment")]
        public ActivityPointer activity_pointer_appointment {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_appointment", null);
            }
            set {
                SetRelatedEntity("activity_pointer_appointment", null, value);
            }
        }
        
        [AttributeLogicalName("seriesid")]
        [RelationshipSchemaName("recurringappointmentmaster_appointment")]
        public RecurringAppointmentMaster recurringappointmentmaster_appointment {
            get {
                return GetRelatedEntity<RecurringAppointmentMaster>("recurringappointmentmaster_appointment", null);
            }
            set {
                SetRelatedEntity("recurringappointmentmaster_appointment", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_Appointments")]
        public Lead Lead_Appointments {
            get {
                return GetRelatedEntity<Lead>("Lead_Appointments", null);
            }
            set {
                SetRelatedEntity("Lead_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_appointment")]
        public SystemUser user_appointment {
            get {
                return GetRelatedEntity<SystemUser>("user_appointment", null);
            }
            set {
                SetRelatedEntity("user_appointment", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_appointment")]
        public Team team_appointment {
            get {
                return GetRelatedEntity<Team>("team_appointment", null);
            }
            set {
                SetRelatedEntity("team_appointment", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Appointments")]
        public Incident Incident_Appointments {
            get {
                return GetRelatedEntity<Incident>("Incident_Appointments", null);
            }
            set {
                SetRelatedEntity("Incident_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_appointment")]
        public SLA manualsla_appointment {
            get {
                return GetRelatedEntity<SLA>("manualsla_appointment", null);
            }
            set {
                SetRelatedEntity("manualsla_appointment", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_Appointments")]
        public SalesOrder SalesOrder_Appointments {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_Appointments", null);
            }
            set {
                SetRelatedEntity("SalesOrder_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Appointments")]
        public Account Account_Appointments {
            get {
                return GetRelatedEntity<Account>("Account_Appointments", null);
            }
            set {
                SetRelatedEntity("Account_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_Appointments")]
        public Opportunity Opportunity_Appointments {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_Appointments", null);
            }
            set {
                SetRelatedEntity("Opportunity_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_Appointments")]
        public KnowledgeArticle KnowledgeArticle_Appointments {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_Appointments", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_Appointments")]
        public Contract Contract_Appointments {
            get {
                return GetRelatedEntity<Contract>("Contract_Appointments", null);
            }
            set {
                SetRelatedEntity("Contract_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_Appointments")]
        public CampaignActivity CampaignActivity_Appointments {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_Appointments", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_Appointments")]
        public Invoice Invoice_Appointments {
            get {
                return GetRelatedEntity<Invoice>("Invoice_Appointments", null);
            }
            set {
                SetRelatedEntity("Invoice_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_appointment_createdonbehalfby")]
        public SystemUser lk_appointment_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appointment_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_appointment_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Appointments")]
        public Contact Contact_Appointments {
            get {
                return GetRelatedEntity<Contact>("Contact_Appointments", null);
            }
            set {
                SetRelatedEntity("Contact_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_appointment")]
        public SLA sla_appointment {
            get {
                return GetRelatedEntity<SLA>("sla_appointment", null);
            }
            set {
                SetRelatedEntity("sla_appointment", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_appointment_createdby")]
        public SystemUser lk_appointment_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appointment_createdby", null);
            }
            set {
                SetRelatedEntity("lk_appointment_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_appointment_modifiedonbehalfby")]
        public SystemUser lk_appointment_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appointment_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_appointment_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Appointment")]
        public TransactionCurrency TransactionCurrency_Appointment {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Appointment", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Appointment", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_appointment_modifiedby")]
        public SystemUser lk_appointment_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_appointment_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_appointment_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_Appointments")]
        public Quote Quote_Appointments {
            get {
                return GetRelatedEntity<Quote>("Quote_Appointments", null);
            }
            set {
                SetRelatedEntity("Quote_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_appointment_activities")]
        public BusinessUnit business_unit_appointment_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_appointment_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_appointment_activities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_Appointments")]
        public BookableResourceBookingHeader bookableresourcebookingheader_Appointments {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_Appointments", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_Appointments")]
        public BookableResourceBooking bookableresourcebooking_Appointments {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_Appointments", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_Appointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_Appointments")]
        public Entitlement entitlement_Appointments {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_Appointments", null);
            }
            set {
                SetRelatedEntity("entitlement_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Appointment_QueueItem")]
        public IEnumerable<QueueItem> Appointment_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Appointment_QueueItem", null);
            }
            set {
                SetRelatedEntities("Appointment_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("appointment_campaignresponse")]
        public IEnumerable<CampaignResponse> appointment_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("appointment_campaignresponse", null);
            }
            set {
                SetRelatedEntities("appointment_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("Appointment_SyncErrors")]
        public IEnumerable<SyncError> Appointment_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Appointment_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Appointment_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("appointment_connections2")]
        public IEnumerable<Connection> appointment_connections2 {
            get {
                return GetRelatedEntities<Connection>("appointment_connections2", null);
            }
            set {
                SetRelatedEntities("appointment_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("appointment_activity_parties")]
        public IEnumerable<ActivityParty> appointment_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("appointment_activity_parties", null);
            }
            set {
                SetRelatedEntities("appointment_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("appointment_connections1")]
        public IEnumerable<Connection> appointment_connections1 {
            get {
                return GetRelatedEntities<Connection>("appointment_connections1", null);
            }
            set {
                SetRelatedEntities("appointment_connections1", null, value);
            }
        }
        
        public static Appointment Retrieve(IOrganizationService service, Guid id, params Expression<Func<Appointment,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Resource that has capacity which can be allocated to work.</para>
    /// <para>Display Name: Bookable Resource</para>
    /// </summary>
    [EntityLogicalName("bookableresource")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BookableResource : ExtendedEntity<BookableResourceState, BookableResource_StatusCode> {
        
        public const string EntityLogicalName = "bookableresource";
        
        public const int EntityTypeCode = 1150;
        
        public BookableResource() : 
                base(EntityLogicalName) {
        }
        
        public BookableResource(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("bookableresourceid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("bookableresourceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource.</para>
        /// <para>Display Name: Bookable Resource</para>
        /// </summary>
        [AttributeLogicalName("bookableresourceid")]
        public Guid? BookableResourceId {
            get {
                return GetAttributeValue<Guid?>("bookableresourceid");
            }
            set {
                SetId("bookableresourceid", value);
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Specifies the timezone for the resource's working hours.</para>
        /// <para>Display Name: Time Zone</para>
        /// </summary>
        [AttributeLogicalName("timezone")]
        public int? TimeZone {
            get {
                return GetAttributeValue<int?>("timezone");
            }
            set {
                SetAttributeValue("timezone", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the resource is a user, equipment, contact, account, generic resource or a group of resources.</para>
        /// <para>Display Name: Resource Type</para>
        /// </summary>
        [AttributeLogicalName("resourcetype")]
        public BookableResource_ResourceType? ResourceType {
            get {
                return GetOptionSetValue<BookableResource_ResourceType>("resourcetype");
            }
            set {
                SetOptionSetValue("resourcetype", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Specifies the working days and hours of the resource.</para>
        /// <para>Display Name: Calendar</para>
        /// </summary>
        [AttributeLogicalName("calendarid")]
        public EntityReference CalendarId {
            get {
                return GetAttributeValue<EntityReference>("calendarid");
            }
            set {
                SetAttributeValue("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the account that represents this resource.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
            set {
                SetAttributeValue("accountid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the bookableresource with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Type the name of the resource.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("useridname")]
        public string UserIdName {
            get {
                return GetAttributeValue<string>("useridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Bookable Resource</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public BookableResourceState? StateCode {
            get {
                return GetOptionSetValue<BookableResourceState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        /// <summary>
        /// <para>Select the contact that represents this resource.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
            set {
                SetAttributeValue("contactid", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the user who represents this resource.</para>
        /// <para>Display Name: User</para>
        /// </summary>
        [AttributeLogicalName("userid")]
        public EntityReference UserId {
            get {
                return GetAttributeValue<EntityReference>("userid");
            }
            set {
                SetAttributeValue("userid", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the BookableResource with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Bookable Resource</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public BookableResource_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<BookableResource_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        [AttributeLogicalName("calendaridname")]
        public string CalendarIdName {
            get {
                return GetAttributeValue<string>("calendaridname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_bookableresource")]
        public TransactionCurrency TransactionCurrency_bookableresource {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_bookableresource", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_bookableresource", null, value);
            }
        }
        
        [AttributeLogicalName("calendarid")]
        [RelationshipSchemaName("calendar_bookableresources")]
        public Calendar calendar_bookableresources {
            get {
                return GetRelatedEntity<Calendar>("calendar_bookableresources", null);
            }
            set {
                SetRelatedEntity("calendar_bookableresources", null, value);
            }
        }
        
        [AttributeLogicalName("userid")]
        [RelationshipSchemaName("systemuser_bookableresource_UserId")]
        public SystemUser systemuser_bookableresource_UserId {
            get {
                return GetRelatedEntity<SystemUser>("systemuser_bookableresource_UserId", null);
            }
            set {
                SetRelatedEntity("systemuser_bookableresource_UserId", null, value);
            }
        }
        
        [AttributeLogicalName("contactid")]
        [RelationshipSchemaName("contact_bookableresource_ContactId")]
        public Contact contact_bookableresource_ContactId {
            get {
                return GetRelatedEntity<Contact>("contact_bookableresource_ContactId", null);
            }
            set {
                SetRelatedEntity("contact_bookableresource_ContactId", null, value);
            }
        }
        
        [AttributeLogicalName("accountid")]
        [RelationshipSchemaName("account_bookableresource_AccountId")]
        public Account account_bookableresource_AccountId {
            get {
                return GetRelatedEntity<Account>("account_bookableresource_AccountId", null);
            }
            set {
                SetRelatedEntity("account_bookableresource_AccountId", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_bookableresource")]
        public BusinessUnit business_unit_bookableresource {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_bookableresource", null);
            }
            set {
                SetRelatedEntity("business_unit_bookableresource", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_bookableresource")]
        public Team team_bookableresource {
            get {
                return GetRelatedEntity<Team>("team_bookableresource", null);
            }
            set {
                SetRelatedEntity("team_bookableresource", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_bookableresource")]
        public SystemUser user_bookableresource {
            get {
                return GetRelatedEntity<SystemUser>("user_bookableresource", null);
            }
            set {
                SetRelatedEntity("user_bookableresource", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_bookableresource_modifiedonbehalfby")]
        public SystemUser lk_bookableresource_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresource_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresource_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_bookableresource_modifiedby")]
        public SystemUser lk_bookableresource_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresource_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresource_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_bookableresource_createdonbehalfby")]
        public SystemUser lk_bookableresource_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresource_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresource_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_bookableresource_createdby")]
        public SystemUser lk_bookableresource_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresource_createdby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresource_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("BookableResource_SyncErrors")]
        public IEnumerable<SyncError> BookableResource_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BookableResource_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BookableResource_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresource_bookableresourcegroup_ParentResource")]
        public IEnumerable<BookableResourceGroup> bookableresource_bookableresourcegroup_ParentResource {
            get {
                return GetRelatedEntities<BookableResourceGroup>("bookableresource_bookableresourcegroup_ParentResource", null);
            }
            set {
                SetRelatedEntities("bookableresource_bookableresourcegroup_ParentResource", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresource_bookableresourcegroup_ChildResource")]
        public IEnumerable<BookableResourceGroup> bookableresource_bookableresourcegroup_ChildResource {
            get {
                return GetRelatedEntities<BookableResourceGroup>("bookableresource_bookableresourcegroup_ChildResource", null);
            }
            set {
                SetRelatedEntities("bookableresource_bookableresourcegroup_ChildResource", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresource_bookableresourcecharacteristic_Resource")]
        public IEnumerable<BookableResourceCharacteristic> bookableresource_bookableresourcecharacteristic_Resource {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("bookableresource_bookableresourcecharacteristic_Resource", null);
            }
            set {
                SetRelatedEntities("bookableresource_bookableresourcecharacteristic_Resource", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresource_bookableresourcecategoryassn_Resource")]
        public IEnumerable<BookableResourceCategoryAssn> bookableresource_bookableresourcecategoryassn_Resource {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("bookableresource_bookableresourcecategoryassn_Resource", null);
            }
            set {
                SetRelatedEntities("bookableresource_bookableresourcecategoryassn_Resource", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresource_bookableresourcebooking_Resource")]
        public IEnumerable<BookableResourceBooking> bookableresource_bookableresourcebooking_Resource {
            get {
                return GetRelatedEntities<BookableResourceBooking>("bookableresource_bookableresourcebooking_Resource", null);
            }
            set {
                SetRelatedEntities("bookableresource_bookableresourcebooking_Resource", null, value);
            }
        }
        
        public static BookableResource Retrieve(IOrganizationService service, Guid id, params Expression<Func<BookableResource,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Represents the line details of a resource booking.</para>
    /// <para>Display Name: Bookable Resource Booking</para>
    /// </summary>
    [EntityLogicalName("bookableresourcebooking")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BookableResourceBooking : ExtendedEntity<BookableResourceBookingState, BookableResourceBooking_StatusCode> {
        
        public const string EntityLogicalName = "bookableresourcebooking";
        
        public const int EntityTypeCode = 1145;
        
        public BookableResourceBooking() : 
                base(EntityLogicalName) {
        }
        
        public BookableResourceBooking(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("bookableresourcebookingid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("bookableresourcebookingid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource booking.</para>
        /// <para>Display Name: Bookable Resource Booking</para>
        /// </summary>
        [AttributeLogicalName("bookableresourcebookingid")]
        public Guid? BookableResourceBookingId {
            get {
                return GetAttributeValue<Guid?>("bookableresourcebookingid");
            }
            set {
                SetId("bookableresourcebookingid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the start date and time of the booking.</para>
        /// <para>Display Name: Start Time</para>
        /// </summary>
        [AttributeLogicalName("starttime")]
        public DateTime? StartTime {
            get {
                return GetAttributeValue<DateTime?>("starttime");
            }
            set {
                SetAttributeValue("starttime", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the status of the booking.</para>
        /// <para>Display Name: Booking Status</para>
        /// </summary>
        [AttributeLogicalName("bookingstatus")]
        public EntityReference BookingStatus {
            get {
                return GetAttributeValue<EntityReference>("bookingstatus");
            }
            set {
                SetAttributeValue("bookingstatus", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("bookingstatusname")]
        public string BookingStatusName {
            get {
                return GetAttributeValue<string>("bookingstatusname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Bookable Resource Booking</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public BookableResourceBooking_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<BookableResourceBooking_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the BookableResourceBooking with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the reference to the booking header record that represents the summary of bookings.</para>
        /// <para>Display Name: Header</para>
        /// </summary>
        [AttributeLogicalName("header")]
        public EntityReference Header {
            get {
                return GetAttributeValue<EntityReference>("header");
            }
            set {
                SetAttributeValue("header", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the bookableresourcebooking with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the end date and time of the booking.</para>
        /// <para>Display Name: End Time</para>
        /// </summary>
        [AttributeLogicalName("endtime")]
        public DateTime? EndTime {
            get {
                return GetAttributeValue<DateTime?>("endtime");
            }
            set {
                SetAttributeValue("endtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("resourcename")]
        public string ResourceName {
            get {
                return GetAttributeValue<string>("resourcename");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the duration of the booking.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("duration")]
        public int? Duration {
            get {
                return GetAttributeValue<int?>("duration");
            }
            set {
                SetAttributeValue("duration", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Bookable Resource Booking</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public BookableResourceBookingState? StateCode {
            get {
                return GetOptionSetValue<BookableResourceBookingState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the booking is solid or liquid. Solid bookings are firm and cannot be changed whereas liquid bookings can be changed.</para>
        /// <para>Display Name: Booking Type</para>
        /// </summary>
        [AttributeLogicalName("bookingtype")]
        public BookableResourceBooking_BookingType? BookingType {
            get {
                return GetOptionSetValue<BookableResourceBooking_BookingType>("bookingtype");
            }
            set {
                SetOptionSetValue("bookingtype", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the resource that is booked.</para>
        /// <para>Display Name: Resource</para>
        /// </summary>
        [AttributeLogicalName("resource")]
        public EntityReference Resource {
            get {
                return GetAttributeValue<EntityReference>("resource");
            }
            set {
                SetAttributeValue("resource", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the booking.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        [AttributeLogicalName("headername")]
        public string HeaderName {
            get {
                return GetAttributeValue<string>("headername");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_bookableresourcebooking")]
        public TransactionCurrency TransactionCurrency_bookableresourcebooking {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_bookableresourcebooking", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_bookableresourcebooking", null, value);
            }
        }
        
        [AttributeLogicalName("bookingstatus")]
        [RelationshipSchemaName("bookingstatus_bookableresourcebooking_BookingStatus")]
        public BookingStatus bookingstatus_bookableresourcebooking_BookingStatus {
            get {
                return GetRelatedEntity<BookingStatus>("bookingstatus_bookableresourcebooking_BookingStatus", null);
            }
            set {
                SetRelatedEntity("bookingstatus_bookableresourcebooking_BookingStatus", null, value);
            }
        }
        
        [AttributeLogicalName("header")]
        [RelationshipSchemaName("bookableresourcebookingheader_bookableresourcebooking_Header")]
        public BookableResourceBookingHeader bookableresourcebookingheader_bookableresourcebooking_Header {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_bookableresourcebooking_Header", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_bookableresourcebooking_Header", null, value);
            }
        }
        
        [AttributeLogicalName("resource")]
        [RelationshipSchemaName("bookableresource_bookableresourcebooking_Resource")]
        public BookableResource bookableresource_bookableresourcebooking_Resource {
            get {
                return GetRelatedEntity<BookableResource>("bookableresource_bookableresourcebooking_Resource", null);
            }
            set {
                SetRelatedEntity("bookableresource_bookableresourcebooking_Resource", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_bookableresourcebooking")]
        public BusinessUnit business_unit_bookableresourcebooking {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_bookableresourcebooking", null);
            }
            set {
                SetRelatedEntity("business_unit_bookableresourcebooking", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_bookableresourcebooking")]
        public Team team_bookableresourcebooking {
            get {
                return GetRelatedEntity<Team>("team_bookableresourcebooking", null);
            }
            set {
                SetRelatedEntity("team_bookableresourcebooking", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_bookableresourcebooking")]
        public SystemUser user_bookableresourcebooking {
            get {
                return GetRelatedEntity<SystemUser>("user_bookableresourcebooking", null);
            }
            set {
                SetRelatedEntity("user_bookableresourcebooking", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcebooking_modifiedonbehalfby")]
        public SystemUser lk_bookableresourcebooking_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcebooking_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcebooking_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_bookableresourcebooking_modifiedby")]
        public SystemUser lk_bookableresourcebooking_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcebooking_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcebooking_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcebooking_createdonbehalfby")]
        public SystemUser lk_bookableresourcebooking_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcebooking_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcebooking_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_bookableresourcebooking_createdby")]
        public SystemUser lk_bookableresourcebooking_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcebooking_createdby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcebooking_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("BookableResourceBooking_SyncErrors")]
        public IEnumerable<SyncError> BookableResourceBooking_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BookableResourceBooking_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BookableResourceBooking_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_SocialActivities")]
        public IEnumerable<SocialActivity> bookableresourcebooking_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("bookableresourcebooking_SocialActivities", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> bookableresourcebooking_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("bookableresourcebooking_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_Tasks")]
        public IEnumerable<Task> bookableresourcebooking_Tasks {
            get {
                return GetRelatedEntities<Task>("bookableresourcebooking_Tasks", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> bookableresourcebooking_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("bookableresourcebooking_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_PhoneCalls")]
        public IEnumerable<PhoneCall> bookableresourcebooking_PhoneCalls {
            get {
                return GetRelatedEntities<PhoneCall>("bookableresourcebooking_PhoneCalls", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_PhoneCalls", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_Letters")]
        public IEnumerable<Letter> bookableresourcebooking_Letters {
            get {
                return GetRelatedEntities<Letter>("bookableresourcebooking_Letters", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_Faxes")]
        public IEnumerable<Fax> bookableresourcebooking_Faxes {
            get {
                return GetRelatedEntities<Fax>("bookableresourcebooking_Faxes", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_Emails")]
        public IEnumerable<Email> bookableresourcebooking_Emails {
            get {
                return GetRelatedEntities<Email>("bookableresourcebooking_Emails", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_Appointments")]
        public IEnumerable<Appointment> bookableresourcebooking_Appointments {
            get {
                return GetRelatedEntities<Appointment>("bookableresourcebooking_Appointments", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebooking_ActivityPointers")]
        public IEnumerable<ActivityPointer> bookableresourcebooking_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("bookableresourcebooking_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("bookableresourcebooking_ActivityPointers", null, value);
            }
        }
        
        public static BookableResourceBooking Retrieve(IOrganizationService service, Guid id, params Expression<Func<BookableResourceBooking,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Reservation entity representing the summary of the associated resource bookings.</para>
    /// <para>Display Name: Bookable Resource Booking Header</para>
    /// </summary>
    [EntityLogicalName("bookableresourcebookingheader")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BookableResourceBookingHeader : ExtendedEntity<BookableResourceBookingHeaderState, BookableResourceBookingHeader_StatusCode> {
        
        public const string EntityLogicalName = "bookableresourcebookingheader";
        
        public const int EntityTypeCode = 1146;
        
        public BookableResourceBookingHeader() : 
                base(EntityLogicalName) {
        }
        
        public BookableResourceBookingHeader(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("bookableresourcebookingheaderid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("bookableresourcebookingheaderid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource booking header.</para>
        /// <para>Display Name: Bookable Resource Booking Header</para>
        /// </summary>
        [AttributeLogicalName("bookableresourcebookingheaderid")]
        public Guid? BookableResourceBookingHeaderId {
            get {
                return GetAttributeValue<Guid?>("bookableresourcebookingheaderid");
            }
            set {
                SetId("bookableresourcebookingheaderid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Bookable Resource Booking Header</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public BookableResourceBookingHeader_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<BookableResourceBookingHeader_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the bookableresourcebookingheader with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the start date and time of the booking summary.</para>
        /// <para>Display Name: Start Time</para>
        /// </summary>
        [AttributeLogicalName("starttime")]
        public DateTime? StartTime {
            get {
                return GetAttributeValue<DateTime?>("starttime");
            }
            set {
                SetAttributeValue("starttime", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Shows the end date and time of the booking summary.</para>
        /// <para>Display Name: End Time</para>
        /// </summary>
        [AttributeLogicalName("endtime")]
        public DateTime? EndTime {
            get {
                return GetAttributeValue<DateTime?>("endtime");
            }
            set {
                SetAttributeValue("endtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the aggregate duration of the linked bookings.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("duration")]
        public int? Duration {
            get {
                return GetAttributeValue<int?>("duration");
            }
            set {
                SetAttributeValue("duration", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the booking summary.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the BookableResourceBookingHeader with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Bookable Resource Booking Header</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public BookableResourceBookingHeaderState? StateCode {
            get {
                return GetOptionSetValue<BookableResourceBookingHeaderState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_bookableresourcebookingheader")]
        public TransactionCurrency TransactionCurrency_bookableresourcebookingheader {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_bookableresourcebookingheader", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_bookableresourcebookingheader", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_bookableresourcebookingheader")]
        public BusinessUnit business_unit_bookableresourcebookingheader {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_bookableresourcebookingheader", null);
            }
            set {
                SetRelatedEntity("business_unit_bookableresourcebookingheader", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_bookableresourcebookingheader")]
        public Team team_bookableresourcebookingheader {
            get {
                return GetRelatedEntity<Team>("team_bookableresourcebookingheader", null);
            }
            set {
                SetRelatedEntity("team_bookableresourcebookingheader", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_bookableresourcebookingheader")]
        public SystemUser user_bookableresourcebookingheader {
            get {
                return GetRelatedEntity<SystemUser>("user_bookableresourcebookingheader", null);
            }
            set {
                SetRelatedEntity("user_bookableresourcebookingheader", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcebookingheader_modifiedonbehalfby")]
        public SystemUser lk_bookableresourcebookingheader_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcebookingheader_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcebookingheader_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_bookableresourcebookingheader_modifiedby")]
        public SystemUser lk_bookableresourcebookingheader_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcebookingheader_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcebookingheader_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcebookingheader_createdonbehalfby")]
        public SystemUser lk_bookableresourcebookingheader_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcebookingheader_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcebookingheader_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_bookableresourcebookingheader_createdby")]
        public SystemUser lk_bookableresourcebookingheader_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcebookingheader_createdby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcebookingheader_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("BookableResourceBookingHeader_SyncErrors")]
        public IEnumerable<SyncError> BookableResourceBookingHeader_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BookableResourceBookingHeader_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BookableResourceBookingHeader_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_bookableresourcebooking_Header")]
        public IEnumerable<BookableResourceBooking> bookableresourcebookingheader_bookableresourcebooking_Header {
            get {
                return GetRelatedEntities<BookableResourceBooking>("bookableresourcebookingheader_bookableresourcebooking_Header", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_bookableresourcebooking_Header", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_SocialActivities")]
        public IEnumerable<SocialActivity> bookableresourcebookingheader_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("bookableresourcebookingheader_SocialActivities", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> bookableresourcebookingheader_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("bookableresourcebookingheader_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_Tasks")]
        public IEnumerable<Task> bookableresourcebookingheader_Tasks {
            get {
                return GetRelatedEntities<Task>("bookableresourcebookingheader_Tasks", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> bookableresourcebookingheader_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("bookableresourcebookingheader_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_PhoneCalls")]
        public IEnumerable<PhoneCall> bookableresourcebookingheader_PhoneCalls {
            get {
                return GetRelatedEntities<PhoneCall>("bookableresourcebookingheader_PhoneCalls", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_PhoneCalls", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_Letters")]
        public IEnumerable<Letter> bookableresourcebookingheader_Letters {
            get {
                return GetRelatedEntities<Letter>("bookableresourcebookingheader_Letters", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_Faxes")]
        public IEnumerable<Fax> bookableresourcebookingheader_Faxes {
            get {
                return GetRelatedEntities<Fax>("bookableresourcebookingheader_Faxes", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_Emails")]
        public IEnumerable<Email> bookableresourcebookingheader_Emails {
            get {
                return GetRelatedEntities<Email>("bookableresourcebookingheader_Emails", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_Appointments")]
        public IEnumerable<Appointment> bookableresourcebookingheader_Appointments {
            get {
                return GetRelatedEntities<Appointment>("bookableresourcebookingheader_Appointments", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcebookingheader_ActivityPointers")]
        public IEnumerable<ActivityPointer> bookableresourcebookingheader_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("bookableresourcebookingheader_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("bookableresourcebookingheader_ActivityPointers", null, value);
            }
        }
        
        public static BookableResourceBookingHeader Retrieve(IOrganizationService service, Guid id, params Expression<Func<BookableResourceBookingHeader,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Categorize resources that have capacity into categories such as roles.</para>
    /// <para>Display Name: Bookable Resource Category</para>
    /// </summary>
    [EntityLogicalName("bookableresourcecategory")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BookableResourceCategory : ExtendedEntity<BookableResourceCategoryState, BookableResourceCategory_StatusCode> {
        
        public const string EntityLogicalName = "bookableresourcecategory";
        
        public const int EntityTypeCode = 1147;
        
        public BookableResourceCategory() : 
                base(EntityLogicalName) {
        }
        
        public BookableResourceCategory(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("bookableresourcecategoryid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("bookableresourcecategoryid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource category.</para>
        /// <para>Display Name: Resource Category</para>
        /// </summary>
        [AttributeLogicalName("bookableresourcecategoryid")]
        public Guid? BookableResourceCategoryId {
            get {
                return GetAttributeValue<Guid?>("bookableresourcecategoryid");
            }
            set {
                SetId("bookableresourcecategoryid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Resource Category</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public BookableResourceCategory_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<BookableResourceCategory_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the bookableresourcecategory with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Resource Category</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public BookableResourceCategoryState? StateCode {
            get {
                return GetOptionSetValue<BookableResourceCategoryState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the resource category.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the BookableResourceCategory with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type a detailed description of what the categorization is about.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_bookableresourcecategory")]
        public TransactionCurrency TransactionCurrency_bookableresourcecategory {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_bookableresourcecategory", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_bookableresourcecategory", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_bookableresourcecategory")]
        public BusinessUnit business_unit_bookableresourcecategory {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_bookableresourcecategory", null);
            }
            set {
                SetRelatedEntity("business_unit_bookableresourcecategory", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_bookableresourcecategory")]
        public Team team_bookableresourcecategory {
            get {
                return GetRelatedEntity<Team>("team_bookableresourcecategory", null);
            }
            set {
                SetRelatedEntity("team_bookableresourcecategory", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_bookableresourcecategory")]
        public SystemUser user_bookableresourcecategory {
            get {
                return GetRelatedEntity<SystemUser>("user_bookableresourcecategory", null);
            }
            set {
                SetRelatedEntity("user_bookableresourcecategory", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcecategory_modifiedonbehalfby")]
        public SystemUser lk_bookableresourcecategory_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecategory_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecategory_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_bookableresourcecategory_modifiedby")]
        public SystemUser lk_bookableresourcecategory_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecategory_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecategory_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcecategory_createdonbehalfby")]
        public SystemUser lk_bookableresourcecategory_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecategory_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecategory_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_bookableresourcecategory_createdby")]
        public SystemUser lk_bookableresourcecategory_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecategory_createdby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecategory_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("BookableResourceCategory_SyncErrors")]
        public IEnumerable<SyncError> BookableResourceCategory_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BookableResourceCategory_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BookableResourceCategory_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("bookableresourcecategory_bookableresourcecategoryassn_ResourceCategory")]
        public IEnumerable<BookableResourceCategoryAssn> bookableresourcecategory_bookableresourcecategoryassn_ResourceCategory {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("bookableresourcecategory_bookableresourcecategoryassn_ResourceCategory", null);
            }
            set {
                SetRelatedEntities("bookableresourcecategory_bookableresourcecategoryassn_ResourceCategory", null, value);
            }
        }
        
        public static BookableResourceCategory Retrieve(IOrganizationService service, Guid id, params Expression<Func<BookableResourceCategory,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Association entity to model the categorization of resources.</para>
    /// <para>Display Name: Bookable Resource Category Assn</para>
    /// </summary>
    [EntityLogicalName("bookableresourcecategoryassn")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BookableResourceCategoryAssn : ExtendedEntity<BookableResourceCategoryAssnState, BookableResourceCategoryAssn_StatusCode> {
        
        public const string EntityLogicalName = "bookableresourcecategoryassn";
        
        public const int EntityTypeCode = 1149;
        
        public BookableResourceCategoryAssn() : 
                base(EntityLogicalName) {
        }
        
        public BookableResourceCategoryAssn(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("bookableresourcecategoryassnid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("bookableresourcecategoryassnid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource and category association.</para>
        /// <para>Display Name: Resource Category Assn</para>
        /// </summary>
        [AttributeLogicalName("bookableresourcecategoryassnid")]
        public Guid? BookableResourceCategoryAssnId {
            get {
                return GetAttributeValue<Guid?>("bookableresourcecategoryassnid");
            }
            set {
                SetId("bookableresourcecategoryassnid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Choose a category to associate with the resource.</para>
        /// <para>Display Name: Resource Category</para>
        /// </summary>
        [AttributeLogicalName("resourcecategory")]
        public EntityReference ResourceCategory {
            get {
                return GetAttributeValue<EntityReference>("resourcecategory");
            }
            set {
                SetAttributeValue("resourcecategory", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Resource Category Assn</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public BookableResourceCategoryAssn_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<BookableResourceCategoryAssn_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the bookableresourcecategoryassn with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("resourcename")]
        public string ResourceName {
            get {
                return GetAttributeValue<string>("resourcename");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows the resource associated with the category.</para>
        /// <para>Display Name: Resource</para>
        /// </summary>
        [AttributeLogicalName("resource")]
        public EntityReference Resource {
            get {
                return GetAttributeValue<EntityReference>("resource");
            }
            set {
                SetAttributeValue("resource", value);
            }
        }
        
        [AttributeLogicalName("resourcecategoryname")]
        public string ResourceCategoryName {
            get {
                return GetAttributeValue<string>("resourcecategoryname");
            }
        }
        
        /// <summary>
        /// <para>The name of the association beween a resource and a category.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the BookableResourceCategoryAssn with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Resource Category Assn</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public BookableResourceCategoryAssnState? StateCode {
            get {
                return GetOptionSetValue<BookableResourceCategoryAssnState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_bookableresourcecategoryassn")]
        public TransactionCurrency TransactionCurrency_bookableresourcecategoryassn {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_bookableresourcecategoryassn", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_bookableresourcecategoryassn", null, value);
            }
        }
        
        [AttributeLogicalName("resourcecategory")]
        [RelationshipSchemaName("bookableresourcecategory_bookableresourcecategoryassn_ResourceCategory")]
        public BookableResourceCategory bookableresourcecategory_bookableresourcecategoryassn_ResourceCategory {
            get {
                return GetRelatedEntity<BookableResourceCategory>("bookableresourcecategory_bookableresourcecategoryassn_ResourceCategory", null);
            }
            set {
                SetRelatedEntity("bookableresourcecategory_bookableresourcecategoryassn_ResourceCategory", null, value);
            }
        }
        
        [AttributeLogicalName("resource")]
        [RelationshipSchemaName("bookableresource_bookableresourcecategoryassn_Resource")]
        public BookableResource bookableresource_bookableresourcecategoryassn_Resource {
            get {
                return GetRelatedEntity<BookableResource>("bookableresource_bookableresourcecategoryassn_Resource", null);
            }
            set {
                SetRelatedEntity("bookableresource_bookableresourcecategoryassn_Resource", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_bookableresourcecategoryassn")]
        public BusinessUnit business_unit_bookableresourcecategoryassn {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_bookableresourcecategoryassn", null);
            }
            set {
                SetRelatedEntity("business_unit_bookableresourcecategoryassn", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_bookableresourcecategoryassn")]
        public Team team_bookableresourcecategoryassn {
            get {
                return GetRelatedEntity<Team>("team_bookableresourcecategoryassn", null);
            }
            set {
                SetRelatedEntity("team_bookableresourcecategoryassn", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_bookableresourcecategoryassn")]
        public SystemUser user_bookableresourcecategoryassn {
            get {
                return GetRelatedEntity<SystemUser>("user_bookableresourcecategoryassn", null);
            }
            set {
                SetRelatedEntity("user_bookableresourcecategoryassn", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcecategoryassn_modifiedonbehalfby")]
        public SystemUser lk_bookableresourcecategoryassn_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecategoryassn_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecategoryassn_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_bookableresourcecategoryassn_modifiedby")]
        public SystemUser lk_bookableresourcecategoryassn_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecategoryassn_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecategoryassn_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcecategoryassn_createdonbehalfby")]
        public SystemUser lk_bookableresourcecategoryassn_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecategoryassn_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecategoryassn_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_bookableresourcecategoryassn_createdby")]
        public SystemUser lk_bookableresourcecategoryassn_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecategoryassn_createdby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecategoryassn_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("BookableResourceCategoryAssn_SyncErrors")]
        public IEnumerable<SyncError> BookableResourceCategoryAssn_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BookableResourceCategoryAssn_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BookableResourceCategoryAssn_SyncErrors", null, value);
            }
        }
        
        public static BookableResourceCategoryAssn Retrieve(IOrganizationService service, Guid id, params Expression<Func<BookableResourceCategoryAssn,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Associates resources with their characteristics and specifies the proficiency level of a resource for that characteristic.</para>
    /// <para>Display Name: Bookable Resource Characteristic</para>
    /// </summary>
    [EntityLogicalName("bookableresourcecharacteristic")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BookableResourceCharacteristic : ExtendedEntity<BookableResourceCharacteristicState, BookableResourceCharacteristic_StatusCode> {
        
        public const string EntityLogicalName = "bookableresourcecharacteristic";
        
        public const int EntityTypeCode = 1148;
        
        public BookableResourceCharacteristic() : 
                base(EntityLogicalName) {
        }
        
        public BookableResourceCharacteristic(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("bookableresourcecharacteristicid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("bookableresourcecharacteristicid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource characteristic.</para>
        /// <para>Display Name: Bookable Resource Characteristic</para>
        /// </summary>
        [AttributeLogicalName("bookableresourcecharacteristicid")]
        public Guid? BookableResourceCharacteristicId {
            get {
                return GetAttributeValue<Guid?>("bookableresourcecharacteristicid");
            }
            set {
                SetId("bookableresourcecharacteristicid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        [AttributeLogicalName("characteristicname")]
        public string CharacteristicName {
            get {
                return GetAttributeValue<string>("characteristicname");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the bookableresourcecharacteristic with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        [AttributeLogicalName("ratingvaluename")]
        public string RatingValueName {
            get {
                return GetAttributeValue<string>("ratingvaluename");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("resourcename")]
        public string ResourceName {
            get {
                return GetAttributeValue<string>("resourcename");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Select a rating value that represents the evaluation of a characteristic for a particular resource.</para>
        /// <para>Display Name: Rating Value</para>
        /// </summary>
        [AttributeLogicalName("ratingvalue")]
        public EntityReference RatingValue {
            get {
                return GetAttributeValue<EntityReference>("ratingvalue");
            }
            set {
                SetAttributeValue("ratingvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Bookable Resource Characteristic</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public BookableResourceCharacteristicState? StateCode {
            get {
                return GetOptionSetValue<BookableResourceCharacteristicState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the characteristic to associate with the resource.</para>
        /// <para>Display Name: Characteristic</para>
        /// </summary>
        [AttributeLogicalName("characteristic")]
        public EntityReference Characteristic {
            get {
                return GetAttributeValue<EntityReference>("characteristic");
            }
            set {
                SetAttributeValue("characteristic", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the resource associated with the characteristic.</para>
        /// <para>Display Name: Resource</para>
        /// </summary>
        [AttributeLogicalName("resource")]
        public EntityReference Resource {
            get {
                return GetAttributeValue<EntityReference>("resource");
            }
            set {
                SetAttributeValue("resource", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the association between the resource and characteristic.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the BookableResourceCharacteristic with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Bookable Resource Characteristic</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public BookableResourceCharacteristic_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<BookableResourceCharacteristic_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_bookableresourcecharacteristic")]
        public TransactionCurrency TransactionCurrency_bookableresourcecharacteristic {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_bookableresourcecharacteristic", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_bookableresourcecharacteristic", null, value);
            }
        }
        
        [AttributeLogicalName("ratingvalue")]
        [RelationshipSchemaName("ratingvalue_bookableresourcecharacteristic_RatingValue")]
        public RatingValue ratingvalue_bookableresourcecharacteristic_RatingValue {
            get {
                return GetRelatedEntity<RatingValue>("ratingvalue_bookableresourcecharacteristic_RatingValue", null);
            }
            set {
                SetRelatedEntity("ratingvalue_bookableresourcecharacteristic_RatingValue", null, value);
            }
        }
        
        [AttributeLogicalName("characteristic")]
        [RelationshipSchemaName("characteristic_bookableresourcecharacteristic_Characteristic")]
        public Characteristic characteristic_bookableresourcecharacteristic_Characteristic {
            get {
                return GetRelatedEntity<Characteristic>("characteristic_bookableresourcecharacteristic_Characteristic", null);
            }
            set {
                SetRelatedEntity("characteristic_bookableresourcecharacteristic_Characteristic", null, value);
            }
        }
        
        [AttributeLogicalName("resource")]
        [RelationshipSchemaName("bookableresource_bookableresourcecharacteristic_Resource")]
        public BookableResource bookableresource_bookableresourcecharacteristic_Resource {
            get {
                return GetRelatedEntity<BookableResource>("bookableresource_bookableresourcecharacteristic_Resource", null);
            }
            set {
                SetRelatedEntity("bookableresource_bookableresourcecharacteristic_Resource", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_bookableresourcecharacteristic")]
        public BusinessUnit business_unit_bookableresourcecharacteristic {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_bookableresourcecharacteristic", null);
            }
            set {
                SetRelatedEntity("business_unit_bookableresourcecharacteristic", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_bookableresourcecharacteristic")]
        public Team team_bookableresourcecharacteristic {
            get {
                return GetRelatedEntity<Team>("team_bookableresourcecharacteristic", null);
            }
            set {
                SetRelatedEntity("team_bookableresourcecharacteristic", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_bookableresourcecharacteristic")]
        public SystemUser user_bookableresourcecharacteristic {
            get {
                return GetRelatedEntity<SystemUser>("user_bookableresourcecharacteristic", null);
            }
            set {
                SetRelatedEntity("user_bookableresourcecharacteristic", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcecharacteristic_modifiedonbehalfby")]
        public SystemUser lk_bookableresourcecharacteristic_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecharacteristic_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecharacteristic_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_bookableresourcecharacteristic_modifiedby")]
        public SystemUser lk_bookableresourcecharacteristic_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecharacteristic_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecharacteristic_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcecharacteristic_createdonbehalfby")]
        public SystemUser lk_bookableresourcecharacteristic_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecharacteristic_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecharacteristic_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_bookableresourcecharacteristic_createdby")]
        public SystemUser lk_bookableresourcecharacteristic_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcecharacteristic_createdby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcecharacteristic_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("BookableResourceCharacteristic_SyncErrors")]
        public IEnumerable<SyncError> BookableResourceCharacteristic_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BookableResourceCharacteristic_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BookableResourceCharacteristic_SyncErrors", null, value);
            }
        }
        
        public static BookableResourceCharacteristic Retrieve(IOrganizationService service, Guid id, params Expression<Func<BookableResourceCharacteristic,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Associates resources with resource groups that they are a member of.</para>
    /// <para>Display Name: Bookable Resource Group</para>
    /// </summary>
    [EntityLogicalName("bookableresourcegroup")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BookableResourceGroup : ExtendedEntity<BookableResourceGroupState, BookableResourceGroup_StatusCode> {
        
        public const string EntityLogicalName = "bookableresourcegroup";
        
        public const int EntityTypeCode = 1151;
        
        public BookableResourceGroup() : 
                base(EntityLogicalName) {
        }
        
        public BookableResourceGroup(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("bookableresourcegroupid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("bookableresourcegroupid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the resource group.</para>
        /// <para>Display Name: Bookable Resource Group</para>
        /// </summary>
        [AttributeLogicalName("bookableresourcegroupid")]
        public Guid? BookableResourceGroupId {
            get {
                return GetAttributeValue<Guid?>("bookableresourcegroupid");
            }
            set {
                SetId("bookableresourcegroupid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the group membership start date.</para>
        /// <para>Display Name: From Date</para>
        /// </summary>
        [AttributeLogicalName("fromdate")]
        public DateTime? FromDate {
            get {
                return GetAttributeValue<DateTime?>("fromdate");
            }
            set {
                SetAttributeValue("fromdate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("parentresourcename")]
        public string ParentResourceName {
            get {
                return GetAttributeValue<string>("parentresourcename");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("childresourcename")]
        public string ChildResourceName {
            get {
                return GetAttributeValue<string>("childresourcename");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the bookableresourcegroup with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Bookable Resource Group</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public BookableResourceGroupState? StateCode {
            get {
                return GetOptionSetValue<BookableResourceGroupState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the group membership end date.</para>
        /// <para>Display Name: To Date</para>
        /// </summary>
        [AttributeLogicalName("todate")]
        public DateTime? ToDate {
            get {
                return GetAttributeValue<DateTime?>("todate");
            }
            set {
                SetAttributeValue("todate", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>The parent resource that is a part of the group.</para>
        /// <para>Display Name: Parent Resource</para>
        /// </summary>
        [AttributeLogicalName("parentresource")]
        public EntityReference ParentResource {
            get {
                return GetAttributeValue<EntityReference>("parentresource");
            }
            set {
                SetAttributeValue("parentresource", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the resource group.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the BookableResourceGroup with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Bookable Resource Group</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public BookableResourceGroup_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<BookableResourceGroup_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>The child resource that is a part of the group.</para>
        /// <para>Display Name: Child Resource</para>
        /// </summary>
        [AttributeLogicalName("childresource")]
        public EntityReference ChildResource {
            get {
                return GetAttributeValue<EntityReference>("childresource");
            }
            set {
                SetAttributeValue("childresource", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_bookableresourcegroup")]
        public TransactionCurrency TransactionCurrency_bookableresourcegroup {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_bookableresourcegroup", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_bookableresourcegroup", null, value);
            }
        }
        
        [AttributeLogicalName("parentresource")]
        [RelationshipSchemaName("bookableresource_bookableresourcegroup_ParentResource")]
        public BookableResource bookableresource_bookableresourcegroup_ParentResource {
            get {
                return GetRelatedEntity<BookableResource>("bookableresource_bookableresourcegroup_ParentResource", null);
            }
            set {
                SetRelatedEntity("bookableresource_bookableresourcegroup_ParentResource", null, value);
            }
        }
        
        [AttributeLogicalName("childresource")]
        [RelationshipSchemaName("bookableresource_bookableresourcegroup_ChildResource")]
        public BookableResource bookableresource_bookableresourcegroup_ChildResource {
            get {
                return GetRelatedEntity<BookableResource>("bookableresource_bookableresourcegroup_ChildResource", null);
            }
            set {
                SetRelatedEntity("bookableresource_bookableresourcegroup_ChildResource", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_bookableresourcegroup")]
        public BusinessUnit business_unit_bookableresourcegroup {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_bookableresourcegroup", null);
            }
            set {
                SetRelatedEntity("business_unit_bookableresourcegroup", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_bookableresourcegroup")]
        public Team team_bookableresourcegroup {
            get {
                return GetRelatedEntity<Team>("team_bookableresourcegroup", null);
            }
            set {
                SetRelatedEntity("team_bookableresourcegroup", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_bookableresourcegroup")]
        public SystemUser user_bookableresourcegroup {
            get {
                return GetRelatedEntity<SystemUser>("user_bookableresourcegroup", null);
            }
            set {
                SetRelatedEntity("user_bookableresourcegroup", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcegroup_modifiedonbehalfby")]
        public SystemUser lk_bookableresourcegroup_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcegroup_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcegroup_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_bookableresourcegroup_modifiedby")]
        public SystemUser lk_bookableresourcegroup_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcegroup_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcegroup_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_bookableresourcegroup_createdonbehalfby")]
        public SystemUser lk_bookableresourcegroup_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcegroup_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcegroup_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_bookableresourcegroup_createdby")]
        public SystemUser lk_bookableresourcegroup_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookableresourcegroup_createdby", null);
            }
            set {
                SetRelatedEntity("lk_bookableresourcegroup_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("BookableResourceGroup_SyncErrors")]
        public IEnumerable<SyncError> BookableResourceGroup_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BookableResourceGroup_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BookableResourceGroup_SyncErrors", null, value);
            }
        }
        
        public static BookableResourceGroup Retrieve(IOrganizationService service, Guid id, params Expression<Func<BookableResourceGroup,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Allows creation of multiple sub statuses mapped to a booking status option.</para>
    /// <para>Display Name: Booking Status</para>
    /// </summary>
    [EntityLogicalName("bookingstatus")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BookingStatus : ExtendedEntity<BookingStatusState, BookingStatus_StatusCode> {
        
        public const string EntityLogicalName = "bookingstatus";
        
        public const int EntityTypeCode = 1152;
        
        public BookingStatus() : 
                base(EntityLogicalName) {
        }
        
        public BookingStatus(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("bookingstatusid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("bookingstatusid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the booking status.</para>
        /// <para>Display Name: Booking Status</para>
        /// </summary>
        [AttributeLogicalName("bookingstatusid")]
        public Guid? BookingStatusId {
            get {
                return GetAttributeValue<Guid?>("bookingstatusid");
            }
            set {
                SetId("bookingstatusid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Booking Status</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public BookingStatus_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<BookingStatus_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the bookingstatus with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Booking Status</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public BookingStatusState? StateCode {
            get {
                return GetOptionSetValue<BookingStatusState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the booking status.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the BookingStatus with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type a detailed description for the booking status.</para>
        /// <para>Display Name: Type a detailed description of the booking status.</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Select whether the booking status should be proposed, committed or canceled.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("status")]
        public BookingStatus_Status? Status {
            get {
                return GetOptionSetValue<BookingStatus_Status>("status");
            }
            set {
                SetOptionSetValue("status", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_bookingstatus")]
        public TransactionCurrency TransactionCurrency_bookingstatus {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_bookingstatus", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_bookingstatus", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_bookingstatus")]
        public BusinessUnit business_unit_bookingstatus {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_bookingstatus", null);
            }
            set {
                SetRelatedEntity("business_unit_bookingstatus", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_bookingstatus")]
        public Team team_bookingstatus {
            get {
                return GetRelatedEntity<Team>("team_bookingstatus", null);
            }
            set {
                SetRelatedEntity("team_bookingstatus", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_bookingstatus")]
        public SystemUser user_bookingstatus {
            get {
                return GetRelatedEntity<SystemUser>("user_bookingstatus", null);
            }
            set {
                SetRelatedEntity("user_bookingstatus", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_bookingstatus_modifiedonbehalfby")]
        public SystemUser lk_bookingstatus_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookingstatus_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookingstatus_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_bookingstatus_modifiedby")]
        public SystemUser lk_bookingstatus_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookingstatus_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_bookingstatus_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_bookingstatus_createdonbehalfby")]
        public SystemUser lk_bookingstatus_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookingstatus_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_bookingstatus_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_bookingstatus_createdby")]
        public SystemUser lk_bookingstatus_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_bookingstatus_createdby", null);
            }
            set {
                SetRelatedEntity("lk_bookingstatus_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("BookingStatus_SyncErrors")]
        public IEnumerable<SyncError> BookingStatus_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BookingStatus_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BookingStatus_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("bookingstatus_bookableresourcebooking_BookingStatus")]
        public IEnumerable<BookableResourceBooking> bookingstatus_bookableresourcebooking_BookingStatus {
            get {
                return GetRelatedEntities<BookableResourceBooking>("bookingstatus_bookableresourcebooking_BookingStatus", null);
            }
            set {
                SetRelatedEntities("bookingstatus_bookableresourcebooking_BookingStatus", null, value);
            }
        }
        
        public static BookingStatus Retrieve(IOrganizationService service, Guid id, params Expression<Func<BookingStatus,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Business, division, or department in the Microsoft Dynamics CRM database.</para>
    /// <para>Display Name: Business Unit</para>
    /// </summary>
    [EntityLogicalName("businessunit")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class BusinessUnit : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "businessunit";
        
        public const int EntityTypeCode = 10;
        
        public BusinessUnit() : 
                base(EntityLogicalName) {
        }
        
        public BusinessUnit(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public Guid? BusinessUnitId {
            get {
                return GetAttributeValue<Guid?>("businessunitid");
            }
            set {
                SetId("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 1.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the business unit cost center.</para>
        /// <para>Display Name: Cost Center</para>
        /// </summary>
        [AttributeLogicalName("costcenter")]
        public string CostCenter {
            get {
                return GetAttributeValue<string>("costcenter");
            }
            set {
                SetAttributeValue("costcenter", value);
            }
        }
        
        [AttributeLogicalName("organizationidname")]
        public string OrganizationIdName {
            get {
                return GetAttributeValue<string>("organizationidname");
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 2.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Alternative name under which the business unit can be filed.</para>
        /// <para>Display Name: File as Name</para>
        /// </summary>
        [AttributeLogicalName("fileasname")]
        public string FileAsName {
            get {
                return GetAttributeValue<string>("fileasname");
            }
            set {
                SetAttributeValue("fileasname", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 2 information.</para>
        /// <para>Display Name: Ship To Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the business unit.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 1.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the business unit.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 1.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the division to which the business unit belongs.</para>
        /// <para>Display Name: Division</para>
        /// </summary>
        [AttributeLogicalName("divisionname")]
        public string DivisionName {
            get {
                return GetAttributeValue<string>("divisionname");
            }
            set {
                SetAttributeValue("divisionname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the businessunit.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 1, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public BusinessUnit_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<BusinessUnit_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Credit limit for the business unit.</para>
        /// <para>Display Name: Credit Limit</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public double? CreditLimit {
            get {
                return GetAttributeValue<double?>("creditlimit");
            }
            set {
                SetAttributeValue("creditlimit", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Stock exchange on which the business is listed.</para>
        /// <para>Display Name: Stock Exchange</para>
        /// </summary>
        [AttributeLogicalName("stockexchange")]
        public string StockExchange {
            get {
                return GetAttributeValue<string>("stockexchange");
            }
            set {
                SetAttributeValue("stockexchange", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 2.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the business unit.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the business unit.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the businessunit.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Fiscal calendar associated with the business unit.</para>
        /// <para>Display Name: Calendar</para>
        /// </summary>
        [AttributeLogicalName("calendarid")]
        public EntityReference CalendarId {
            get {
                return GetAttributeValue<EntityReference>("calendarid");
            }
            set {
                SetAttributeValue("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 2.</para>
        /// <para>Display Name: Ship To City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 2.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 1 information.</para>
        /// <para>Display Name: Bill To Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 2, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public BusinessUnit_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<BusinessUnit_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 1.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public BusinessUnit_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<BusinessUnit_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Information about whether the business unit is enabled or disabled.</para>
        /// <para>Display Name: Is Disabled</para>
        /// </summary>
        [AttributeLogicalName("isdisabled")]
        public bool? IsDisabled {
            get {
                return GetAttributeValue<bool?>("isdisabled");
            }
        }
        
        /// <summary>
        /// <para>Reason for disabling the business unit.</para>
        /// <para>Display Name: Disable Reason</para>
        /// </summary>
        [AttributeLogicalName("disabledreason")]
        public string DisabledReason {
            get {
                return GetAttributeValue<string>("disabledreason");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 1.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 2.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public BusinessUnit_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<BusinessUnit_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the business unit.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 2.</para>
        /// <para>Display Name: Ship To State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the business unit was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 1.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 1.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 1.</para>
        /// <para>Display Name: Main Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Picture or diagram of the business unit.</para>
        /// <para>Display Name: Picture</para>
        /// </summary>
        [AttributeLogicalName("picture")]
        public string Picture {
            get {
                return GetAttributeValue<string>("picture");
            }
            set {
                SetAttributeValue("picture", value);
            }
        }
        
        /// <summary>
        /// <para>Stock exchange ticker symbol for the business unit.</para>
        /// <para>Display Name: Ticker Symbol</para>
        /// </summary>
        [AttributeLogicalName("tickersymbol")]
        public string TickerSymbol {
            get {
                return GetAttributeValue<string>("tickersymbol");
            }
            set {
                SetAttributeValue("tickersymbol", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 1.</para>
        /// <para>Display Name: Bill To City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 2.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 2.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 2 information.</para>
        /// <para>Display Name: Ship To Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Email address for the business unit.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EMailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether workflow or sales process rules have been suspended.</para>
        /// <para>Display Name: Workflow Suspended</para>
        /// </summary>
        [AttributeLogicalName("workflowsuspended")]
        public bool? WorkflowSuspended {
            get {
                return GetAttributeValue<bool?>("workflowsuspended");
            }
            set {
                SetAttributeValue("workflowsuspended", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 1 information.</para>
        /// <para>Display Name: Bill To Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for the business unit. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("utcoffset")]
        public int? UTCOffset {
            get {
                return GetAttributeValue<int?>("utcoffset");
            }
            set {
                SetAttributeValue("utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 1.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 1.</para>
        /// <para>Display Name: Bill To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Country/region name for address 1.</para>
        /// <para>Display Name: Bill To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>County name for address 2.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 2.</para>
        /// <para>Display Name: Ship To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 1.</para>
        /// <para>Display Name: Bill To State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the businessunit with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 1 information.</para>
        /// <para>Display Name: Bill To Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Country/region name for address 2.</para>
        /// <para>Display Name: Ship To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Website URL for the business unit.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteUrl {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 2.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>FTP site URL for the business unit.</para>
        /// <para>Display Name: FTP Site</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        public string FtpSiteUrl {
            get {
                return GetAttributeValue<string>("ftpsiteurl");
            }
            set {
                SetAttributeValue("ftpsiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Inheritance mask for the business unit.</para>
        /// <para>Display Name: Inheritance Mask</para>
        /// </summary>
        [AttributeLogicalName("inheritancemask")]
        public int? InheritanceMask {
            get {
                return GetAttributeValue<int?>("inheritancemask");
            }
            set {
                SetAttributeValue("inheritancemask", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the businessunit.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("parentbusinessunitidname")]
        public string ParentBusinessUnitIdName {
            get {
                return GetAttributeValue<string>("parentbusinessunitidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the parent business unit.</para>
        /// <para>Display Name: Parent Business</para>
        /// </summary>
        [AttributeLogicalName("parentbusinessunitid")]
        public EntityReference ParentBusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("parentbusinessunitid");
            }
            set {
                SetAttributeValue("parentbusinessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>County name for address 1.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 1.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the business unit was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 2 information.</para>
        /// <para>Display Name: Ship To Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the business unit.</para>
        /// <para>Display Name: Version number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("calendarid")]
        [RelationshipSchemaName("BusinessUnit_Calendar")]
        public Calendar BusinessUnit_Calendar {
            get {
                return GetRelatedEntity<Calendar>("BusinessUnit_Calendar", null);
            }
            set {
                SetRelatedEntity("BusinessUnit_Calendar", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_businessunitbase_modifiedby")]
        public SystemUser lk_businessunitbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_businessunitbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_businessunitbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_businessunit_createdonbehalfby")]
        public SystemUser lk_businessunit_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_businessunit_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_businessunit_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("organizationid")]
        [RelationshipSchemaName("organization_business_units")]
        public Organization organization_business_units {
            get {
                return GetRelatedEntity<Organization>("organization_business_units", null);
            }
            set {
                SetRelatedEntity("organization_business_units", null, value);
            }
        }
        
        [AttributeLogicalName("parentbusinessunitid")]
        [RelationshipSchemaName("business_unit_parent_business_unit", EntityRole.Referencing)]
        public BusinessUnit Referencingbusiness_unit_parent_business_unit {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_parent_business_unit", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("business_unit_parent_business_unit", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_businessunit_modifiedonbehalfby")]
        public SystemUser lk_businessunit_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_businessunit_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_businessunit_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_businessunitbase_createdby")]
        public SystemUser lk_businessunitbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_businessunitbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_businessunitbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_BusinessUnit")]
        public TransactionCurrency TransactionCurrency_BusinessUnit {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_BusinessUnit", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_BusinessUnit", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_msdyn_wallsavedqueryusersettings")]
        public IEnumerable<msdyn_wallsavedqueryusersettings> business_unit_msdyn_wallsavedqueryusersettings {
            get {
                return GetRelatedEntities<msdyn_wallsavedqueryusersettings>("business_unit_msdyn_wallsavedqueryusersettings", null);
            }
            set {
                SetRelatedEntities("business_unit_msdyn_wallsavedqueryusersettings", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_msdyn_postalbum")]
        public IEnumerable<msdyn_PostAlbum> business_unit_msdyn_postalbum {
            get {
                return GetRelatedEntities<msdyn_PostAlbum>("business_unit_msdyn_postalbum", null);
            }
            set {
                SetRelatedEntities("business_unit_msdyn_postalbum", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_bus")]
        public IEnumerable<dg_bus> business_unit_dg_bus {
            get {
                return GetRelatedEntities<dg_bus>("business_unit_dg_bus", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_mild")]
        public IEnumerable<dg_mild> business_unit_dg_mild {
            get {
                return GetRelatedEntities<dg_mild>("business_unit_dg_mild", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_mild", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_child")]
        public IEnumerable<dg_child> business_unit_dg_child {
            get {
                return GetRelatedEntities<dg_child>("business_unit_dg_child", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_man")]
        public IEnumerable<dg_man> business_unit_dg_man {
            get {
                return GetRelatedEntities<dg_man>("business_unit_dg_man", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_man", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_tooth")]
        public IEnumerable<dg_tooth> business_unit_dg_tooth {
            get {
                return GetRelatedEntities<dg_tooth>("business_unit_dg_tooth", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_tooth", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_field")]
        public IEnumerable<dg_field> business_unit_dg_field {
            get {
                return GetRelatedEntities<dg_field>("business_unit_dg_field", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_field", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_sheep")]
        public IEnumerable<dg_sheep> business_unit_dg_sheep {
            get {
                return GetRelatedEntities<dg_sheep>("business_unit_dg_sheep", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_sheep", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_participant")]
        public IEnumerable<dg_participant> business_unit_dg_participant {
            get {
                return GetRelatedEntities<dg_participant>("business_unit_dg_participant", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_participant", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dg_event")]
        public IEnumerable<dg_event> business_unit_dg_event {
            get {
                return GetRelatedEntities<dg_event>("business_unit_dg_event", null);
            }
            set {
                SetRelatedEntities("business_unit_dg_event", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_activitypointer")]
        public IEnumerable<ActivityPointer> business_unit_activitypointer {
            get {
                return GetRelatedEntities<ActivityPointer>("business_unit_activitypointer", null);
            }
            set {
                SetRelatedEntities("business_unit_activitypointer", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_parent_business_unit", EntityRole.Referenced)]
        public IEnumerable<BusinessUnit> Referencedbusiness_unit_parent_business_unit {
            get {
                return GetRelatedEntities<BusinessUnit>("business_unit_parent_business_unit", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("business_unit_parent_business_unit", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_service_contracts")]
        public IEnumerable<Contract> business_unit_service_contracts {
            get {
                return GetRelatedEntities<Contract>("business_unit_service_contracts", null);
            }
            set {
                SetRelatedEntities("business_unit_service_contracts", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_accounts")]
        public IEnumerable<Account> business_unit_accounts {
            get {
                return GetRelatedEntities<Account>("business_unit_accounts", null);
            }
            set {
                SetRelatedEntities("business_unit_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_service_appointments")]
        public IEnumerable<ServiceAppointment> business_unit_service_appointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("business_unit_service_appointments", null);
            }
            set {
                SetRelatedEntities("business_unit_service_appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_system_users")]
        public IEnumerable<SystemUser> business_unit_system_users {
            get {
                return GetRelatedEntities<SystemUser>("business_unit_system_users", null);
            }
            set {
                SetRelatedEntities("business_unit_system_users", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_opportunity_close_activities")]
        public IEnumerable<OpportunityClose> business_unit_opportunity_close_activities {
            get {
                return GetRelatedEntities<OpportunityClose>("business_unit_opportunity_close_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_opportunity_close_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_invoices")]
        public IEnumerable<Invoice> business_unit_invoices {
            get {
                return GetRelatedEntities<Invoice>("business_unit_invoices", null);
            }
            set {
                SetRelatedEntities("business_unit_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_quotes")]
        public IEnumerable<Quote> business_unit_quotes {
            get {
                return GetRelatedEntities<Quote>("business_unit_quotes", null);
            }
            set {
                SetRelatedEntities("business_unit_quotes", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_slabase")]
        public IEnumerable<SLA> business_unit_slabase {
            get {
                return GetRelatedEntities<SLA>("business_unit_slabase", null);
            }
            set {
                SetRelatedEntities("business_unit_slabase", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_recurringappointmentmaster_activities")]
        public IEnumerable<RecurringAppointmentMaster> business_unit_recurringappointmentmaster_activities {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("business_unit_recurringappointmentmaster_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_recurringappointmentmaster_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_dynamicproperyinstance")]
        public IEnumerable<DynamicPropertyInstance> business_unit_dynamicproperyinstance {
            get {
                return GetRelatedEntities<DynamicPropertyInstance>("business_unit_dynamicproperyinstance", null);
            }
            set {
                SetRelatedEntities("business_unit_dynamicproperyinstance", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_calendars")]
        public IEnumerable<Calendar> business_unit_calendars {
            get {
                return GetRelatedEntities<Calendar>("business_unit_calendars", null);
            }
            set {
                SetRelatedEntities("business_unit_calendars", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_campaignactivity_activities")]
        public IEnumerable<CampaignActivity> business_unit_campaignactivity_activities {
            get {
                return GetRelatedEntities<CampaignActivity>("business_unit_campaignactivity_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_campaignactivity_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_socialactivity")]
        public IEnumerable<SocialActivity> business_unit_socialactivity {
            get {
                return GetRelatedEntities<SocialActivity>("business_unit_socialactivity", null);
            }
            set {
                SetRelatedEntities("business_unit_socialactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_opportunities")]
        public IEnumerable<Opportunity> business_unit_opportunities {
            get {
                return GetRelatedEntities<Opportunity>("business_unit_opportunities", null);
            }
            set {
                SetRelatedEntities("business_unit_opportunities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_email_activities")]
        public IEnumerable<Email> business_unit_email_activities {
            get {
                return GetRelatedEntities<Email>("business_unit_email_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_email_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_orders")]
        public IEnumerable<SalesOrder> business_unit_orders {
            get {
                return GetRelatedEntities<SalesOrder>("business_unit_orders", null);
            }
            set {
                SetRelatedEntities("business_unit_orders", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_campaignresponse_activities")]
        public IEnumerable<CampaignResponse> business_unit_campaignresponse_activities {
            get {
                return GetRelatedEntities<CampaignResponse>("business_unit_campaignresponse_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_campaignresponse_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_leads")]
        public IEnumerable<Lead> business_unit_leads {
            get {
                return GetRelatedEntities<Lead>("business_unit_leads", null);
            }
            set {
                SetRelatedEntities("business_unit_leads", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_appointment_activities")]
        public IEnumerable<Appointment> business_unit_appointment_activities {
            get {
                return GetRelatedEntities<Appointment>("business_unit_appointment_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_appointment_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_fax_activities")]
        public IEnumerable<Fax> business_unit_fax_activities {
            get {
                return GetRelatedEntities<Fax>("business_unit_fax_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_fax_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_incidents")]
        public IEnumerable<Incident> business_unit_incidents {
            get {
                return GetRelatedEntities<Incident>("business_unit_incidents", null);
            }
            set {
                SetRelatedEntities("business_unit_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_phone_call_activities")]
        public IEnumerable<PhoneCall> business_unit_phone_call_activities {
            get {
                return GetRelatedEntities<PhoneCall>("business_unit_phone_call_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_phone_call_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("BusinessUnit_SyncErrors")]
        public IEnumerable<SyncError> BusinessUnit_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("BusinessUnit_SyncErrors", null);
            }
            set {
                SetRelatedEntities("BusinessUnit_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_connections")]
        public IEnumerable<Connection> business_unit_connections {
            get {
                return GetRelatedEntities<Connection>("business_unit_connections", null);
            }
            set {
                SetRelatedEntities("business_unit_connections", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_list")]
        public IEnumerable<List> business_unit_list {
            get {
                return GetRelatedEntities<List>("business_unit_list", null);
            }
            set {
                SetRelatedEntities("business_unit_list", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_task_activities")]
        public IEnumerable<Task> business_unit_task_activities {
            get {
                return GetRelatedEntities<Task>("business_unit_task_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_task_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_contacts")]
        public IEnumerable<Contact> business_unit_contacts {
            get {
                return GetRelatedEntities<Contact>("business_unit_contacts", null);
            }
            set {
                SetRelatedEntities("business_unit_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_emailserverprofile")]
        public IEnumerable<EmailServerProfile> business_unit_emailserverprofile {
            get {
                return GetRelatedEntities<EmailServerProfile>("business_unit_emailserverprofile", null);
            }
            set {
                SetRelatedEntities("business_unit_emailserverprofile", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_workflow")]
        public IEnumerable<Workflow> business_unit_workflow {
            get {
                return GetRelatedEntities<Workflow>("business_unit_workflow", null);
            }
            set {
                SetRelatedEntities("business_unit_workflow", null, value);
            }
        }
        
        [RelationshipSchemaName("BusinessUnit_Campaigns")]
        public IEnumerable<Campaign> BusinessUnit_Campaigns {
            get {
                return GetRelatedEntities<Campaign>("BusinessUnit_Campaigns", null);
            }
            set {
                SetRelatedEntities("BusinessUnit_Campaigns", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_letter_activities")]
        public IEnumerable<Letter> business_unit_letter_activities {
            get {
                return GetRelatedEntities<Letter>("business_unit_letter_activities", null);
            }
            set {
                SetRelatedEntities("business_unit_letter_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_teams")]
        public IEnumerable<Team> business_unit_teams {
            get {
                return GetRelatedEntities<Team>("business_unit_teams", null);
            }
            set {
                SetRelatedEntities("business_unit_teams", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_sharepointsites")]
        public IEnumerable<SharePointSite> business_unit_sharepointsites {
            get {
                return GetRelatedEntities<SharePointSite>("business_unit_sharepointsites", null);
            }
            set {
                SetRelatedEntities("business_unit_sharepointsites", null, value);
            }
        }
        
        [RelationshipSchemaName("BusinessUnit_SyncError")]
        public IEnumerable<SyncError> BusinessUnit_SyncError {
            get {
                return GetRelatedEntities<SyncError>("BusinessUnit_SyncError", null);
            }
            set {
                SetRelatedEntities("BusinessUnit_SyncError", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_profilerule")]
        public IEnumerable<ChannelAccessProfileRule> business_unit_profilerule {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("business_unit_profilerule", null);
            }
            set {
                SetRelatedEntities("business_unit_profilerule", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_externalparty")]
        public IEnumerable<ExternalParty> business_unit_externalparty {
            get {
                return GetRelatedEntities<ExternalParty>("business_unit_externalparty", null);
            }
            set {
                SetRelatedEntities("business_unit_externalparty", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_channelaccessprofile")]
        public IEnumerable<ChannelAccessProfile> business_unit_channelaccessprofile {
            get {
                return GetRelatedEntities<ChannelAccessProfile>("business_unit_channelaccessprofile", null);
            }
            set {
                SetRelatedEntities("business_unit_channelaccessprofile", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_ratingvalue")]
        public IEnumerable<RatingValue> business_unit_ratingvalue {
            get {
                return GetRelatedEntities<RatingValue>("business_unit_ratingvalue", null);
            }
            set {
                SetRelatedEntities("business_unit_ratingvalue", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_ratingmodel")]
        public IEnumerable<RatingModel> business_unit_ratingmodel {
            get {
                return GetRelatedEntities<RatingModel>("business_unit_ratingmodel", null);
            }
            set {
                SetRelatedEntities("business_unit_ratingmodel", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_characteristic")]
        public IEnumerable<Characteristic> business_unit_characteristic {
            get {
                return GetRelatedEntities<Characteristic>("business_unit_characteristic", null);
            }
            set {
                SetRelatedEntities("business_unit_characteristic", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_bookingstatus")]
        public IEnumerable<BookingStatus> business_unit_bookingstatus {
            get {
                return GetRelatedEntities<BookingStatus>("business_unit_bookingstatus", null);
            }
            set {
                SetRelatedEntities("business_unit_bookingstatus", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_bookableresourcegroup")]
        public IEnumerable<BookableResourceGroup> business_unit_bookableresourcegroup {
            get {
                return GetRelatedEntities<BookableResourceGroup>("business_unit_bookableresourcegroup", null);
            }
            set {
                SetRelatedEntities("business_unit_bookableresourcegroup", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_bookableresourcecharacteristic")]
        public IEnumerable<BookableResourceCharacteristic> business_unit_bookableresourcecharacteristic {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("business_unit_bookableresourcecharacteristic", null);
            }
            set {
                SetRelatedEntities("business_unit_bookableresourcecharacteristic", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_bookableresourcecategoryassn")]
        public IEnumerable<BookableResourceCategoryAssn> business_unit_bookableresourcecategoryassn {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("business_unit_bookableresourcecategoryassn", null);
            }
            set {
                SetRelatedEntities("business_unit_bookableresourcecategoryassn", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_bookableresourcecategory")]
        public IEnumerable<BookableResourceCategory> business_unit_bookableresourcecategory {
            get {
                return GetRelatedEntities<BookableResourceCategory>("business_unit_bookableresourcecategory", null);
            }
            set {
                SetRelatedEntities("business_unit_bookableresourcecategory", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_bookableresourcebookingheader")]
        public IEnumerable<BookableResourceBookingHeader> business_unit_bookableresourcebookingheader {
            get {
                return GetRelatedEntities<BookableResourceBookingHeader>("business_unit_bookableresourcebookingheader", null);
            }
            set {
                SetRelatedEntities("business_unit_bookableresourcebookingheader", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_bookableresourcebooking")]
        public IEnumerable<BookableResourceBooking> business_unit_bookableresourcebooking {
            get {
                return GetRelatedEntities<BookableResourceBooking>("business_unit_bookableresourcebooking", null);
            }
            set {
                SetRelatedEntities("business_unit_bookableresourcebooking", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_bookableresource")]
        public IEnumerable<BookableResource> business_unit_bookableresource {
            get {
                return GetRelatedEntities<BookableResource>("business_unit_bookableresource", null);
            }
            set {
                SetRelatedEntities("business_unit_bookableresource", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_mailbox")]
        public IEnumerable<Mailbox> business_unit_mailbox {
            get {
                return GetRelatedEntities<Mailbox>("business_unit_mailbox", null);
            }
            set {
                SetRelatedEntities("business_unit_mailbox", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_goal")]
        public IEnumerable<Goal> business_unit_goal {
            get {
                return GetRelatedEntities<Goal>("business_unit_goal", null);
            }
            set {
                SetRelatedEntities("business_unit_goal", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_entitlement")]
        public IEnumerable<Entitlement> business_unit_entitlement {
            get {
                return GetRelatedEntities<Entitlement>("business_unit_entitlement", null);
            }
            set {
                SetRelatedEntities("business_unit_entitlement", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_sharepointdocumentlocation")]
        public IEnumerable<SharePointDocumentLocation> business_unit_sharepointdocumentlocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("business_unit_sharepointdocumentlocation", null);
            }
            set {
                SetRelatedEntities("business_unit_sharepointdocumentlocation", null, value);
            }
        }
        
        [RelationshipSchemaName("business_unit_knowledgearticle")]
        public IEnumerable<KnowledgeArticle> business_unit_knowledgearticle {
            get {
                return GetRelatedEntities<KnowledgeArticle>("business_unit_knowledgearticle", null);
            }
            set {
                SetRelatedEntities("business_unit_knowledgearticle", null, value);
            }
        }
        
        public static BusinessUnit Retrieve(IOrganizationService service, Guid id, params Expression<Func<BusinessUnit,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Calendar used by the scheduling system to define when an appointment or activity is to occur.</para>
    /// <para>Display Name: Calendar</para>
    /// </summary>
    [EntityLogicalName("calendar")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Calendar : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "calendar";
        
        public const int EntityTypeCode = 4003;
        
        public Calendar() : 
                base(EntityLogicalName) {
        }
        
        public Calendar(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("calendarid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the calendar.</para>
        /// <para>Display Name: Calendar</para>
        /// </summary>
        [AttributeLogicalName("calendarid")]
        public Guid? CalendarId {
            get {
                return GetAttributeValue<Guid?>("calendarid");
            }
            set {
                SetId("calendarid", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Calendar type, such as User work hour calendar, or Customer service hour calendar.</para>
        /// <para>Display Name: Calendar type</para>
        /// </summary>
        [AttributeLogicalName("type")]
        public Calendar_Type? Type {
            get {
                return GetOptionSetValue<Calendar_Type>("type");
            }
            set {
                SetOptionSetValue("type", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the primary user of this calendar.</para>
        /// <para>Display Name: Primary User</para>
        /// </summary>
        [AttributeLogicalName("primaryuserid")]
        public Guid? PrimaryUserId {
            get {
                return GetAttributeValue<Guid?>("primaryuserid");
            }
            set {
                SetAttributeValue("primaryuserid", value);
            }
        }
        
        [AttributeLogicalName("holidayschedulecalendaridname")]
        public string HolidayScheduleCalendarIdName {
            get {
                return GetAttributeValue<string>("holidayschedulecalendaridname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the calendar was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Calendar is shared by other calendars, such as the organization calendar.</para>
        /// <para>Display Name: Is Shared</para>
        /// </summary>
        [AttributeLogicalName("isshared")]
        public bool? IsShared {
            get {
                return GetAttributeValue<bool?>("isshared");
            }
            set {
                SetAttributeValue("isshared", value);
            }
        }
        
        [AttributeLogicalName("businessunitidname")]
        public string BusinessUnitIdName {
            get {
                return GetAttributeValue<string>("businessunitidname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the calendar was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the calendar.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the calendar.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the calendar is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        [AttributeLogicalName("organizationidname")]
        public string OrganizationIdName {
            get {
                return GetAttributeValue<string>("organizationidname");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization with which the calendar is associated.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Name of the calendar.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the calendar.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Calendar used by the scheduling system to define when an appointment or activity is to occur.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Holiday Schedule CalendarId</para>
        /// <para>Display Name: Holiday Schedule CalendarId</para>
        /// </summary>
        [AttributeLogicalName("holidayschedulecalendarid")]
        public EntityReference HolidayScheduleCalendarId {
            get {
                return GetAttributeValue<EntityReference>("holidayschedulecalendarid");
            }
            set {
                SetAttributeValue("holidayschedulecalendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the calendar.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        [RelationshipSchemaName("business_unit_calendars")]
        public BusinessUnit business_unit_calendars {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_calendars", null);
            }
            set {
                SetRelatedEntity("business_unit_calendars", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_calendar_modifiedonbehalfby")]
        public SystemUser lk_calendar_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_calendar_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_calendar_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("holidayschedulecalendarid")]
        [RelationshipSchemaName("calendar_customercalendar_holidaycalendar", EntityRole.Referencing)]
        public Calendar Referencingcalendar_customercalendar_holidaycalendar {
            get {
                return GetRelatedEntity<Calendar>("calendar_customercalendar_holidaycalendar", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("calendar_customercalendar_holidaycalendar", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("organizationid")]
        [RelationshipSchemaName("organization_calendars")]
        public Organization organization_calendars {
            get {
                return GetRelatedEntity<Organization>("organization_calendars", null);
            }
            set {
                SetRelatedEntity("organization_calendars", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_calendar_modifiedby")]
        public SystemUser lk_calendar_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_calendar_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_calendar_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_calendar_createdonbehalfby")]
        public SystemUser lk_calendar_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_calendar_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_calendar_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_calendar_createdby")]
        public SystemUser lk_calendar_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_calendar_createdby", null);
            }
            set {
                SetRelatedEntity("lk_calendar_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("calendar_organization")]
        public IEnumerable<Organization> calendar_organization {
            get {
                return GetRelatedEntities<Organization>("calendar_organization", null);
            }
            set {
                SetRelatedEntities("calendar_organization", null, value);
            }
        }
        
        [RelationshipSchemaName("slabase_businesshoursid")]
        public IEnumerable<SLA> slabase_businesshoursid {
            get {
                return GetRelatedEntities<SLA>("slabase_businesshoursid", null);
            }
            set {
                SetRelatedEntities("slabase_businesshoursid", null, value);
            }
        }
        
        [RelationshipSchemaName("calendar_bookableresources")]
        public IEnumerable<BookableResource> calendar_bookableresources {
            get {
                return GetRelatedEntities<BookableResource>("calendar_bookableresources", null);
            }
            set {
                SetRelatedEntities("calendar_bookableresources", null, value);
            }
        }
        
        [RelationshipSchemaName("BusinessUnit_Calendar")]
        public IEnumerable<BusinessUnit> BusinessUnit_Calendar {
            get {
                return GetRelatedEntities<BusinessUnit>("BusinessUnit_Calendar", null);
            }
            set {
                SetRelatedEntities("BusinessUnit_Calendar", null, value);
            }
        }
        
        [RelationshipSchemaName("calendar_customercalendar_holidaycalendar", EntityRole.Referenced)]
        public IEnumerable<Calendar> Referencedcalendar_customercalendar_holidaycalendar {
            get {
                return GetRelatedEntities<Calendar>("calendar_customercalendar_holidaycalendar", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("calendar_customercalendar_holidaycalendar", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("calendar_system_users")]
        public IEnumerable<SystemUser> calendar_system_users {
            get {
                return GetRelatedEntities<SystemUser>("calendar_system_users", null);
            }
            set {
                SetRelatedEntities("calendar_system_users", null, value);
            }
        }
        
        public static Calendar Retrieve(IOrganizationService service, Guid id, params Expression<Func<Calendar,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Container for campaign activities and responses, sales literature, products, and lists to create, plan, execute, and track the results of a specific marketing campaign through its life.</para>
    /// <para>Display Name: Campaign</para>
    /// </summary>
    [EntityLogicalName("campaign")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Campaign : ExtendedEntity<CampaignState, Campaign_StatusCode> {
        
        public const string EntityLogicalName = "campaign";
        
        public const int EntityTypeCode = 4400;
        
        public Campaign() : 
                base(EntityLogicalName) {
        }
        
        public Campaign(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("campaignid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("campaignid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the campaign.</para>
        /// <para>Display Name: Campaign</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public Guid? CampaignId {
            get {
                return GetAttributeValue<Guid?>("campaignid");
            }
            set {
                SetId("campaignid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Shows the Miscellaneous Costs field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Miscellaneous Costs (Base)</para>
        /// </summary>
        [AttributeLogicalName("othercost_base")]
        public decimal? OtherCost_Base {
            get {
                return GetMoneyValue("othercost_base");
            }
        }
        
        /// <summary>
        /// <para>Select the type of the campaign.</para>
        /// <para>Display Name: Campaign Type</para>
        /// </summary>
        [AttributeLogicalName("typecode")]
        public Campaign_TypeCode? TypeCode {
            get {
                return GetOptionSetValue<Campaign_TypeCode>("typecode");
            }
            set {
                SetOptionSetValue("typecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the amount budgeted for the campaign to define a limit for how much you can spend.</para>
        /// <para>Display Name: Budget Allocated</para>
        /// </summary>
        [AttributeLogicalName("budgetedcost")]
        public decimal? BudgetedCost {
            get {
                return GetMoneyValue("budgetedcost");
            }
            set {
                SetMoneyValue("budgetedcost", value);
            }
        }
        
        /// <summary>
        /// <para>Select the campaign's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Campaign_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Campaign_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Type a name for the campaign so that it is identified correctly in lists.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the user who created the campaign.</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the campaign is a template that can be copied when you create future campaigns.</para>
        /// <para>Display Name: Template</para>
        /// </summary>
        [AttributeLogicalName("istemplate")]
        public bool? IsTemplate {
            get {
                return GetAttributeValue<bool?>("istemplate");
            }
            set {
                SetAttributeValue("istemplate", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the campaign was closed or completed.</para>
        /// <para>Display Name: Actual End Date</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the campaign.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of the amounts entered in the Total Cost of Campaign Activities and Miscellaneous Costs fields.</para>
        /// <para>Display Name: Total Cost of Campaign</para>
        /// </summary>
        [AttributeLogicalName("totalactualcost")]
        public decimal? TotalActualCost {
            get {
                return GetMoneyValue("totalactualcost");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of the values entered in the Actual Cost field on all campaign activities related to the campaign.</para>
        /// <para>Display Name: Total Cost of Campaign Activities</para>
        /// </summary>
        [AttributeLogicalName("totalcampaignactivityactualcost")]
        public decimal? TotalCampaignActivityActualCost {
            get {
                return GetMoneyValue("totalcampaignactivityactualcost");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Cost of Campaign Activities field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Cost of Campaign Activities (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalcampaignactivityactualcost_base")]
        public decimal? TotalCampaignActivityActualCost_Base {
            get {
                return GetMoneyValue("totalcampaignactivityactualcost_base");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the campaign is scheduled to end.</para>
        /// <para>Display Name: Proposed End Date</para>
        /// </summary>
        [AttributeLogicalName("proposedend")]
        public DateTime? ProposedEnd {
            get {
                return GetAttributeValue<DateTime?>("proposedend");
            }
            set {
                SetAttributeValue("proposedend", value);
            }
        }
        
        /// <summary>
        /// <para>Type a number or other tracking code to identify the campaign. If no value is entered, a code will be generated automatically.</para>
        /// <para>Display Name: Campaign Code</para>
        /// </summary>
        [AttributeLogicalName("codename")]
        public string CodeName {
            get {
                return GetAttributeValue<string>("codename");
            }
            set {
                SetAttributeValue("codename", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the price list associated with this item to make sure the products associated with the campaign are offered at the correct prices.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("pricelistid")]
        public EntityReference PriceListId {
            get {
                return GetAttributeValue<EntityReference>("pricelistid");
            }
            set {
                SetAttributeValue("pricelistid", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the campaign, such as the products or services offered or the targeted audience.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the campaign.</para>
        /// <para>Display Name: Actual Start Date</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Type the expected response rate for the campaign as a full number between 0 and 100.</para>
        /// <para>Display Name: Expected Response Percentage</para>
        /// </summary>
        [AttributeLogicalName("expectedresponse")]
        public int? ExpectedResponse {
            get {
                return GetAttributeValue<int?>("expectedresponse");
            }
            set {
                SetAttributeValue("expectedresponse", value);
            }
        }
        
        /// <summary>
        /// <para>Type the sum of any miscellaneous campaign costs not included in the campaign activities to make sure the actual cost of the campaign is calculated correctly.</para>
        /// <para>Display Name: Miscellaneous Costs</para>
        /// </summary>
        [AttributeLogicalName("othercost")]
        public decimal? OtherCost {
            get {
                return GetMoneyValue("othercost");
            }
            set {
                SetMoneyValue("othercost", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the price list for the campaign.</para>
        /// </summary>
        [AttributeLogicalName("pricelistname")]
        public string PriceListName {
            get {
                return GetAttributeValue<string>("pricelistname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the expected revenue for the campaign for return on investment projections and post-campaign reporting.</para>
        /// <para>Display Name: Estimated Revenue</para>
        /// </summary>
        [AttributeLogicalName("expectedrevenue")]
        public decimal? ExpectedRevenue {
            get {
                return GetMoneyValue("expectedrevenue");
            }
            set {
                SetMoneyValue("expectedrevenue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the campaign. By default, campaigns are active and can't be deactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public CampaignState? StateCode {
            get {
                return GetOptionSetValue<CampaignState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the campaign.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the Budget Allocated field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Budget Allocated (Base)</para>
        /// </summary>
        [AttributeLogicalName("budgetedcost_base")]
        public decimal? BudgetedCost_Base {
            get {
                return GetMoneyValue("budgetedcost_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the estimated revenue converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Expected Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("expectedrevenue_base")]
        public decimal? ExpectedRevenue_Base {
            get {
                return GetMoneyValue("expectedrevenue_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the campaign is scheduled to start.</para>
        /// <para>Display Name: Proposed Start Date</para>
        /// </summary>
        [AttributeLogicalName("proposedstart")]
        public DateTime? ProposedStart {
            get {
                return GetAttributeValue<DateTime?>("proposedstart");
            }
            set {
                SetAttributeValue("proposedstart", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner of the campaign.</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Cost of Campaign field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Cost of Campaign (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalactualcost_base")]
        public decimal? TotalActualCost_Base {
            get {
                return GetMoneyValue("totalactualcost_base");
            }
        }
        
        /// <summary>
        /// <para>Type the promotional message or marketing copy for the campaign.</para>
        /// <para>Display Name: Message</para>
        /// </summary>
        [AttributeLogicalName("message")]
        public string Message {
            get {
                return GetAttributeValue<string>("message");
            }
            set {
                SetAttributeValue("message", value);
            }
        }
        
        /// <summary>
        /// <para>Type a promotional code to track sales related to the campaign or allow customers to redeem a discount offer.</para>
        /// <para>Display Name: Promotion Code</para>
        /// </summary>
        [AttributeLogicalName("promotioncodename")]
        public string PromotionCodeName {
            get {
                return GetAttributeValue<string>("promotioncodename");
            }
            set {
                SetAttributeValue("promotioncodename", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the user who last modified the campaign.</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type of the owner of the campaign, such as user, team, or business unit.</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Type the objective of the campaign, including products, services, discounts, and pricing.</para>
        /// <para>Display Name: Offer</para>
        /// </summary>
        [AttributeLogicalName("objective")]
        public string Objective {
            get {
                return GetAttributeValue<string>("objective");
            }
            set {
                SetAttributeValue("objective", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Version number of the campaign.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("campaignlist_association")]
        public IEnumerable<List> campaignlist_association {
            get {
                return GetRelatedEntities<List>("campaignlist_association", null);
            }
            set {
                SetRelatedEntities("campaignlist_association", null, value);
            }
        }
        
        [RelationshipSchemaName("campaigncampaign_association")]
        public IEnumerable<Campaign> campaigncampaign_association {
            get {
                return GetRelatedEntities<Campaign>("campaigncampaign_association", null);
            }
            set {
                SetRelatedEntities("campaigncampaign_association", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("BusinessUnit_Campaigns")]
        public BusinessUnit BusinessUnit_Campaigns {
            get {
                return GetRelatedEntity<BusinessUnit>("BusinessUnit_Campaigns", null);
            }
            set {
                SetRelatedEntity("BusinessUnit_Campaigns", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_campaign")]
        public TransactionCurrency transactioncurrency_campaign {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_campaign", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_campaign", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_campaign_modifiedby")]
        public SystemUser lk_campaign_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaign_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_campaign_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_campaign_createdonbehalfby")]
        public SystemUser lk_campaign_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaign_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_campaign_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_campaign_modifiedonbehalfby")]
        public SystemUser lk_campaign_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaign_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_campaign_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_Campaigns")]
        public Team team_Campaigns {
            get {
                return GetRelatedEntity<Team>("team_Campaigns", null);
            }
            set {
                SetRelatedEntity("team_Campaigns", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("SystemUser_Campaigns")]
        public SystemUser SystemUser_Campaigns {
            get {
                return GetRelatedEntity<SystemUser>("SystemUser_Campaigns", null);
            }
            set {
                SetRelatedEntity("SystemUser_Campaigns", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_campaign_createdby")]
        public SystemUser lk_campaign_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaign_createdby", null);
            }
            set {
                SetRelatedEntity("lk_campaign_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_SyncErrors")]
        public IEnumerable<SyncError> Campaign_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Campaign_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Campaign_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_Faxes")]
        public IEnumerable<Fax> Campaign_Faxes {
            get {
                return GetRelatedEntities<Fax>("Campaign_Faxes", null);
            }
            set {
                SetRelatedEntities("Campaign_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_Appointments")]
        public IEnumerable<Appointment> Campaign_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Campaign_Appointments", null);
            }
            set {
                SetRelatedEntities("Campaign_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("campaign_quotes")]
        public IEnumerable<Quote> campaign_quotes {
            get {
                return GetRelatedEntities<Quote>("campaign_quotes", null);
            }
            set {
                SetRelatedEntities("campaign_quotes", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_Tasks")]
        public IEnumerable<Task> Campaign_Tasks {
            get {
                return GetRelatedEntities<Task>("Campaign_Tasks", null);
            }
            set {
                SetRelatedEntities("Campaign_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_Emails")]
        public IEnumerable<Email> Campaign_Emails {
            get {
                return GetRelatedEntities<Email>("Campaign_Emails", null);
            }
            set {
                SetRelatedEntities("Campaign_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("campaign_connections2")]
        public IEnumerable<Connection> campaign_connections2 {
            get {
                return GetRelatedEntities<Connection>("campaign_connections2", null);
            }
            set {
                SetRelatedEntities("campaign_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("campaign_activity_parties")]
        public IEnumerable<ActivityParty> campaign_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("campaign_activity_parties", null);
            }
            set {
                SetRelatedEntities("campaign_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Campaign_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Campaign_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Campaign_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("campaign_connections1")]
        public IEnumerable<Connection> campaign_connections1 {
            get {
                return GetRelatedEntities<Connection>("campaign_connections1", null);
            }
            set {
                SetRelatedEntities("campaign_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_ActivityPointers")]
        public IEnumerable<ActivityPointer> Campaign_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Campaign_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Campaign_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("campaign_orders")]
        public IEnumerable<SalesOrder> campaign_orders {
            get {
                return GetRelatedEntities<SalesOrder>("campaign_orders", null);
            }
            set {
                SetRelatedEntities("campaign_orders", null, value);
            }
        }
        
        [RelationshipSchemaName("campaign_opportunities")]
        public IEnumerable<Opportunity> campaign_opportunities {
            get {
                return GetRelatedEntities<Opportunity>("campaign_opportunities", null);
            }
            set {
                SetRelatedEntities("campaign_opportunities", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_Phonecalls")]
        public IEnumerable<PhoneCall> Campaign_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Campaign_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Campaign_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Campaign_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Campaign_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Campaign_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("campaign_leads")]
        public IEnumerable<Lead> campaign_leads {
            get {
                return GetRelatedEntities<Lead>("campaign_leads", null);
            }
            set {
                SetRelatedEntities("campaign_leads", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_CampaignActivities")]
        public IEnumerable<CampaignActivity> Campaign_CampaignActivities {
            get {
                return GetRelatedEntities<CampaignActivity>("Campaign_CampaignActivities", null);
            }
            set {
                SetRelatedEntities("Campaign_CampaignActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_CampaignResponses")]
        public IEnumerable<CampaignResponse> Campaign_CampaignResponses {
            get {
                return GetRelatedEntities<CampaignResponse>("Campaign_CampaignResponses", null);
            }
            set {
                SetRelatedEntities("Campaign_CampaignResponses", null, value);
            }
        }
        
        [RelationshipSchemaName("Campaign_Letters")]
        public IEnumerable<Letter> Campaign_Letters {
            get {
                return GetRelatedEntities<Letter>("Campaign_Letters", null);
            }
            set {
                SetRelatedEntities("Campaign_Letters", null, value);
            }
        }
        
        public static Campaign Retrieve(IOrganizationService service, Guid id, params Expression<Func<Campaign,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Task performed, or to be performed, by a user for planning or running a campaign.</para>
    /// <para>Display Name: Campaign Activity</para>
    /// </summary>
    [EntityLogicalName("campaignactivity")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class CampaignActivity : ExtendedEntity<CampaignActivityState, CampaignActivity_StatusCode> {
        
        public const string EntityLogicalName = "campaignactivity";
        
        public const int EntityTypeCode = 4402;
        
        public CampaignActivity() : 
                base(EntityLogicalName) {
        }
        
        public CampaignActivity(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the campaign activity.</para>
        /// <para>Display Name: Campaign Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the type of campaign activity to indicate the purpose of the activity.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("typecode")]
        public CampaignActivity_TypeCode? TypeCode {
            get {
                return GetOptionSetValue<CampaignActivity_TypeCode>("typecode");
            }
            set {
                SetOptionSetValue("typecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the value selected in the Duration field on the campaign activity. The duration is used to report the time spent on the activity.</para>
        /// <para>Display Name: Actual Duration </para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Select how communications for this activity will be sent, such as phone, letter, fax, or email.</para>
        /// <para>Display Name: Channel</para>
        /// </summary>
        [AttributeLogicalName("channeltypecode")]
        public CampaignActivity_ChannelTypeCode? ChannelTypeCode {
            get {
                return GetOptionSetValue<CampaignActivity_ChannelTypeCode>("channeltypecode");
            }
            set {
                SetOptionSetValue("channeltypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the allocated budget of the campaign activity for estimated versus actual cost reporting.</para>
        /// <para>Display Name: Budget Allocated</para>
        /// </summary>
        [AttributeLogicalName("budgetedcost")]
        public decimal? BudgetedCost {
            get {
                return GetMoneyValue("budgetedcost");
            }
            set {
                SetMoneyValue("budgetedcost", value);
            }
        }
        
        /// <summary>
        /// <para>Select the campaign activity's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public CampaignActivity_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<CampaignActivity_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time for the activity to be completed to provide details about the timing of the campaign activity.</para>
        /// <para>Display Name: Scheduled End</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the campaign activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the campaign activity was actually completed.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the campaign activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the campaign activity type, such as new business development or customer retention, to tie the campaign activity to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
        }
        
        /// <summary>
        /// <para>Enter the vendor accounts or contacts to capture any third-party suppliers used for the campaign activity.</para>
        /// <para>Display Name: Outsource Vendors</para>
        /// </summary>
        [AttributeLogicalName("partners")]
        public IEnumerable<ActivityParty> Partners {
            get {
                return GetEntityCollection<ActivityParty>("partners");
            }
            set {
                SetEntityCollection("partners", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to override the opt-out settings on leads, contacts, and accounts for the members of the target marketing lists of the campaign activity. If No is selected, marketing materials will be sent to members who have opted out.</para>
        /// <para>Display Name: Exclude Members Who Opt Out</para>
        /// </summary>
        [AttributeLogicalName("donotsendonoptout")]
        public bool? DoNotSendOnOptOut {
            get {
                return GetAttributeValue<bool?>("donotsendonoptout");
            }
            set {
                SetAttributeValue("donotsendonoptout", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type of entity with which the campaign activity is associated.</para>
        /// </summary>
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the user who created the campaign activity.</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the campaign activity, such as key talking points, objectives, or details about the target audience.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Type the actual cost of the campaign activity. The value entered is rolled up to the related campaign in the total cost calculations.</para>
        /// <para>Display Name: Actual Cost</para>
        /// </summary>
        [AttributeLogicalName("actualcost")]
        public decimal? ActualCost {
            get {
                return GetMoneyValue("actualcost");
            }
            set {
                SetMoneyValue("actualcost", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration, specified in minutes, of the campaign activity.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Select whether inactive marketing list members will be excluded from the campaign activity distribution.</para>
        /// <para>Display Name: Ignore Inactive Marketing List Members</para>
        /// </summary>
        [AttributeLogicalName("ignoreinactivelistmembers")]
        public bool? IgnoreInactiveListMembers {
            get {
                return GetAttributeValue<bool?>("ignoreinactivelistmembers");
            }
            set {
                SetAttributeValue("ignoreinactivelistmembers", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the object with which the campaign activity is associated.</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the Actual Cost field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Actual Cost (Base)</para>
        /// </summary>
        [AttributeLogicalName("actualcost_base")]
        public decimal? ActualCost_Base {
            get {
                return GetMoneyValue("actualcost_base");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the campaign activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the campaign activity is open, completed, or canceled. Completed and canceled campaign activities are read-only and can't be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public CampaignActivityState? StateCode {
            get {
                return GetOptionSetValue<CampaignActivityState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the parent campaign so that the campaign activity costs reflect in the correct campaign for reporting.</para>
        /// <para>Display Name: Parent Campaign</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the campaign activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the Budget Allocated field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Budget Allocated (Base)</para>
        /// </summary>
        [AttributeLogicalName("budgetedcost_base")]
        public decimal? BudgetedCost_Base {
            get {
                return GetMoneyValue("budgetedcost_base");
            }
        }
        
        /// <summary>
        /// <para>Type the minimum number of days that must be passed before a marketing list member can be contacted in a campaign again. The campaign activity will not be applied to members contacted within the specified time period.</para>
        /// <para>Display Name: No. of Days</para>
        /// </summary>
        [AttributeLogicalName("excludeifcontactedinxdays")]
        public int? ExcludeIfContactedInXDays {
            get {
                return GetAttributeValue<int?>("excludeifcontactedinxdays");
            }
            set {
                SetAttributeValue("excludeifcontactedinxdays", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the campaign activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the campaign activity to determine if the campaign activity started on the scheduled time.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected start date and time for the activity to provide details about timing of the campaign activity.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public CampaignActivity_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<CampaignActivity_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner of the campaign activity.</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Name of the user who last modified the campaign activity.</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Type of the owner of the campaign activity, such as user, team, or business unit.</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the campaign activity is created by a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the campaign activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the campaign activity type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        [RelationshipSchemaName("campaignactivitylist_association")]
        public IEnumerable<List> campaignactivitylist_association {
            get {
                return GetRelatedEntities<List>("campaignactivitylist_association", null);
            }
            set {
                SetRelatedEntities("campaignactivitylist_association", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_campaignactivity_createdonbehalfby")]
        public SystemUser lk_campaignactivity_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaignactivity_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_campaignactivity_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_campaignactivity")]
        public SystemUser user_campaignactivity {
            get {
                return GetRelatedEntity<SystemUser>("user_campaignactivity", null);
            }
            set {
                SetRelatedEntity("user_campaignactivity", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_campaignactivity_modifiedby")]
        public SystemUser lk_campaignactivity_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaignactivity_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_campaignactivity_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_CampaignActivities")]
        public Campaign Campaign_CampaignActivities {
            get {
                return GetRelatedEntity<Campaign>("Campaign_CampaignActivities", null);
            }
            set {
                SetRelatedEntity("Campaign_CampaignActivities", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_campaignactivity_activities")]
        public BusinessUnit business_unit_campaignactivity_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_campaignactivity_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_campaignactivity_activities", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_campaignactivity_createdby")]
        public SystemUser lk_campaignactivity_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaignactivity_createdby", null);
            }
            set {
                SetRelatedEntity("lk_campaignactivity_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_campaignactivity")]
        public Team team_campaignactivity {
            get {
                return GetRelatedEntity<Team>("team_campaignactivity", null);
            }
            set {
                SetRelatedEntity("team_campaignactivity", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_campaignactivity")]
        public ActivityPointer activity_pointer_campaignactivity {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_campaignactivity", null);
            }
            set {
                SetRelatedEntity("activity_pointer_campaignactivity", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_campaignactivity")]
        public TransactionCurrency transactioncurrency_campaignactivity {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_campaignactivity", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_campaignactivity", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_campaignactivity_modifiedonbehalfby")]
        public SystemUser lk_campaignactivity_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaignactivity_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_campaignactivity_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_SyncErrors")]
        public IEnumerable<SyncError> CampaignActivity_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("CampaignActivity_SyncErrors", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("campaignactivity_activityparties")]
        public IEnumerable<ActivityParty> campaignactivity_activityparties {
            get {
                return GetRelatedEntities<ActivityParty>("campaignactivity_activityparties", null);
            }
            set {
                SetRelatedEntities("campaignactivity_activityparties", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_Faxes")]
        public IEnumerable<Fax> CampaignActivity_Faxes {
            get {
                return GetRelatedEntities<Fax>("CampaignActivity_Faxes", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("campaignactivity_connections1")]
        public IEnumerable<Connection> campaignactivity_connections1 {
            get {
                return GetRelatedEntities<Connection>("campaignactivity_connections1", null);
            }
            set {
                SetRelatedEntities("campaignactivity_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_QueueItem")]
        public IEnumerable<QueueItem> CampaignActivity_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("CampaignActivity_QueueItem", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_Phonecalls")]
        public IEnumerable<PhoneCall> CampaignActivity_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("CampaignActivity_Phonecalls", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_Tasks")]
        public IEnumerable<Task> CampaignActivity_Tasks {
            get {
                return GetRelatedEntities<Task>("CampaignActivity_Tasks", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_Appointments")]
        public IEnumerable<Appointment> CampaignActivity_Appointments {
            get {
                return GetRelatedEntities<Appointment>("CampaignActivity_Appointments", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_Letters")]
        public IEnumerable<Letter> CampaignActivity_Letters {
            get {
                return GetRelatedEntities<Letter>("CampaignActivity_Letters", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> CampaignActivity_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("CampaignActivity_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_Emails")]
        public IEnumerable<Email> CampaignActivity_Emails {
            get {
                return GetRelatedEntities<Email>("CampaignActivity_Emails", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("campaignactivity_activity_parties")]
        public IEnumerable<ActivityParty> campaignactivity_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("campaignactivity_activity_parties", null);
            }
            set {
                SetRelatedEntities("campaignactivity_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignActivity_ActivityPointers")]
        public IEnumerable<ActivityPointer> CampaignActivity_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("CampaignActivity_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("CampaignActivity_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("campaignactivity_connections2")]
        public IEnumerable<Connection> campaignactivity_connections2 {
            get {
                return GetRelatedEntities<Connection>("campaignactivity_connections2", null);
            }
            set {
                SetRelatedEntities("campaignactivity_connections2", null, value);
            }
        }
        
        public static CampaignActivity Retrieve(IOrganizationService service, Guid id, params Expression<Func<CampaignActivity,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Work item of a campaign activity, such as a list or sales literature.</para>
    /// <para>Display Name: Campaign Activity Item</para>
    /// </summary>
    [EntityLogicalName("campaignactivityitem")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class CampaignActivityItem : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "campaignactivityitem";
        
        public const int EntityTypeCode = 4404;
        
        public CampaignActivityItem() : 
                base(EntityLogicalName) {
        }
        
        public CampaignActivityItem(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("campaignactivityitemid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("campaignactivityitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the campaign activity item.</para>
        /// </summary>
        [AttributeLogicalName("campaignactivityitemid")]
        public Guid? CampaignActivityItemId {
            get {
                return GetAttributeValue<Guid?>("campaignactivityitemid");
            }
            set {
                SetId("campaignactivityitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the campaign activity item.</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public Guid? OwningBusinessUnit {
            get {
                return GetAttributeValue<Guid?>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the campaign activity item.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the campaign activity for the item.</para>
        /// </summary>
        [AttributeLogicalName("campaignactivityid")]
        public EntityReference CampaignActivityId {
            get {
                return GetAttributeValue<EntityReference>("campaignactivityid");
            }
            set {
                SetAttributeValue("campaignactivityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the invoice detail.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the campaign activity item.</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public Guid? OwningUser {
            get {
                return GetAttributeValue<Guid?>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Identification of the type of the campaign activity item.</para>
        /// </summary>
        [AttributeLogicalName("itemobjecttypecode")]
        public string ItemObjectTypeCode {
            get {
                return GetAttributeValue<string>("itemobjecttypecode");
            }
            set {
                SetAttributeValue("itemobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the item.</para>
        /// </summary>
        [AttributeLogicalName("itemid")]
        public Guid? ItemId {
            get {
                return GetAttributeValue<Guid?>("itemid");
            }
            set {
                SetAttributeValue("itemid", value);
            }
        }
        
        [AttributeLogicalName("campaignactivityid")]
        [RelationshipSchemaName("ActivityPointer_CampaignActivityItems")]
        public ActivityPointer ActivityPointer_CampaignActivityItems {
            get {
                return GetRelatedEntity<ActivityPointer>("ActivityPointer_CampaignActivityItems", null);
            }
            set {
                SetRelatedEntity("ActivityPointer_CampaignActivityItems", null, value);
            }
        }
        
        public static CampaignActivityItem Retrieve(IOrganizationService service, Guid id, params Expression<Func<CampaignActivityItem,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Work item in a campaign, a list or sales literature.</para>
    /// <para>Display Name: Campaign Item</para>
    /// </summary>
    [EntityLogicalName("campaignitem")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class CampaignItem : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "campaignitem";
        
        public const int EntityTypeCode = 4403;
        
        public CampaignItem() : 
                base(EntityLogicalName) {
        }
        
        public CampaignItem(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("campaignitemid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("campaignitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the campaign item.</para>
        /// </summary>
        [AttributeLogicalName("campaignitemid")]
        public Guid? CampaignItemId {
            get {
                return GetAttributeValue<Guid?>("campaignitemid");
            }
            set {
                SetId("campaignitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the campaign item.</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public Guid? OwningBusinessUnit {
            get {
                return GetAttributeValue<Guid?>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the campaign item.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the campaign item.</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public Guid? OwningUser {
            get {
                return GetAttributeValue<Guid?>("owninguser");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the campaign that is associated with the individual item.</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public EntityReference CampaignId {
            get {
                return GetAttributeValue<EntityReference>("campaignid");
            }
            set {
                SetAttributeValue("campaignid", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Object type of entity for the campaign item.</para>
        /// </summary>
        [AttributeLogicalName("entitytype")]
        public string EntityType {
            get {
                return GetAttributeValue<string>("entitytype");
            }
            set {
                SetAttributeValue("entitytype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the entity for the campaign item.</para>
        /// </summary>
        [AttributeLogicalName("entityid")]
        public Guid? EntityId {
            get {
                return GetAttributeValue<Guid?>("entityid");
            }
            set {
                SetAttributeValue("entityid", value);
            }
        }
        
        public static CampaignItem Retrieve(IOrganizationService service, Guid id, params Expression<Func<CampaignItem,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Response from an existing or a potential new customer for a campaign.</para>
    /// <para>Display Name: Campaign Response</para>
    /// </summary>
    [EntityLogicalName("campaignresponse")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class CampaignResponse : ExtendedEntity<CampaignResponseState, CampaignResponse_StatusCode> {
        
        public const string EntityLogicalName = "campaignresponse";
        
        public const int EntityTypeCode = 4401;
        
        public CampaignResponse() : 
                base(EntityLogicalName) {
        }
        
        public CampaignResponse(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the campaign response.</para>
        /// <para>Display Name: Campaign Response</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent on this activity. The duration is used in reporting.</para>
        /// <para>Display Name: Actual Duration </para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Select how the response was received, such as phone, letter, fax, or email.</para>
        /// <para>Display Name: Channel</para>
        /// </summary>
        [AttributeLogicalName("channeltypecode")]
        public CampaignResponse_ChannelTypeCode? ChannelTypeCode {
            get {
                return GetOptionSetValue<CampaignResponse_ChannelTypeCode>("channeltypecode");
            }
            set {
                SetOptionSetValue("channeltypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type of the originating activity for the campaign response.</para>
        /// </summary>
        [AttributeLogicalName("originatingactivityidtypecode")]
        public string OriginatingActivityIdTypeCode {
            get {
                return GetAttributeValue<string>("originatingactivityidtypecode");
            }
            set {
                SetAttributeValue("originatingactivityidtypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the campaign response's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public CampaignResponse_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<CampaignResponse_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time for the activity to be completed to provide details about the timing of the campaign response.</para>
        /// <para>Display Name: Close By</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the campaign response was received.</para>
        /// <para>Display Name: Received On</para>
        /// </summary>
        [AttributeLogicalName("receivedon")]
        public DateTime? ReceivedOn {
            get {
                return GetAttributeValue<DateTime?>("receivedon");
            }
            set {
                SetAttributeValue("receivedon", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the campaign response.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the campaign response was actually completed.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the campaign response.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the company name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
        /// <para>Display Name: Yomi Company Name</para>
        /// </summary>
        [AttributeLogicalName("yomicompanyname")]
        public string YomiCompanyName {
            get {
                return GetAttributeValue<string>("yomicompanyname");
            }
            set {
                SetAttributeValue("yomicompanyname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the responder's first name if the campaign response was received from a new prospect or customer.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the vendor account or contact to capture any third-party used to obtain the campaign response.</para>
        /// <para>Display Name: Outsource Vendor</para>
        /// </summary>
        [AttributeLogicalName("partner")]
        public IEnumerable<ActivityParty> Partner {
            get {
                return GetEntityCollection<ActivityParty>("partner");
            }
            set {
                SetEntityCollection("partner", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type of entity with which the campaign response is associated.</para>
        /// </summary>
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the user who created the campaign response.</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the campaign response, such as key discussion points or objectives.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the campaign response type, such as new business development or customer retention, to tie the campaign response to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the campaign response type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the campaign responder's first name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the campaign response in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Select the type of response from the prospect or customer to indicate their interest in the campaign.</para>
        /// <para>Display Name: Response Code</para>
        /// </summary>
        [AttributeLogicalName("responsecode")]
        public CampaignResponse_ResponseCode? ResponseCode {
            get {
                return GetOptionSetValue<CampaignResponse_ResponseCode>("responsecode");
            }
            set {
                SetOptionSetValue("responsecode", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies whether the campaign response was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Type the responder's last name if the campaign response was received from a new prospect or customer.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the entity with which the campaign response is associated.</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Type the responder's email address.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EMailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the campaign response.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the originating activity for the campaign response.</para>
        /// </summary>
        [AttributeLogicalName("originatingactivityname")]
        public string OriginatingActivityName {
            get {
                return GetAttributeValue<string>("originatingactivityname");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the campaign response is open, closed, or canceled. Closed and canceled campaign responses are read-only and can't be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public CampaignResponseState? StateCode {
            get {
                return GetOptionSetValue<CampaignResponseState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies whether the campaign response is created by a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the campaign response.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the campaign responder's last name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected start date and time for the activity to provide details about the timing of the campaign response.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public CampaignResponse_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<CampaignResponse_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner of the campaign response.</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Choose the phone call, email, fax, letter, or appointment activity that led the prospect or customer to respond to the campaign.</para>
        /// <para>Display Name: Originating Activity</para>
        /// </summary>
        [AttributeLogicalName("originatingactivityid")]
        public EntityReference OriginatingActivityId {
            get {
                return GetAttributeValue<EntityReference>("originatingactivityid");
            }
            set {
                SetAttributeValue("originatingactivityid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the company if the campaign response was received from a new prospect or customer.</para>
        /// <para>Display Name: Company Name</para>
        /// </summary>
        [AttributeLogicalName("companyname")]
        public string CompanyName {
            get {
                return GetAttributeValue<string>("companyname");
            }
            set {
                SetAttributeValue("companyname", value);
            }
        }
        
        /// <summary>
        /// <para>Type a promotional code to track sales related to the campaign response or to allow the responder to redeem a discount offer.</para>
        /// <para>Display Name: Promotion Code</para>
        /// </summary>
        [AttributeLogicalName("promotioncodename")]
        public string PromotionCodeName {
            get {
                return GetAttributeValue<string>("promotioncodename");
            }
            set {
                SetAttributeValue("promotioncodename", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the user who last modified the campaign response.</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the responder's primary phone number.</para>
        /// <para>Display Name: Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone")]
        public string Telephone {
            get {
                return GetAttributeValue<string>("telephone");
            }
            set {
                SetAttributeValue("telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, or lead that submitted the campaign response, if it was received from an existing prospect or customer.</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customer")]
        public IEnumerable<ActivityParty> Customer {
            get {
                return GetEntityCollection<ActivityParty>("customer");
            }
            set {
                SetEntityCollection("customer", value);
            }
        }
        
        /// <summary>
        /// <para>Type of the owner of the campaign response, such as user, team, or business unit.</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the parent campaign so that the campaign's response rate is tracked correctly.</para>
        /// <para>Display Name: Parent Campaign</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Type the responder's fax number.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the campaign response.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the campaign response.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        [AttributeLogicalName("originatingactivityid")]
        [RelationshipSchemaName("recurringappointmentmaster_campaignresponse")]
        public RecurringAppointmentMaster recurringappointmentmaster_campaignresponse {
            get {
                return GetRelatedEntity<RecurringAppointmentMaster>("recurringappointmentmaster_campaignresponse", null);
            }
            set {
                SetRelatedEntity("recurringappointmentmaster_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("originatingactivityid")]
        [RelationshipSchemaName("phonecall_campaignresponse")]
        public PhoneCall phonecall_campaignresponse {
            get {
                return GetRelatedEntity<PhoneCall>("phonecall_campaignresponse", null);
            }
            set {
                SetRelatedEntity("phonecall_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("originatingactivityid")]
        [RelationshipSchemaName("letter_campaignresponse")]
        public Letter letter_campaignresponse {
            get {
                return GetRelatedEntity<Letter>("letter_campaignresponse", null);
            }
            set {
                SetRelatedEntity("letter_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("originatingactivityid")]
        [RelationshipSchemaName("appointment_campaignresponse")]
        public Appointment appointment_campaignresponse {
            get {
                return GetRelatedEntity<Appointment>("appointment_campaignresponse", null);
            }
            set {
                SetRelatedEntity("appointment_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_campaignresponse")]
        public ActivityPointer activity_pointer_campaignresponse {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_campaignresponse", null);
            }
            set {
                SetRelatedEntity("activity_pointer_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("originatingactivityid")]
        [RelationshipSchemaName("activity_campaignresponse")]
        public ActivityPointer activity_campaignresponse {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_campaignresponse", null);
            }
            set {
                SetRelatedEntity("activity_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_campaignresponse_createdonbehalfby")]
        public SystemUser lk_campaignresponse_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaignresponse_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_campaignresponse_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_campaignresponse_createdby")]
        public SystemUser lk_campaignresponse_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaignresponse_createdby", null);
            }
            set {
                SetRelatedEntity("lk_campaignresponse_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_campaignresponse")]
        public Team team_campaignresponse {
            get {
                return GetRelatedEntity<Team>("team_campaignresponse", null);
            }
            set {
                SetRelatedEntity("team_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_CampaignResponse")]
        public TransactionCurrency TransactionCurrency_CampaignResponse {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_CampaignResponse", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_CampaignResponse", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_campaignresponse")]
        public SystemUser user_campaignresponse {
            get {
                return GetRelatedEntity<SystemUser>("user_campaignresponse", null);
            }
            set {
                SetRelatedEntity("user_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("originatingactivityid")]
        [RelationshipSchemaName("email_campaignresponse")]
        public Email email_campaignresponse {
            get {
                return GetRelatedEntity<Email>("email_campaignresponse", null);
            }
            set {
                SetRelatedEntity("email_campaignresponse", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_campaignresponse_modifiedby")]
        public SystemUser lk_campaignresponse_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaignresponse_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_campaignresponse_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_CampaignResponses")]
        public Campaign Campaign_CampaignResponses {
            get {
                return GetRelatedEntity<Campaign>("Campaign_CampaignResponses", null);
            }
            set {
                SetRelatedEntity("Campaign_CampaignResponses", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_campaignresponse_modifiedonbehalfby")]
        public SystemUser lk_campaignresponse_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_campaignresponse_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_campaignresponse_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_campaignresponse_activities")]
        public BusinessUnit business_unit_campaignresponse_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_campaignresponse_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_campaignresponse_activities", null, value);
            }
        }
        
        [AttributeLogicalName("originatingactivityid")]
        [RelationshipSchemaName("fax_campaignresponse")]
        public Fax fax_campaignresponse {
            get {
                return GetRelatedEntity<Fax>("fax_campaignresponse", null);
            }
            set {
                SetRelatedEntity("fax_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignResponse_SyncErrors")]
        public IEnumerable<SyncError> CampaignResponse_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("CampaignResponse_SyncErrors", null);
            }
            set {
                SetRelatedEntities("CampaignResponse_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignResponse_Lead")]
        public IEnumerable<Lead> CampaignResponse_Lead {
            get {
                return GetRelatedEntities<Lead>("CampaignResponse_Lead", null);
            }
            set {
                SetRelatedEntities("CampaignResponse_Lead", null, value);
            }
        }
        
        [RelationshipSchemaName("CampaignResponse_QueueItem")]
        public IEnumerable<QueueItem> CampaignResponse_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("CampaignResponse_QueueItem", null);
            }
            set {
                SetRelatedEntities("CampaignResponse_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("campaignresponse_activity_parties")]
        public IEnumerable<ActivityParty> campaignresponse_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("campaignresponse_activity_parties", null);
            }
            set {
                SetRelatedEntities("campaignresponse_activity_parties", null, value);
            }
        }
        
        public static CampaignResponse Retrieve(IOrganizationService service, Guid id, params Expression<Func<CampaignResponse,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Information about permissions needed to access Dynamics CRM through external channels.For internal use only</para>
    /// <para>Display Name: Channel Access Profile</para>
    /// </summary>
    [EntityLogicalName("channelaccessprofile")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ChannelAccessProfile : ExtendedEntity<ChannelAccessProfileState, ChannelAccessProfile_StatusCode> {
        
        public const string EntityLogicalName = "channelaccessprofile";
        
        public const int EntityTypeCode = 3005;
        
        public ChannelAccessProfile() : 
                base(EntityLogicalName) {
        }
        
        public ChannelAccessProfile(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("channelaccessprofileid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("channelaccessprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Channel Access Profile</para>
        /// </summary>
        [AttributeLogicalName("channelaccessprofileid")]
        public Guid? ChannelAccessProfileId {
            get {
                return GetAttributeValue<Guid?>("channelaccessprofileid");
            }
            set {
                SetId("channelaccessprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user or team.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether access to the email channel is allowed.</para>
        /// <para>Display Name: Email Access</para>
        /// </summary>
        [AttributeLogicalName("emailaccess")]
        public bool? EmailAccess {
            get {
                return GetAttributeValue<bool?>("emailaccess");
            }
            set {
                SetAttributeValue("emailaccess", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select whether access to view knowledge articles is allowed.</para>
        /// <para>Display Name: View Knowledge Articles</para>
        /// </summary>
        [AttributeLogicalName("viewknowledgearticles")]
        public bool? ViewKnowledgeArticles {
            get {
                return GetAttributeValue<bool?>("viewknowledgearticles");
            }
            set {
                SetAttributeValue("viewknowledgearticles", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Select the the channel access profiles status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public ChannelAccessProfile_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<ChannelAccessProfile_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the ChannelAccessProfile with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Select whether access to view a knowledge article rating is allowed.</para>
        /// <para>Display Name: View Article Rating</para>
        /// </summary>
        [AttributeLogicalName("viewarticlerating")]
        public bool? ViewArticleRating {
            get {
                return GetAttributeValue<bool?>("viewarticlerating");
            }
            set {
                SetAttributeValue("viewarticlerating", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Guest Profile</para>
        /// </summary>
        [AttributeLogicalName("isguestprofile")]
        public bool? IsGuestProfile {
            get {
                return GetAttributeValue<bool?>("isguestprofile");
            }
            set {
                SetAttributeValue("isguestprofile", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether access to rate a knowledge article is allowed.</para>
        /// <para>Display Name: Rate Knowledge Articles</para>
        /// </summary>
        [AttributeLogicalName("rateknowledgearticles")]
        public bool? RateKnowledgeArticles {
            get {
                return GetAttributeValue<bool?>("rateknowledgearticles");
            }
            set {
                SetAttributeValue("rateknowledgearticles", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Is Managed</para>
        /// <para>Display Name: State</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the channel access profile is active or inactive.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ChannelAccessProfileState? StateCode {
            get {
                return GetOptionSetValue<ChannelAccessProfileState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether access to the web channel is allowed.</para>
        /// <para>Display Name: Web Access</para>
        /// </summary>
        [AttributeLogicalName("webaccess")]
        public bool? WebAccess {
            get {
                return GetAttributeValue<bool?>("webaccess");
            }
            set {
                SetAttributeValue("webaccess", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether access to submit feedback on knowledge articles is allowed.</para>
        /// <para>Display Name: Submit Feedback</para>
        /// </summary>
        [AttributeLogicalName("submitfeedback")]
        public bool? SubmitFeedback {
            get {
                return GetAttributeValue<bool?>("submitfeedback");
            }
            set {
                SetAttributeValue("submitfeedback", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether access to the phone channel is allowed.</para>
        /// <para>Display Name: Phone Access</para>
        /// </summary>
        [AttributeLogicalName("phoneaccess")]
        public bool? PhoneAccess {
            get {
                return GetAttributeValue<bool?>("phoneaccess");
            }
            set {
                SetAttributeValue("phoneaccess", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether access to the Twitter channel is allowed.</para>
        /// <para>Display Name: Twitter Access</para>
        /// </summary>
        [AttributeLogicalName("twitteraccess")]
        public bool? TwitterAccess {
            get {
                return GetAttributeValue<bool?>("twitteraccess");
            }
            set {
                SetAttributeValue("twitteraccess", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether access to the Facebook channel is allowed.</para>
        /// <para>Display Name: Facebook Access</para>
        /// </summary>
        [AttributeLogicalName("facebookaccess")]
        public bool? FacebookAccess {
            get {
                return GetAttributeValue<bool?>("facebookaccess");
            }
            set {
                SetAttributeValue("facebookaccess", value);
            }
        }
        
        /// <summary>
        /// <para>Version in which the similarity rule is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the channel access profile.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the ChannelAccessProfile with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Channel Access Profile used when synchronizing customizations for the Microsoft Dynamics CRM client for Outlook</para>
        /// <para>Display Name: Channel Access Profile Unique Id</para>
        /// </summary>
        [AttributeLogicalName("channelaccessprofileidunique")]
        public Guid? ChannelAccessProfileIdUnique {
            get {
                return GetAttributeValue<Guid?>("channelaccessprofileidunique");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only</para>
        /// <para>Display Name: Have Privileges Changed</para>
        /// </summary>
        [AttributeLogicalName("haveprivilegeschanged")]
        public bool? HavePrivilegesChanged {
            get {
                return GetAttributeValue<bool?>("haveprivilegeschanged");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_ChannelAccessProfile")]
        public TransactionCurrency TransactionCurrency_ChannelAccessProfile {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_ChannelAccessProfile", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_ChannelAccessProfile", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_channelaccessprofile")]
        public BusinessUnit business_unit_channelaccessprofile {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_channelaccessprofile", null);
            }
            set {
                SetRelatedEntity("business_unit_channelaccessprofile", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_channelaccessprofile")]
        public Team team_channelaccessprofile {
            get {
                return GetRelatedEntity<Team>("team_channelaccessprofile", null);
            }
            set {
                SetRelatedEntity("team_channelaccessprofile", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_channelaccessprofile")]
        public SystemUser user_channelaccessprofile {
            get {
                return GetRelatedEntity<SystemUser>("user_channelaccessprofile", null);
            }
            set {
                SetRelatedEntity("user_channelaccessprofile", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_channelaccessprofile_modifiedonbehalfby")]
        public SystemUser lk_channelaccessprofile_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_channelaccessprofile_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_channelaccessprofile_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_channelaccessprofile_modifiedby")]
        public SystemUser lk_channelaccessprofile_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_channelaccessprofile_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_channelaccessprofile_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_channelaccessprofile_createdonbehalfby")]
        public SystemUser lk_channelaccessprofile_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_channelaccessprofile_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_channelaccessprofile_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_channelaccessprofile_createdby")]
        public SystemUser lk_channelaccessprofile_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_channelaccessprofile_createdby", null);
            }
            set {
                SetRelatedEntity("lk_channelaccessprofile_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("ChannelAccessProfile_SyncErrors")]
        public IEnumerable<SyncError> ChannelAccessProfile_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("ChannelAccessProfile_SyncErrors", null);
            }
            set {
                SetRelatedEntities("ChannelAccessProfile_SyncErrors", null, value);
            }
        }
        
        public static ChannelAccessProfile Retrieve(IOrganizationService service, Guid id, params Expression<Func<ChannelAccessProfile,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Defines the rules for automatically associating channel access profiles to external party records.For internal use only</para>
    /// <para>Display Name: Channel Access Profile Rule</para>
    /// </summary>
    [EntityLogicalName("channelaccessprofilerule")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ChannelAccessProfileRule : ExtendedEntity<ChannelAccessProfileRuleState, ChannelAccessProfileRule_StatusCode> {
        
        public const string EntityLogicalName = "channelaccessprofilerule";
        
        public const int EntityTypeCode = 9400;
        
        public ChannelAccessProfileRule() : 
                base(EntityLogicalName) {
        }
        
        public ChannelAccessProfileRule(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("channelaccessprofileruleid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("channelaccessprofileruleid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Channel Access Profile Rule</para>
        /// </summary>
        [AttributeLogicalName("channelaccessprofileruleid")]
        public Guid? ChannelAccessProfileRuleId {
            get {
                return GetAttributeValue<Guid?>("channelaccessprofileruleid");
            }
            set {
                SetId("channelaccessprofileruleid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team that owns the channel access profile rule.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the workflow for this rule.</para>
        /// <para>Display Name: Workflow</para>
        /// </summary>
        [AttributeLogicalName("workflowid")]
        public EntityReference WorkflowId {
            get {
                return GetAttributeValue<EntityReference>("workflowid");
            }
            set {
                SetAttributeValue("workflowid", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the channel access profile rule with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Channel Access Profile Rule Item used when synchronizing customizations for the Microsoft Dynamics CRM client for Outlook</para>
        /// <para>Display Name: Channel Access Profile Rule Item Unique Id</para>
        /// </summary>
        [AttributeLogicalName("channelaccessprofileruleidunique")]
        public Guid? ChannelAccessProfileRuleIdUnique {
            get {
                return GetAttributeValue<Guid?>("channelaccessprofileruleidunique");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Is Managed</para>
        /// <para>Display Name: State</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the channel access profile rule is in a draft state or an active state.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ChannelAccessProfileRuleState? StateCode {
            get {
                return GetOptionSetValue<ChannelAccessProfileRuleState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("workflowidname")]
        public string WorkflowIdName {
            get {
                return GetAttributeValue<string>("workflowidname");
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the channel access profile rule.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the channel access profile rule with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the channel access profile rule's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public ChannelAccessProfileRule_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<ChannelAccessProfileRule_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description for the channel access profile rule.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Version in which the similarity rule is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_profilerule")]
        public TransactionCurrency TransactionCurrency_profilerule {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_profilerule", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_profilerule", null, value);
            }
        }
        
        [AttributeLogicalName("workflowid")]
        [RelationshipSchemaName("workflowid_profilerule")]
        public Workflow workflowid_profilerule {
            get {
                return GetRelatedEntity<Workflow>("workflowid_profilerule", null);
            }
            set {
                SetRelatedEntity("workflowid_profilerule", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_profilerule")]
        public BusinessUnit business_unit_profilerule {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_profilerule", null);
            }
            set {
                SetRelatedEntity("business_unit_profilerule", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_profilerule")]
        public Team team_profilerule {
            get {
                return GetRelatedEntity<Team>("team_profilerule", null);
            }
            set {
                SetRelatedEntity("team_profilerule", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_profilerule")]
        public SystemUser user_profilerule {
            get {
                return GetRelatedEntity<SystemUser>("user_profilerule", null);
            }
            set {
                SetRelatedEntity("user_profilerule", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_profilerule_modifiedonbehalfby")]
        public SystemUser lk_profilerule_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_profilerule_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_profilerule_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_profilerule_modifiedby")]
        public SystemUser lk_profilerule_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_profilerule_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_profilerule_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_profilerule_createdonbehalfby")]
        public SystemUser lk_profilerule_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_profilerule_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_profilerule_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_profilerule_createdby")]
        public SystemUser lk_profilerule_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_profilerule_createdby", null);
            }
            set {
                SetRelatedEntity("lk_profilerule_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("ChannelAccessProfileRule_SyncErrors")]
        public IEnumerable<SyncError> ChannelAccessProfileRule_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("ChannelAccessProfileRule_SyncErrors", null);
            }
            set {
                SetRelatedEntities("ChannelAccessProfileRule_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("profilerule_connections2")]
        public IEnumerable<Connection> profilerule_connections2 {
            get {
                return GetRelatedEntities<Connection>("profilerule_connections2", null);
            }
            set {
                SetRelatedEntities("profilerule_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("profilerule_connections1")]
        public IEnumerable<Connection> profilerule_connections1 {
            get {
                return GetRelatedEntities<Connection>("profilerule_connections1", null);
            }
            set {
                SetRelatedEntities("profilerule_connections1", null, value);
            }
        }
        
        public static ChannelAccessProfileRule Retrieve(IOrganizationService service, Guid id, params Expression<Func<ChannelAccessProfileRule,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Skills, education and certifications of resources.</para>
    /// <para>Display Name: Characteristic</para>
    /// </summary>
    [EntityLogicalName("characteristic")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Characteristic : ExtendedEntity<CharacteristicState, Characteristic_StatusCode> {
        
        public const string EntityLogicalName = "characteristic";
        
        public const int EntityTypeCode = 1141;
        
        public Characteristic() : 
                base(EntityLogicalName) {
        }
        
        public Characteristic(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("characteristicid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("characteristicid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the characteristic.</para>
        /// <para>Display Name: Characteristic</para>
        /// </summary>
        [AttributeLogicalName("characteristicid")]
        public Guid? CharacteristicId {
            get {
                return GetAttributeValue<Guid?>("characteristicid");
            }
            set {
                SetId("characteristicid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Select the type of characteristic.</para>
        /// <para>Display Name: Characteristic Type</para>
        /// </summary>
        [AttributeLogicalName("characteristictype")]
        public bookableresourcecharacteristictype? CharacteristicType {
            get {
                return GetOptionSetValue<bookableresourcecharacteristictype>("characteristictype");
            }
            set {
                SetOptionSetValue("characteristictype", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the characteristic with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the characteristic.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the Characteristic with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Characteristic</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Characteristic_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Characteristic_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a detailed description of the characteristic.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Characteristic</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public CharacteristicState? StateCode {
            get {
                return GetOptionSetValue<CharacteristicState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_characteristic")]
        public TransactionCurrency TransactionCurrency_characteristic {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_characteristic", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_characteristic", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_characteristic")]
        public BusinessUnit business_unit_characteristic {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_characteristic", null);
            }
            set {
                SetRelatedEntity("business_unit_characteristic", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_characteristic")]
        public Team team_characteristic {
            get {
                return GetRelatedEntity<Team>("team_characteristic", null);
            }
            set {
                SetRelatedEntity("team_characteristic", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_characteristic")]
        public SystemUser user_characteristic {
            get {
                return GetRelatedEntity<SystemUser>("user_characteristic", null);
            }
            set {
                SetRelatedEntity("user_characteristic", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_characteristic_modifiedonbehalfby")]
        public SystemUser lk_characteristic_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_characteristic_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_characteristic_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_characteristic_modifiedby")]
        public SystemUser lk_characteristic_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_characteristic_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_characteristic_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_characteristic_createdonbehalfby")]
        public SystemUser lk_characteristic_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_characteristic_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_characteristic_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_characteristic_createdby")]
        public SystemUser lk_characteristic_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_characteristic_createdby", null);
            }
            set {
                SetRelatedEntity("lk_characteristic_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("Characteristic_SyncErrors")]
        public IEnumerable<SyncError> Characteristic_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Characteristic_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Characteristic_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("characteristic_bookableresourcecharacteristic_Characteristic")]
        public IEnumerable<BookableResourceCharacteristic> characteristic_bookableresourcecharacteristic_Characteristic {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("characteristic_bookableresourcecharacteristic_Characteristic", null);
            }
            set {
                SetRelatedEntities("characteristic_bookableresourcecharacteristic_Characteristic", null, value);
            }
        }
        
        public static Characteristic Retrieve(IOrganizationService service, Guid id, params Expression<Func<Characteristic,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Relationship between two entities.</para>
    /// <para>Display Name: Connection</para>
    /// </summary>
    [EntityLogicalName("connection")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Connection : ExtendedEntity<ConnectionState, Connection_StatusCode> {
        
        public const string EntityLogicalName = "connection";
        
        public const int EntityTypeCode = 3234;
        
        public Connection() : 
                base(EntityLogicalName) {
        }
        
        public Connection(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("connectionid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("connectionid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the connection.</para>
        /// <para>Display Name: Connection</para>
        /// </summary>
        [AttributeLogicalName("connectionid")]
        public Guid? ConnectionId {
            get {
                return GetAttributeValue<Guid?>("connectionid");
            }
            set {
                SetId("connectionid", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the record type of the source record.</para>
        /// <para>Display Name: Type (From)</para>
        /// </summary>
        [AttributeLogicalName("record1objecttypecode")]
        public Connection_Record1ObjectTypeCode? Record1ObjectTypeCode {
            get {
                return GetOptionSetValue<Connection_Record1ObjectTypeCode>("record1objecttypecode");
            }
        }
        
        /// <summary>
        /// <para>Type of the owner of the connection, such as user, team, or business unit.</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the source record.</para>
        /// <para>Display Name: Connected From</para>
        /// </summary>
        [AttributeLogicalName("record1id")]
        public EntityReference Record1Id {
            get {
                return GetAttributeValue<EntityReference>("record1id");
            }
            set {
                SetAttributeValue("record1id", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Name of the user who created the connection.</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the connection.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Connection_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Connection_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that this is the master record.</para>
        /// <para>Display Name: Is Master</para>
        /// </summary>
        [AttributeLogicalName("ismaster")]
        public bool? IsMaster {
            get {
                return GetAttributeValue<bool?>("ismaster");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the target record.</para>
        /// <para>Display Name: Connected To</para>
        /// </summary>
        [AttributeLogicalName("record2id")]
        public EntityReference Record2Id {
            get {
                return GetAttributeValue<EntityReference>("record2id");
            }
            set {
                SetAttributeValue("record2id", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Choose the secondary party's role or relationship with the primary party.</para>
        /// <para>Display Name: Role (To)</para>
        /// </summary>
        [AttributeLogicalName("record2roleid")]
        public EntityReference Record2RoleId {
            get {
                return GetAttributeValue<EntityReference>("record2roleid");
            }
            set {
                SetAttributeValue("record2roleid", value);
            }
        }
        
        [AttributeLogicalName("record1idobjecttypecode")]
        public string Record1IdObjectTypeCode {
            get {
                return GetAttributeValue<string>("record1idobjecttypecode");
            }
            set {
                SetAttributeValue("record1idobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the reciprocal connection record.</para>
        /// <para>Display Name: Reciprocal Connection</para>
        /// </summary>
        [AttributeLogicalName("relatedconnectionid")]
        public EntityReference RelatedConnectionId {
            get {
                return GetAttributeValue<EntityReference>("relatedconnectionid");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Version number of the connection.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Name of the user who last modified the connection.</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the end date of the connection.</para>
        /// <para>Display Name: Ending</para>
        /// </summary>
        [AttributeLogicalName("effectiveend")]
        public DateTime? EffectiveEnd {
            get {
                return GetAttributeValue<DateTime?>("effectiveend");
            }
            set {
                SetAttributeValue("effectiveend", value);
            }
        }
        
        /// <summary>
        /// <para>Display name for the source record.</para>
        /// <para>Display Name: Name (From)</para>
        /// </summary>
        [AttributeLogicalName("record1idname")]
        public string Record1IdName {
            get {
                return GetAttributeValue<string>("record1idname");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the connection is active or inactive. Inactive connections are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ConnectionState? StateCode {
            get {
                return GetOptionSetValue<ConnectionState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the primary party's role or relationship with the second party.</para>
        /// <para>Display Name: Role (From)</para>
        /// </summary>
        [AttributeLogicalName("record1roleid")]
        public EntityReference Record1RoleId {
            get {
                return GetAttributeValue<EntityReference>("record1roleid");
            }
            set {
                SetAttributeValue("record1roleid", value);
            }
        }
        
        [AttributeLogicalName("record1roleidname")]
        public string Record1RoleIdName {
            get {
                return GetAttributeValue<string>("record1roleidname");
            }
        }
        
        /// <summary>
        /// <para>Enter the start date of the connection.</para>
        /// <para>Display Name: Starting</para>
        /// </summary>
        [AttributeLogicalName("effectivestart")]
        public DateTime? EffectiveStart {
            get {
                return GetAttributeValue<DateTime?>("effectivestart");
            }
            set {
                SetAttributeValue("effectivestart", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Display name for the target record.</para>
        /// <para>Display Name: Name (To)</para>
        /// </summary>
        [AttributeLogicalName("record2idname")]
        public string Record2IdName {
            get {
                return GetAttributeValue<string>("record2idname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the connection.</para>
        /// <para>Display Name: Connection Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
        }
        
        [AttributeLogicalName("record2roleidname")]
        public string Record2RoleIdName {
            get {
                return GetAttributeValue<string>("record2roleidname");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the connection.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the connection, such as the length or quality of the relationship.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner of the connection.</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("record2idobjecttypecode")]
        public string Record2IdObjectTypeCode {
            get {
                return GetAttributeValue<string>("record2idobjecttypecode");
            }
            set {
                SetAttributeValue("record2idobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the record type of the target record.</para>
        /// <para>Display Name: Type (To)</para>
        /// </summary>
        [AttributeLogicalName("record2objecttypecode")]
        public Connection_Record2ObjectTypeCode? Record2ObjectTypeCode {
            get {
                return GetOptionSetValue<Connection_Record2ObjectTypeCode>("record2objecttypecode");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the connection.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("msdyn_postalbum_connections2")]
        public msdyn_PostAlbum msdyn_postalbum_connections2 {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_connections2", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("msdyn_postalbum_connections1")]
        public msdyn_PostAlbum msdyn_postalbum_connections1 {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_connections1", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("dg_bus_connections2")]
        public dg_bus dg_bus_connections2 {
            get {
                return GetRelatedEntity<dg_bus>("dg_bus_connections2", null);
            }
            set {
                SetRelatedEntity("dg_bus_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("dg_bus_connections1")]
        public dg_bus dg_bus_connections1 {
            get {
                return GetRelatedEntity<dg_bus>("dg_bus_connections1", null);
            }
            set {
                SetRelatedEntity("dg_bus_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("recurringappointmentmaster_connections2")]
        public RecurringAppointmentMaster recurringappointmentmaster_connections2 {
            get {
                return GetRelatedEntity<RecurringAppointmentMaster>("recurringappointmentmaster_connections2", null);
            }
            set {
                SetRelatedEntity("recurringappointmentmaster_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("opportunity_connections1")]
        public Opportunity opportunity_connections1 {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_connections1", null);
            }
            set {
                SetRelatedEntity("opportunity_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("incident_connections1")]
        public Incident incident_connections1 {
            get {
                return GetRelatedEntity<Incident>("incident_connections1", null);
            }
            set {
                SetRelatedEntity("incident_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("lead_connections1")]
        public Lead lead_connections1 {
            get {
                return GetRelatedEntity<Lead>("lead_connections1", null);
            }
            set {
                SetRelatedEntity("lead_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("socialactivity_connections2")]
        public SocialActivity socialactivity_connections2 {
            get {
                return GetRelatedEntity<SocialActivity>("socialactivity_connections2", null);
            }
            set {
                SetRelatedEntity("socialactivity_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("salesorder_connections2")]
        public SalesOrder salesorder_connections2 {
            get {
                return GetRelatedEntity<SalesOrder>("salesorder_connections2", null);
            }
            set {
                SetRelatedEntity("salesorder_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("goal_connections2")]
        public Goal goal_connections2 {
            get {
                return GetRelatedEntity<Goal>("goal_connections2", null);
            }
            set {
                SetRelatedEntity("goal_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_connections")]
        public BusinessUnit business_unit_connections {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_connections", null);
            }
            set {
                SetRelatedEntity("business_unit_connections", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("contract_connections1")]
        public Contract contract_connections1 {
            get {
                return GetRelatedEntity<Contract>("contract_connections1", null);
            }
            set {
                SetRelatedEntity("contract_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("team_connections2")]
        public Team team_connections2 {
            get {
                return GetRelatedEntity<Team>("team_connections2", null);
            }
            set {
                SetRelatedEntity("team_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("systemuser_connections1")]
        public SystemUser systemuser_connections1 {
            get {
                return GetRelatedEntity<SystemUser>("systemuser_connections1", null);
            }
            set {
                SetRelatedEntity("systemuser_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("activitypointer_connections1")]
        public ActivityPointer activitypointer_connections1 {
            get {
                return GetRelatedEntity<ActivityPointer>("activitypointer_connections1", null);
            }
            set {
                SetRelatedEntity("activitypointer_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_connectionbase_createdonbehalfby")]
        public SystemUser lk_connectionbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_connectionbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_connectionbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("quote_connections1")]
        public Quote quote_connections1 {
            get {
                return GetRelatedEntity<Quote>("quote_connections1", null);
            }
            set {
                SetRelatedEntity("quote_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("contact_connections2")]
        public Contact contact_connections2 {
            get {
                return GetRelatedEntity<Contact>("contact_connections2", null);
            }
            set {
                SetRelatedEntity("contact_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("relatedconnectionid")]
        [RelationshipSchemaName("connection_related_connection", EntityRole.Referencing)]
        public Connection Referencingconnection_related_connection {
            get {
                return GetRelatedEntity<Connection>("connection_related_connection", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("connection_related_connection", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("campaign_connections2")]
        public Campaign campaign_connections2 {
            get {
                return GetRelatedEntity<Campaign>("campaign_connections2", null);
            }
            set {
                SetRelatedEntity("campaign_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("socialactivity_connections1")]
        public SocialActivity socialactivity_connections1 {
            get {
                return GetRelatedEntity<SocialActivity>("socialactivity_connections1", null);
            }
            set {
                SetRelatedEntity("socialactivity_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("campaignactivity_connections1")]
        public CampaignActivity campaignactivity_connections1 {
            get {
                return GetRelatedEntity<CampaignActivity>("campaignactivity_connections1", null);
            }
            set {
                SetRelatedEntity("campaignactivity_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("invoice_connections1")]
        public Invoice invoice_connections1 {
            get {
                return GetRelatedEntity<Invoice>("invoice_connections1", null);
            }
            set {
                SetRelatedEntity("invoice_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_connectionbase_modifiedonbehalfby")]
        public SystemUser lk_connectionbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_connectionbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_connectionbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("team_connections1")]
        public Team team_connections1 {
            get {
                return GetRelatedEntity<Team>("team_connections1", null);
            }
            set {
                SetRelatedEntity("team_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("email_connections2")]
        public Email email_connections2 {
            get {
                return GetRelatedEntity<Email>("email_connections2", null);
            }
            set {
                SetRelatedEntity("email_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("quote_connections2")]
        public Quote quote_connections2 {
            get {
                return GetRelatedEntity<Quote>("quote_connections2", null);
            }
            set {
                SetRelatedEntity("quote_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("goal_connections1")]
        public Goal goal_connections1 {
            get {
                return GetRelatedEntity<Goal>("goal_connections1", null);
            }
            set {
                SetRelatedEntity("goal_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("fax_connections1")]
        public Fax fax_connections1 {
            get {
                return GetRelatedEntity<Fax>("fax_connections1", null);
            }
            set {
                SetRelatedEntity("fax_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("task_connections2")]
        public Task task_connections2 {
            get {
                return GetRelatedEntity<Task>("task_connections2", null);
            }
            set {
                SetRelatedEntity("task_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Connection")]
        public TransactionCurrency TransactionCurrency_Connection {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Connection", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Connection", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("campaignactivity_connections2")]
        public CampaignActivity campaignactivity_connections2 {
            get {
                return GetRelatedEntity<CampaignActivity>("campaignactivity_connections2", null);
            }
            set {
                SetRelatedEntity("campaignactivity_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("phonecall_connections2")]
        public PhoneCall phonecall_connections2 {
            get {
                return GetRelatedEntity<PhoneCall>("phonecall_connections2", null);
            }
            set {
                SetRelatedEntity("phonecall_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("appointment_connections2")]
        public Appointment appointment_connections2 {
            get {
                return GetRelatedEntity<Appointment>("appointment_connections2", null);
            }
            set {
                SetRelatedEntity("appointment_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("modifiedby_connection")]
        public SystemUser modifiedby_connection {
            get {
                return GetRelatedEntity<SystemUser>("modifiedby_connection", null);
            }
            set {
                SetRelatedEntity("modifiedby_connection", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("task_connections1")]
        public Task task_connections1 {
            get {
                return GetRelatedEntity<Task>("task_connections1", null);
            }
            set {
                SetRelatedEntity("task_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("phonecall_connections1")]
        public PhoneCall phonecall_connections1 {
            get {
                return GetRelatedEntity<PhoneCall>("phonecall_connections1", null);
            }
            set {
                SetRelatedEntity("phonecall_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("account_connections2")]
        public Account account_connections2 {
            get {
                return GetRelatedEntity<Account>("account_connections2", null);
            }
            set {
                SetRelatedEntity("account_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("createdby_connection")]
        public SystemUser createdby_connection {
            get {
                return GetRelatedEntity<SystemUser>("createdby_connection", null);
            }
            set {
                SetRelatedEntity("createdby_connection", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("list_connections2")]
        public List list_connections2 {
            get {
                return GetRelatedEntity<List>("list_connections2", null);
            }
            set {
                SetRelatedEntity("list_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("activitypointer_connections2")]
        public ActivityPointer activitypointer_connections2 {
            get {
                return GetRelatedEntity<ActivityPointer>("activitypointer_connections2", null);
            }
            set {
                SetRelatedEntity("activitypointer_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("fax_connections2")]
        public Fax fax_connections2 {
            get {
                return GetRelatedEntity<Fax>("fax_connections2", null);
            }
            set {
                SetRelatedEntity("fax_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("account_connections1")]
        public Account account_connections1 {
            get {
                return GetRelatedEntity<Account>("account_connections1", null);
            }
            set {
                SetRelatedEntity("account_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("email_connections1")]
        public Email email_connections1 {
            get {
                return GetRelatedEntity<Email>("email_connections1", null);
            }
            set {
                SetRelatedEntity("email_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("incident_connections2")]
        public Incident incident_connections2 {
            get {
                return GetRelatedEntity<Incident>("incident_connections2", null);
            }
            set {
                SetRelatedEntity("incident_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("appointment_connections1")]
        public Appointment appointment_connections1 {
            get {
                return GetRelatedEntity<Appointment>("appointment_connections1", null);
            }
            set {
                SetRelatedEntity("appointment_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("serviceappointment_connections1")]
        public ServiceAppointment serviceappointment_connections1 {
            get {
                return GetRelatedEntity<ServiceAppointment>("serviceappointment_connections1", null);
            }
            set {
                SetRelatedEntity("serviceappointment_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("letter_connections2")]
        public Letter letter_connections2 {
            get {
                return GetRelatedEntity<Letter>("letter_connections2", null);
            }
            set {
                SetRelatedEntity("letter_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("systemuser_connections2")]
        public SystemUser systemuser_connections2 {
            get {
                return GetRelatedEntity<SystemUser>("systemuser_connections2", null);
            }
            set {
                SetRelatedEntity("systemuser_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("invoice_connections2")]
        public Invoice invoice_connections2 {
            get {
                return GetRelatedEntity<Invoice>("invoice_connections2", null);
            }
            set {
                SetRelatedEntity("invoice_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("opportunity_connections2")]
        public Opportunity opportunity_connections2 {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_connections2", null);
            }
            set {
                SetRelatedEntity("opportunity_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("letter_connections1")]
        public Letter letter_connections1 {
            get {
                return GetRelatedEntity<Letter>("letter_connections1", null);
            }
            set {
                SetRelatedEntity("letter_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("recurringappointmentmaster_connections1")]
        public RecurringAppointmentMaster recurringappointmentmaster_connections1 {
            get {
                return GetRelatedEntity<RecurringAppointmentMaster>("recurringappointmentmaster_connections1", null);
            }
            set {
                SetRelatedEntity("recurringappointmentmaster_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("campaign_connections1")]
        public Campaign campaign_connections1 {
            get {
                return GetRelatedEntity<Campaign>("campaign_connections1", null);
            }
            set {
                SetRelatedEntity("campaign_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("contact_connections1")]
        public Contact contact_connections1 {
            get {
                return GetRelatedEntity<Contact>("contact_connections1", null);
            }
            set {
                SetRelatedEntity("contact_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("lead_connections2")]
        public Lead lead_connections2 {
            get {
                return GetRelatedEntity<Lead>("lead_connections2", null);
            }
            set {
                SetRelatedEntity("lead_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("list_connections1")]
        public List list_connections1 {
            get {
                return GetRelatedEntity<List>("list_connections1", null);
            }
            set {
                SetRelatedEntity("list_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("serviceappointment_connections2")]
        public ServiceAppointment serviceappointment_connections2 {
            get {
                return GetRelatedEntity<ServiceAppointment>("serviceappointment_connections2", null);
            }
            set {
                SetRelatedEntity("serviceappointment_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("salesorder_connections1")]
        public SalesOrder salesorder_connections1 {
            get {
                return GetRelatedEntity<SalesOrder>("salesorder_connections1", null);
            }
            set {
                SetRelatedEntity("salesorder_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("contract_connections2")]
        public Contract contract_connections2 {
            get {
                return GetRelatedEntity<Contract>("contract_connections2", null);
            }
            set {
                SetRelatedEntity("contract_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("profilerule_connections2")]
        public ChannelAccessProfileRule profilerule_connections2 {
            get {
                return GetRelatedEntity<ChannelAccessProfileRule>("profilerule_connections2", null);
            }
            set {
                SetRelatedEntity("profilerule_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("profilerule_connections1")]
        public ChannelAccessProfileRule profilerule_connections1 {
            get {
                return GetRelatedEntity<ChannelAccessProfileRule>("profilerule_connections1", null);
            }
            set {
                SetRelatedEntity("profilerule_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("entitlement_connections2")]
        public Entitlement entitlement_connections2 {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_connections2", null);
            }
            set {
                SetRelatedEntity("entitlement_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("entitlement_connections1")]
        public Entitlement entitlement_connections1 {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_connections1", null);
            }
            set {
                SetRelatedEntity("entitlement_connections1", null, value);
            }
        }
        
        [AttributeLogicalName("record2id")]
        [RelationshipSchemaName("knowledgearticle_connections2")]
        public KnowledgeArticle knowledgearticle_connections2 {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_connections2", null);
            }
            set {
                SetRelatedEntity("knowledgearticle_connections2", null, value);
            }
        }
        
        [AttributeLogicalName("record1id")]
        [RelationshipSchemaName("knowledgearticle_connections1")]
        public KnowledgeArticle knowledgearticle_connections1 {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_connections1", null);
            }
            set {
                SetRelatedEntity("knowledgearticle_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Connection_SyncErrors")]
        public IEnumerable<SyncError> Connection_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Connection_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Connection_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("connection_related_connection", EntityRole.Referenced)]
        public IEnumerable<Connection> Referencedconnection_related_connection {
            get {
                return GetRelatedEntities<Connection>("connection_related_connection", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("connection_related_connection", EntityRole.Referenced, value);
            }
        }
        
        public static Connection Retrieve(IOrganizationService service, Guid id, params Expression<Func<Connection,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Person with whom a business unit has a relationship, such as customer, supplier, and colleague.</para>
    /// <para>Display Name: Contact</para>
    /// </summary>
    [EntityLogicalName("contact")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Contact : ExtendedEntity<ContactState, Contact_StatusCode> {
        
        public const string EntityLogicalName = "contact";
        
        public const int EntityTypeCode = 2;
        
        public Contact() : 
                base(EntityLogicalName) {
        }
        
        public Contact(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
            set {
                SetId("contactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 3.</para>
        /// <para>Display Name: Address 3: ID</para>
        /// </summary>
        [AttributeLogicalName("address3_addressid")]
        public Guid? Address3_AddressId {
            get {
                return GetAttributeValue<Guid?>("address3_addressid");
            }
            set {
                SetAttributeValue("address3_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Combines and shows the contact's first and last names so that the full name can be displayed in views and reports.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's secondary address.</para>
        /// <para>Display Name: Address 2: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address2_primarycontactname")]
        public string Address2_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address2_primarycontactname");
            }
            set {
                SetAttributeValue("address2_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of children the contact has for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: No. of Children</para>
        /// </summary>
        [AttributeLogicalName("numberofchildren")]
        public int? NumberOfChildren {
            get {
                return GetAttributeValue<int?>("numberofchildren");
            }
            set {
                SetAttributeValue("numberofchildren", value);
            }
        }
        
        [AttributeLogicalName("dg_testaccountname")]
        public string dg_TestAccountName {
            get {
                return GetAttributeValue<string>("dg_testaccountname");
            }
        }
        
        /// <summary>
        /// <para>Type the URL for the contact's FTP site to enable users to access data and share documents.</para>
        /// <para>Display Name: FTP Site</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        public string FtpSiteUrl {
            get {
                return GetAttributeValue<string>("ftpsiteurl");
            }
            set {
                SetAttributeValue("ftpsiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Select a region or territory for the contact for use in segmentation and analysis.</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territorycode")]
        public Contact_TerritoryCode? TerritoryCode {
            get {
                return GetOptionSetValue<Contact_TerritoryCode>("territorycode");
            }
            set {
                SetOptionSetValue("territorycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public Contact_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's last name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary marketing source that directed the contact to your organization.</para>
        /// <para>Display Name: Lead Source</para>
        /// </summary>
        [AttributeLogicalName("leadsourcecode")]
        public Contact_LeadSourceCode? LeadSourceCode {
            get {
                return GetOptionSetValue<Contact_LeadSourceCode>("leadsourcecode");
            }
            set {
                SetOptionSetValue("leadsourcecode", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        [AttributeLogicalName("parentcontactidname")]
        public string ParentContactIdName {
            get {
                return GetAttributeValue<string>("parentcontactidname");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Parent Customer Type</para>
        /// </summary>
        [AttributeLogicalName("parentcustomeridtype")]
        public string ParentCustomerIdType {
            get {
                return GetAttributeValue<string>("parentcustomeridtype");
            }
            set {
                SetAttributeValue("parentcustomeridtype", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>the post office box number of the 3rd address.</para>
        /// <para>Display Name: Address 3: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address3_postofficebox")]
        public string Address3_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address3_postofficebox");
            }
            set {
                SetAttributeValue("address3_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type an alternate email address for the contact.</para>
        /// <para>Display Name: Email Address 3</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        public string EMailAddress3 {
            get {
                return GetAttributeValue<string>("emailaddress3");
            }
            set {
                SetAttributeValue("emailaddress3", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public Contact_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 30 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 30 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        public decimal? Aging30_Base {
            get {
                return GetMoneyValue("aging30_base");
            }
        }
        
        /// <summary>
        /// <para>Choose the regular or preferred customer service representative for reference when scheduling service activities for the contact.</para>
        /// <para>Display Name: Preferred User</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuserid")]
        public EntityReference PreferredSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("preferredsystemuserid");
            }
            set {
                SetAttributeValue("preferredsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second business phone number for this contact.</para>
        /// <para>Display Name: Business Phone 2</para>
        /// </summary>
        [AttributeLogicalName("business2")]
        public string Business2 {
            get {
                return GetAttributeValue<string>("business2");
            }
            set {
                SetAttributeValue("business2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the 3rd address.</para>
        /// <para>Display Name: Address 3: City</para>
        /// </summary>
        [AttributeLogicalName("address3_city")]
        public string Address3_City {
            get {
                return GetAttributeValue<string>("address3_city");
            }
            set {
                SetAttributeValue("address3_city", value);
            }
        }
        
        /// <summary>
        /// <para>Type the department or business unit where the contact works in the parent company or business.</para>
        /// <para>Display Name: Department</para>
        /// </summary>
        [AttributeLogicalName("department")]
        public string Department {
            get {
                return GetAttributeValue<string>("department");
            }
            set {
                SetAttributeValue("department", value);
            }
        }
        
        /// <summary>
        /// <para>Select the marital status of the contact for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: Marital Status</para>
        /// </summary>
        [AttributeLogicalName("familystatuscode")]
        public Contact_FamilyStatusCode? FamilyStatusCode {
            get {
                return GetOptionSetValue<Contact_FamilyStatusCode>("familystatuscode");
            }
            set {
                SetOptionSetValue("familystatuscode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number for this contact.</para>
        /// <para>Display Name: Home Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        public string Telephone2 {
            get {
                return GetAttributeValue<string>("telephone2");
            }
            set {
                SetAttributeValue("telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact has any children for reference in follow-up phone calls and other communications.</para>
        /// <para>Display Name: Has Children</para>
        /// </summary>
        [AttributeLogicalName("haschildrencode")]
        public Contact_HasChildrenCode? HasChildrenCode {
            get {
                return GetOptionSetValue<Contact_HasChildrenCode>("haschildrencode");
            }
            set {
                SetOptionSetValue("haschildrencode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>Display Name: Address 2: City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date of the contact's wedding or service anniversary for use in customer gift programs or other communications.</para>
        /// <para>Display Name: Anniversary</para>
        /// </summary>
        [AttributeLogicalName("anniversary")]
        public DateTime? Anniversary {
            get {
                return GetAttributeValue<DateTime?>("anniversary");
            }
            set {
                SetAttributeValue("anniversary", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second home phone number for this contact.</para>
        /// <para>Display Name: Home Phone 2</para>
        /// </summary>
        [AttributeLogicalName("home2")]
        public string Home2 {
            get {
                return GetAttributeValue<string>("home2");
            }
            set {
                SetAttributeValue("home2", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the contact's preferred service to make sure services are scheduled correctly for the customer.</para>
        /// <para>Display Name: Preferred Service</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceid")]
        public EntityReference PreferredServiceId {
            get {
                return GetAttributeValue<EntityReference>("preferredserviceid");
            }
            set {
                SetAttributeValue("preferredserviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred day of the week for service appointments.</para>
        /// <para>Display Name: Preferred Day</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public Contact_PreferredAppointmentDayCode? PreferredAppointmentDayCode {
            get {
                return GetOptionSetValue<Contact_PreferredAppointmentDayCode>("preferredappointmentdaycode");
            }
            set {
                SetOptionSetValue("preferredappointmentdaycode", value);
            }
        }
        
        /// <summary>
        /// <para>the ZIP Code or postal code for the 3rd address.</para>
        /// <para>Display Name: Address3: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address3_postalcode")]
        public string Address3_PostalCode {
            get {
                return GetAttributeValue<string>("address3_postalcode");
            }
            set {
                SetAttributeValue("address3_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 3: Telephone3</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone3")]
        public string Address3_Telephone3 {
            get {
                return GetAttributeValue<string>("address3_telephone3");
            }
            set {
                SetAttributeValue("address3_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>Display Name: Address 1: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the salutation of the contact to make sure the contact is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
        /// <para>Display Name: Salutation</para>
        /// </summary>
        [AttributeLogicalName("salutation")]
        public string Salutation {
            get {
                return GetAttributeValue<string>("salutation");
            }
            set {
                SetAttributeValue("salutation", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the third address.</para>
        /// <para>Display Name: Address 3: Fax</para>
        /// </summary>
        [AttributeLogicalName("address3_fax")]
        public string Address3_Fax {
            get {
                return GetAttributeValue<string>("address3_fax");
            }
            set {
                SetAttributeValue("address3_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the third address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 3: Name</para>
        /// </summary>
        [AttributeLogicalName("address3_name")]
        public string Address3_Name {
            get {
                return GetAttributeValue<string>("address3_name");
            }
            set {
                SetAttributeValue("address3_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public Contact_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the parent account or parent contact for the contact to provide a quick link to additional details, such as financial information, activities, and opportunities.</para>
        /// <para>Display Name: Company Name</para>
        /// </summary>
        [AttributeLogicalName("parentcustomerid")]
        public EntityReference ParentCustomerId {
            get {
                return GetAttributeValue<EntityReference>("parentcustomerid");
            }
            set {
                SetAttributeValue("parentcustomerid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the company phone of the contact.</para>
        /// <para>Display Name: Company Phone</para>
        /// </summary>
        [AttributeLogicalName("company")]
        public string Company {
            get {
                return GetAttributeValue<string>("company");
            }
            set {
                SetAttributeValue("company", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the contact is active or inactive. Inactive contacts are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ContactState? StateCode {
            get {
                return GetOptionSetValue<ContactState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's primary address.</para>
        /// <para>Display Name: Address 1: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address1_primarycontactname")]
        public string Address1_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address1_primarycontactname");
            }
            set {
                SetAttributeValue("address1_primarycontactname", value);
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        [AttributeLogicalName("defaultpricelevelidname")]
        public string DefaultPriceLevelIdName {
            get {
                return GetAttributeValue<string>("defaultpricelevelidname");
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the third address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 3: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address3_latitude")]
        public double? Address3_Latitude {
            get {
                return GetAttributeValue<double?>("address3_latitude");
            }
            set {
                SetAttributeValue("address3_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the contact is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        [AttributeLogicalName("preferredequipmentidname")]
        public string PreferredEquipmentIdName {
            get {
                return GetAttributeValue<string>("preferredequipmentidname");
            }
        }
        
        /// <summary>
        /// <para>Choose the default price list associated with the contact to make sure the correct product prices for this customer are applied in sales opportunities, quotes, and orders.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelid")]
        public EntityReference DefaultPriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("defaultpricelevelid");
            }
            set {
                SetAttributeValue("defaultpricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the account has been merged with a master contact.</para>
        /// <para>Display Name: Merged</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Credit Limit field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Credit Limit (Base)</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        public decimal? CreditLimit_Base {
            get {
                return GetMoneyValue("creditlimit_base");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the contact participates in workflow rules.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>the country or region for the 3rd address.</para>
        /// <para>Display Name: Address3: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address3_country")]
        public string Address3_Country {
            get {
                return GetAttributeValue<string>("address3_country");
            }
            set {
                SetAttributeValue("address3_country", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's assistant.</para>
        /// <para>Display Name: Assistant</para>
        /// </summary>
        [AttributeLogicalName("assistantname")]
        public string AssistantName {
            get {
                return GetAttributeValue<string>("assistantname");
            }
            set {
                SetAttributeValue("assistantname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the master contact for merge.</para>
        /// <para>Display Name: Master ID</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the contact.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Type the suffix used in the contact's name, such as Jr. or Sr. to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Suffix</para>
        /// </summary>
        [AttributeLogicalName("suffix")]
        public string Suffix {
            get {
                return GetAttributeValue<string>("suffix");
            }
            set {
                SetAttributeValue("suffix", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact exists in a separate accounting or other system, such as Microsoft Dynamics GP or another ERP database, for use in integration processes.</para>
        /// <para>Display Name: Back Office Customer</para>
        /// </summary>
        [AttributeLogicalName("isbackofficecustomer")]
        public bool? IsBackofficeCustomer {
            get {
                return GetAttributeValue<bool?>("isbackofficecustomer");
            }
            set {
                SetAttributeValue("isbackofficecustomer", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's manager for use in escalating issues or other follow-up communications with the contact.</para>
        /// <para>Display Name: Manager</para>
        /// </summary>
        [AttributeLogicalName("managername")]
        public string ManagerName {
            get {
                return GetAttributeValue<string>("managername");
            }
            set {
                SetAttributeValue("managername", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's nickname.</para>
        /// <para>Display Name: Nickname</para>
        /// </summary>
        [AttributeLogicalName("nickname")]
        public string NickName {
            get {
                return GetAttributeValue<string>("nickname");
            }
            set {
                SetAttributeValue("nickname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the job title of the contact to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Job Title</para>
        /// </summary>
        [AttributeLogicalName("jobtitle")]
        public string JobTitle {
            get {
                return GetAttributeValue<string>("jobtitle");
            }
            set {
                SetAttributeValue("jobtitle", value);
            }
        }
        
        [AttributeLogicalName("mastercontactidname")]
        public string MasterContactIdName {
            get {
                return GetAttributeValue<string>("mastercontactidname");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the contact's preferred service facility or equipment to make sure services are scheduled correctly for the customer.</para>
        /// <para>Display Name: Preferred Facility/Equipment</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentid")]
        public EntityReference PreferredEquipmentId {
            get {
                return GetAttributeValue<EntityReference>("preferredequipmentid");
            }
            set {
                SetAttributeValue("preferredequipmentid", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public Contact_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Contact_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>Display Name: Address 1: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the contact.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>Display Name: Address 1: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Address 2</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 3: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address3_shippingmethodcode")]
        public Contact_Address3_ShippingMethodCode? Address3_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address3_ShippingMethodCode>("address3_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address3_shippingmethodcode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        [AttributeLogicalName("parentcustomeridname")]
        public string ParentCustomerIdName {
            get {
                return GetAttributeValue<string>("parentcustomeridname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts phone calls. If Do Not Allow is selected, the contact will be excluded from any phone call activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
            set {
                SetAttributeValue("donotphone", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the third address.</para>
        /// <para>Display Name: Address 3: Telephone2</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone2")]
        public string Address3_Telephone2 {
            get {
                return GetAttributeValue<string>("address3_telephone2");
            }
            set {
                SetAttributeValue("address3_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's middle name or initial to make sure the contact is addressed correctly.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the contact's professional or personal website or blog URL.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteUrl {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the contact.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the contact's annual income for use in profiling and financial analysis.</para>
        /// <para>Display Name: Annual Income</para>
        /// </summary>
        [AttributeLogicalName("annualincome")]
        public decimal? AnnualIncome {
            get {
                return GetMoneyValue("annualincome");
            }
            set {
                SetMoneyValue("annualincome", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the primary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 1: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        public Contact_Address1_FreightTermsCode? Address1_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address1_FreightTermsCode>("address1_freighttermscode");
            }
            set {
                SetOptionSetValue("address1_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 60</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        public decimal? Aging60 {
            get {
                return GetMoneyValue("aging60");
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type the pager number for the contact.</para>
        /// <para>Display Name: Pager</para>
        /// </summary>
        [AttributeLogicalName("pager")]
        public string Pager {
            get {
                return GetAttributeValue<string>("pager");
            }
            set {
                SetAttributeValue("pager", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the third address.</para>
        /// <para>Display Name: Address 3: County</para>
        /// </summary>
        [AttributeLogicalName("address3_county")]
        public string Address3_County {
            get {
                return GetAttributeValue<string>("address3_county");
            }
            set {
                SetAttributeValue("address3_county", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows direct email sent from Microsoft Dynamics CRM. If Do Not Allow is selected, Microsoft Dynamics CRM will not send the email.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEMail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
            set {
                SetAttributeValue("donotemail", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the third address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 3: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address3_freighttermscode")]
        public Contact_Address3_FreightTermsCode? Address3_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address3_FreightTermsCode>("address3_freighttermscode");
            }
            set {
                SetOptionSetValue("address3_freighttermscode", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the contact's spouse or partner for reference during calls, events, or other communications with the contact.</para>
        /// <para>Display Name: Spouse/Partner Name</para>
        /// </summary>
        [AttributeLogicalName("spousesname")]
        public string SpousesName {
            get {
                return GetAttributeValue<string>("spousesname");
            }
            set {
                SetAttributeValue("spousesname", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the contact, such as an excerpt from the company's website.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the passport number or other government ID for the contact for use in documents or reports.</para>
        /// <para>Display Name: Government</para>
        /// </summary>
        [AttributeLogicalName("governmentid")]
        public string GovernmentId {
            get {
                return GetAttributeValue<string>("governmentid");
            }
            set {
                SetAttributeValue("governmentid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the contact was last included in a marketing campaign or quick campaign.</para>
        /// <para>Display Name: Last Date Included in Campaign</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? LastUsedInCampaign {
            get {
                return GetAttributeValue<DateTime?>("lastusedincampaign");
            }
            set {
                SetAttributeValue("lastusedincampaign", value);
            }
        }
        
        /// <summary>
        /// <para>Select the contact's highest level of education for use in segmentation and analysis.</para>
        /// <para>Display Name: Education</para>
        /// </summary>
        [AttributeLogicalName("educationcode")]
        public Contact_EducationCode? EducationCode {
            get {
                return GetOptionSetValue<Contact_EducationCode>("educationcode");
            }
            set {
                SetOptionSetValue("educationcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>Display Name: Address 2: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Test Account</para>
        /// </summary>
        [AttributeLogicalName("dg_testaccount")]
        public EntityReference dg_TestAccount {
            get {
                return GetAttributeValue<EntityReference>("dg_testaccount");
            }
            set {
                SetAttributeValue("dg_testaccount", value);
            }
        }
        
        /// <summary>
        /// <para>Type a callback phone number for this contact.</para>
        /// <para>Display Name: Callback Number</para>
        /// </summary>
        [AttributeLogicalName("callback")]
        public string Callback {
            get {
                return GetAttributeValue<string>("callback");
            }
            set {
                SetAttributeValue("callback", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms for the secondary address to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Address 2: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        public Contact_Address2_FreightTermsCode? Address2_FreightTermsCode {
            get {
                return GetOptionSetValue<Contact_Address2_FreightTermsCode>("address2_freighttermscode");
            }
            set {
                SetOptionSetValue("address2_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the contact's first name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address 1</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 90 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 90 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        public decimal? Aging90_Base {
            get {
                return GetMoneyValue("aging90_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the Annual Income field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Annual Income (Base)</para>
        /// </summary>
        [AttributeLogicalName("annualincome_base")]
        public decimal? AnnualIncome_Base {
            get {
                return GetMoneyValue("annualincome_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows faxes. If Do Not Allow is selected, the contact will be excluded from any fax activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
            set {
                SetAttributeValue("donotfax", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the email.</para>
        /// <para>Display Name: Do not allow Bulk Emails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        public bool? DoNotBulkEMail {
            get {
                return GetAttributeValue<bool?>("donotbulkemail");
            }
            set {
                SetAttributeValue("donotbulkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the names of the contact's children for reference in communications and client programs.</para>
        /// <para>Display Name: Children's Names</para>
        /// </summary>
        [AttributeLogicalName("childrensnames")]
        public string ChildrensNames {
            get {
                return GetAttributeValue<string>("childrensnames");
            }
            set {
                SetAttributeValue("childrensnames", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Display Name: Preferred Method of Contact</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public Contact_PreferredContactMethodCode? PreferredContactMethodCode {
            get {
                return GetOptionSetValue<Contact_PreferredContactMethodCode>("preferredcontactmethodcode");
            }
            set {
                SetOptionSetValue("preferredcontactmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the size of the contact's company for segmentation and reporting purposes.</para>
        /// <para>Display Name: Customer Size</para>
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        public Contact_CustomerSizeCode? CustomerSizeCode {
            get {
                return GetOptionSetValue<Contact_CustomerSizeCode>("customersizecode");
            }
            set {
                SetOptionSetValue("customersizecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number for this contact.</para>
        /// <para>Display Name: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        public string Telephone3 {
            get {
                return GetAttributeValue<string>("telephone3");
            }
            set {
                SetAttributeValue("telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete third address.</para>
        /// <para>Display Name: Address 3</para>
        /// </summary>
        [AttributeLogicalName("address3_composite")]
        public string Address3_Composite {
            get {
                return GetAttributeValue<string>("address3_composite");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Select the category that best describes the relationship between the contact and your organization.</para>
        /// <para>Display Name: Relationship Type</para>
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        public Contact_CustomerTypeCode? CustomerTypeCode {
            get {
                return GetOptionSetValue<Contact_CustomerTypeCode>("customertypecode");
            }
            set {
                SetOptionSetValue("customertypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number for this contact.</para>
        /// <para>Display Name: Business Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        public string Telephone1 {
            get {
                return GetAttributeValue<string>("telephone1");
            }
            set {
                SetAttributeValue("telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the third address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 3: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address3_upszone")]
        public string Address3_UPSZone {
            get {
                return GetAttributeValue<string>("address3_upszone");
            }
            set {
                SetAttributeValue("address3_upszone", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyexternalpartyname")]
        public string ModifiedByExternalPartyName {
            get {
                return GetAttributeValue<string>("modifiedbyexternalpartyname");
            }
        }
        
        /// <summary>
        /// <para>Version number of the contact.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type the employee ID or number for the contact for reference in orders, service cases, or other communications with the contact's organization.</para>
        /// <para>Display Name: Employee</para>
        /// </summary>
        [AttributeLogicalName("employeeid")]
        public string EmployeeId {
            get {
                return GetAttributeValue<string>("employeeid");
            }
            set {
                SetAttributeValue("employeeid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the contact's manager.</para>
        /// <para>Display Name: Manager Phone</para>
        /// </summary>
        [AttributeLogicalName("managerphone")]
        public string ManagerPhone {
            get {
                return GetAttributeValue<string>("managerphone");
            }
            set {
                SetAttributeValue("managerphone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        [AttributeLogicalName("originatingleadidname")]
        public string OriginatingLeadIdName {
            get {
                return GetAttributeValue<string>("originatingleadidname");
            }
        }
        
        /// <summary>
        /// <para>Enter the contact's birthday for use in customer gift programs or other communications.</para>
        /// <para>Display Name: Birthday</para>
        /// </summary>
        [AttributeLogicalName("birthdate")]
        public DateTime? BirthDate {
            get {
                return GetAttributeValue<DateTime?>("birthdate");
            }
            set {
                SetAttributeValue("birthdate", value);
            }
        }
        
        /// <summary>
        /// <para>Type the credit limit of the contact for reference when you address invoice and accounting issues with the customer.</para>
        /// <para>Display Name: Credit Limit</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public decimal? CreditLimit {
            get {
                return GetMoneyValue("creditlimit");
            }
            set {
                SetMoneyValue("creditlimit", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the third address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 3: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address3_longitude")]
        public double? Address3_Longitude {
            get {
                return GetAttributeValue<double?>("address3_longitude");
            }
            set {
                SetAttributeValue("address3_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Select the contact's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Contact_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Contact_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the parent contact.</para>
        /// <para>Display Name: Parent Contact</para>
        /// </summary>
        [AttributeLogicalName("parentcontactid")]
        public EntityReference ParentContactId {
            get {
                return GetAttributeValue<EntityReference>("parentcontactid");
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the contact's assistant.</para>
        /// <para>Display Name: Assistant Phone</para>
        /// </summary>
        [AttributeLogicalName("assistantphone")]
        public string AssistantPhone {
            get {
                return GetAttributeValue<string>("assistantphone");
            }
            set {
                SetAttributeValue("assistantphone", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Contact record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>the state or province of the third address.</para>
        /// <para>Display Name: Address3: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address3_stateorprovince")]
        public string Address3_StateOrProvince {
            get {
                return GetAttributeValue<string>("address3_stateorprovince");
            }
            set {
                SetAttributeValue("address3_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>Display Name: Address 2: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the mobile phone number for the contact.</para>
        /// <para>Display Name: Mobile Phone</para>
        /// </summary>
        [AttributeLogicalName("mobilephone")]
        public string MobilePhone {
            get {
                return GetAttributeValue<string>("mobilephone");
            }
            set {
                SetAttributeValue("mobilephone", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>Display Name: Address 2: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Select the preferred time of day for service appointments.</para>
        /// <para>Display Name: Preferred Time</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public Contact_PreferredAppointmentTimeCode? PreferredAppointmentTimeCode {
            get {
                return GetOptionSetValue<Contact_PreferredAppointmentTimeCode>("preferredappointmenttimecode");
            }
            set {
                SetOptionSetValue("preferredappointmenttimecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the contact.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        [AttributeLogicalName("preferredserviceidname")]
        public string PreferredServiceIdName {
            get {
                return GetAttributeValue<string>("preferredserviceidname");
            }
        }
        
        [AttributeLogicalName("preferredsystemuseridname")]
        public string PreferredSystemUserIdName {
            get {
                return GetAttributeValue<string>("preferredsystemuseridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the lead that the contact was created if the contact was created by converting a lead in Microsoft Dynamics CRM. This is used to relate the contact to the data on the originating lead for use in reporting and analytics.</para>
        /// <para>Display Name: Originating Lead</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference OriginatingLeadId {
            get {
                return GetAttributeValue<EntityReference>("originatingleadid");
            }
            set {
                SetAttributeValue("originatingleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the main contact at the account's third address.</para>
        /// <para>Display Name: Address 3: Primary Contact Name</para>
        /// </summary>
        [AttributeLogicalName("address3_primarycontactname")]
        public string Address3_PrimaryContactName {
            get {
                return GetAttributeValue<string>("address3_primarycontactname");
            }
            set {
                SetAttributeValue("address3_primarycontactname", value);
            }
        }
        
        /// <summary>
        /// <para>Identifier for an external user.</para>
        /// <para>Display Name: External User Identifier</para>
        /// </summary>
        [AttributeLogicalName("externaluseridentifier")]
        public string ExternalUserIdentifier {
            get {
                return GetAttributeValue<string>("externaluseridentifier");
            }
            set {
                SetAttributeValue("externaluseridentifier", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 3: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address3_utcoffset")]
        public int? Address3_UTCOffset {
            get {
                return GetAttributeValue<int?>("address3_utcoffset");
            }
            set {
                SetAttributeValue("address3_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Select the contact's gender to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Gender</para>
        /// </summary>
        [AttributeLogicalName("gendercode")]
        public Contact_GenderCode? GenderCode {
            get {
                return GetOptionSetValue<Contact_GenderCode>("gendercode");
            }
            set {
                SetOptionSetValue("gendercode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public Contact_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<Contact_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the contact's role within the company or sales process, such as decision maker, employee, or influencer.</para>
        /// <para>Display Name: Role</para>
        /// </summary>
        [AttributeLogicalName("accountrolecode")]
        public Contact_AccountRoleCode? AccountRoleCode {
            get {
                return GetOptionSetValue<Contact_AccountRoleCode>("accountrolecode");
            }
            set {
                SetOptionSetValue("accountrolecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Aging 60 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Aging 60 (Base)</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        public decimal? Aging60_Base {
            get {
                return GetMoneyValue("aging60_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the letters.</para>
        /// <para>Display Name: Do not allow Bulk Mails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkpostalmail")]
        public bool? DoNotBulkPostalMail {
            get {
                return GetAttributeValue<bool?>("donotbulkpostalmail");
            }
            set {
                SetAttributeValue("donotbulkpostalmail", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact is on a credit hold, for reference when addressing invoice and accounting issues.</para>
        /// <para>Display Name: Credit Hold</para>
        /// </summary>
        [AttributeLogicalName("creditonhold")]
        public bool? CreditOnHold {
            get {
                return GetAttributeValue<bool?>("creditonhold");
            }
            set {
                SetAttributeValue("creditonhold", value);
            }
        }
        
        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact accepts marketing materials, such as brochures or catalogs. Contacts that opt out can be excluded from marketing initiatives.</para>
        /// <para>Display Name: Send Marketing Materials</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        public bool? DoNotSendMM {
            get {
                return GetAttributeValue<bool?>("donotsendmm");
            }
            set {
                SetAttributeValue("donotsendmm", value);
            }
        }
        
        /// <summary>
        /// <para>the third line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address3_line3")]
        public string Address3_Line3 {
            get {
                return GetAttributeValue<string>("address3_line3");
            }
            set {
                SetAttributeValue("address3_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the third address.</para>
        /// <para>Display Name: Address 3: Telephone1</para>
        /// </summary>
        [AttributeLogicalName("address3_telephone1")]
        public string Address3_Telephone1 {
            get {
                return GetAttributeValue<string>("address3_telephone1");
            }
            set {
                SetAttributeValue("address3_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 30</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        public decimal? Aging30 {
            get {
                return GetMoneyValue("aging30");
            }
        }
        
        /// <summary>
        /// <para>the second line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address3_line2")]
        public string Address3_Line2 {
            get {
                return GetAttributeValue<string>("address3_line2");
            }
            set {
                SetAttributeValue("address3_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public Contact_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        [AttributeLogicalName("createdbyexternalpartyname")]
        public string CreatedByExternalPartyName {
            get {
                return GetAttributeValue<string>("createdbyexternalpartyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the combined Yomi first and last names of the contact so that the full phonetic name can be displayed in views and reports.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the contact allows direct mail. If Do Not Allow is selected, the contact will be excluded from letter activities distributed in marketing campaigns.</para>
        /// <para>Display Name: Do not allow Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
            set {
                SetAttributeValue("donotpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the contact's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Aging 90</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        public decimal? Aging90 {
            get {
                return GetMoneyValue("aging90");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>Display Name: Address 1: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>the first line of the 3rd address.</para>
        /// <para>Display Name: Address3: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address3_line1")]
        public string Address3_Line1 {
            get {
                return GetAttributeValue<string>("address3_line1");
            }
            set {
                SetAttributeValue("address3_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>Display Name: Address 1: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Select the third address type.</para>
        /// <para>Display Name: Address 3: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address3_addresstypecode")]
        public Contact_Address3_AddressTypeCode? Address3_AddressTypeCode {
            get {
                return GetOptionSetValue<Contact_Address3_AddressTypeCode>("address3_addresstypecode");
            }
            set {
                SetOptionSetValue("address3_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary email address for the contact.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        public string EMailAddress1 {
            get {
                return GetAttributeValue<string>("emailaddress1");
            }
            set {
                SetAttributeValue("emailaddress1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the secondary email address for the contact.</para>
        /// <para>Display Name: Email Address 2</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        public string EMailAddress2 {
            get {
                return GetAttributeValue<string>("emailaddress2");
            }
            set {
                SetAttributeValue("emailaddress2", value);
            }
        }
        
        [RelationshipSchemaName("dg_account_contact")]
        public IEnumerable<Account> dg_account_contact {
            get {
                return GetRelatedEntities<Account>("dg_account_contact", null);
            }
            set {
                SetRelatedEntities("dg_account_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("servicecontractcontacts_association")]
        public IEnumerable<Contract> servicecontractcontacts_association {
            get {
                return GetRelatedEntities<Contract>("servicecontractcontacts_association", null);
            }
            set {
                SetRelatedEntities("servicecontractcontacts_association", null, value);
            }
        }
        
        [RelationshipSchemaName("contactquotes_association")]
        public IEnumerable<Quote> contactquotes_association {
            get {
                return GetRelatedEntities<Quote>("contactquotes_association", null);
            }
            set {
                SetRelatedEntities("contactquotes_association", null, value);
            }
        }
        
        [RelationshipSchemaName("listcontact_association")]
        public IEnumerable<List> listcontact_association {
            get {
                return GetRelatedEntities<List>("listcontact_association", null);
            }
            set {
                SetRelatedEntities("listcontact_association", null, value);
            }
        }
        
        [RelationshipSchemaName("contactleads_association")]
        public IEnumerable<Lead> contactleads_association {
            get {
                return GetRelatedEntities<Lead>("contactleads_association", null);
            }
            set {
                SetRelatedEntities("contactleads_association", null, value);
            }
        }
        
        [RelationshipSchemaName("contactorders_association")]
        public IEnumerable<SalesOrder> contactorders_association {
            get {
                return GetRelatedEntities<SalesOrder>("contactorders_association", null);
            }
            set {
                SetRelatedEntities("contactorders_association", null, value);
            }
        }
        
        [RelationshipSchemaName("contactinvoices_association")]
        public IEnumerable<Invoice> contactinvoices_association {
            get {
                return GetRelatedEntities<Invoice>("contactinvoices_association", null);
            }
            set {
                SetRelatedEntities("contactinvoices_association", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlementcontacts_association")]
        public IEnumerable<Entitlement> entitlementcontacts_association {
            get {
                return GetRelatedEntities<Entitlement>("entitlementcontacts_association", null);
            }
            set {
                SetRelatedEntities("entitlementcontacts_association", null, value);
            }
        }
        
        [AttributeLogicalName("dg_testaccount")]
        [RelationshipSchemaName("dg_account_contact_TestAccount")]
        public Account dg_account_contact_TestAccount {
            get {
                return GetRelatedEntity<Account>("dg_account_contact_TestAccount", null);
            }
            set {
                SetRelatedEntity("dg_account_contact_TestAccount", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedbyexternalparty")]
        [RelationshipSchemaName("lk_externalparty_contact_modifiedby")]
        public ExternalParty lk_externalparty_contact_modifiedby {
            get {
                return GetRelatedEntity<ExternalParty>("lk_externalparty_contact_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_contact_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_contacts")]
        public BusinessUnit business_unit_contacts {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_contacts", null);
            }
            set {
                SetRelatedEntity("business_unit_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("parentcustomerid")]
        [RelationshipSchemaName("contact_customer_contacts", EntityRole.Referencing)]
        public Contact Referencingcontact_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("contact_customer_contacts", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("contact_customer_contacts", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("createdbyexternalparty")]
        [RelationshipSchemaName("lk_externalparty_contact_createdby")]
        public ExternalParty lk_externalparty_contact_createdby {
            get {
                return GetRelatedEntity<ExternalParty>("lk_externalparty_contact_createdby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_contact_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("contact_owning_user")]
        public SystemUser contact_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("contact_owning_user", null);
            }
            set {
                SetRelatedEntity("contact_owning_user", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_contact_modifiedonbehalfby")]
        public SystemUser lk_contact_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contact_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_contact_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("originatingleadid")]
        [RelationshipSchemaName("contact_originating_lead")]
        public Lead contact_originating_lead {
            get {
                return GetRelatedEntity<Lead>("contact_originating_lead", null);
            }
            set {
                SetRelatedEntity("contact_originating_lead", null, value);
            }
        }
        
        [AttributeLogicalName("parentcustomerid")]
        [RelationshipSchemaName("contact_customer_accounts")]
        public Account contact_customer_accounts {
            get {
                return GetRelatedEntity<Account>("contact_customer_accounts", null);
            }
            set {
                SetRelatedEntity("contact_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_contact")]
        public SLA sla_contact {
            get {
                return GetRelatedEntity<SLA>("sla_contact", null);
            }
            set {
                SetRelatedEntity("sla_contact", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_contactbase_modifiedby")]
        public SystemUser lk_contactbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contactbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_contactbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("preferredsystemuserid")]
        [RelationshipSchemaName("system_user_contacts")]
        public SystemUser system_user_contacts {
            get {
                return GetRelatedEntity<SystemUser>("system_user_contacts", null);
            }
            set {
                SetRelatedEntity("system_user_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_contact")]
        public SLA manualsla_contact {
            get {
                return GetRelatedEntity<SLA>("manualsla_contact", null);
            }
            set {
                SetRelatedEntity("manualsla_contact", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_contacts")]
        public Team team_contacts {
            get {
                return GetRelatedEntity<Team>("team_contacts", null);
            }
            set {
                SetRelatedEntity("team_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_contact_createdonbehalfby")]
        public SystemUser lk_contact_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contact_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_contact_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_contactbase_createdby")]
        public SystemUser lk_contactbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contactbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_contactbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("contact_master_contact", EntityRole.Referencing)]
        public Contact Referencingcontact_master_contact {
            get {
                return GetRelatedEntity<Contact>("contact_master_contact", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("contact_master_contact", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_contact")]
        public TransactionCurrency transactioncurrency_contact {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_contact", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Letters")]
        public IEnumerable<Letter> Contact_Letters {
            get {
                return GetRelatedEntities<Letter>("Contact_Letters", null);
            }
            set {
                SetRelatedEntities("Contact_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Faxes")]
        public IEnumerable<Fax> Contact_Faxes {
            get {
                return GetRelatedEntities<Fax>("Contact_Faxes", null);
            }
            set {
                SetRelatedEntities("Contact_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_SyncErrors")]
        public IEnumerable<SyncError> Contact_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Contact_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Contact_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_customer_contacts")]
        public IEnumerable<Opportunity> opportunity_customer_contacts {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_customer_contacts", null);
            }
            set {
                SetRelatedEntities("opportunity_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_entitlement_Customer")]
        public IEnumerable<Entitlement> contact_entitlement_Customer {
            get {
                return GetRelatedEntities<Entitlement>("contact_entitlement_Customer", null);
            }
            set {
                SetRelatedEntities("contact_entitlement_Customer", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_customer_contacts", EntityRole.Referenced)]
        public IEnumerable<Contact> Referencedcontact_customer_contacts {
            get {
                return GetRelatedEntities<Contact>("contact_customer_contacts", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("contact_customer_contacts", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Phonecalls")]
        public IEnumerable<PhoneCall> Contact_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Contact_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Contact_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_parent_contact")]
        public IEnumerable<Opportunity> opportunity_parent_contact {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_parent_contact", null);
            }
            set {
                SetRelatedEntities("opportunity_parent_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_connections1")]
        public IEnumerable<Connection> contact_connections1 {
            get {
                return GetRelatedEntities<Connection>("contact_connections1", null);
            }
            set {
                SetRelatedEntities("contact_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_as_primary_contact")]
        public IEnumerable<Incident> contact_as_primary_contact {
            get {
                return GetRelatedEntities<Incident>("contact_as_primary_contact", null);
            }
            set {
                SetRelatedEntities("contact_as_primary_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Appointments")]
        public IEnumerable<Appointment> Contact_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Contact_Appointments", null);
            }
            set {
                SetRelatedEntities("Contact_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Emails")]
        public IEnumerable<Email> Contact_Emails {
            get {
                return GetRelatedEntities<Email>("Contact_Emails", null);
            }
            set {
                SetRelatedEntities("Contact_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_customer_contacts")]
        public IEnumerable<Invoice> invoice_customer_contacts {
            get {
                return GetRelatedEntities<Invoice>("invoice_customer_contacts", null);
            }
            set {
                SetRelatedEntities("invoice_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("socialactivity_postauthor_contacts")]
        public IEnumerable<SocialActivity> socialactivity_postauthor_contacts {
            get {
                return GetRelatedEntities<SocialActivity>("socialactivity_postauthor_contacts", null);
            }
            set {
                SetRelatedEntities("socialactivity_postauthor_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_customer_contacts")]
        public IEnumerable<Incident> incident_customer_contacts {
            get {
                return GetRelatedEntities<Incident>("incident_customer_contacts", null);
            }
            set {
                SetRelatedEntities("incident_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_billingcustomer_contacts")]
        public IEnumerable<Contract> contract_billingcustomer_contacts {
            get {
                return GetRelatedEntities<Contract>("contract_billingcustomer_contacts", null);
            }
            set {
                SetRelatedEntities("contract_billingcustomer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("account_primary_contact")]
        public IEnumerable<Account> account_primary_contact {
            get {
                return GetRelatedEntities<Account>("account_primary_contact", null);
            }
            set {
                SetRelatedEntities("account_primary_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_ActivityPointers")]
        public IEnumerable<ActivityPointer> Contact_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Contact_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Contact_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("quote_customer_contacts")]
        public IEnumerable<Quote> quote_customer_contacts {
            get {
                return GetRelatedEntities<Quote>("quote_customer_contacts", null);
            }
            set {
                SetRelatedEntities("quote_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_SocialActivities")]
        public IEnumerable<SocialActivity> Contact_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("Contact_SocialActivities", null);
            }
            set {
                SetRelatedEntities("Contact_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Contact_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Contact_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Contact_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_activity_parties")]
        public IEnumerable<ActivityParty> contact_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("contact_activity_parties", null);
            }
            set {
                SetRelatedEntities("contact_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_connections2")]
        public IEnumerable<Connection> contact_connections2 {
            get {
                return GetRelatedEntities<Connection>("contact_connections2", null);
            }
            set {
                SetRelatedEntities("contact_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_as_responsible_contact")]
        public IEnumerable<Incident> contact_as_responsible_contact {
            get {
                return GetRelatedEntities<Incident>("contact_as_responsible_contact", null);
            }
            set {
                SetRelatedEntities("contact_as_responsible_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_master_contact", EntityRole.Referenced)]
        public IEnumerable<Contact> Referencedcontact_master_contact {
            get {
                return GetRelatedEntities<Contact>("contact_master_contact", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("contact_master_contact", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("Contact_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Contact_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Contact_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Contact_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_parent_contact")]
        public IEnumerable<Lead> lead_parent_contact {
            get {
                return GetRelatedEntities<Lead>("lead_parent_contact", null);
            }
            set {
                SetRelatedEntities("lead_parent_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Tasks")]
        public IEnumerable<Task> Contact_Tasks {
            get {
                return GetRelatedEntities<Task>("Contact_Tasks", null);
            }
            set {
                SetRelatedEntities("Contact_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_customer_contacts")]
        public IEnumerable<Lead> lead_customer_contacts {
            get {
                return GetRelatedEntities<Lead>("lead_customer_contacts", null);
            }
            set {
                SetRelatedEntities("lead_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("Contact_Email_EmailSender")]
        public IEnumerable<Email> Contact_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("Contact_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("Contact_Email_EmailSender", null, value);
            }
        }
        
        [RelationshipSchemaName("order_customer_contacts")]
        public IEnumerable<SalesOrder> order_customer_contacts {
            get {
                return GetRelatedEntities<SalesOrder>("order_customer_contacts", null);
            }
            set {
                SetRelatedEntities("order_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("socialactivity_postauthoraccount_contacts")]
        public IEnumerable<SocialActivity> socialactivity_postauthoraccount_contacts {
            get {
                return GetRelatedEntities<SocialActivity>("socialactivity_postauthoraccount_contacts", null);
            }
            set {
                SetRelatedEntities("socialactivity_postauthoraccount_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_customer_contacts")]
        public IEnumerable<Contract> contract_customer_contacts {
            get {
                return GetRelatedEntities<Contract>("contract_customer_contacts", null);
            }
            set {
                SetRelatedEntities("contract_customer_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_bookableresource_ContactId")]
        public IEnumerable<BookableResource> contact_bookableresource_ContactId {
            get {
                return GetRelatedEntities<BookableResource>("contact_bookableresource_ContactId", null);
            }
            set {
                SetRelatedEntities("contact_bookableresource_ContactId", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_entitlement_ContactId")]
        public IEnumerable<Entitlement> contact_entitlement_ContactId {
            get {
                return GetRelatedEntities<Entitlement>("contact_entitlement_ContactId", null);
            }
            set {
                SetRelatedEntities("contact_entitlement_ContactId", null, value);
            }
        }
        
        public static Contact Retrieve(IOrganizationService service, Guid id, params Expression<Func<Contact,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("contactinvoices")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ContactInvoices : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "contactinvoices";
        
        public const int EntityTypeCode = 17;
        
        public ContactInvoices() : 
                base(EntityLogicalName) {
        }
        
        public ContactInvoices(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("contactinvoiceid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactinvoiceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the invoices for the contact.</para>
        /// </summary>
        [AttributeLogicalName("contactinvoiceid")]
        public Guid? ContactInvoiceId {
            get {
                return GetAttributeValue<Guid?>("contactinvoiceid");
            }
            set {
                SetId("contactinvoiceid", value);
            }
        }
        
        [AttributeLogicalName("invoiceid")]
        public Guid? InvoiceId {
            get {
                return GetAttributeValue<Guid?>("invoiceid");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static ContactInvoices Retrieve(IOrganizationService service, Guid id, params Expression<Func<ContactInvoices,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("contactleads")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ContactLeads : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "contactleads";
        
        public const int EntityTypeCode = 22;
        
        public ContactLeads() : 
                base(EntityLogicalName) {
        }
        
        public ContactLeads(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("contactleadid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the leads for the contact.</para>
        /// </summary>
        [AttributeLogicalName("contactleadid")]
        public Guid? ContactLeadId {
            get {
                return GetAttributeValue<Guid?>("contactleadid");
            }
            set {
                SetId("contactleadid", value);
            }
        }
        
        [AttributeLogicalName("leadid")]
        public Guid? LeadId {
            get {
                return GetAttributeValue<Guid?>("leadid");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static ContactLeads Retrieve(IOrganizationService service, Guid id, params Expression<Func<ContactLeads,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("contactorders")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ContactOrders : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "contactorders";
        
        public const int EntityTypeCode = 19;
        
        public ContactOrders() : 
                base(EntityLogicalName) {
        }
        
        public ContactOrders(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("contactorderid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactorderid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the orders for the contact.</para>
        /// </summary>
        [AttributeLogicalName("contactorderid")]
        public Guid? ContactOrderId {
            get {
                return GetAttributeValue<Guid?>("contactorderid");
            }
            set {
                SetId("contactorderid", value);
            }
        }
        
        [AttributeLogicalName("salesorderid")]
        public Guid? SalesOrderId {
            get {
                return GetAttributeValue<Guid?>("salesorderid");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static ContactOrders Retrieve(IOrganizationService service, Guid id, params Expression<Func<ContactOrders,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("contactquotes")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ContactQuotes : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "contactquotes";
        
        public const int EntityTypeCode = 18;
        
        public ContactQuotes() : 
                base(EntityLogicalName) {
        }
        
        public ContactQuotes(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("contactquoteid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contactquoteid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the quotes for the contact.</para>
        /// </summary>
        [AttributeLogicalName("contactquoteid")]
        public Guid? ContactQuoteId {
            get {
                return GetAttributeValue<Guid?>("contactquoteid");
            }
            set {
                SetId("contactquoteid", value);
            }
        }
        
        [AttributeLogicalName("quoteid")]
        public Guid? QuoteId {
            get {
                return GetAttributeValue<Guid?>("quoteid");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static ContactQuotes Retrieve(IOrganizationService service, Guid id, params Expression<Func<ContactQuotes,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Agreement to provide customer service during a specified amount of time or number of cases.</para>
    /// <para>Display Name: Contract</para>
    /// </summary>
    [EntityLogicalName("contract")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Contract : ExtendedEntity<ContractState, Contract_StatusCode> {
        
        public const string EntityLogicalName = "contract";
        
        public const int EntityTypeCode = 1010;
        
        public Contract() : 
                base(EntityLogicalName) {
        }
        
        public Contract(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("contractid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("contractid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contract.</para>
        /// <para>Display Name: Contract</para>
        /// </summary>
        [AttributeLogicalName("contractid")]
        public Guid? ContractId {
            get {
                return GetAttributeValue<Guid?>("contractid");
            }
            set {
                SetId("contractid", value);
            }
        }
        
        [AttributeLogicalName("billingcontactidname")]
        public string BillingContactIdName {
            get {
                return GetAttributeValue<string>("billingcontactidname");
            }
        }
        
        [AttributeLogicalName("contracttemplateidname")]
        public string ContractTemplateIdName {
            get {
                return GetAttributeValue<string>("contracttemplateidname");
            }
        }
        
        [AttributeLogicalName("serviceaddressname")]
        public string ServiceAddressName {
            get {
                return GetAttributeValue<string>("serviceaddressname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total service charge for the contract, before any discounts are credited. This is calculated as the sum of values in the Total Price field for each existing contract line related to the contract.</para>
        /// <para>Display Name: Total Price</para>
        /// </summary>
        [AttributeLogicalName("totalprice")]
        public decimal? TotalPrice {
            get {
                return GetMoneyValue("totalprice");
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Select the contract's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Contract_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Contract_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Select the billing schedule of the contract to indicate how often the customer should be invoiced.</para>
        /// <para>Display Name: Billing Frequency</para>
        /// </summary>
        [AttributeLogicalName("billingfrequencycode")]
        public Contract_BillingFrequencyCode? BillingFrequencyCode {
            get {
                return GetOptionSetValue<Contract_BillingFrequencyCode>("billingfrequencycode");
            }
            set {
                SetOptionSetValue("billingfrequencycode", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the contract.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Name of the address that is to be billed for the contract.</para>
        /// </summary>
        [AttributeLogicalName("billtoaddressname")]
        public string BillToAddressName {
            get {
                return GetAttributeValue<string>("billtoaddressname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the contract.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Price field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Price (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalprice_base")]
        public decimal? TotalPrice_Base {
            get {
                return GetMoneyValue("totalprice_base");
            }
        }
        
        [AttributeLogicalName("billingcustomeridname")]
        public string BillingCustomerIdName {
            get {
                return GetAttributeValue<string>("billingcustomeridname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the contract is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the contract.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Days of the week and times during which customer service support is available for the duration of the contract.</para>
        /// <para>Display Name: Support Calendar</para>
        /// </summary>
        [AttributeLogicalName("effectivitycalendar")]
        public string EffectivityCalendar {
            get {
                return GetAttributeValue<string>("effectivitycalendar");
            }
            set {
                SetAttributeValue("effectivitycalendar", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Customer Type</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType {
            get {
                return GetAttributeValue<string>("customeridtype");
            }
            set {
                SetAttributeValue("customeridtype", value);
            }
        }
        
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName {
            get {
                return GetAttributeValue<string>("customeridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Bill To Customer Type</para>
        /// </summary>
        [AttributeLogicalName("billingcustomeridtype")]
        public string BillingCustomerIdType {
            get {
                return GetAttributeValue<string>("billingcustomeridtype");
            }
            set {
                SetAttributeValue("billingcustomeridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total discount applied to the contract's service charges, calculated as the sum of values in the Discount fields for each existing contract line related to the contract.</para>
        /// <para>Display Name: Total Discount</para>
        /// </summary>
        [AttributeLogicalName("totaldiscount")]
        public decimal? TotalDiscount {
            get {
                return GetMoneyValue("totaldiscount");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the abbreviation of the contract template selected when the contract is created.</para>
        /// <para>Display Name: Template Abbreviation</para>
        /// </summary>
        [AttributeLogicalName("contracttemplateabbreviation")]
        public string ContractTemplateAbbreviation {
            get {
                return GetAttributeValue<string>("contracttemplateabbreviation");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the number for the contract for customer reference and searching capabilities. You cannot modify this number.</para>
        /// <para>Display Name: Contract ID</para>
        /// </summary>
        [AttributeLogicalName("contractnumber")]
        public string ContractNumber {
            get {
                return GetAttributeValue<string>("contractnumber");
            }
            set {
                SetAttributeValue("contractnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the start date for the contract's billing period to indicate the period for which the customer must pay for a service. This defaults to the same date that is selected in the Contract Start Date field.</para>
        /// <para>Display Name: Billing Start Date</para>
        /// </summary>
        [AttributeLogicalName("billingstarton")]
        public DateTime? BillingStartOn {
            get {
                return GetAttributeValue<DateTime?>("billingstarton");
            }
            set {
                SetAttributeValue("billingstarton", value);
            }
        }
        
        /// <summary>
        /// <para>Choose which address to send the invoice to.</para>
        /// <para>Display Name: Bill To Address</para>
        /// </summary>
        [AttributeLogicalName("billtoaddress")]
        public EntityReference BillToAddress {
            get {
                return GetAttributeValue<EntityReference>("billtoaddress");
            }
            set {
                SetAttributeValue("billtoaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the contract becomes active.</para>
        /// <para>Display Name: Contract Start Date</para>
        /// </summary>
        [AttributeLogicalName("activeon")]
        public DateTime? ActiveOn {
            get {
                return GetAttributeValue<DateTime?>("activeon");
            }
            set {
                SetAttributeValue("activeon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account to which the contract is to be billed.</para>
        /// <para>Display Name: Billing Account</para>
        /// </summary>
        [AttributeLogicalName("billingaccountid")]
        public EntityReference BillingAccountId {
            get {
                return GetAttributeValue<EntityReference>("billingaccountid");
            }
        }
        
        /// <summary>
        /// <para>Choose the address for the customer account or contact where the services are provided.</para>
        /// <para>Display Name: Contract Address</para>
        /// </summary>
        [AttributeLogicalName("serviceaddress")]
        public EntityReference ServiceAddress {
            get {
                return GetAttributeValue<EntityReference>("serviceaddress");
            }
            set {
                SetAttributeValue("serviceaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Discount field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Discount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaldiscount_base")]
        public decimal? TotalDiscount_Base {
            get {
                return GetMoneyValue("totaldiscount_base");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact to whom the contract is to be billed.</para>
        /// <para>Display Name: Billing Contact</para>
        /// </summary>
        [AttributeLogicalName("billingcontactid")]
        public EntityReference BillingContactId {
            get {
                return GetAttributeValue<EntityReference>("billingcontactid");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the contract is in draft, invoiced, active, on hold, canceled, or expired. You can edit only the contracts that are in draft status.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ContractState? StateCode {
            get {
                return GetOptionSetValue<ContractState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the contract expires.</para>
        /// <para>Display Name: Contract End Date</para>
        /// </summary>
        [AttributeLogicalName("expireson")]
        public DateTime? ExpiresOn {
            get {
                return GetAttributeValue<DateTime?>("expireson");
            }
            set {
                SetAttributeValue("expireson", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the end date for the contract's billing period to indicate the period for which the customer must pay for a service.</para>
        /// <para>Display Name: Billing End Date</para>
        /// </summary>
        [AttributeLogicalName("billingendon")]
        public DateTime? BillingEndOn {
            get {
                return GetAttributeValue<DateTime?>("billingendon");
            }
            set {
                SetAttributeValue("billingendon", value);
            }
        }
        
        [AttributeLogicalName("billingaccountidname")]
        public string BillingAccountIdName {
            get {
                return GetAttributeValue<string>("billingaccountidname");
            }
        }
        
        /// <summary>
        /// <para>Select the level of service that should be provided for the contract based on your company's definition of bronze, silver, or gold.</para>
        /// <para>Display Name: Service Level</para>
        /// </summary>
        [AttributeLogicalName("contractservicelevelcode")]
        public Contract_ContractServiceLevelCode? ContractServiceLevelCode {
            get {
                return GetOptionSetValue<Contract_ContractServiceLevelCode>("contractservicelevelcode");
            }
            set {
                SetOptionSetValue("contractservicelevelcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information about the contract, such as the products or services provided to the customer.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("contractlanguage")]
        public string ContractLanguage {
            get {
                return GetAttributeValue<string>("contractlanguage");
            }
            set {
                SetAttributeValue("contractlanguage", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to which the contract should be billed to provide a quick link to address and other customer details.</para>
        /// <para>Display Name: Bill To Customer</para>
        /// </summary>
        [AttributeLogicalName("billingcustomerid")]
        public EntityReference BillingCustomerId {
            get {
                return GetAttributeValue<EntityReference>("billingcustomerid");
            }
            set {
                SetAttributeValue("billingcustomerid", value);
            }
        }
        
        /// <summary>
        /// <para>Type of allotment that the contract supports.</para>
        /// <para>Display Name: Allotment Type</para>
        /// </summary>
        [AttributeLogicalName("allotmenttypecode")]
        public Contract_AllotmentTypeCode? AllotmentTypeCode {
            get {
                return GetOptionSetValue<Contract_AllotmentTypeCode>("allotmenttypecode");
            }
            set {
                SetOptionSetValue("allotmenttypecode", value);
            }
        }
        
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total charge to the customer for the service contract, calculated as the sum of values in the Net field for each existing contract line related to the contract.</para>
        /// <para>Display Name: Net Price</para>
        /// </summary>
        [AttributeLogicalName("netprice")]
        public decimal? NetPrice {
            get {
                return GetMoneyValue("netprice");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to provide a quick link to additional customer details, such as address, phone number, activities, and orders.</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the discounts entered on contract lines for this contract should be entered as a percentage or a fixed dollar value.</para>
        /// <para>Display Name: Discount</para>
        /// </summary>
        [AttributeLogicalName("usediscountaspercentage")]
        public bool? UseDiscountAsPercentage {
            get {
                return GetAttributeValue<bool?>("usediscountaspercentage");
            }
            set {
                SetAttributeValue("usediscountaspercentage", value);
            }
        }
        
        /// <summary>
        /// <para>Type a title or name for the contract that indicates the purpose of the contract.</para>
        /// <para>Display Name: Contract Name</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact specified for the contract.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Shows the Net Price field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Net Price (Base)</para>
        /// </summary>
        [AttributeLogicalName("netprice_base")]
        public decimal? NetPrice_Base {
            get {
                return GetMoneyValue("netprice_base");
            }
        }
        
        [AttributeLogicalName("originatingcontractname")]
        public string OriginatingContractName {
            get {
                return GetAttributeValue<string>("originatingcontractname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the contract was canceled.</para>
        /// <para>Display Name: Cancellation Date</para>
        /// </summary>
        [AttributeLogicalName("cancelon")]
        public DateTime? CancelOn {
            get {
                return GetAttributeValue<DateTime?>("cancelon");
            }
        }
        
        /// <summary>
        /// <para>Choose the contract template that should be used to determine the terms of the contract, such as allotment type, available hours, and billing frequency.</para>
        /// <para>Display Name: Contract Template</para>
        /// </summary>
        [AttributeLogicalName("contracttemplateid")]
        public EntityReference ContractTemplateId {
            get {
                return GetAttributeValue<EntityReference>("contracttemplateid");
            }
            set {
                SetAttributeValue("contracttemplateid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Choose the original contract that this contract was created from. This information is used to track renewal history.</para>
        /// <para>Display Name: Originating Contract</para>
        /// </summary>
        [AttributeLogicalName("originatingcontract")]
        public EntityReference OriginatingContract {
            get {
                return GetAttributeValue<EntityReference>("originatingcontract");
            }
            set {
                SetAttributeValue("originatingcontract", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the contract.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Shows for the duration of the contract, in days, based on the contract start and end dates.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("duration")]
        public int? Duration {
            get {
                return GetAttributeValue<int?>("duration");
            }
        }
        
        [RelationshipSchemaName("servicecontractcontacts_association")]
        public IEnumerable<Contact> servicecontractcontacts_association {
            get {
                return GetRelatedEntities<Contact>("servicecontractcontacts_association", null);
            }
            set {
                SetRelatedEntities("servicecontractcontacts_association", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_contractbase_createdby")]
        public SystemUser lk_contractbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contractbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_contractbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("billingcustomerid")]
        [RelationshipSchemaName("contract_billingcustomer_accounts")]
        public Account contract_billingcustomer_accounts {
            get {
                return GetRelatedEntity<Account>("contract_billingcustomer_accounts", null);
            }
            set {
                SetRelatedEntity("contract_billingcustomer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_contract_createdonbehalfby")]
        public SystemUser lk_contract_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contract_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_contract_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("billingcustomerid")]
        [RelationshipSchemaName("contract_billingcustomer_contacts")]
        public Contact contract_billingcustomer_contacts {
            get {
                return GetRelatedEntity<Contact>("contract_billingcustomer_contacts", null);
            }
            set {
                SetRelatedEntity("contract_billingcustomer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("contract_customer_accounts")]
        public Account contract_customer_accounts {
            get {
                return GetRelatedEntity<Account>("contract_customer_accounts", null);
            }
            set {
                SetRelatedEntity("contract_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_service_contracts")]
        public Team team_service_contracts {
            get {
                return GetRelatedEntity<Team>("team_service_contracts", null);
            }
            set {
                SetRelatedEntity("team_service_contracts", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("contract_customer_contacts")]
        public Contact contract_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("contract_customer_contacts", null);
            }
            set {
                SetRelatedEntity("contract_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_service_contracts")]
        public SystemUser system_user_service_contracts {
            get {
                return GetRelatedEntity<SystemUser>("system_user_service_contracts", null);
            }
            set {
                SetRelatedEntity("system_user_service_contracts", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_service_contracts")]
        public BusinessUnit business_unit_service_contracts {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_service_contracts", null);
            }
            set {
                SetRelatedEntity("business_unit_service_contracts", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_contractbase_modifiedby")]
        public SystemUser lk_contractbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contractbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_contractbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("originatingcontract")]
        [RelationshipSchemaName("contract_originating_contract", EntityRole.Referencing)]
        public Contract Referencingcontract_originating_contract {
            get {
                return GetRelatedEntity<Contract>("contract_originating_contract", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("contract_originating_contract", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_contract_modifiedonbehalfby")]
        public SystemUser lk_contract_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_contract_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_contract_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_contract")]
        public TransactionCurrency transactioncurrency_contract {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_contract", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_contract", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_Phonecalls")]
        public IEnumerable<PhoneCall> Contract_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Contract_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Contract_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_activity_parties")]
        public IEnumerable<ActivityParty> contract_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("contract_activity_parties", null);
            }
            set {
                SetRelatedEntities("contract_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_SocialActivities")]
        public IEnumerable<SocialActivity> Contract_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("Contract_SocialActivities", null);
            }
            set {
                SetRelatedEntities("Contract_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_originating_contract", EntityRole.Referenced)]
        public IEnumerable<Contract> Referencedcontract_originating_contract {
            get {
                return GetRelatedEntities<Contract>("contract_originating_contract", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("contract_originating_contract", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("Contract_Emails")]
        public IEnumerable<Email> Contract_Emails {
            get {
                return GetRelatedEntities<Email>("Contract_Emails", null);
            }
            set {
                SetRelatedEntities("Contract_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_cases")]
        public IEnumerable<Incident> contract_cases {
            get {
                return GetRelatedEntities<Incident>("contract_cases", null);
            }
            set {
                SetRelatedEntities("contract_cases", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_SyncErrors")]
        public IEnumerable<SyncError> Contract_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Contract_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Contract_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_connections2")]
        public IEnumerable<Connection> contract_connections2 {
            get {
                return GetRelatedEntities<Connection>("contract_connections2", null);
            }
            set {
                SetRelatedEntities("contract_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Contract_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Contract_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Contract_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Contract_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Contract_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Contract_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_ActivityPointers")]
        public IEnumerable<ActivityPointer> Contract_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Contract_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Contract_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_Appointments")]
        public IEnumerable<Appointment> Contract_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Contract_Appointments", null);
            }
            set {
                SetRelatedEntities("Contract_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_Faxes")]
        public IEnumerable<Fax> Contract_Faxes {
            get {
                return GetRelatedEntities<Fax>("Contract_Faxes", null);
            }
            set {
                SetRelatedEntities("Contract_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("contract_connections1")]
        public IEnumerable<Connection> contract_connections1 {
            get {
                return GetRelatedEntities<Connection>("contract_connections1", null);
            }
            set {
                SetRelatedEntities("contract_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_Letters")]
        public IEnumerable<Letter> Contract_Letters {
            get {
                return GetRelatedEntities<Letter>("Contract_Letters", null);
            }
            set {
                SetRelatedEntities("Contract_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("Contract_Tasks")]
        public IEnumerable<Task> Contract_Tasks {
            get {
                return GetRelatedEntities<Task>("Contract_Tasks", null);
            }
            set {
                SetRelatedEntities("Contract_Tasks", null, value);
            }
        }
        
        public static Contract Retrieve(IOrganizationService service, Guid id, params Expression<Func<Contract,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Defines the individual conditions required for creating records automatically.</para>
    /// <para>Display Name: Record Creation and Update Rule Item</para>
    /// </summary>
    [EntityLogicalName("convertruleitem")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ConvertRuleItem : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "convertruleitem";
        
        public const int EntityTypeCode = 9301;
        
        public ConvertRuleItem() : 
                base(EntityLogicalName) {
        }
        
        public ConvertRuleItem(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("convertruleitemid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("convertruleitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Routing Rule</para>
        /// </summary>
        [AttributeLogicalName("convertruleitemid")]
        public Guid? ConvertRuleItemId {
            get {
                return GetAttributeValue<Guid?>("convertruleitemid");
            }
            set {
                SetId("convertruleitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Set properties xml for convert rule item</para>
        /// <para>Display Name: SetPropertiesXml</para>
        /// </summary>
        [AttributeLogicalName("propertiesxml")]
        public string PropertiesXml {
            get {
                return GetAttributeValue<string>("propertiesxml");
            }
            set {
                SetAttributeValue("propertiesxml", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Workflow associated with the Convert Rule Item.</para>
        /// <para>Display Name: Workflow ID</para>
        /// </summary>
        [AttributeLogicalName("workflowid")]
        public EntityReference WorkflowId {
            get {
                return GetAttributeValue<EntityReference>("workflowid");
            }
            set {
                SetAttributeValue("workflowid", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Unique Id</para>
        /// </summary>
        [AttributeLogicalName("convertruleitemidunique")]
        public Guid? ConvertRuleItemIdUnique {
            get {
                return GetAttributeValue<Guid?>("convertruleitemidunique");
            }
        }
        
        /// <summary>
        /// <para>Choose the queue that the rule is assigned to.</para>
        /// <para>Display Name: Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        public EntityReference QueueId {
            get {
                return GetAttributeValue<EntityReference>("queueid");
            }
            set {
                SetAttributeValue("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the queue with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Type a name or title of the rule item that is used for automatic record creation and update.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Managed</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Version number of the Covert Rule Item.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the convert rule item owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the convert rule item</para>
        /// <para>Display Name: Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("sequencenumber")]
        public int? SequenceNumber {
            get {
                return GetAttributeValue<int?>("sequencenumber");
            }
            set {
                SetAttributeValue("sequencenumber", value);
            }
        }
        
        [AttributeLogicalName("workflowidname")]
        public string WorkflowIdName {
            get {
                return GetAttributeValue<string>("workflowidname");
            }
            set {
                SetAttributeValue("workflowidname", value);
            }
        }
        
        /// <summary>
        /// <para>Condition for convert rule item</para>
        /// <para>Display Name: ConditionXml</para>
        /// </summary>
        [AttributeLogicalName("conditionxml")]
        public string ConditionXml {
            get {
                return GetAttributeValue<string>("conditionxml");
            }
            set {
                SetAttributeValue("conditionxml", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("convertruleidname")]
        public string ConvertRuleIdName {
            get {
                return GetAttributeValue<string>("convertruleidname");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the convert rule associated with the convert rule item.</para>
        /// <para>Display Name: Show the conversion rule associated to this rule item</para>
        /// </summary>
        [AttributeLogicalName("convertruleid")]
        public EntityReference ConvertRuleId {
            get {
                return GetAttributeValue<EntityReference>("convertruleid");
            }
            set {
                SetAttributeValue("convertruleid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the Convert Rule Item.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("queueidname")]
        public string QueueIdName {
            get {
                return GetAttributeValue<string>("queueidname");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the rule item for automatic record creation.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Identifies the step of the associated workflow</para>
        /// <para>Display Name: Condition</para>
        /// </summary>
        [AttributeLogicalName("conditionid")]
        public EntityReference ConditionId {
            get {
                return GetAttributeValue<EntityReference>("conditionid");
            }
            set {
                SetAttributeValue("conditionid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_convertruleitem")]
        public TransactionCurrency transactioncurrency_convertruleitem {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_convertruleitem", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_convertruleitem", null, value);
            }
        }
        
        [AttributeLogicalName("workflowid")]
        [RelationshipSchemaName("convertruleitembase_workflowid")]
        public Workflow convertruleitembase_workflowid {
            get {
                return GetRelatedEntity<Workflow>("convertruleitembase_workflowid", null);
            }
            set {
                SetRelatedEntity("convertruleitembase_workflowid", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_convertruleitembase_modifiedby")]
        public SystemUser lk_convertruleitembase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_convertruleitembase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_convertruleitembase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_convertruleitembase_modifiedonbehalfby")]
        public SystemUser lk_convertruleitembase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_convertruleitembase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_convertruleitembase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_convertruleitembase_createdby")]
        public SystemUser lk_convertruleitembase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_convertruleitembase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_convertruleitembase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_convertruleitembase_createdonbehalfby")]
        public SystemUser lk_convertruleitembase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_convertruleitembase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_convertruleitembase_createdonbehalfby", null, value);
            }
        }
        
        public static ConvertRuleItem Retrieve(IOrganizationService service, Guid id, params Expression<Func<ConvertRuleItem,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("dg_account_account")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_account_account : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "dg_account_account";
        
        public const int EntityTypeCode = 10018;
        
        public dg_account_account() : 
                base(EntityLogicalName) {
        }
        
        public dg_account_account(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("dg_account_accountid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_account_accountid", value);
            }
        }
        
        [AttributeLogicalName("dg_account_accountid")]
        public Guid? dg_account_accountId {
            get {
                return GetAttributeValue<Guid?>("dg_account_accountid");
            }
            set {
                SetId("dg_account_accountid", value);
            }
        }
        
        [AttributeLogicalName("accountidtwo")]
        public Guid? accountidTwo {
            get {
                return GetAttributeValue<Guid?>("accountidtwo");
            }
        }
        
        [AttributeLogicalName("accountidone")]
        public Guid? accountidOne {
            get {
                return GetAttributeValue<Guid?>("accountidone");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static dg_account_account Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_account_account,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("dg_account_contact")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_account_contact : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "dg_account_contact";
        
        public const int EntityTypeCode = 10005;
        
        public dg_account_contact() : 
                base(EntityLogicalName) {
        }
        
        public dg_account_contact(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("dg_account_contactid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_account_contactid", value);
            }
        }
        
        [AttributeLogicalName("dg_account_contactid")]
        public Guid? dg_account_contactId {
            get {
                return GetAttributeValue<Guid?>("dg_account_contactid");
            }
            set {
                SetId("dg_account_contactid", value);
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? contactid {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("accountid")]
        public Guid? accountid {
            get {
                return GetAttributeValue<Guid?>("accountid");
            }
        }
        
        public static dg_account_contact Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_account_contact,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Bus</para>
    /// </summary>
    [EntityLogicalName("dg_bus")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_bus : ExtendedEntity<dg_busState, dg_bus_statuscode> {
        
        public const string EntityLogicalName = "dg_bus";
        
        public const int EntityTypeCode = 10016;
        
        public dg_bus() : 
                base(EntityLogicalName) {
        }
        
        public dg_bus(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_busid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_busid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Bus</para>
        /// </summary>
        [AttributeLogicalName("dg_busid")]
        public Guid? dg_busId {
            get {
                return GetAttributeValue<Guid?>("dg_busid");
            }
            set {
                SetId("dg_busid", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the MaxAllowance in base currency.</para>
        /// <para>Display Name: MaxAllowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_maxallowance_base")]
        public decimal? dg_maxallowance_Base {
            get {
                return GetMoneyValue("dg_maxallowance_base");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Bus</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_bus_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_bus_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>dg_AvgAllowance (CountAverageDescription)</para>
        /// <para>Display Name: dg_AvgAllowance (CountAverage)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_count")]
        public int? dg_AvgAllowance_Count {
            get {
                return GetAttributeValue<int?>("dg_avgallowance_count");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Value of the AvgAllowance in base currency.</para>
        /// <para>Display Name: AvgAllowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_base")]
        public decimal? dg_avgallowance_Base {
            get {
                return GetMoneyValue("dg_avgallowance_base");
            }
        }
        
        [AttributeLogicalName("dg_drivername")]
        public string dg_DriverName {
            get {
                return GetAttributeValue<string>("dg_drivername");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>dg_AvgAllowance (SumAverageDescription)</para>
        /// <para>Display Name: dg_AvgAllowance (SumAverage)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_sum")]
        public decimal? dg_AvgAllowance_Sum {
            get {
                return GetMoneyValue("dg_avgallowance_sum");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateTimeRollUp</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimerollup")]
        public DateTime? dg_DateTimeRollUp {
            get {
                return GetAttributeValue<DateTime?>("dg_datetimerollup");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field Total allowance.</para>
        /// <para>Display Name: Total allowance (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_totalallowance_state")]
        public int? dg_Totalallowance_State {
            get {
                return GetAttributeValue<int?>("dg_totalallowance_state");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the entity.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: TrimLeft</para>
        /// </summary>
        [AttributeLogicalName("dg_trimleft")]
        public string dg_TrimLeft {
            get {
                return GetAttributeValue<string>("dg_trimleft");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field MinAllowance.</para>
        /// <para>Display Name: MinAllowance (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_minallowance_state")]
        public int? dg_MinAllowance_State {
            get {
                return GetAttributeValue<int?>("dg_minallowance_state");
            }
        }
        
        /// <summary>
        /// <para>Display Name: PicklistUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_picklistudregnet")]
        public dg_bus_dg_PicklistUdregnet? dg_PicklistUdregnet {
            get {
                return GetOptionSetValue<dg_bus_dg_PicklistUdregnet>("dg_picklistudregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: EndnuUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_endnuudregnet")]
        public decimal? dg_EndnuUdregnet {
            get {
                return GetMoneyValue("dg_endnuudregnet");
            }
        }
        
        /// <summary>
        /// <para>Value of the asdas in base currency.</para>
        /// <para>Display Name: asdas (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_asdas_base")]
        public decimal? dg_asdas_Base {
            get {
                return GetMoneyValue("dg_asdas_base");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field MaxAllowance.</para>
        /// <para>Display Name: MaxAllowance (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_maxallowance_date")]
        public DateTime? dg_MaxAllowance_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_maxallowance_date");
            }
        }
        
        /// <summary>
        /// <para>Value of the Ticket price in base currency.</para>
        /// <para>Display Name: Ticket price (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_ticketprice_base")]
        public decimal? dg_ticketprice_Base {
            get {
                return GetMoneyValue("dg_ticketprice_base");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Driver</para>
        /// </summary>
        [AttributeLogicalName("dg_driver")]
        public EntityReference dg_Driver {
            get {
                return GetAttributeValue<EntityReference>("dg_driver");
            }
            set {
                SetAttributeValue("dg_driver", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Ticket price</para>
        /// </summary>
        [AttributeLogicalName("dg_ticketprice")]
        public decimal? dg_Ticketprice {
            get {
                return GetMoneyValue("dg_ticketprice");
            }
            set {
                SetMoneyValue("dg_ticketprice", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: DateTimeUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimeudregnet")]
        public DateTime? dg_DateTimeUdregnet {
            get {
                return GetAttributeValue<DateTime?>("dg_datetimeudregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: NoValue</para>
        /// </summary>
        [AttributeLogicalName("dg_novalue")]
        public string dg_NoValue {
            get {
                return GetAttributeValue<string>("dg_novalue");
            }
            set {
                SetAttributeValue("dg_novalue", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Value of the MinAllowance in base currency.</para>
        /// <para>Display Name: MinAllowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_minallowance_base")]
        public decimal? dg_minallowance_Base {
            get {
                return GetMoneyValue("dg_minallowance_base");
            }
        }
        
        /// <summary>
        /// <para>Display Name: MaxAllowance</para>
        /// </summary>
        [AttributeLogicalName("dg_maxallowance")]
        public decimal? dg_MaxAllowance {
            get {
                return GetMoneyValue("dg_maxallowance");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field DateTimeRollUp.</para>
        /// <para>Display Name: DateTimeRollUp (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimerollup_date")]
        public DateTime? dg_DateTimeRollUp_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_datetimerollup_date");
            }
        }
        
        /// <summary>
        /// <para>Display Name: StringUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_stringudregnet")]
        public string dg_StringUdregnet {
            get {
                return GetAttributeValue<string>("dg_stringudregnet");
            }
        }
        
        /// <summary>
        /// <para>Value of the EndnuUdregnet in base currency.</para>
        /// <para>Display Name: EndnuUdregnet (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_endnuudregnet_base")]
        public decimal? dg_endnuudregnet_Base {
            get {
                return GetMoneyValue("dg_endnuudregnet_base");
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: DecimalUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_decimaludregnet")]
        public decimal? dg_DecimalUdregnet {
            get {
                return GetAttributeValue<decimal?>("dg_decimaludregnet");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field MaxAllowance.</para>
        /// <para>Display Name: MaxAllowance (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_maxallowance_state")]
        public int? dg_MaxAllowance_State {
            get {
                return GetAttributeValue<int?>("dg_maxallowance_state");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field AvgAllowance.</para>
        /// <para>Display Name: AvgAllowance (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_state")]
        public int? dg_AvgAllowance_State {
            get {
                return GetAttributeValue<int?>("dg_avgallowance_state");
            }
        }
        
        /// <summary>
        /// <para>Status of the Bus</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_busState? statecode {
            get {
                return GetOptionSetValue<dg_busState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: BooleanUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_booleanudregnet")]
        public bool? dg_BooleanUdregnet {
            get {
                return GetAttributeValue<bool?>("dg_booleanudregnet");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Udregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_udregnet")]
        public decimal? dg_Udregnet {
            get {
                return GetMoneyValue("dg_udregnet");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Udkørselsdato</para>
        /// </summary>
        [AttributeLogicalName("dg_udkoerselsdato")]
        public DateTime? dg_Udkoerselsdato {
            get {
                return GetAttributeValue<DateTime?>("dg_udkoerselsdato");
            }
            set {
                SetAttributeValue("dg_udkoerselsdato", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: EtHelTal</para>
        /// </summary>
        [AttributeLogicalName("dg_etheltal")]
        public int? dg_EtHelTal {
            get {
                return GetAttributeValue<int?>("dg_etheltal");
            }
            set {
                SetAttributeValue("dg_etheltal", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>State of rollup field asdas.</para>
        /// <para>Display Name: asdas (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_asdas_state")]
        public int? dg_asdas_State {
            get {
                return GetAttributeValue<int?>("dg_asdas_state");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field AvgAllowance.</para>
        /// <para>Display Name: AvgAllowance (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance_date")]
        public DateTime? dg_AvgAllowance_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_avgallowance_date");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Whole numberUdregnet</para>
        /// </summary>
        [AttributeLogicalName("dg_wholenumberudregnet")]
        public int? dg_WholenumberUdregnet {
            get {
                return GetAttributeValue<int?>("dg_wholenumberudregnet");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field MinAllowance.</para>
        /// <para>Display Name: MinAllowance (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_minallowance_date")]
        public DateTime? dg_MinAllowance_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_minallowance_date");
            }
        }
        
        /// <summary>
        /// <para>Value of the Udregnet in base currency.</para>
        /// <para>Display Name: Udregnet (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_udregnet_base")]
        public decimal? dg_udregnet_Base {
            get {
                return GetMoneyValue("dg_udregnet_base");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Display Name: AllConditions</para>
        /// </summary>
        [AttributeLogicalName("dg_allconditions")]
        public string dg_AllConditions {
            get {
                return GetAttributeValue<string>("dg_allconditions");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Some Optionset</para>
        /// </summary>
        [AttributeLogicalName("dg_someoptionset")]
        public dg_myoptionset? dg_SomeOptionset {
            get {
                return GetOptionSetValue<dg_myoptionset>("dg_someoptionset");
            }
            set {
                SetOptionSetValue("dg_someoptionset", value);
            }
        }
        
        /// <summary>
        /// <para>State of rollup field DateTimeRollUp.</para>
        /// <para>Display Name: DateTimeRollUp (State)</para>
        /// </summary>
        [AttributeLogicalName("dg_datetimerollup_state")]
        public int? dg_DateTimeRollUp_State {
            get {
                return GetAttributeValue<int?>("dg_datetimerollup_state");
            }
        }
        
        /// <summary>
        /// <para>Display Name: AvgAllowance</para>
        /// </summary>
        [AttributeLogicalName("dg_avgallowance")]
        public decimal? dg_AvgAllowance {
            get {
                return GetMoneyValue("dg_avgallowance");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field asdas.</para>
        /// <para>Display Name: asdas (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_asdas_date")]
        public DateTime? dg_asdas_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_asdas_date");
            }
        }
        
        /// <summary>
        /// <para>Display Name: MinAllowance</para>
        /// </summary>
        [AttributeLogicalName("dg_minallowance")]
        public decimal? dg_MinAllowance {
            get {
                return GetMoneyValue("dg_minallowance");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Total allowance</para>
        /// </summary>
        [AttributeLogicalName("dg_totalallowance")]
        public decimal? dg_Totalallowance {
            get {
                return GetMoneyValue("dg_totalallowance");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Last Updated time of rollup field Total allowance.</para>
        /// <para>Display Name: Total allowance (Last Updated On)</para>
        /// </summary>
        [AttributeLogicalName("dg_totalallowance_date")]
        public DateTime? dg_Totalallowance_Date {
            get {
                return GetAttributeValue<DateTime?>("dg_totalallowance_date");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Display Name: asdasasdasds</para>
        /// </summary>
        [AttributeLogicalName("dg_asdas")]
        public decimal? dg_asdas {
            get {
                return GetMoneyValue("dg_asdas");
            }
        }
        
        /// <summary>
        /// <para>Value of the Total allowance in base currency.</para>
        /// <para>Display Name: Total allowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_totalallowance_base")]
        public decimal? dg_totalallowance_Base {
            get {
                return GetMoneyValue("dg_totalallowance_base");
            }
        }
        
        [RelationshipSchemaName("dg_HasRidden")]
        public IEnumerable<dg_child> dg_HasRidden {
            get {
                return GetRelatedEntities<dg_child>("dg_HasRidden", null);
            }
            set {
                SetRelatedEntities("dg_HasRidden", null, value);
            }
        }
        
        [AttributeLogicalName("dg_driver")]
        [RelationshipSchemaName("dg_dg_man_dg_bus_Driver")]
        public dg_man dg_dg_man_dg_bus_Driver {
            get {
                return GetRelatedEntity<dg_man>("dg_dg_man_dg_bus_Driver", null);
            }
            set {
                SetRelatedEntity("dg_dg_man_dg_bus_Driver", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_bus")]
        public BusinessUnit business_unit_dg_bus {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_bus", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_bus", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_bus")]
        public Team team_dg_bus {
            get {
                return GetRelatedEntity<Team>("team_dg_bus", null);
            }
            set {
                SetRelatedEntity("team_dg_bus", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_bus")]
        public SystemUser user_dg_bus {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_bus", null);
            }
            set {
                SetRelatedEntity("user_dg_bus", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_bus_modifiedonbehalfby")]
        public SystemUser lk_dg_bus_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_bus_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_bus_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_bus_modifiedby")]
        public SystemUser lk_dg_bus_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_bus_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_bus_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_bus_createdonbehalfby")]
        public SystemUser lk_dg_bus_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_bus_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_bus_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_bus_createdby")]
        public SystemUser lk_dg_bus_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_bus_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_bus_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_dg_bus")]
        public TransactionCurrency TransactionCurrency_dg_bus {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_dg_bus", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_bus_connections2")]
        public IEnumerable<Connection> dg_bus_connections2 {
            get {
                return GetRelatedEntities<Connection>("dg_bus_connections2", null);
            }
            set {
                SetRelatedEntities("dg_bus_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_bus_connections1")]
        public IEnumerable<Connection> dg_bus_connections1 {
            get {
                return GetRelatedEntities<Connection>("dg_bus_connections1", null);
            }
            set {
                SetRelatedEntities("dg_bus_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_bus_SyncErrors")]
        public IEnumerable<SyncError> dg_bus_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_bus_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_bus_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_dg_bus_dg_child_Skolebus")]
        public IEnumerable<dg_child> dg_dg_bus_dg_child_Skolebus {
            get {
                return GetRelatedEntities<dg_child>("dg_dg_bus_dg_child_Skolebus", null);
            }
            set {
                SetRelatedEntities("dg_dg_bus_dg_child_Skolebus", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_bus_parental")]
        public IEnumerable<dg_child> dg_bus_parental {
            get {
                return GetRelatedEntities<dg_child>("dg_bus_parental", null);
            }
            set {
                SetRelatedEntities("dg_bus_parental", null, value);
            }
        }
        
        public static dg_bus Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_bus,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Child</para>
    /// </summary>
    [EntityLogicalName("dg_child")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_child : ExtendedEntity<dg_childState, dg_child_statuscode> {
        
        public const string EntityLogicalName = "dg_child";
        
        public const int EntityTypeCode = 10014;
        
        public dg_child() : 
                base(EntityLogicalName) {
        }
        
        public dg_child(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_childid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_childid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Child</para>
        /// </summary>
        [AttributeLogicalName("dg_childid")]
        public Guid? dg_childId {
            get {
                return GetAttributeValue<Guid?>("dg_childid");
            }
            set {
                SetId("dg_childid", value);
            }
        }
        
        [AttributeLogicalName("dg_parentbusidname")]
        public string dg_parentBusIdName {
            get {
                return GetAttributeValue<string>("dg_parentbusidname");
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Child</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_child_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_child_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("dg_skolebusname")]
        public string dg_SkolebusName {
            get {
                return GetAttributeValue<string>("dg_skolebusname");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the entity with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Bus associated with Child.</para>
        /// <para>Display Name: parentBus</para>
        /// </summary>
        [AttributeLogicalName("dg_parentbusid")]
        public EntityReference dg_parentBusId {
            get {
                return GetAttributeValue<EntityReference>("dg_parentbusid");
            }
            set {
                SetAttributeValue("dg_parentbusid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Allowance</para>
        /// </summary>
        [AttributeLogicalName("dg_allowance")]
        public decimal? dg_Allowance {
            get {
                return GetMoneyValue("dg_allowance");
            }
            set {
                SetMoneyValue("dg_allowance", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Child</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_childState? statecode {
            get {
                return GetOptionSetValue<dg_childState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Value of the Allowance in base currency.</para>
        /// <para>Display Name: Allowance (Base)</para>
        /// </summary>
        [AttributeLogicalName("dg_allowance_base")]
        public decimal? dg_allowance_Base {
            get {
                return GetMoneyValue("dg_allowance_base");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Skolebus</para>
        /// </summary>
        [AttributeLogicalName("dg_skolebus")]
        public EntityReference dg_Skolebus {
            get {
                return GetAttributeValue<EntityReference>("dg_skolebus");
            }
            set {
                SetAttributeValue("dg_skolebus", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the entity.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [RelationshipSchemaName("dg_HasRidden")]
        public IEnumerable<dg_bus> dg_HasRidden {
            get {
                return GetRelatedEntities<dg_bus>("dg_HasRidden", null);
            }
            set {
                SetRelatedEntities("dg_HasRidden", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_dg_child")]
        public TransactionCurrency TransactionCurrency_dg_child {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_dg_child", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_dg_child", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_child")]
        public BusinessUnit business_unit_dg_child {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_child", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_child", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_child")]
        public Team team_dg_child {
            get {
                return GetRelatedEntity<Team>("team_dg_child", null);
            }
            set {
                SetRelatedEntity("team_dg_child", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_child")]
        public SystemUser user_dg_child {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_child", null);
            }
            set {
                SetRelatedEntity("user_dg_child", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_child_modifiedonbehalfby")]
        public SystemUser lk_dg_child_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_child_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_child_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_child_modifiedby")]
        public SystemUser lk_dg_child_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_child_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_child_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_child_createdonbehalfby")]
        public SystemUser lk_dg_child_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_child_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_child_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_child_createdby")]
        public SystemUser lk_dg_child_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_child_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_child_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("dg_skolebus")]
        [RelationshipSchemaName("dg_dg_bus_dg_child_Skolebus")]
        public dg_bus dg_dg_bus_dg_child_Skolebus {
            get {
                return GetRelatedEntity<dg_bus>("dg_dg_bus_dg_child_Skolebus", null);
            }
            set {
                SetRelatedEntity("dg_dg_bus_dg_child_Skolebus", null, value);
            }
        }
        
        [AttributeLogicalName("dg_parentbusid")]
        [RelationshipSchemaName("dg_bus_parental")]
        public dg_bus dg_bus_parental {
            get {
                return GetRelatedEntity<dg_bus>("dg_bus_parental", null);
            }
            set {
                SetRelatedEntity("dg_bus_parental", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_child_SyncErrors")]
        public IEnumerable<SyncError> dg_child_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_child_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_child_SyncErrors", null, value);
            }
        }
        
        public static dg_child Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_child,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Event</para>
    /// </summary>
    [EntityLogicalName("dg_event")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_event : ExtendedEntity<dg_eventState, dg_event_statuscode> {
        
        public const string EntityLogicalName = "dg_event";
        
        public const int EntityTypeCode = 10007;
        
        public dg_event() : 
                base(EntityLogicalName) {
        }
        
        public dg_event(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_eventid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_eventid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Event</para>
        /// </summary>
        [AttributeLogicalName("dg_eventid")]
        public Guid? dg_eventId {
            get {
                return GetAttributeValue<Guid?>("dg_eventid");
            }
            set {
                SetId("dg_eventid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Display Name: End Date</para>
        /// </summary>
        [AttributeLogicalName("dg_enddate")]
        public DateTime? dg_EndDate {
            get {
                return GetAttributeValue<DateTime?>("dg_enddate");
            }
            set {
                SetAttributeValue("dg_enddate", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("dg_startdate")]
        public DateTime? dg_StartDate {
            get {
                return GetAttributeValue<DateTime?>("dg_startdate");
            }
            set {
                SetAttributeValue("dg_startdate", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("dg_description")]
        public string dg_Description {
            get {
                return GetAttributeValue<string>("dg_description");
            }
            set {
                SetAttributeValue("dg_description", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Maximum participants</para>
        /// </summary>
        [AttributeLogicalName("dg_maxparticipants")]
        public int? dg_MaxParticipants {
            get {
                return GetAttributeValue<int?>("dg_maxparticipants");
            }
            set {
                SetAttributeValue("dg_maxparticipants", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Event</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_event_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_event_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Event</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_eventState? statecode {
            get {
                return GetOptionSetValue<dg_eventState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_event")]
        public BusinessUnit business_unit_dg_event {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_event", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_event", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_event")]
        public Team team_dg_event {
            get {
                return GetRelatedEntity<Team>("team_dg_event", null);
            }
            set {
                SetRelatedEntity("team_dg_event", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_event")]
        public SystemUser user_dg_event {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_event", null);
            }
            set {
                SetRelatedEntity("user_dg_event", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_event_modifiedonbehalfby")]
        public SystemUser lk_dg_event_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_event_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_event_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_event_modifiedby")]
        public SystemUser lk_dg_event_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_event_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_event_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_event_createdonbehalfby")]
        public SystemUser lk_dg_event_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_event_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_event_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_event_createdby")]
        public SystemUser lk_dg_event_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_event_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_event_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_dg_event_dg_participant_Event")]
        public IEnumerable<dg_participant> dg_dg_event_dg_participant_Event {
            get {
                return GetRelatedEntities<dg_participant>("dg_dg_event_dg_participant_Event", null);
            }
            set {
                SetRelatedEntities("dg_dg_event_dg_participant_Event", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_SocialActivities")]
        public IEnumerable<SocialActivity> dg_event_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("dg_event_SocialActivities", null);
            }
            set {
                SetRelatedEntities("dg_event_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> dg_event_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("dg_event_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("dg_event_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_Tasks")]
        public IEnumerable<Task> dg_event_Tasks {
            get {
                return GetRelatedEntities<Task>("dg_event_Tasks", null);
            }
            set {
                SetRelatedEntities("dg_event_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> dg_event_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("dg_event_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("dg_event_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_PhoneCalls")]
        public IEnumerable<PhoneCall> dg_event_PhoneCalls {
            get {
                return GetRelatedEntities<PhoneCall>("dg_event_PhoneCalls", null);
            }
            set {
                SetRelatedEntities("dg_event_PhoneCalls", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_Letters")]
        public IEnumerable<Letter> dg_event_Letters {
            get {
                return GetRelatedEntities<Letter>("dg_event_Letters", null);
            }
            set {
                SetRelatedEntities("dg_event_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_Faxes")]
        public IEnumerable<Fax> dg_event_Faxes {
            get {
                return GetRelatedEntities<Fax>("dg_event_Faxes", null);
            }
            set {
                SetRelatedEntities("dg_event_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_Emails")]
        public IEnumerable<Email> dg_event_Emails {
            get {
                return GetRelatedEntities<Email>("dg_event_Emails", null);
            }
            set {
                SetRelatedEntities("dg_event_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_Appointments")]
        public IEnumerable<Appointment> dg_event_Appointments {
            get {
                return GetRelatedEntities<Appointment>("dg_event_Appointments", null);
            }
            set {
                SetRelatedEntities("dg_event_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_ActivityPointers")]
        public IEnumerable<ActivityPointer> dg_event_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("dg_event_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("dg_event_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_event_SyncErrors")]
        public IEnumerable<SyncError> dg_event_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_event_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_event_SyncErrors", null, value);
            }
        }
        
        public static dg_event Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_event,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Field</para>
    /// </summary>
    [EntityLogicalName("dg_field")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_field : ExtendedEntity<dg_fieldState, dg_field_statuscode> {
        
        public const string EntityLogicalName = "dg_field";
        
        public const int EntityTypeCode = 10011;
        
        public dg_field() : 
                base(EntityLogicalName) {
        }
        
        public dg_field(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_fieldid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_fieldid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Field</para>
        /// </summary>
        [AttributeLogicalName("dg_fieldid")]
        public Guid? dg_fieldId {
            get {
                return GetAttributeValue<Guid?>("dg_fieldid");
            }
            set {
                SetId("dg_fieldid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Field</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_field_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_field_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Field</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_fieldState? statecode {
            get {
                return GetOptionSetValue<dg_fieldState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_field")]
        public BusinessUnit business_unit_dg_field {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_field", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_field", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_field")]
        public Team team_dg_field {
            get {
                return GetRelatedEntity<Team>("team_dg_field", null);
            }
            set {
                SetRelatedEntity("team_dg_field", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_field")]
        public SystemUser user_dg_field {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_field", null);
            }
            set {
                SetRelatedEntity("user_dg_field", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_field_modifiedonbehalfby")]
        public SystemUser lk_dg_field_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_field_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_field_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_field_modifiedby")]
        public SystemUser lk_dg_field_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_field_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_field_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_field_createdonbehalfby")]
        public SystemUser lk_dg_field_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_field_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_field_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_field_createdby")]
        public SystemUser lk_dg_field_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_field_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_field_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_field_SyncErrors")]
        public IEnumerable<SyncError> dg_field_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_field_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_field_SyncErrors", null, value);
            }
        }
        
        public static dg_field Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_field,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("dg_hasridden")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_HasRidden : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "dg_hasridden";
        
        public const int EntityTypeCode = 10017;
        
        public dg_HasRidden() : 
                base(EntityLogicalName) {
        }
        
        public dg_HasRidden(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("dg_hasriddenid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_hasriddenid", value);
            }
        }
        
        [AttributeLogicalName("dg_hasriddenid")]
        public Guid? dg_HasRiddenId {
            get {
                return GetAttributeValue<Guid?>("dg_hasriddenid");
            }
            set {
                SetId("dg_hasriddenid", value);
            }
        }
        
        [AttributeLogicalName("dg_childid")]
        public Guid? dg_childid {
            get {
                return GetAttributeValue<Guid?>("dg_childid");
            }
        }
        
        [AttributeLogicalName("dg_busid")]
        public Guid? dg_busid {
            get {
                return GetAttributeValue<Guid?>("dg_busid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static dg_HasRidden Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_HasRidden,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Man</para>
    /// </summary>
    [EntityLogicalName("dg_man")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_man : ExtendedEntity<dg_manState, dg_man_statuscode> {
        
        public const string EntityLogicalName = "dg_man";
        
        public const int EntityTypeCode = 10013;
        
        public dg_man() : 
                base(EntityLogicalName) {
        }
        
        public dg_man(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_manid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_manid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Man</para>
        /// </summary>
        [AttributeLogicalName("dg_manid")]
        public Guid? dg_manId {
            get {
                return GetAttributeValue<Guid?>("dg_manid");
            }
            set {
                SetId("dg_manid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Man</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_man_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_man_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Man</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_manState? statecode {
            get {
                return GetOptionSetValue<dg_manState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_man")]
        public BusinessUnit business_unit_dg_man {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_man", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_man", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_man")]
        public Team team_dg_man {
            get {
                return GetRelatedEntity<Team>("team_dg_man", null);
            }
            set {
                SetRelatedEntity("team_dg_man", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_man")]
        public SystemUser user_dg_man {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_man", null);
            }
            set {
                SetRelatedEntity("user_dg_man", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_man_modifiedonbehalfby")]
        public SystemUser lk_dg_man_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_man_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_man_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_man_modifiedby")]
        public SystemUser lk_dg_man_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_man_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_man_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_man_createdonbehalfby")]
        public SystemUser lk_dg_man_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_man_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_man_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_man_createdby")]
        public SystemUser lk_dg_man_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_man_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_man_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_dg_man_dg_bus_Driver")]
        public IEnumerable<dg_bus> dg_dg_man_dg_bus_Driver {
            get {
                return GetRelatedEntities<dg_bus>("dg_dg_man_dg_bus_Driver", null);
            }
            set {
                SetRelatedEntities("dg_dg_man_dg_bus_Driver", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_man_SyncErrors")]
        public IEnumerable<SyncError> dg_man_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_man_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_man_SyncErrors", null, value);
            }
        }
        
        public static dg_man Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_man,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Mild</para>
    /// </summary>
    [EntityLogicalName("dg_mild")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_mild : ExtendedEntity<dg_mildState, dg_mild_statuscode> {
        
        public const string EntityLogicalName = "dg_mild";
        
        public const int EntityTypeCode = 10015;
        
        public dg_mild() : 
                base(EntityLogicalName) {
        }
        
        public dg_mild(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_mildid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_mildid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Mild</para>
        /// </summary>
        [AttributeLogicalName("dg_mildid")]
        public Guid? dg_mildId {
            get {
                return GetAttributeValue<Guid?>("dg_mildid");
            }
            set {
                SetId("dg_mildid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Mild</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_mild_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_mild_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Mild</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_mildState? statecode {
            get {
                return GetOptionSetValue<dg_mildState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_mild")]
        public BusinessUnit business_unit_dg_mild {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_mild", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_mild", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_mild")]
        public Team team_dg_mild {
            get {
                return GetRelatedEntity<Team>("team_dg_mild", null);
            }
            set {
                SetRelatedEntity("team_dg_mild", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_mild")]
        public SystemUser user_dg_mild {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_mild", null);
            }
            set {
                SetRelatedEntity("user_dg_mild", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_mild_modifiedonbehalfby")]
        public SystemUser lk_dg_mild_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_mild_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_mild_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_mild_modifiedby")]
        public SystemUser lk_dg_mild_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_mild_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_mild_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_mild_createdonbehalfby")]
        public SystemUser lk_dg_mild_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_mild_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_mild_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_mild_createdby")]
        public SystemUser lk_dg_mild_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_mild_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_mild_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_mild_SyncErrors")]
        public IEnumerable<SyncError> dg_mild_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_mild_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_mild_SyncErrors", null, value);
            }
        }
        
        public static dg_mild Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_mild,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Participant</para>
    /// </summary>
    [EntityLogicalName("dg_participant")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_participant : ExtendedEntity<dg_participantState, dg_participant_statuscode> {
        
        public const string EntityLogicalName = "dg_participant";
        
        public const int EntityTypeCode = 10008;
        
        public dg_participant() : 
                base(EntityLogicalName) {
        }
        
        public dg_participant(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_participantid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_participantid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Participant</para>
        /// </summary>
        [AttributeLogicalName("dg_participantid")]
        public Guid? dg_participantId {
            get {
                return GetAttributeValue<Guid?>("dg_participantid");
            }
            set {
                SetId("dg_participantid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Event</para>
        /// </summary>
        [AttributeLogicalName("dg_event")]
        public EntityReference dg_Event {
            get {
                return GetAttributeValue<EntityReference>("dg_event");
            }
            set {
                SetAttributeValue("dg_event", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Food Preference</para>
        /// </summary>
        [AttributeLogicalName("dg_foodpreference")]
        public dg_foodpreference? dg_FoodPreference {
            get {
                return GetOptionSetValue<dg_foodpreference>("dg_foodpreference");
            }
            set {
                SetOptionSetValue("dg_foodpreference", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Age</para>
        /// </summary>
        [AttributeLogicalName("dg_age")]
        public int? dg_Age {
            get {
                return GetAttributeValue<int?>("dg_age");
            }
            set {
                SetAttributeValue("dg_age", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("new_email")]
        public string new_Email {
            get {
                return GetAttributeValue<string>("new_email");
            }
            set {
                SetAttributeValue("new_email", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Participant</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_participant_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_participant_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("dg_eventname")]
        public string dg_EventName {
            get {
                return GetAttributeValue<string>("dg_eventname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Participant</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_participantState? statecode {
            get {
                return GetOptionSetValue<dg_participantState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("dg_event")]
        [RelationshipSchemaName("dg_dg_event_dg_participant_Event")]
        public dg_event dg_dg_event_dg_participant_Event {
            get {
                return GetRelatedEntity<dg_event>("dg_dg_event_dg_participant_Event", null);
            }
            set {
                SetRelatedEntity("dg_dg_event_dg_participant_Event", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_participant")]
        public BusinessUnit business_unit_dg_participant {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_participant", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_participant", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_participant")]
        public Team team_dg_participant {
            get {
                return GetRelatedEntity<Team>("team_dg_participant", null);
            }
            set {
                SetRelatedEntity("team_dg_participant", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_participant")]
        public SystemUser user_dg_participant {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_participant", null);
            }
            set {
                SetRelatedEntity("user_dg_participant", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_participant_modifiedonbehalfby")]
        public SystemUser lk_dg_participant_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_participant_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_participant_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_participant_modifiedby")]
        public SystemUser lk_dg_participant_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_participant_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_participant_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_participant_createdonbehalfby")]
        public SystemUser lk_dg_participant_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_participant_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_participant_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_participant_createdby")]
        public SystemUser lk_dg_participant_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_participant_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_participant_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_SyncErrors")]
        public IEnumerable<SyncError> dg_participant_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_participant_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_participant_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_SocialActivities")]
        public IEnumerable<SocialActivity> dg_participant_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("dg_participant_SocialActivities", null);
            }
            set {
                SetRelatedEntities("dg_participant_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> dg_participant_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("dg_participant_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("dg_participant_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_Tasks")]
        public IEnumerable<Task> dg_participant_Tasks {
            get {
                return GetRelatedEntities<Task>("dg_participant_Tasks", null);
            }
            set {
                SetRelatedEntities("dg_participant_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> dg_participant_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("dg_participant_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("dg_participant_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_PhoneCalls")]
        public IEnumerable<PhoneCall> dg_participant_PhoneCalls {
            get {
                return GetRelatedEntities<PhoneCall>("dg_participant_PhoneCalls", null);
            }
            set {
                SetRelatedEntities("dg_participant_PhoneCalls", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_Letters")]
        public IEnumerable<Letter> dg_participant_Letters {
            get {
                return GetRelatedEntities<Letter>("dg_participant_Letters", null);
            }
            set {
                SetRelatedEntities("dg_participant_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_Faxes")]
        public IEnumerable<Fax> dg_participant_Faxes {
            get {
                return GetRelatedEntities<Fax>("dg_participant_Faxes", null);
            }
            set {
                SetRelatedEntities("dg_participant_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_Emails")]
        public IEnumerable<Email> dg_participant_Emails {
            get {
                return GetRelatedEntities<Email>("dg_participant_Emails", null);
            }
            set {
                SetRelatedEntities("dg_participant_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_Appointments")]
        public IEnumerable<Appointment> dg_participant_Appointments {
            get {
                return GetRelatedEntities<Appointment>("dg_participant_Appointments", null);
            }
            set {
                SetRelatedEntities("dg_participant_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_participant_ActivityPointers")]
        public IEnumerable<ActivityPointer> dg_participant_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("dg_participant_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("dg_participant_ActivityPointers", null, value);
            }
        }
        
        public static dg_participant Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_participant,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Sheep</para>
    /// </summary>
    [EntityLogicalName("dg_sheep")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_sheep : ExtendedEntity<dg_sheepState, dg_sheep_statuscode> {
        
        public const string EntityLogicalName = "dg_sheep";
        
        public const int EntityTypeCode = 10010;
        
        public dg_sheep() : 
                base(EntityLogicalName) {
        }
        
        public dg_sheep(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_sheepid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_sheepid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Sheep</para>
        /// </summary>
        [AttributeLogicalName("dg_sheepid")]
        public Guid? dg_sheepId {
            get {
                return GetAttributeValue<Guid?>("dg_sheepid");
            }
            set {
                SetId("dg_sheepid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Sheep</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_sheep_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_sheep_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: One date</para>
        /// </summary>
        [AttributeLogicalName("dg_onedate")]
        public DateTime? dg_Onedate {
            get {
                return GetAttributeValue<DateTime?>("dg_onedate");
            }
            set {
                SetAttributeValue("dg_onedate", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Another Date</para>
        /// </summary>
        [AttributeLogicalName("dg_anotherdate")]
        public DateTime? dg_AnotherDate {
            get {
                return GetAttributeValue<DateTime?>("dg_anotherdate");
            }
            set {
                SetAttributeValue("dg_anotherdate", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Sheep</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_sheepState? statecode {
            get {
                return GetOptionSetValue<dg_sheepState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_sheep")]
        public BusinessUnit business_unit_dg_sheep {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_sheep", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_sheep", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_sheep")]
        public Team team_dg_sheep {
            get {
                return GetRelatedEntity<Team>("team_dg_sheep", null);
            }
            set {
                SetRelatedEntity("team_dg_sheep", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_sheep")]
        public SystemUser user_dg_sheep {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_sheep", null);
            }
            set {
                SetRelatedEntity("user_dg_sheep", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_sheep_modifiedonbehalfby")]
        public SystemUser lk_dg_sheep_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_sheep_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_sheep_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_sheep_modifiedby")]
        public SystemUser lk_dg_sheep_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_sheep_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_sheep_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_sheep_createdonbehalfby")]
        public SystemUser lk_dg_sheep_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_sheep_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_sheep_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_sheep_createdby")]
        public SystemUser lk_dg_sheep_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_sheep_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_sheep_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_sheep_SyncErrors")]
        public IEnumerable<SyncError> dg_sheep_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_sheep_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_sheep_SyncErrors", null, value);
            }
        }
        
        public static dg_sheep Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_sheep,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Tooth</para>
    /// </summary>
    [EntityLogicalName("dg_tooth")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class dg_tooth : ExtendedEntity<dg_toothState, dg_tooth_statuscode> {
        
        public const string EntityLogicalName = "dg_tooth";
        
        public const int EntityTypeCode = 10012;
        
        public dg_tooth() : 
                base(EntityLogicalName) {
        }
        
        public dg_tooth(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("dg_name");
            }
        }
        
        [AttributeLogicalName("dg_toothid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dg_toothid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Tooth</para>
        /// </summary>
        [AttributeLogicalName("dg_toothid")]
        public Guid? dg_toothId {
            get {
                return GetAttributeValue<Guid?>("dg_toothid");
            }
            set {
                SetId("dg_toothid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("dg_name")]
        public string dg_name {
            get {
                return GetAttributeValue<string>("dg_name");
            }
            set {
                SetAttributeValue("dg_name", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Tooth</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public dg_tooth_statuscode? statuscode {
            get {
                return GetOptionSetValue<dg_tooth_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Tooth</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public dg_toothState? statecode {
            get {
                return GetOptionSetValue<dg_toothState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dg_tooth")]
        public BusinessUnit business_unit_dg_tooth {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dg_tooth", null);
            }
            set {
                SetRelatedEntity("business_unit_dg_tooth", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_dg_tooth")]
        public Team team_dg_tooth {
            get {
                return GetRelatedEntity<Team>("team_dg_tooth", null);
            }
            set {
                SetRelatedEntity("team_dg_tooth", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_dg_tooth")]
        public SystemUser user_dg_tooth {
            get {
                return GetRelatedEntity<SystemUser>("user_dg_tooth", null);
            }
            set {
                SetRelatedEntity("user_dg_tooth", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_dg_tooth_modifiedonbehalfby")]
        public SystemUser lk_dg_tooth_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_tooth_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_tooth_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_dg_tooth_modifiedby")]
        public SystemUser lk_dg_tooth_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_tooth_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_dg_tooth_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_dg_tooth_createdonbehalfby")]
        public SystemUser lk_dg_tooth_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_tooth_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_dg_tooth_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_dg_tooth_createdby")]
        public SystemUser lk_dg_tooth_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_dg_tooth_createdby", null);
            }
            set {
                SetRelatedEntity("lk_dg_tooth_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("dg_tooth_SyncErrors")]
        public IEnumerable<SyncError> dg_tooth_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("dg_tooth_SyncErrors", null);
            }
            set {
                SetRelatedEntities("dg_tooth_SyncErrors", null, value);
            }
        }
        
        public static dg_tooth Retrieve(IOrganizationService service, Guid id, params Expression<Func<dg_tooth,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Instance of a property with its value.</para>
    /// <para>Display Name: Property Instance</para>
    /// </summary>
    [EntityLogicalName("dynamicpropertyinstance")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class DynamicPropertyInstance : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "dynamicpropertyinstance";
        
        public const int EntityTypeCode = 1333;
        
        public DynamicPropertyInstance() : 
                base(EntityLogicalName) {
        }
        
        public DynamicPropertyInstance(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("dynamicpropertyinstanceid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("dynamicpropertyinstanceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the unique identifier of the property instance.</para>
        /// <para>Display Name: Property Instance ID</para>
        /// </summary>
        [AttributeLogicalName("dynamicpropertyinstanceid")]
        public Guid? DynamicPropertyInstanceid {
            get {
                return GetAttributeValue<Guid?>("dynamicpropertyinstanceid");
            }
            set {
                SetId("dynamicpropertyinstanceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the property that this record is associated with.</para>
        /// <para>Display Name: Property ID</para>
        /// </summary>
        [AttributeLogicalName("dynamicpropertyid")]
        public EntityReference DynamicPropertyId {
            get {
                return GetAttributeValue<EntityReference>("dynamicpropertyid");
            }
            set {
                SetAttributeValue("dynamicpropertyid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the version number of the property instance.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        [AttributeLogicalName("dynamicpropertyidname")]
        public string DynamicPropertyIdName {
            get {
                return GetAttributeValue<string>("dynamicpropertyidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Internal Use Only</para>
        /// <para>Display Name: Internal Use Only</para>
        /// </summary>
        [AttributeLogicalName("dmtimportstate")]
        public int? DMTImportState {
            get {
                return GetAttributeValue<int?>("dmtimportstate");
            }
            set {
                SetAttributeValue("dmtimportstate", value);
            }
        }
        
        /// <summary>
        /// <para>Type of the owner of the property instance (for example, user or business unit).</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the double value of the property.</para>
        /// <para>Display Name: Double Value</para>
        /// </summary>
        [AttributeLogicalName("valuedouble")]
        public double? ValueDouble {
            get {
                return GetAttributeValue<double?>("valuedouble");
            }
            set {
                SetAttributeValue("valuedouble", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the currency associated with the record.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Regarding object id</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectidtype")]
        public string RegardingObjectIdType {
            get {
                return GetAttributeValue<string>("regardingobjectidtype");
            }
            set {
                SetAttributeValue("regardingobjectidtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the integer value of the property.</para>
        /// <para>Display Name: Integer Value</para>
        /// </summary>
        [AttributeLogicalName("valueinteger")]
        public int? ValueInteger {
            get {
                return GetAttributeValue<int?>("valueinteger");
            }
            set {
                SetAttributeValue("valueinteger", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the decimal value of the property.</para>
        /// <para>Display Name: Decimal Value</para>
        /// </summary>
        [AttributeLogicalName("valuedecimal")]
        public decimal? ValueDecimal {
            get {
                return GetAttributeValue<decimal?>("valuedecimal");
            }
            set {
                SetAttributeValue("valuedecimal", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the string value of the property.</para>
        /// <para>Display Name: String Value</para>
        /// </summary>
        [AttributeLogicalName("valuestring")]
        public string ValueString {
            get {
                return GetAttributeValue<string>("valuestring");
            }
            set {
                SetAttributeValue("valuestring", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the object that the property is associated with.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows the user who owns the property instance.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the property value is valid.</para>
        /// <para>Display Name: Is Valid</para>
        /// </summary>
        [AttributeLogicalName("validationstatus")]
        public bool? validationstatus {
            get {
                return GetAttributeValue<bool?>("validationstatus");
            }
            set {
                SetAttributeValue("validationstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the team who owns the property instance.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("dynamicpropertyinstanceid")]
        [RelationshipSchemaName("TransactionCurrency_Dynamicpropertyinsatance")]
        public TransactionCurrency TransactionCurrency_Dynamicpropertyinsatance {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Dynamicpropertyinsatance", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Dynamicpropertyinsatance", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_Dynamicpropertyinsatanceattribute_createdonbehalfby")]
        public SystemUser lk_Dynamicpropertyinsatanceattribute_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_Dynamicpropertyinsatanceattribute_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_Dynamicpropertyinsatanceattribute_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("dynamicpropertyinstanceid")]
        [RelationshipSchemaName("OwningUser_Dynamicpropertyinsatance")]
        public SystemUser OwningUser_Dynamicpropertyinsatance {
            get {
                return GetRelatedEntity<SystemUser>("OwningUser_Dynamicpropertyinsatance", null);
            }
            set {
                SetRelatedEntity("OwningUser_Dynamicpropertyinsatance", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_Dynamicpropertyinsatanceattribute_ModifiedBy")]
        public SystemUser lk_Dynamicpropertyinsatanceattribute_ModifiedBy {
            get {
                return GetRelatedEntity<SystemUser>("lk_Dynamicpropertyinsatanceattribute_ModifiedBy", null);
            }
            set {
                SetRelatedEntity("lk_Dynamicpropertyinsatanceattribute_ModifiedBy", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_dynamicproperyinstance")]
        public BusinessUnit business_unit_dynamicproperyinstance {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_dynamicproperyinstance", null);
            }
            set {
                SetRelatedEntity("business_unit_dynamicproperyinstance", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_Dynamicpropertyinsatanceattribute_ModifiedOnBehalfBy")]
        public SystemUser lk_Dynamicpropertyinsatanceattribute_ModifiedOnBehalfBy {
            get {
                return GetRelatedEntity<SystemUser>("lk_Dynamicpropertyinsatanceattribute_ModifiedOnBehalfBy", null);
            }
            set {
                SetRelatedEntity("lk_Dynamicpropertyinsatanceattribute_ModifiedOnBehalfBy", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("Dynamicpropertyinsatance_createdby")]
        public SystemUser Dynamicpropertyinsatance_createdby {
            get {
                return GetRelatedEntity<SystemUser>("Dynamicpropertyinsatance_createdby", null);
            }
            set {
                SetRelatedEntity("Dynamicpropertyinsatance_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_DynamicPropertyInstance")]
        public Team team_DynamicPropertyInstance {
            get {
                return GetRelatedEntity<Team>("team_DynamicPropertyInstance", null);
            }
            set {
                SetRelatedEntity("team_DynamicPropertyInstance", null, value);
            }
        }
        
        public static DynamicPropertyInstance Retrieve(IOrganizationService service, Guid id, params Expression<Func<DynamicPropertyInstance,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Activity that is delivered using email protocols.</para>
    /// <para>Display Name: Email</para>
    /// </summary>
    [EntityLogicalName("email")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Email : ExtendedEntity<EmailState, Email_StatusCode> {
        
        public const string EntityLogicalName = "email";
        
        public const int EntityTypeCode = 4202;
        
        public Email() : 
                base(EntityLogicalName) {
        }
        
        public Email(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the email activity.</para>
        /// <para>Display Name: Email Message</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent creating and sending the email. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Identifier for all the email responses for this conversation.</para>
        /// <para>Display Name: Conversation Index</para>
        /// </summary>
        [AttributeLogicalName("conversationindex")]
        public string ConversationIndex {
            get {
                return GetAttributeValue<string>("conversationindex");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the count of the number of attempts made to send the email. The count is used as an indicator of email routing issues.</para>
        /// <para>Display Name: No. of Delivery Attempts</para>
        /// </summary>
        [AttributeLogicalName("deliveryattempts")]
        public int? DeliveryAttempts {
            get {
                return GetAttributeValue<int?>("deliveryattempts");
            }
            set {
                SetAttributeValue("deliveryattempts", value);
            }
        }
        
        /// <summary>
        /// <para>Select the email's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Email_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Email_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time that the email was sent.</para>
        /// <para>Display Name: Date Sent</para>
        /// </summary>
        [AttributeLogicalName("senton")]
        public DateTime? SentOn {
            get {
                return GetAttributeValue<DateTime?>("senton");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, queue, or user recipients for the email.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the object type of sender of the email.</para>
        /// <para>Display Name: Email Sender Type</para>
        /// </summary>
        [AttributeLogicalName("emailsenderobjecttypecode")]
        public string EmailSenderObjectTypeCode {
            get {
                return GetAttributeValue<string>("emailsenderobjecttypecode");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the email activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the email. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual time to create and send the email.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the email activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Delay email processing until</para>
        /// </summary>
        [AttributeLogicalName("postponeemailprocessinguntil")]
        public DateTime? PostponeEmailProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeemailprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the email record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the email. By default, it displays the date and time when the activity was created, but can be edited to capture the actual time to create and send the email.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time for the activity to be completed to provide details about when the email will be sent.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>MIME type of the email message data.</para>
        /// <para>Display Name: Mime Type</para>
        /// </summary>
        [AttributeLogicalName("mimetype")]
        public string MimeType {
            get {
                return GetAttributeValue<string>("mimetype");
            }
            set {
                SetAttributeValue("mimetype", value);
            }
        }
        
        /// <summary>
        /// <para>Safe body text of the e-mail.</para>
        /// <para>Display Name: Safe Description</para>
        /// </summary>
        [AttributeLogicalName("safedescription")]
        public string SafeDescription {
            get {
                return GetAttributeValue<string>("safedescription");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Message ID Dup Check</para>
        /// </summary>
        [AttributeLogicalName("messageiddupcheck")]
        public Guid? MessageIdDupCheck {
            get {
                return GetAttributeValue<Guid?>("messageiddupcheck");
            }
            set {
                SetAttributeValue("messageiddupcheck", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the e-mail is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the body is compressed.</para>
        /// <para>Display Name: Compression</para>
        /// </summary>
        [AttributeLogicalName("compressed")]
        public bool? Compressed {
            get {
                return GetAttributeValue<bool?>("compressed");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: IsUnsafe</para>
        /// </summary>
        [AttributeLogicalName("isunsafe")]
        public int? IsUnsafe {
            get {
                return GetAttributeValue<int?>("isunsafe");
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the email type, such as lead outreach, customer follow-up, or service alert, to tie the email to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this email. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the email activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Indicates that a read receipt is requested.</para>
        /// <para>Display Name: Read Receipt Requested</para>
        /// </summary>
        [AttributeLogicalName("readreceiptrequested")]
        public bool? ReadReceiptRequested {
            get {
                return GetAttributeValue<bool?>("readreceiptrequested");
            }
            set {
                SetAttributeValue("readreceiptrequested", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Select the direction of the email as incoming or outbound.</para>
        /// <para>Display Name: Direction</para>
        /// </summary>
        [AttributeLogicalName("directioncode")]
        public bool? DirectionCode {
            get {
                return GetAttributeValue<bool?>("directioncode");
            }
            set {
                SetAttributeValue("directioncode", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox associated with the sender of the email message.</para>
        /// <para>Display Name: Sender's Mailbox</para>
        /// </summary>
        [AttributeLogicalName("sendermailboxid")]
        public EntityReference SenderMailboxId {
            get {
                return GetAttributeValue<EntityReference>("sendermailboxid");
            }
        }
        
        /// <summary>
        /// <para>Shows the parent account of the sender of the email.</para>
        /// <para>Display Name: Senders Account</para>
        /// </summary>
        [AttributeLogicalName("sendersaccount")]
        public EntityReference SendersAccount {
            get {
                return GetAttributeValue<EntityReference>("sendersaccount");
            }
        }
        
        /// <summary>
        /// <para>Enter the recipients that should be copied on the email.</para>
        /// <para>Display Name: Cc</para>
        /// </summary>
        [AttributeLogicalName("cc")]
        public IEnumerable<ActivityParty> Cc {
            get {
                return GetEntityCollection<ActivityParty>("cc");
            }
            set {
                SetEntityCollection("cc", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the recipients that are included on the email distribution, but are not displayed to other recipients.</para>
        /// <para>Display Name: Bcc</para>
        /// </summary>
        [AttributeLogicalName("bcc")]
        public IEnumerable<ActivityParty> Bcc {
            get {
                return GetEntityCollection<ActivityParty>("bcc");
            }
            set {
                SetEntityCollection("bcc", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the email.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the email addresses corresponding to the recipients.</para>
        /// <para>Display Name: To Recipients</para>
        /// </summary>
        [AttributeLogicalName("torecipients")]
        public string ToRecipients {
            get {
                return GetAttributeValue<string>("torecipients");
            }
            set {
                SetAttributeValue("torecipients", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the email is open, completed, or canceled. Completed and canceled email is read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public EmailState? StateCode {
            get {
                return GetOptionSetValue<EmailState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ID of the email message that this email activity is a response to.</para>
        /// <para>Display Name: In Reply To Message</para>
        /// </summary>
        [AttributeLogicalName("inreplyto")]
        public string InReplyTo {
            get {
                return GetAttributeValue<string>("inreplyto");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the email message. Used only for email that is received.</para>
        /// <para>Display Name: Message ID</para>
        /// </summary>
        [AttributeLogicalName("messageid")]
        public string MessageId {
            get {
                return GetAttributeValue<string>("messageid");
            }
            set {
                SetAttributeValue("messageid", value);
            }
        }
        
        /// <summary>
        /// <para>Parent Activity Name</para>
        /// <para>Display Name: Parent Activity Name</para>
        /// </summary>
        [AttributeLogicalName("parentactivityidname")]
        public string ParentActivityIdName {
            get {
                return GetAttributeValue<string>("parentactivityidname");
            }
        }
        
        /// <summary>
        /// <para>Select the priority of delivery of the email to the email server.</para>
        /// <para>Display Name: Delivery Priority</para>
        /// </summary>
        [AttributeLogicalName("deliveryprioritycode")]
        public activitypointer_deliveryprioritycode? DeliveryPriorityCode {
            get {
                return GetOptionSetValue<activitypointer_deliveryprioritycode>("deliveryprioritycode");
            }
            set {
                SetOptionSetValue("deliveryprioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the tracking token assigned to the email to make sure responses are automatically tracked in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Tracking Token</para>
        /// </summary>
        [AttributeLogicalName("trackingtoken")]
        public string TrackingToken {
            get {
                return GetAttributeValue<string>("trackingtoken");
            }
            set {
                SetAttributeValue("trackingtoken", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the email activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the parent account type code of the sender of the email.</para>
        /// <para>Display Name:  SendersAccount Type</para>
        /// </summary>
        [AttributeLogicalName("sendersaccountobjecttypecode")]
        public string SendersAccountObjectTypeCode {
            get {
                return GetAttributeValue<string>("sendersaccountobjecttypecode");
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the email type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Select the activity that the email is associated with.</para>
        /// <para>Display Name: Parent Activity Id</para>
        /// </summary>
        [AttributeLogicalName("parentactivityid")]
        public EntityReference ParentActivityId {
            get {
                return GetAttributeValue<EntityReference>("parentactivityid");
            }
            set {
                SetAttributeValue("parentactivityid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected start date and time for the activity to provide details about the tentative time when the email activity must be initiated.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the email activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Sender of the email.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("sender")]
        public string Sender {
            get {
                return GetAttributeValue<string>("sender");
            }
            set {
                SetAttributeValue("sender", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Email_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Email_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the sender should receive confirmation that the email was delivered.</para>
        /// <para>Display Name: Delivery Receipt Requested</para>
        /// </summary>
        [AttributeLogicalName("deliveryreceiptrequested")]
        public bool? DeliveryReceiptRequested {
            get {
                return GetAttributeValue<bool?>("deliveryreceiptrequested");
            }
            set {
                SetAttributeValue("deliveryreceiptrequested", value);
            }
        }
        
        [AttributeLogicalName("sendermailboxidname")]
        public string SenderMailboxIdName {
            get {
                return GetAttributeValue<string>("sendermailboxidname");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the notification code to identify issues with the email recipients or attachments, such as blocked attachments.</para>
        /// <para>Display Name: Notifications</para>
        /// </summary>
        [AttributeLogicalName("notifications")]
        public Email_Notifications? Notifications {
            get {
                return GetOptionSetValue<Email_Notifications>("notifications");
            }
            set {
                SetOptionSetValue("notifications", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the sender of the email.</para>
        /// <para>Display Name: Sender</para>
        /// </summary>
        [AttributeLogicalName("emailsender")]
        public EntityReference EmailSender {
            get {
                return GetAttributeValue<EntityReference>("emailsender");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Indication if the email was created by a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the name of the sender of the email.</para>
        /// <para>Display Name: Email Sender Name</para>
        /// </summary>
        [AttributeLogicalName("emailsendername")]
        public string EmailSenderName {
            get {
                return GetAttributeValue<string>("emailsendername");
            }
            set {
                SetAttributeValue("emailsendername", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the umber of attachments of the email message.</para>
        /// <para>Display Name: Attachment Count</para>
        /// </summary>
        [AttributeLogicalName("attachmentcount")]
        public int? AttachmentCount {
            get {
                return GetAttributeValue<int?>("attachmentcount");
            }
        }
        
        /// <summary>
        /// <para>Shows how an email is matched to an existing email in Microsoft Dynamics CRM. For system use only.</para>
        /// <para>Display Name: Correlation Method</para>
        /// </summary>
        [AttributeLogicalName("correlationmethod")]
        public Email_CorrelationMethod? CorrelationMethod {
            get {
                return GetOptionSetValue<Email_CorrelationMethod>("correlationmethod");
            }
        }
        
        /// <summary>
        /// <para>Enter the sender of the email.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the name of the sender account of the email.</para>
        /// <para>Display Name: Email Sender Account Name</para>
        /// </summary>
        [AttributeLogicalName("sendersaccountname")]
        public string SendersAccountName {
            get {
                return GetAttributeValue<string>("sendersaccountname");
            }
            set {
                SetAttributeValue("sendersaccountname", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the email message.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Shows the Microsoft Office Outlook account for the user who submitted the email to Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Submitted By</para>
        /// </summary>
        [AttributeLogicalName("submittedby")]
        public string SubmittedBy {
            get {
                return GetAttributeValue<string>("submittedby");
            }
            set {
                SetAttributeValue("submittedby", value);
            }
        }
        
        /// <summary>
        /// <para>Type the greeting and message text of the email.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_Emails")]
        public msdyn_PostAlbum msdyn_postalbum_Emails {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_Emails", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_Emails")]
        public dg_event dg_event_Emails {
            get {
                return GetRelatedEntity<dg_event>("dg_event_Emails", null);
            }
            set {
                SetRelatedEntity("dg_event_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_Emails")]
        public dg_participant dg_participant_Emails {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_Emails", null);
            }
            set {
                SetRelatedEntity("dg_participant_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_email_createdby")]
        public SystemUser lk_email_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_createdby", null);
            }
            set {
                SetRelatedEntity("lk_email_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_Emails")]
        public Lead Lead_Emails {
            get {
                return GetRelatedEntity<Lead>("Lead_Emails", null);
            }
            set {
                SetRelatedEntity("Lead_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_email")]
        public SLA sla_email {
            get {
                return GetRelatedEntity<SLA>("sla_email", null);
            }
            set {
                SetRelatedEntity("sla_email", null, value);
            }
        }
        
        [AttributeLogicalName("parentactivityid")]
        [RelationshipSchemaName("email_email_parentactivityid", EntityRole.Referencing)]
        public Email Referencingemail_email_parentactivityid {
            get {
                return GetRelatedEntity<Email>("email_email_parentactivityid", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("email_email_parentactivityid", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Emails")]
        public Account Account_Emails {
            get {
                return GetRelatedEntity<Account>("Account_Emails", null);
            }
            set {
                SetRelatedEntity("Account_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_email_activities")]
        public BusinessUnit business_unit_email_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_email_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_email_activities", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_email")]
        public SLA manualsla_email {
            get {
                return GetRelatedEntity<SLA>("manualsla_email", null);
            }
            set {
                SetRelatedEntity("manualsla_email", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_Emails")]
        public Campaign Campaign_Emails {
            get {
                return GetRelatedEntity<Campaign>("Campaign_Emails", null);
            }
            set {
                SetRelatedEntity("Campaign_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_email")]
        public Team team_email {
            get {
                return GetRelatedEntity<Team>("team_email", null);
            }
            set {
                SetRelatedEntity("team_email", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_email_modifiedonbehalfby")]
        public SystemUser lk_email_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_email_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_Emails")]
        public Quote Quote_Emails {
            get {
                return GetRelatedEntity<Quote>("Quote_Emails", null);
            }
            set {
                SetRelatedEntity("Quote_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_email")]
        public ActivityPointer activity_pointer_email {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_email", null);
            }
            set {
                SetRelatedEntity("activity_pointer_email", null, value);
            }
        }
        
        [AttributeLogicalName("sendermailboxid")]
        [RelationshipSchemaName("email_sendermailboxid_mailbox")]
        public Mailbox email_sendermailboxid_mailbox {
            get {
                return GetRelatedEntity<Mailbox>("email_sendermailboxid_mailbox", null);
            }
            set {
                SetRelatedEntity("email_sendermailboxid_mailbox", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_Emails")]
        public KnowledgeArticle KnowledgeArticle_Emails {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_Emails", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_Emails")]
        public Invoice Invoice_Emails {
            get {
                return GetRelatedEntity<Invoice>("Invoice_Emails", null);
            }
            set {
                SetRelatedEntity("Invoice_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_email_createdonbehalfby")]
        public SystemUser lk_email_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_email_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_Emails")]
        public SalesOrder SalesOrder_Emails {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_Emails", null);
            }
            set {
                SetRelatedEntity("SalesOrder_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_Emails")]
        public Contract Contract_Emails {
            get {
                return GetRelatedEntity<Contract>("Contract_Emails", null);
            }
            set {
                SetRelatedEntity("Contract_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("SystemUser_Email_EmailSender")]
        public SystemUser SystemUser_Email_EmailSender {
            get {
                return GetRelatedEntity<SystemUser>("SystemUser_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("SystemUser_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_email")]
        public SystemUser user_email {
            get {
                return GetRelatedEntity<SystemUser>("user_email", null);
            }
            set {
                SetRelatedEntity("user_email", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Emails")]
        public Contact Contact_Emails {
            get {
                return GetRelatedEntity<Contact>("Contact_Emails", null);
            }
            set {
                SetRelatedEntity("Contact_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_Emails")]
        public CampaignActivity CampaignActivity_Emails {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_Emails", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Email")]
        public TransactionCurrency TransactionCurrency_Email {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Email", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Email", null, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("Account_Email_EmailSender")]
        public Account Account_Email_EmailSender {
            get {
                return GetRelatedEntity<Account>("Account_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("Account_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Emails")]
        public Incident Incident_Emails {
            get {
                return GetRelatedEntity<Incident>("Incident_Emails", null);
            }
            set {
                SetRelatedEntity("Incident_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("Contact_Email_EmailSender")]
        public Contact Contact_Email_EmailSender {
            get {
                return GetRelatedEntity<Contact>("Contact_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("Contact_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("sendersaccount")]
        [RelationshipSchemaName("Account_Email_SendersAccount")]
        public Account Account_Email_SendersAccount {
            get {
                return GetRelatedEntity<Account>("Account_Email_SendersAccount", null);
            }
            set {
                SetRelatedEntity("Account_Email_SendersAccount", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_Emails")]
        public Opportunity Opportunity_Emails {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_Emails", null);
            }
            set {
                SetRelatedEntity("Opportunity_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_email_modifiedby")]
        public SystemUser lk_email_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_email_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_email_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("emailsender")]
        [RelationshipSchemaName("Lead_Email_EmailSender")]
        public Lead Lead_Email_EmailSender {
            get {
                return GetRelatedEntity<Lead>("Lead_Email_EmailSender", null);
            }
            set {
                SetRelatedEntity("Lead_Email_EmailSender", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_Emails")]
        public BookableResourceBookingHeader bookableresourcebookingheader_Emails {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_Emails", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_Emails")]
        public BookableResourceBooking bookableresourcebooking_Emails {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_Emails", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_Emails", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_Emails")]
        public Entitlement entitlement_Emails {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_Emails", null);
            }
            set {
                SetRelatedEntity("entitlement_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Email_QueueItem")]
        public IEnumerable<QueueItem> Email_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Email_QueueItem", null);
            }
            set {
                SetRelatedEntities("Email_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("email_connections2")]
        public IEnumerable<Connection> email_connections2 {
            get {
                return GetRelatedEntities<Connection>("email_connections2", null);
            }
            set {
                SetRelatedEntities("email_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("email_connections1")]
        public IEnumerable<Connection> email_connections1 {
            get {
                return GetRelatedEntities<Connection>("email_connections1", null);
            }
            set {
                SetRelatedEntities("email_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("email_email_parentactivityid", EntityRole.Referenced)]
        public IEnumerable<Email> Referencedemail_email_parentactivityid {
            get {
                return GetRelatedEntities<Email>("email_email_parentactivityid", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("email_email_parentactivityid", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("email_campaignresponse")]
        public IEnumerable<CampaignResponse> email_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("email_campaignresponse", null);
            }
            set {
                SetRelatedEntities("email_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("Email_SyncErrors")]
        public IEnumerable<SyncError> Email_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Email_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Email_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("email_activity_parties")]
        public IEnumerable<ActivityParty> email_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("email_activity_parties", null);
            }
            set {
                SetRelatedEntities("email_activity_parties", null, value);
            }
        }
        
        public static Email Retrieve(IOrganizationService service, Guid id, params Expression<Func<Email,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Holds the Email Server Profiles of an organization</para>
    /// <para>Display Name: Email Server Profile</para>
    /// </summary>
    [EntityLogicalName("emailserverprofile")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class EmailServerProfile : ExtendedEntity<EmailServerProfileState, EmailServerProfile_StatusCode> {
        
        public const string EntityLogicalName = "emailserverprofile";
        
        public const int EntityTypeCode = 9605;
        
        public EmailServerProfile() : 
                base(EntityLogicalName) {
        }
        
        public EmailServerProfile(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("emailserverprofileid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("emailserverprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the email server profile.</para>
        /// <para>Display Name: EmailServerProfile</para>
        /// </summary>
        [AttributeLogicalName("emailserverprofileid")]
        public Guid? EmailServerProfileId {
            get {
                return GetAttributeValue<Guid?>("emailserverprofileid");
            }
            set {
                SetId("emailserverprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the EWS Request created during the Last Test</para>
        /// <para>Display Name: Last Test Request</para>
        /// </summary>
        [AttributeLogicalName("lasttestrequest")]
        public string LastTestRequest {
            get {
                return GetAttributeValue<string>("lasttestrequest");
            }
            set {
                SetAttributeValue("lasttestrequest", value);
            }
        }
        
        [AttributeLogicalName("incomingpartnerapplicationname")]
        public string IncomingPartnerApplicationName {
            get {
                return GetAttributeValue<string>("incomingpartnerapplicationname");
            }
        }
        
        [AttributeLogicalName("organizationidname")]
        public string OrganizationIdName {
            get {
                return GetAttributeValue<string>("organizationidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the record.</para>
        /// <para>Display Name: Organization Id</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the email server profile's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public EmailServerProfile_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<EmailServerProfile_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Type a meaningful name for the email server profile. This name is displayed when you need to select an email server profile.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to use the Exchange Online Tenant ID obtained from running Microsoft Azure PowerShell cmdlets (highly recommended). If you select No, you can edit this field manually</para>
        /// <para>Display Name: Use Default Tenant Id</para>
        /// </summary>
        [AttributeLogicalName("usedefaulttenantid")]
        public bool? UseDefaultTenantId {
            get {
                return GetAttributeValue<bool?>("usedefaulttenantid");
            }
            set {
                SetAttributeValue("usedefaulttenantid", value);
            }
        }
        
        [AttributeLogicalName("isoutgoingpasswordset")]
        public bool? IsOutgoingPasswordSet {
            get {
                return GetAttributeValue<bool?>("isoutgoingpasswordset");
            }
        }
        
        [AttributeLogicalName("outgoingpartnerapplicationname")]
        public string OutgoingPartnerApplicationName {
            get {
                return GetAttributeValue<string>("outgoingpartnerapplicationname");
            }
        }
        
        /// <summary>
        /// <para>Select the business unit that owns the record.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Select whether to use impersonation to access the mailbox to process incoming emails.</para>
        /// <para>Display Name: Use Impersonation for Incoming Email</para>
        /// </summary>
        [AttributeLogicalName("incominguseimpersonation")]
        public bool? IncomingUseImpersonation {
            get {
                return GetAttributeValue<bool?>("incominguseimpersonation");
            }
            set {
                SetAttributeValue("incominguseimpersonation", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to send an email alert if more than 50% of the mailboxes in this email server profile failed to synchronize in an hour period.</para>
        /// <para>Display Name: Send an alert email to the owner of the email server profile reporting on major events</para>
        /// </summary>
        [AttributeLogicalName("sendemailalert")]
        public bool? SendEmailAlert {
            get {
                return GetAttributeValue<bool?>("sendemailalert");
            }
            set {
                SetAttributeValue("sendemailalert", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Select whether to timeout a single mailbox.</para>
        /// <para>Display Name: Timeout Mailbox Connection to Exchange</para>
        /// </summary>
        [AttributeLogicalName("timeoutmailboxconnection")]
        public bool? TimeoutMailboxConnection {
            get {
                return GetAttributeValue<bool?>("timeoutmailboxconnection");
            }
            set {
                SetAttributeValue("timeoutmailboxconnection", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to use impersonation for accessing the mailbox to process outgoing emails.</para>
        /// <para>Display Name: Use Impersonation for Outgoing Email</para>
        /// </summary>
        [AttributeLogicalName("outgoinguseimpersonation")]
        public bool? OutgoingUseImpersonation {
            get {
                return GetAttributeValue<bool?>("outgoinguseimpersonation");
            }
            set {
                SetAttributeValue("outgoinguseimpersonation", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether to move undelivered incoming emails to the Undeliverable folder in Microsoft Exchange.</para>
        /// <para>Display Name: Move Undelivered Emails to the Undeliverable Folder</para>
        /// </summary>
        [AttributeLogicalName("moveundeliveredemails")]
        public bool? MoveUndeliveredEmails {
            get {
                return GetAttributeValue<bool?>("moveundeliveredemails");
            }
            set {
                SetAttributeValue("moveundeliveredemails", value);
            }
        }
        
        /// <summary>
        /// <para>Select the outgoing email authentication protocol that is used for connecting to the email server.</para>
        /// <para>Display Name: Outgoing Authentication Protocol</para>
        /// </summary>
        [AttributeLogicalName("outgoingauthenticationprotocol")]
        public emailserverprofile_authenticationprotocol? OutgoingAuthenticationProtocol {
            get {
                return GetOptionSetValue<emailserverprofile_authenticationprotocol>("outgoingauthenticationprotocol");
            }
            set {
                SetOptionSetValue("outgoingauthenticationprotocol", value);
            }
        }
        
        [AttributeLogicalName("isincomingpasswordset")]
        public bool? IsIncomingPasswordSet {
            get {
                return GetAttributeValue<bool?>("isincomingpasswordset");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the location of the server for outgoing email.</para>
        /// <para>Display Name: Outgoing Email Server Location</para>
        /// </summary>
        [AttributeLogicalName("outgoingserverlocation")]
        public string OutgoingServerLocation {
            get {
                return GetAttributeValue<string>("outgoingserverlocation");
            }
            set {
                SetAttributeValue("outgoingserverlocation", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Shows the Time taken while running the last test</para>
        /// <para>Display Name: Last Test Time Taken</para>
        /// </summary>
        [AttributeLogicalName("lasttesttotalexecutiontime")]
        public long? LastTestTotalExecutionTime {
            get {
                return GetAttributeValue<long?>("lasttesttotalexecutiontime");
            }
            set {
                SetAttributeValue("lasttesttotalexecutiontime", value);
            }
        }
        
        /// <summary>
        /// <para>Email Server Type Name</para>
        /// <para>Display Name: Email Server Type Name</para>
        /// </summary>
        [AttributeLogicalName("emailservertypename")]
        public string EmailServerTypeName {
            get {
                return GetAttributeValue<string>("emailservertypename");
            }
        }
        
        /// <summary>
        /// <para>Indicates the code page to use when encoding email content.</para>
        /// <para>Display Name: Encoding Code Page</para>
        /// </summary>
        [AttributeLogicalName("encodingcodepage")]
        public string EncodingCodePage {
            get {
                return GetAttributeValue<string>("encodingcodepage");
            }
            set {
                SetAttributeValue("encodingcodepage", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time after which email messages that are received will be processed for mailboxes associated with the email server profile.</para>
        /// <para>Display Name: Process Emails Received After</para>
        /// </summary>
        [AttributeLogicalName("processemailsreceivedafter")]
        public DateTime? ProcessEmailsReceivedAfter {
            get {
                return GetAttributeValue<DateTime?>("processemailsreceivedafter");
            }
            set {
                SetAttributeValue("processemailsreceivedafter", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the password for outgoing email.</para>
        /// <para>Display Name: Outgoing Email Password</para>
        /// </summary>
        [AttributeLogicalName("outgoingpassword")]
        public string OutgoingPassword {
            get {
                return GetAttributeValue<string>("outgoingpassword");
            }
            set {
                SetAttributeValue("outgoingpassword", value);
            }
        }
        
        /// <summary>
        /// <para>Select the version of Exchange that is on the email server.</para>
        /// <para>Display Name: Exchange Version</para>
        /// </summary>
        [AttributeLogicalName("exchangeversion")]
        public EmailServerProfile_ExchangeVersion? ExchangeVersion {
            get {
                return GetOptionSetValue<EmailServerProfile_ExchangeVersion>("exchangeversion");
            }
            set {
                SetOptionSetValue("exchangeversion", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of concurrent connections allowed to the email server per authenticated user.</para>
        /// <para>Display Name: Maximum Concurrent Connections</para>
        /// </summary>
        [AttributeLogicalName("maxconcurrentconnections")]
        public int? MaxConcurrentConnections {
            get {
                return GetAttributeValue<int?>("maxconcurrentconnections");
            }
            set {
                SetAttributeValue("maxconcurrentconnections", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates the outgoing partner application.</para>
        /// <para>Display Name: Outgoing Partner Application</para>
        /// </summary>
        [AttributeLogicalName("outgoingpartnerapplication")]
        public EntityReference OutgoingPartnerApplication {
            get {
                return GetAttributeValue<EntityReference>("outgoingpartnerapplication");
            }
        }
        
        /// <summary>
        /// <para>Minimum polling interval, in minutes, for mailboxes that are associated with this email server profile.</para>
        /// <para>Display Name: Minimum Polling Interval In Minutes</para>
        /// </summary>
        [AttributeLogicalName("minpollingintervalinminutes")]
        public int? MinPollingIntervalInMinutes {
            get {
                return GetAttributeValue<int?>("minpollingintervalinminutes");
            }
            set {
                SetAttributeValue("minpollingintervalinminutes", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Indicates the incoming partner application.</para>
        /// <para>Display Name: Incoming Partner Application</para>
        /// </summary>
        [AttributeLogicalName("incomingpartnerapplication")]
        public EntityReference IncomingPartnerApplication {
            get {
                return GetAttributeValue<EntityReference>("incomingpartnerapplication");
            }
        }
        
        /// <summary>
        /// <para>Shows the Crm message obtained during the Last Test</para>
        /// <para>Display Name: Last Crm Message</para>
        /// </summary>
        [AttributeLogicalName("lastcrmmessage")]
        public string LastCrmMessage {
            get {
                return GetAttributeValue<string>("lastcrmmessage");
            }
            set {
                SetAttributeValue("lastcrmmessage", value);
            }
        }
        
        /// <summary>
        /// <para>Type the user name for incoming email.</para>
        /// <para>Display Name: Incoming Email User Name</para>
        /// </summary>
        [AttributeLogicalName("incomingusername")]
        public string IncomingUserName {
            get {
                return GetAttributeValue<string>("incomingusername");
            }
            set {
                SetAttributeValue("incomingusername", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Last Test Start date and time</para>
        /// <para>Display Name: Last Test Time</para>
        /// </summary>
        [AttributeLogicalName("lastteststarttime")]
        public DateTime? LastTestStartTime {
            get {
                return GetAttributeValue<DateTime?>("lastteststarttime");
            }
            set {
                SetAttributeValue("lastteststarttime", value);
            }
        }
        
        /// <summary>
        /// <para>Select the incoming email authentication protocol that is used for connecting to the email server.</para>
        /// <para>Display Name: Incoming Authentication Protocol</para>
        /// </summary>
        [AttributeLogicalName("incomingauthenticationprotocol")]
        public emailserverprofile_authenticationprotocol? IncomingAuthenticationProtocol {
            get {
                return GetOptionSetValue<emailserverprofile_authenticationprotocol>("incomingauthenticationprotocol");
            }
            set {
                SetOptionSetValue("incomingauthenticationprotocol", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of milliseconds to timeout a single mailbox. The upper limit is 100 seconds.</para>
        /// <para>Display Name: Timeout a Single Mailbox Connection After this Amount of Milliseconds</para>
        /// </summary>
        [AttributeLogicalName("timeoutmailboxconnectionafteramount")]
        public int? TimeoutMailboxConnectionAfterAmount {
            get {
                return GetAttributeValue<int?>("timeoutmailboxconnectionafteramount");
            }
            set {
                SetAttributeValue("timeoutmailboxconnectionafteramount", value);
            }
        }
        
        /// <summary>
        /// <para>Type the tenant ID of Exchange Online.</para>
        /// <para>Display Name: Exchange Online Tenant Id</para>
        /// </summary>
        [AttributeLogicalName("exchangeonlinetenantid")]
        public string ExchangeOnlineTenantId {
            get {
                return GetAttributeValue<string>("exchangeonlinetenantid");
            }
            set {
                SetAttributeValue("exchangeonlinetenantid", value);
            }
        }
        
        /// <summary>
        /// <para>Select how credentials will be retrieved for incoming email.</para>
        /// <para>Display Name: Incoming Email Credential Retrieval</para>
        /// </summary>
        [AttributeLogicalName("incomingcredentialretrieval")]
        public EmailServerProfile_IncomingCredentialRetrieval? IncomingCredentialRetrieval {
            get {
                return GetOptionSetValue<EmailServerProfile_IncomingCredentialRetrieval>("incomingcredentialretrieval");
            }
            set {
                SetOptionSetValue("incomingcredentialretrieval", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the email server profile is active or inactive.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public EmailServerProfileState? StateCode {
            get {
                return GetOptionSetValue<EmailServerProfileState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to use the same settings for incoming and outgoing connections.</para>
        /// <para>Display Name: Use Same Settings for Outgoing Connection</para>
        /// </summary>
        [AttributeLogicalName("usesamesettingsforoutgoingconnections")]
        public bool? UseSameSettingsForOutgoingConnections {
            get {
                return GetAttributeValue<bool?>("usesamesettingsforoutgoingconnections");
            }
            set {
                SetAttributeValue("usesamesettingsforoutgoingconnections", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to use the Secure Sockets Layer (SSL) protocol for outgoing email.</para>
        /// <para>Display Name: Use SSL for Outgoing Email</para>
        /// </summary>
        [AttributeLogicalName("outgoingusessl")]
        public bool? OutgoingUseSSL {
            get {
                return GetAttributeValue<bool?>("outgoingusessl");
            }
            set {
                SetAttributeValue("outgoingusessl", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the EWS Response obtained during the Last Test</para>
        /// <para>Display Name: Last Test Response</para>
        /// </summary>
        [AttributeLogicalName("lasttestresponse")]
        public string LastTestResponse {
            get {
                return GetAttributeValue<string>("lasttestresponse");
            }
            set {
                SetAttributeValue("lasttestresponse", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information that describes the email server profile.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the email connector will grant delegate access permissions to the accessing user when required while processing outgoing emails.</para>
        /// <para>Display Name: Auto Grant Delegate Access for Outgoing Email.</para>
        /// </summary>
        [AttributeLogicalName("outgoingautograntdelegateaccess")]
        public bool? OutgoingAutoGrantDelegateAccess {
            get {
                return GetAttributeValue<bool?>("outgoingautograntdelegateaccess");
            }
            set {
                SetAttributeValue("outgoingautograntdelegateaccess", value);
            }
        }
        
        /// <summary>
        /// <para>Email Server Profile Owner's email address</para>
        /// <para>Display Name: Email Server Profile Owner's email address</para>
        /// </summary>
        [AttributeLogicalName("owneremailaddress")]
        public string OwnerEmailAddress {
            get {
                return GetAttributeValue<string>("owneremailaddress");
            }
            set {
                SetAttributeValue("owneremailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Select how credentials will be retrieved for outgoing email.</para>
        /// <para>Display Name: Outgoing Email Credential Retrieval</para>
        /// </summary>
        [AttributeLogicalName("outgoingcredentialretrieval")]
        public EmailServerProfile_OutgoingCredentialRetrieval? OutgoingCredentialRetrieval {
            get {
                return GetOptionSetValue<EmailServerProfile_OutgoingCredentialRetrieval>("outgoingcredentialretrieval");
            }
            set {
                SetOptionSetValue("outgoingcredentialretrieval", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the location of the server for incoming email.</para>
        /// <para>Display Name: Incoming Email Server Location</para>
        /// </summary>
        [AttributeLogicalName("incomingserverlocation")]
        public string IncomingServerLocation {
            get {
                return GetAttributeValue<string>("incomingserverlocation");
            }
            set {
                SetAttributeValue("incomingserverlocation", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Shows the last test Execution status of email server profile</para>
        /// <para>Display Name: Last Test Execution Status</para>
        /// </summary>
        [AttributeLogicalName("lasttestexecutionstatus")]
        public EmailServerProfile_LastTestExecutionStatus? LastTestExecutionStatus {
            get {
                return GetOptionSetValue<EmailServerProfile_LastTestExecutionStatus>("lasttestexecutionstatus");
            }
            set {
                SetOptionSetValue("lasttestexecutionstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Type the default location of the server.</para>
        /// <para>Display Name: Default Email Server Location</para>
        /// </summary>
        [AttributeLogicalName("defaultserverlocation")]
        public string DefaultServerLocation {
            get {
                return GetAttributeValue<string>("defaultserverlocation");
            }
            set {
                SetAttributeValue("defaultserverlocation", value);
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Shows the last test Validation status of email server profile</para>
        /// <para>Display Name: Last Test Validation Status</para>
        /// </summary>
        [AttributeLogicalName("lasttestvalidationstatus")]
        public EmailServerProfile_LastTestValidationStatus? LastTestValidationStatus {
            get {
                return GetOptionSetValue<EmailServerProfile_LastTestValidationStatus>("lasttestvalidationstatus");
            }
            set {
                SetOptionSetValue("lasttestvalidationstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Type the user name for outgoing email.</para>
        /// <para>Display Name: Outgoing Email User Name</para>
        /// </summary>
        [AttributeLogicalName("outgoingusername")]
        public string OutgoingUsername {
            get {
                return GetAttributeValue<string>("outgoingusername");
            }
            set {
                SetAttributeValue("outgoingusername", value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunitname")]
        public string OwningBusinessUnitName {
            get {
                return GetAttributeValue<string>("owningbusinessunitname");
            }
        }
        
        /// <summary>
        /// <para>Type the Exchange port number for outgoing mail.</para>
        /// <para>Display Name: Outgoing Email Port</para>
        /// </summary>
        [AttributeLogicalName("outgoingportnumber")]
        public int? OutgoingPortNumber {
            get {
                return GetAttributeValue<int?>("outgoingportnumber");
            }
            set {
                SetAttributeValue("outgoingportnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the password for incoming email.</para>
        /// <para>Display Name: Incoming Email Password</para>
        /// </summary>
        [AttributeLogicalName("incomingpassword")]
        public string IncomingPassword {
            get {
                return GetAttributeValue<string>("incomingpassword");
            }
            set {
                SetAttributeValue("incomingpassword", value);
            }
        }
        
        /// <summary>
        /// <para>Select the profile's email server type.</para>
        /// <para>Display Name: Email Server Type</para>
        /// </summary>
        [AttributeLogicalName("servertype")]
        public EmailServerProfile_ServerType? ServerType {
            get {
                return GetOptionSetValue<EmailServerProfile_ServerType>("servertype");
            }
            set {
                SetOptionSetValue("servertype", value);
            }
        }
        
        /// <summary>
        /// <para>Type the Exchange port number for incoming mail.</para>
        /// <para>Display Name: Incoming Email Port</para>
        /// </summary>
        [AttributeLogicalName("incomingportnumber")]
        public int? IncomingPortNumber {
            get {
                return GetAttributeValue<int?>("incomingportnumber");
            }
            set {
                SetAttributeValue("incomingportnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to use the Secure Sockets Layer (SSL) protocol for incoming email.</para>
        /// <para>Display Name: Use SSL for Incoming Email</para>
        /// </summary>
        [AttributeLogicalName("incomingusessl")]
        public bool? IncomingUseSSL {
            get {
                return GetAttributeValue<bool?>("incomingusessl");
            }
            set {
                SetAttributeValue("incomingusessl", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to automatically discover the server location</para>
        /// <para>Display Name: Auto Discover Server Location</para>
        /// </summary>
        [AttributeLogicalName("useautodiscover")]
        public bool? UseAutoDiscover {
            get {
                return GetAttributeValue<bool?>("useautodiscover");
            }
            set {
                SetAttributeValue("useautodiscover", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the last test authorization status of email server profile</para>
        /// <para>Display Name: Last Test Authorization Status</para>
        /// </summary>
        [AttributeLogicalName("lastauthorizationstatus")]
        public EmailServerProfile_LastAuthorizationStatus? LastAuthorizationStatus {
            get {
                return GetOptionSetValue<EmailServerProfile_LastAuthorizationStatus>("lastauthorizationstatus");
            }
            set {
                SetOptionSetValue("lastauthorizationstatus", value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_emailserverprofile")]
        public BusinessUnit business_unit_emailserverprofile {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_emailserverprofile", null);
            }
            set {
                SetRelatedEntity("business_unit_emailserverprofile", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_emailserverprofile_createdby")]
        public SystemUser lk_emailserverprofile_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_emailserverprofile_createdby", null);
            }
            set {
                SetRelatedEntity("lk_emailserverprofile_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_emailserverprofile_modifiedby")]
        public SystemUser lk_emailserverprofile_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_emailserverprofile_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_emailserverprofile_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_emailserverprofile")]
        public Team team_emailserverprofile {
            get {
                return GetRelatedEntity<Team>("team_emailserverprofile", null);
            }
            set {
                SetRelatedEntity("team_emailserverprofile", null, value);
            }
        }
        
        [AttributeLogicalName("organizationid")]
        [RelationshipSchemaName("organization_emailserverprofile")]
        public Organization organization_emailserverprofile {
            get {
                return GetRelatedEntity<Organization>("organization_emailserverprofile", null);
            }
            set {
                SetRelatedEntity("organization_emailserverprofile", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_emailserverprofile_modifiedonbehalfby")]
        public SystemUser lk_emailserverprofile_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_emailserverprofile_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_emailserverprofile_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_emailserverprofile_createdonbehalfby")]
        public SystemUser lk_emailserverprofile_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_emailserverprofile_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_emailserverprofile_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("EmailServerProfile_Organization")]
        public IEnumerable<Organization> EmailServerProfile_Organization {
            get {
                return GetRelatedEntities<Organization>("EmailServerProfile_Organization", null);
            }
            set {
                SetRelatedEntities("EmailServerProfile_Organization", null, value);
            }
        }
        
        [RelationshipSchemaName("EmailServerProfile_SyncErrors")]
        public IEnumerable<SyncError> EmailServerProfile_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("EmailServerProfile_SyncErrors", null);
            }
            set {
                SetRelatedEntities("EmailServerProfile_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("emailserverprofile_mailbox")]
        public IEnumerable<Mailbox> emailserverprofile_mailbox {
            get {
                return GetRelatedEntities<Mailbox>("emailserverprofile_mailbox", null);
            }
            set {
                SetRelatedEntities("emailserverprofile_mailbox", null, value);
            }
        }
        
        public static EmailServerProfile Retrieve(IOrganizationService service, Guid id, params Expression<Func<EmailServerProfile,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Defines the amount and type of support a customer should receive.</para>
    /// <para>Display Name: Entitlement</para>
    /// </summary>
    [EntityLogicalName("entitlement")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Entitlement : ExtendedEntity<EntitlementState, Entitlement_StatusCode> {
        
        public const string EntityLogicalName = "entitlement";
        
        public const int EntityTypeCode = 9700;
        
        public Entitlement() : 
                base(EntityLogicalName) {
        }
        
        public Entitlement(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("entitlementid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("entitlementid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Entitlement</para>
        /// </summary>
        [AttributeLogicalName("entitlementid")]
        public Guid? EntitlementId {
            get {
                return GetAttributeValue<Guid?>("entitlementid");
            }
            set {
                SetId("entitlementid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Entitlement Template associated with Entitlement.</para>
        /// <para>Display Name: Entitlement Template</para>
        /// </summary>
        [AttributeLogicalName("entitlementtemplateid")]
        public EntityReference EntitlementTemplateId {
            get {
                return GetAttributeValue<EntityReference>("entitlementtemplateid");
            }
            set {
                SetAttributeValue("entitlementtemplateid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Account associated with Entitlement.</para>
        /// <para>Display Name: Account Id Name</para>
        /// </summary>
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Tells whether case creation is restricted based on entitlement terms.</para>
        /// <para>Display Name: Restrict based on entitlement terms</para>
        /// </summary>
        [AttributeLogicalName("restrictcasecreation")]
        public bool? RestrictCaseCreation {
            get {
                return GetAttributeValue<bool?>("restrictcasecreation");
            }
            set {
                SetAttributeValue("restrictcasecreation", value);
            }
        }
        
        /// <summary>
        /// <para>Select the reason code that explains the status of the entitlement.</para>
        /// <para>Display Name: Status Code</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Entitlement_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Entitlement_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a meaningful name for the entitlement.</para>
        /// <para>Display Name: Entitlement Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the entitlement starts.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("startdate")]
        public DateTime? StartDate {
            get {
                return GetAttributeValue<DateTime?>("startdate");
            }
            set {
                SetAttributeValue("startdate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Contact associated with Entitlement.</para>
        /// <para>Display Name: Contact Id Name</para>
        /// </summary>
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Account associated with Entitlement.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the contact.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether this entitlement is the default one for the specified customer.</para>
        /// <para>Display Name: Is Default</para>
        /// </summary>
        [AttributeLogicalName("isdefault")]
        public bool? IsDefault {
            get {
                return GetAttributeValue<bool?>("isdefault");
            }
            set {
                SetAttributeValue("isdefault", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName {
            get {
                return GetAttributeValue<string>("customeridname");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Select whether to decrease the remaining terms when the case is created or when it is resolved.</para>
        /// <para>Display Name: Decrease Remaining On</para>
        /// </summary>
        [AttributeLogicalName("decreaseremainingon")]
        public Entitlement_DecreaseRemainingOn? DecreaseRemainingOn {
            get {
                return GetOptionSetValue<Entitlement_DecreaseRemainingOn>("decreaseremainingon");
            }
            set {
                SetOptionSetValue("decreaseremainingon", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the Entitlement</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who owns the entitlement. This field is updated every time the item is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) associated with the entitlement.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the total number of entitlement terms that are left.</para>
        /// <para>Display Name: Remaining Terms</para>
        /// </summary>
        [AttributeLogicalName("remainingterms")]
        public decimal? RemainingTerms {
            get {
                return GetAttributeValue<decimal?>("remainingterms");
            }
            set {
                SetAttributeValue("remainingterms", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("slaidname")]
        public string SLAIdName {
            get {
                return GetAttributeValue<string>("slaidname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public EntitlementState? StateCode {
            get {
                return GetOptionSetValue<EntitlementState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("entitlementtemplateidname")]
        public string EntitlementTemplateIdName {
            get {
                return GetAttributeValue<string>("entitlementtemplateidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Select the type of entitlement terms.</para>
        /// <para>Display Name: Allocation Type</para>
        /// </summary>
        [AttributeLogicalName("allocationtypecode")]
        public Entitlement_AllocationTypeCode? AllocationTypeCode {
            get {
                return GetOptionSetValue<Entitlement_AllocationTypeCode>("allocationtypecode");
            }
            set {
                SetOptionSetValue("allocationtypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the total number of entitlement terms.</para>
        /// <para>Display Name: Total Terms</para>
        /// </summary>
        [AttributeLogicalName("totalterms")]
        public decimal? TotalTerms {
            get {
                return GetAttributeValue<decimal?>("totalterms");
            }
            set {
                SetAttributeValue("totalterms", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the contact with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Contact associated with Entitlement.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Customer Type</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType {
            get {
                return GetAttributeValue<string>("customeridtype");
            }
            set {
                SetAttributeValue("customeridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Select the access someone will have to the knowledge base on the portal.</para>
        /// <para>Display Name: KB Access Level</para>
        /// </summary>
        [AttributeLogicalName("kbaccesslevel")]
        public Entitlement_KbAccessLevel? KbAccessLevel {
            get {
                return GetOptionSetValue<Entitlement_KbAccessLevel>("kbaccesslevel");
            }
            set {
                SetOptionSetValue("kbaccesslevel", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the entitlement.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Choose a contact or account for which this entitlement has been defined.</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the entitlement ends.</para>
        /// <para>Display Name: End Date</para>
        /// </summary>
        [AttributeLogicalName("enddate")]
        public DateTime? EndDate {
            get {
                return GetAttributeValue<DateTime?>("enddate");
            }
            set {
                SetAttributeValue("enddate", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the entitlement was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the entitlement item.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("entitlementcontacts_association")]
        public IEnumerable<Contact> entitlementcontacts_association {
            get {
                return GetRelatedEntities<Contact>("entitlementcontacts_association", null);
            }
            set {
                SetRelatedEntities("entitlementcontacts_association", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("contact_entitlement_Customer")]
        public Contact contact_entitlement_Customer {
            get {
                return GetRelatedEntity<Contact>("contact_entitlement_Customer", null);
            }
            set {
                SetRelatedEntity("contact_entitlement_Customer", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("sla_entitlement")]
        public SLA sla_entitlement {
            get {
                return GetRelatedEntity<SLA>("sla_entitlement", null);
            }
            set {
                SetRelatedEntity("sla_entitlement", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Entitlement")]
        public TransactionCurrency TransactionCurrency_Entitlement {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Entitlement", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Entitlement", null, value);
            }
        }
        
        [AttributeLogicalName("contactid")]
        [RelationshipSchemaName("contact_entitlement_ContactId")]
        public Contact contact_entitlement_ContactId {
            get {
                return GetRelatedEntity<Contact>("contact_entitlement_ContactId", null);
            }
            set {
                SetRelatedEntity("contact_entitlement_ContactId", null, value);
            }
        }
        
        [AttributeLogicalName("accountid")]
        [RelationshipSchemaName("account_entitlement_Account")]
        public Account account_entitlement_Account {
            get {
                return GetRelatedEntity<Account>("account_entitlement_Account", null);
            }
            set {
                SetRelatedEntity("account_entitlement_Account", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("account_entitlement_Customer")]
        public Account account_entitlement_Customer {
            get {
                return GetRelatedEntity<Account>("account_entitlement_Customer", null);
            }
            set {
                SetRelatedEntity("account_entitlement_Customer", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_entitlement")]
        public BusinessUnit business_unit_entitlement {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_entitlement", null);
            }
            set {
                SetRelatedEntity("business_unit_entitlement", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_entitlement")]
        public Team team_entitlement {
            get {
                return GetRelatedEntity<Team>("team_entitlement", null);
            }
            set {
                SetRelatedEntity("team_entitlement", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_entitlement")]
        public SystemUser user_entitlement {
            get {
                return GetRelatedEntity<SystemUser>("user_entitlement", null);
            }
            set {
                SetRelatedEntity("user_entitlement", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_entitlement_modifiedonbehalfby")]
        public SystemUser lk_entitlement_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_entitlement_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_entitlement_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_entitlement_modifiedby")]
        public SystemUser lk_entitlement_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_entitlement_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_entitlement_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_entitlement_createdonbehalfby")]
        public SystemUser lk_entitlement_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_entitlement_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_entitlement_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_entitlement_createdby")]
        public SystemUser lk_entitlement_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_entitlement_createdby", null);
            }
            set {
                SetRelatedEntity("lk_entitlement_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_cases")]
        public IEnumerable<Incident> entitlement_cases {
            get {
                return GetRelatedEntities<Incident>("entitlement_cases", null);
            }
            set {
                SetRelatedEntities("entitlement_cases", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_SocialActivities")]
        public IEnumerable<SocialActivity> entitlement_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("entitlement_SocialActivities", null);
            }
            set {
                SetRelatedEntities("entitlement_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("Entitlement_SyncErrors")]
        public IEnumerable<SyncError> Entitlement_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Entitlement_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Entitlement_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_connections2")]
        public IEnumerable<Connection> entitlement_connections2 {
            get {
                return GetRelatedEntities<Connection>("entitlement_connections2", null);
            }
            set {
                SetRelatedEntities("entitlement_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_connections1")]
        public IEnumerable<Connection> entitlement_connections1 {
            get {
                return GetRelatedEntities<Connection>("entitlement_connections1", null);
            }
            set {
                SetRelatedEntities("entitlement_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> entitlement_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("entitlement_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("entitlement_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_Tasks")]
        public IEnumerable<Task> entitlement_Tasks {
            get {
                return GetRelatedEntities<Task>("entitlement_Tasks", null);
            }
            set {
                SetRelatedEntities("entitlement_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> entitlement_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("entitlement_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("entitlement_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_PhoneCalls")]
        public IEnumerable<PhoneCall> entitlement_PhoneCalls {
            get {
                return GetRelatedEntities<PhoneCall>("entitlement_PhoneCalls", null);
            }
            set {
                SetRelatedEntities("entitlement_PhoneCalls", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_Letters")]
        public IEnumerable<Letter> entitlement_Letters {
            get {
                return GetRelatedEntities<Letter>("entitlement_Letters", null);
            }
            set {
                SetRelatedEntities("entitlement_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_Faxes")]
        public IEnumerable<Fax> entitlement_Faxes {
            get {
                return GetRelatedEntities<Fax>("entitlement_Faxes", null);
            }
            set {
                SetRelatedEntities("entitlement_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_Emails")]
        public IEnumerable<Email> entitlement_Emails {
            get {
                return GetRelatedEntities<Email>("entitlement_Emails", null);
            }
            set {
                SetRelatedEntities("entitlement_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_Appointments")]
        public IEnumerable<Appointment> entitlement_Appointments {
            get {
                return GetRelatedEntities<Appointment>("entitlement_Appointments", null);
            }
            set {
                SetRelatedEntities("entitlement_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("entitlement_ActivityPointers")]
        public IEnumerable<ActivityPointer> entitlement_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("entitlement_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("entitlement_ActivityPointers", null, value);
            }
        }
        
        public static Entitlement Retrieve(IOrganizationService service, Guid id, params Expression<Func<Entitlement,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("entitlementcontacts")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class EntitlementContacts : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "entitlementcontacts";
        
        public const int EntityTypeCode = 7272;
        
        public EntitlementContacts() : 
                base(EntityLogicalName) {
        }
        
        public EntitlementContacts(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("entitlementcontactid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("entitlementcontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contacts for the entitlements.</para>
        /// </summary>
        [AttributeLogicalName("entitlementcontactid")]
        public Guid? EntitlementContactId {
            get {
                return GetAttributeValue<Guid?>("entitlementcontactid");
            }
            set {
                SetId("entitlementcontactid", value);
            }
        }
        
        [AttributeLogicalName("entitlementid")]
        public Guid? EntitlementId {
            get {
                return GetAttributeValue<Guid?>("entitlementid");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static EntitlementContacts Retrieve(IOrganizationService service, Guid id, params Expression<Func<EntitlementContacts,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Information about external parties that need to access Dynamics CRM from external channels.For internal use only</para>
    /// <para>Display Name: External Party</para>
    /// </summary>
    [EntityLogicalName("externalparty")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ExternalParty : ExtendedEntity<ExternalPartyState, ExternalParty_StatusCode> {
        
        public const string EntityLogicalName = "externalparty";
        
        public const int EntityTypeCode = 3008;
        
        public ExternalParty() : 
                base(EntityLogicalName) {
        }
        
        public ExternalParty(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("externalpartyid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("externalpartyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: External Party</para>
        /// </summary>
        [AttributeLogicalName("externalpartyid")]
        public Guid? ExternalPartyId {
            get {
                return GetAttributeValue<Guid?>("externalpartyid");
            }
            set {
                SetId("externalpartyid", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the external party was last disabled on.</para>
        /// <para>Display Name: Last Disabled On</para>
        /// </summary>
        [AttributeLogicalName("lastdisabledon")]
        public DateTime? LastDisabledOn {
            get {
                return GetAttributeValue<DateTime?>("lastdisabledon");
            }
            set {
                SetAttributeValue("lastdisabledon", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type of the external party.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("type")]
        public string Type {
            get {
                return GetAttributeValue<string>("type");
            }
            set {
                SetAttributeValue("type", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the external party's first name.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the external party's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the external party.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the ExternalParty with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Contains the value that is used to detect and avoid duplicate external party records.</para>
        /// <para>Display Name: Correlation Key</para>
        /// </summary>
        [AttributeLogicalName("correlationkey")]
        public string CorrelationKey {
            get {
                return GetAttributeValue<string>("correlationkey");
            }
            set {
                SetAttributeValue("correlationkey", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the external party's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Type the external party's last name.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the External Party used when synchronizing customizations for the Microsoft Dynamics CRM client for Outlook</para>
        /// <para>Display Name: External Party Unique Id</para>
        /// </summary>
        [AttributeLogicalName("externalpartyidunique")]
        public Guid? ExternalPartyIdUnique {
            get {
                return GetAttributeValue<Guid?>("externalpartyidunique");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the email address derived from the equivalent record that's enabled as the external party and shows the external user's email address.</para>
        /// <para>Display Name: Email Address</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EmailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Type the external party's middle name.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the combined Yomi first and last names of the external party so that the full phonetic name can be displayed in views and reports.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the external party's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the external party..</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the ExternalParty with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the external party was last enabled on.</para>
        /// <para>Display Name: Last Enabled On</para>
        /// </summary>
        [AttributeLogicalName("lastenabledon")]
        public DateTime? LastEnabledOn {
            get {
                return GetAttributeValue<DateTime?>("lastenabledon");
            }
            set {
                SetAttributeValue("lastenabledon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the external party status</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public ExternalParty_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<ExternalParty_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the external party is enabled or disabled</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ExternalPartyState? StateCode {
            get {
                return GetOptionSetValue<ExternalPartyState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the full name of the external party.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
            set {
                SetAttributeValue("fullname", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_ExternalParty")]
        public TransactionCurrency TransactionCurrency_ExternalParty {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_ExternalParty", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_ExternalParty", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_externalparty")]
        public BusinessUnit business_unit_externalparty {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_externalparty", null);
            }
            set {
                SetRelatedEntity("business_unit_externalparty", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_externalparty")]
        public Team team_externalparty {
            get {
                return GetRelatedEntity<Team>("team_externalparty", null);
            }
            set {
                SetRelatedEntity("team_externalparty", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_externalparty")]
        public SystemUser user_externalparty {
            get {
                return GetRelatedEntity<SystemUser>("user_externalparty", null);
            }
            set {
                SetRelatedEntity("user_externalparty", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_externalparty_modifiedonbehalfby")]
        public SystemUser lk_externalparty_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_externalparty_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_externalparty_modifiedby")]
        public SystemUser lk_externalparty_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_externalparty_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_externalparty_createdonbehalfby")]
        public SystemUser lk_externalparty_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_externalparty_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_externalparty_createdby")]
        public SystemUser lk_externalparty_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_externalparty_createdby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_contact_modifiedby")]
        public IEnumerable<Contact> lk_externalparty_contact_modifiedby {
            get {
                return GetRelatedEntities<Contact>("lk_externalparty_contact_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_contact_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("ExternalParty_SyncErrors")]
        public IEnumerable<SyncError> ExternalParty_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("ExternalParty_SyncErrors", null);
            }
            set {
                SetRelatedEntities("ExternalParty_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_opportunityclose_createdby")]
        public IEnumerable<OpportunityClose> lk_externalparty_opportunityclose_createdby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_externalparty_opportunityclose_createdby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_opportunityclose_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_incident_modifiedby")]
        public IEnumerable<Incident> lk_externalparty_incident_modifiedby {
            get {
                return GetRelatedEntities<Incident>("lk_externalparty_incident_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_incident_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_account_createdby")]
        public IEnumerable<Account> lk_externalparty_account_createdby {
            get {
                return GetRelatedEntities<Account>("lk_externalparty_account_createdby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_account_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_contact_createdby")]
        public IEnumerable<Contact> lk_externalparty_contact_createdby {
            get {
                return GetRelatedEntities<Contact>("lk_externalparty_contact_createdby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_contact_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_opportunityclose_modifiedby")]
        public IEnumerable<OpportunityClose> lk_externalparty_opportunityclose_modifiedby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_externalparty_opportunityclose_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_opportunityclose_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_incident_createdby")]
        public IEnumerable<Incident> lk_externalparty_incident_createdby {
            get {
                return GetRelatedEntities<Incident>("lk_externalparty_incident_createdby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_incident_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_account_modifiedby")]
        public IEnumerable<Account> lk_externalparty_account_modifiedby {
            get {
                return GetRelatedEntities<Account>("lk_externalparty_account_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_account_modifiedby", null, value);
            }
        }
        
        public static ExternalParty Retrieve(IOrganizationService service, Guid id, params Expression<Func<ExternalParty,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Activity that tracks call outcome and number of pages for a fax and optionally stores an electronic copy of the document.</para>
    /// <para>Display Name: Fax</para>
    /// </summary>
    [EntityLogicalName("fax")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Fax : ExtendedEntity<FaxState, Fax_StatusCode> {
        
        public const string EntityLogicalName = "fax";
        
        public const int EntityTypeCode = 4204;
        
        public Fax() : 
                base(EntityLogicalName) {
        }
        
        public Fax(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the fax activity.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the Transmitting Subscriber ID (TSID) associated with a send action. This is typically a combination of the recipient's fax or phone number and company name.</para>
        /// <para>Display Name: Transmit. Station Id</para>
        /// </summary>
        [AttributeLogicalName("tsid")]
        public string Tsid {
            get {
                return GetAttributeValue<string>("tsid");
            }
            set {
                SetAttributeValue("tsid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the fax type, such as sales offer or press release, to tie the fax to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Select the fax's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Fax_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Fax_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the fax activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the fax. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual time to create and send the fax.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the fax activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for an associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Type the number of pages included in the fax.</para>
        /// <para>Display Name: Number of Pages</para>
        /// </summary>
        [AttributeLogicalName("numberofpages")]
        public int? NumberOfPages {
            get {
                return GetAttributeValue<int?>("numberofpages");
            }
            set {
                SetAttributeValue("numberofpages", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the recipient's fax number.</para>
        /// <para>Display Name: Fax Number</para>
        /// </summary>
        [AttributeLogicalName("faxnumber")]
        public string FaxNumber {
            get {
                return GetAttributeValue<string>("faxnumber");
            }
            set {
                SetAttributeValue("faxnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the cover page to use when sending the fax.</para>
        /// <para>Display Name: Cover Page Name</para>
        /// </summary>
        [AttributeLogicalName("coverpagename")]
        public string CoverPageName {
            get {
                return GetAttributeValue<string>("coverpagename");
            }
            set {
                SetAttributeValue("coverpagename", value);
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the fax, such as the primary message or the products and services featured.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the expected duration of the fax activity, in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this fax. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the fax record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent creating and sending the fax. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Select the direction of the fax as incoming or outbound.</para>
        /// <para>Display Name: Direction</para>
        /// </summary>
        [AttributeLogicalName("directioncode")]
        public bool? DirectionCode {
            get {
                return GetAttributeValue<bool?>("directioncode");
            }
            set {
                SetAttributeValue("directioncode", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the fax.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the fax activity is open, completed, or canceled. Completed and canceled fax activities are read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public FaxState? StateCode {
            get {
                return GetOptionSetValue<FaxState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the fax activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, queue, or user recipients for the fax.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the fax activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the fax type to relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Fax_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Fax_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, queue, or user who sent the fax.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Indication of whether the fax activity was created by a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Type the billing code for the fax to make sure the fax is charged to the correct sender or customer account.</para>
        /// <para>Display Name: Billing Code</para>
        /// </summary>
        [AttributeLogicalName("billingcode")]
        public string BillingCode {
            get {
                return GetAttributeValue<string>("billingcode");
            }
            set {
                SetAttributeValue("billingcode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the fax.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the fax activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the fax. By default, it displays the date and time when the activity was created, but can be edited to capture the actual time to create and send the fax.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_Faxes")]
        public msdyn_PostAlbum msdyn_postalbum_Faxes {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_Faxes", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_Faxes")]
        public dg_event dg_event_Faxes {
            get {
                return GetRelatedEntity<dg_event>("dg_event_Faxes", null);
            }
            set {
                SetRelatedEntity("dg_event_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_Faxes")]
        public dg_participant dg_participant_Faxes {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_Faxes", null);
            }
            set {
                SetRelatedEntity("dg_participant_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_fax_modifiedonbehalfby")]
        public SystemUser lk_fax_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_fax_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_fax_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Faxes")]
        public Incident Incident_Faxes {
            get {
                return GetRelatedEntity<Incident>("Incident_Faxes", null);
            }
            set {
                SetRelatedEntity("Incident_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_Faxes")]
        public Campaign Campaign_Faxes {
            get {
                return GetRelatedEntity<Campaign>("Campaign_Faxes", null);
            }
            set {
                SetRelatedEntity("Campaign_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_Faxes")]
        public Lead Lead_Faxes {
            get {
                return GetRelatedEntity<Lead>("Lead_Faxes", null);
            }
            set {
                SetRelatedEntity("Lead_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Faxes")]
        public Contact Contact_Faxes {
            get {
                return GetRelatedEntity<Contact>("Contact_Faxes", null);
            }
            set {
                SetRelatedEntity("Contact_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_fax_modifiedby")]
        public SystemUser lk_fax_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_fax_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_fax_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Fax")]
        public TransactionCurrency TransactionCurrency_Fax {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Fax", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Fax", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_Faxes")]
        public Opportunity Opportunity_Faxes {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_Faxes", null);
            }
            set {
                SetRelatedEntity("Opportunity_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_fax_createdby")]
        public SystemUser lk_fax_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_fax_createdby", null);
            }
            set {
                SetRelatedEntity("lk_fax_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_Faxes")]
        public Contract Contract_Faxes {
            get {
                return GetRelatedEntity<Contract>("Contract_Faxes", null);
            }
            set {
                SetRelatedEntity("Contract_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_Faxes")]
        public Invoice Invoice_Faxes {
            get {
                return GetRelatedEntity<Invoice>("Invoice_Faxes", null);
            }
            set {
                SetRelatedEntity("Invoice_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_Faxes")]
        public CampaignActivity CampaignActivity_Faxes {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_Faxes", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_Faxes")]
        public Quote Quote_Faxes {
            get {
                return GetRelatedEntity<Quote>("Quote_Faxes", null);
            }
            set {
                SetRelatedEntity("Quote_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_fax")]
        public Team team_fax {
            get {
                return GetRelatedEntity<Team>("team_fax", null);
            }
            set {
                SetRelatedEntity("team_fax", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_fax_createdonbehalfby")]
        public SystemUser lk_fax_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_fax_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_fax_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Faxes")]
        public Account Account_Faxes {
            get {
                return GetRelatedEntity<Account>("Account_Faxes", null);
            }
            set {
                SetRelatedEntity("Account_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_fax")]
        public SystemUser user_fax {
            get {
                return GetRelatedEntity<SystemUser>("user_fax", null);
            }
            set {
                SetRelatedEntity("user_fax", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_Faxes")]
        public SalesOrder SalesOrder_Faxes {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_Faxes", null);
            }
            set {
                SetRelatedEntity("SalesOrder_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_fax")]
        public ActivityPointer activity_pointer_fax {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_fax", null);
            }
            set {
                SetRelatedEntity("activity_pointer_fax", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_fax")]
        public SLA sla_fax {
            get {
                return GetRelatedEntity<SLA>("sla_fax", null);
            }
            set {
                SetRelatedEntity("sla_fax", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_fax")]
        public SLA manualsla_fax {
            get {
                return GetRelatedEntity<SLA>("manualsla_fax", null);
            }
            set {
                SetRelatedEntity("manualsla_fax", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_Faxes")]
        public KnowledgeArticle KnowledgeArticle_Faxes {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_Faxes", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_Faxes")]
        public BookableResourceBookingHeader bookableresourcebookingheader_Faxes {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_Faxes", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_Faxes")]
        public BookableResourceBooking bookableresourcebooking_Faxes {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_Faxes", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_Faxes")]
        public Entitlement entitlement_Faxes {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_Faxes", null);
            }
            set {
                SetRelatedEntity("entitlement_Faxes", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_fax_activities")]
        public BusinessUnit business_unit_fax_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_fax_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_fax_activities", null, value);
            }
        }
        
        [RelationshipSchemaName("Fax_QueueItem")]
        public IEnumerable<QueueItem> Fax_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Fax_QueueItem", null);
            }
            set {
                SetRelatedEntities("Fax_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("fax_connections1")]
        public IEnumerable<Connection> fax_connections1 {
            get {
                return GetRelatedEntities<Connection>("fax_connections1", null);
            }
            set {
                SetRelatedEntities("fax_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Fax_SyncErrors")]
        public IEnumerable<SyncError> Fax_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Fax_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Fax_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("fax_connections2")]
        public IEnumerable<Connection> fax_connections2 {
            get {
                return GetRelatedEntities<Connection>("fax_connections2", null);
            }
            set {
                SetRelatedEntities("fax_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("fax_campaignresponse")]
        public IEnumerable<CampaignResponse> fax_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("fax_campaignresponse", null);
            }
            set {
                SetRelatedEntities("fax_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("fax_activity_parties")]
        public IEnumerable<ActivityParty> fax_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("fax_activity_parties", null);
            }
            set {
                SetRelatedEntities("fax_activity_parties", null, value);
            }
        }
        
        public static Fax Retrieve(IOrganizationService service, Guid id, params Expression<Func<Fax,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Target objective for a user or a team for a specified time period.</para>
    /// <para>Display Name: Goal</para>
    /// </summary>
    [EntityLogicalName("goal")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Goal : ExtendedEntity<GoalState, Goal_StatusCode> {
        
        public const string EntityLogicalName = "goal";
        
        public const int EntityTypeCode = 9600;
        
        public Goal() : 
                base(EntityLogicalName) {
        }
        
        public Goal(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("goalid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("goalid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the goal.</para>
        /// <para>Display Name: Goal</para>
        /// </summary>
        [AttributeLogicalName("goalid")]
        public Guid? GoalId {
            get {
                return GetAttributeValue<Guid?>("goalid");
            }
            set {
                SetId("goalid", value);
            }
        }
        
        /// <summary>
        /// <para>Select a goal target (money) to track a monetary amount such as revenue from a product.</para>
        /// <para>Display Name: Target (Money)</para>
        /// </summary>
        [AttributeLogicalName("targetmoney")]
        public decimal? TargetMoney {
            get {
                return GetMoneyValue("targetmoney");
            }
            set {
                SetMoneyValue("targetmoney", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time when the period for tracking the goal begins.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("goalstartdate")]
        public DateTime? GoalStartDate {
            get {
                return GetAttributeValue<DateTime?>("goalstartdate");
            }
            set {
                SetAttributeValue("goalstartdate", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates a placeholder rollup field for an integer value to track a third category of results other than actuals and in-progress results.</para>
        /// <para>Display Name: Custom Rollup Field (Integer)</para>
        /// </summary>
        [AttributeLogicalName("customrollupfieldinteger")]
        public int? CustomRollupFieldInteger {
            get {
                return GetAttributeValue<int?>("customrollupfieldinteger");
            }
            set {
                SetAttributeValue("customrollupfieldinteger", value);
            }
        }
        
        /// <summary>
        /// <para>Stretch target value for all data types.</para>
        /// <para>Display Name: Stretched Target</para>
        /// </summary>
        [AttributeLogicalName("stretchtargetstring")]
        public string StretchTargetString {
            get {
                return GetAttributeValue<string>("stretchtargetstring");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the metric type is Count or Amount.</para>
        /// <para>Display Name: Metric Type</para>
        /// </summary>
        [AttributeLogicalName("isamount")]
        public bool? IsAmount {
            get {
                return GetAttributeValue<bool?>("isamount");
            }
            set {
                SetAttributeValue("isamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the expected value for percentage achieved against the target goal as of the current date.</para>
        /// <para>Display Name: Today's Target (Percentage Achieved)</para>
        /// </summary>
        [AttributeLogicalName("computedtargetasoftodaypercentageachieved")]
        public decimal? ComputedTargetAsOfTodayPercentageAchieved {
            get {
                return GetAttributeValue<decimal?>("computedtargetasoftodaypercentageachieved");
            }
        }
        
        /// <summary>
        /// <para>Shows the in-progress value (money) in base currency to track goal results against the target.</para>
        /// <para>Display Name: In-progress (Money) (Base)</para>
        /// </summary>
        [AttributeLogicalName("inprogressmoney_base")]
        public decimal? InProgressMoney_Base {
            get {
                return GetMoneyValue("inprogressmoney_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the expected amount in base currency for actual value (money type) against the target goal as of the current date.</para>
        /// <para>Display Name: Today's Target (Money) (Base)</para>
        /// </summary>
        [AttributeLogicalName("computedtargetasoftodaymoney_base")]
        public decimal? ComputedTargetAsOfTodayMoney_Base {
            get {
                return GetMoneyValue("computedtargetasoftodaymoney_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the system rollup fields are updated. If set to Yes, the next system rollup will not update the values of the rollup fields with the system calculated values.</para>
        /// <para>Display Name: Overridden</para>
        /// </summary>
        [AttributeLogicalName("isoverridden")]
        public bool? IsOverridden {
            get {
                return GetAttributeValue<bool?>("isoverridden");
            }
            set {
                SetAttributeValue("isoverridden", value);
            }
        }
        
        /// <summary>
        /// <para>Select the goal's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Goal_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Goal_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the data should be rolled up only from the child goals.</para>
        /// <para>Display Name: Roll Up Only from Child Goals</para>
        /// </summary>
        [AttributeLogicalName("rolluponlyfromchildgoals")]
        public bool? RollupOnlyFromChildGoals {
            get {
                return GetAttributeValue<bool?>("rolluponlyfromchildgoals");
            }
            set {
                SetAttributeValue("rolluponlyfromchildgoals", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        [AttributeLogicalName("metricidname")]
        public string MetricIdName {
            get {
                return GetAttributeValue<string>("metricidname");
            }
        }
        
        /// <summary>
        /// <para>Name of the manager</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>In-progress value of the goal.</para>
        /// <para>Display Name: In-Progress</para>
        /// </summary>
        [AttributeLogicalName("inprogressstring")]
        public string InProgressString {
            get {
                return GetAttributeValue<string>("inprogressstring");
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the goal ends.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("goalenddate")]
        public DateTime? GoalEndDate {
            get {
                return GetAttributeValue<DateTime?>("goalenddate");
            }
            set {
                SetAttributeValue("goalenddate", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user who owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate the actual data for the goal (money).</para>
        /// <para>Display Name: Rollup Query - Actual(Money)</para>
        /// </summary>
        [AttributeLogicalName("rollupqueryactualmoneyid")]
        public EntityReference RollUpQueryActualMoneyId {
            get {
                return GetAttributeValue<EntityReference>("rollupqueryactualmoneyid");
            }
            set {
                SetAttributeValue("rollupqueryactualmoneyid", value);
            }
        }
        
        /// <summary>
        /// <para>Select a stretch target (decimal) of the goal to define a higher or difficult level of goal than the usual ones.</para>
        /// <para>Display Name: Stretch Target (Decimal)</para>
        /// </summary>
        [AttributeLogicalName("stretchtargetdecimal")]
        public decimal? StretchTargetDecimal {
            get {
                return GetAttributeValue<decimal?>("stretchtargetdecimal");
            }
            set {
                SetAttributeValue("stretchtargetdecimal", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the actual value (Decimal type) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount and the amount data type is Decimal.</para>
        /// <para>Display Name: Actual (Decimal)</para>
        /// </summary>
        [AttributeLogicalName("actualdecimal")]
        public decimal? ActualDecimal {
            get {
                return GetAttributeValue<decimal?>("actualdecimal");
            }
            set {
                SetAttributeValue("actualdecimal", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the goal.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Select a goal target of the integer type to use for tracking anything countable in whole numbers, such as units sold.</para>
        /// <para>Display Name: Target (Integer)</para>
        /// </summary>
        [AttributeLogicalName("targetinteger")]
        public int? TargetInteger {
            get {
                return GetAttributeValue<int?>("targetinteger");
            }
            set {
                SetAttributeValue("targetinteger", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
        }
        
        /// <summary>
        /// <para>Shows the in-progress value (money) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
        /// <para>Display Name: In-progress (Money)</para>
        /// </summary>
        [AttributeLogicalName("inprogressmoney")]
        public decimal? InProgressMoney {
            get {
                return GetMoneyValue("inprogressmoney");
            }
            set {
                SetMoneyValue("inprogressmoney", value);
            }
        }
        
        /// <summary>
        /// <para>Select the fiscal year for the goal that's being tracked.</para>
        /// <para>Display Name: Fiscal Year</para>
        /// </summary>
        [AttributeLogicalName("fiscalyear")]
        public goal_fiscalyear? FiscalYear {
            get {
                return GetOptionSetValue<goal_fiscalyear>("fiscalyear");
            }
            set {
                SetOptionSetValue("fiscalyear", value);
            }
        }
        
        /// <summary>
        /// <para>Select stretch target (money) of the goal to define a higher or difficult level of goal than the usual ones.</para>
        /// <para>Display Name: Stretch Target (Money)</para>
        /// </summary>
        [AttributeLogicalName("stretchtargetmoney")]
        public decimal? StretchTargetMoney {
            get {
                return GetMoneyValue("stretchtargetmoney");
            }
            set {
                SetMoneyValue("stretchtargetmoney", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the goal.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("rollupquerycustommoneyidname")]
        public string RollUpQueryCustomMoneyIdName {
            get {
                return GetAttributeValue<string>("rollupquerycustommoneyidname");
            }
        }
        
        [AttributeLogicalName("rollupquerycustomintegeridname")]
        public string RollUpQueryCustomIntegerIdName {
            get {
                return GetAttributeValue<string>("rollupquerycustomintegeridname");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the in-progress value (decimal) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
        /// <para>Display Name: In-progress (Decimal)</para>
        /// </summary>
        [AttributeLogicalName("inprogressdecimal")]
        public decimal? InProgressDecimal {
            get {
                return GetAttributeValue<decimal?>("inprogressdecimal");
            }
            set {
                SetAttributeValue("inprogressdecimal", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate data for the custom rollup field (integer).</para>
        /// <para>Display Name: Rollup Query - Custom Rollup Field (Integer)</para>
        /// </summary>
        [AttributeLogicalName("rollupquerycustomintegerid")]
        public EntityReference RollUpQueryCustomIntegerId {
            get {
                return GetAttributeValue<EntityReference>("rollupquerycustomintegerid");
            }
            set {
                SetAttributeValue("rollupquerycustomintegerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the fiscal period for the goal.</para>
        /// <para>Display Name: Fiscal Period</para>
        /// </summary>
        [AttributeLogicalName("fiscalperiod")]
        public goal_fiscalperiod? FiscalPeriod {
            get {
                return GetOptionSetValue<goal_fiscalperiod>("fiscalperiod");
            }
            set {
                SetOptionSetValue("fiscalperiod", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Shows the expected amount for actual value (decimal type) against the target goal.</para>
        /// <para>Display Name: Today's Target (Decimal)</para>
        /// </summary>
        [AttributeLogicalName("computedtargetasoftodaydecimal")]
        public decimal? ComputedTargetAsOfTodayDecimal {
            get {
                return GetAttributeValue<decimal?>("computedtargetasoftodaydecimal");
            }
        }
        
        [AttributeLogicalName("rollupqueryactualmoneyidname")]
        public string RollUpQueryActualMoneyIdName {
            get {
                return GetAttributeValue<string>("rollupqueryactualmoneyidname");
            }
        }
        
        /// <summary>
        /// <para>Indicates a placeholder rollup field for a money value to track a third category of results other than actuals and in-progress results.</para>
        /// <para>Display Name: Custom Rollup Field (Money)</para>
        /// </summary>
        [AttributeLogicalName("customrollupfieldmoney")]
        public decimal? CustomRollupFieldMoney {
            get {
                return GetMoneyValue("customrollupfieldmoney");
            }
            set {
                SetMoneyValue("customrollupfieldmoney", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the goal target of the money type in base currency.</para>
        /// <para>Display Name: Target (Money) (Base)</para>
        /// </summary>
        [AttributeLogicalName("targetmoney_base")]
        public decimal? TargetMoney_Base {
            get {
                return GetMoneyValue("targetmoney_base");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate data for the in-progress rollup field (money).</para>
        /// <para>Display Name: Rollup Query - In-progress(Money)</para>
        /// </summary>
        [AttributeLogicalName("rollupqueryinprogressmoneyid")]
        public EntityReference RollUpQueryInprogressMoneyId {
            get {
                return GetAttributeValue<EntityReference>("rollupqueryinprogressmoneyid");
            }
            set {
                SetAttributeValue("rollupqueryinprogressmoneyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the stretch target (money) in base currency to indicate a higher or difficult level of goal than the usual ones.</para>
        /// <para>Display Name: Stretch Target (Money) (Base)</para>
        /// </summary>
        [AttributeLogicalName("stretchtargetmoney_base")]
        public decimal? StretchTargetMoney_Base {
            get {
                return GetMoneyValue("stretchtargetmoney_base");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the values of system rollup fields can be updated.</para>
        /// <para>Display Name: Override</para>
        /// </summary>
        [AttributeLogicalName("isoverride")]
        public bool? IsOverride {
            get {
                return GetAttributeValue<bool?>("isoverride");
            }
            set {
                SetAttributeValue("isoverride", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the expected amount for actual value (money type) against the target goal as of the current date.</para>
        /// <para>Display Name: Today's Target (Money)</para>
        /// </summary>
        [AttributeLogicalName("computedtargetasoftodaymoney")]
        public decimal? ComputedTargetAsOfTodayMoney {
            get {
                return GetMoneyValue("computedtargetasoftodaymoney");
            }
        }
        
        /// <summary>
        /// <para>Error code associated with rollup.</para>
        /// <para>Display Name: Rollup Error Code</para>
        /// </summary>
        [AttributeLogicalName("rolluperrorcode")]
        public int? RollupErrorCode {
            get {
                return GetAttributeValue<int?>("rolluperrorcode");
            }
            set {
                SetAttributeValue("rolluperrorcode", value);
            }
        }
        
        [AttributeLogicalName("rollupqueryactualdecimalidname")]
        public string RollUpQueryActualDecimalIdName {
            get {
                return GetAttributeValue<string>("rollupqueryactualdecimalidname");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the goal period is a fiscal period or custom period.</para>
        /// <para>Display Name: Goal Period Type</para>
        /// </summary>
        [AttributeLogicalName("isfiscalperiodgoal")]
        public bool? IsFiscalPeriodGoal {
            get {
                return GetAttributeValue<bool?>("isfiscalperiodgoal");
            }
            set {
                SetAttributeValue("isfiscalperiodgoal", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate data for the in-progress rollup field (decimal).</para>
        /// <para>Display Name: Rollup Query - In-progress(Decimal)</para>
        /// </summary>
        [AttributeLogicalName("rollupqueryinprogressdecimalid")]
        public EntityReference RollUpQueryInprogressDecimalId {
            get {
                return GetAttributeValue<EntityReference>("rollupqueryinprogressdecimalid");
            }
            set {
                SetAttributeValue("rollupqueryinprogressdecimalid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether only the goal owner's records, or all records, should be rolled up for goal results.</para>
        /// <para>Display Name: Record Set for Rollup</para>
        /// </summary>
        [AttributeLogicalName("consideronlygoalownersrecords")]
        public bool? ConsiderOnlyGoalOwnersRecords {
            get {
                return GetAttributeValue<bool?>("consideronlygoalownersrecords");
            }
            set {
                SetAttributeValue("consideronlygoalownersrecords", value);
            }
        }
        
        [AttributeLogicalName("rollupqueryinprogressintegeridname")]
        public string RollUpQueryInprogressIntegerIdName {
            get {
                return GetAttributeValue<string>("rollupqueryinprogressintegeridname");
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate data for the in-progress rollup field (integer).</para>
        /// <para>Display Name: Rollup Query - In-progress(Integer)</para>
        /// </summary>
        [AttributeLogicalName("rollupqueryinprogressintegerid")]
        public EntityReference RollUpQueryInprogressIntegerId {
            get {
                return GetAttributeValue<EntityReference>("rollupqueryinprogressintegerid");
            }
            set {
                SetAttributeValue("rollupqueryinprogressintegerid", value);
            }
        }
        
        /// <summary>
        /// <para>Actual Value of the goal.</para>
        /// <para>Display Name: Actual</para>
        /// </summary>
        [AttributeLogicalName("actualstring")]
        public string ActualString {
            get {
                return GetAttributeValue<string>("actualstring");
            }
        }
        
        /// <summary>
        /// <para>Placeholder rollup field for the goal.</para>
        /// <para>Display Name: Custom Rollup Field</para>
        /// </summary>
        [AttributeLogicalName("customrollupfieldstring")]
        public string CustomRollupFieldString {
            get {
                return GetAttributeValue<string>("customrollupfieldstring");
            }
        }
        
        /// <summary>
        /// <para>Shows the actual value (Money type) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount and the amount data type is Money.</para>
        /// <para>Display Name: Actual (Money)</para>
        /// </summary>
        [AttributeLogicalName("actualmoney")]
        public decimal? ActualMoney {
            get {
                return GetMoneyValue("actualmoney");
            }
            set {
                SetMoneyValue("actualmoney", value);
            }
        }
        
        [AttributeLogicalName("rollupquerycustomdecimalidname")]
        public string RollUpQueryCustomDecimalIdName {
            get {
                return GetAttributeValue<string>("rollupquerycustomdecimalidname");
            }
        }
        
        /// <summary>
        /// <para>Data type of the amount.</para>
        /// <para>Display Name: Amount Data Type</para>
        /// </summary>
        [AttributeLogicalName("amountdatatype")]
        public metric_goaltype? AmountDataType {
            get {
                return GetOptionSetValue<metric_goaltype>("amountdatatype");
            }
            set {
                SetOptionSetValue("amountdatatype", value);
            }
        }
        
        /// <summary>
        /// <para>Select a goal target of the decimal type to use for tracking data that include partial numbers, such as pounds sold of a product sold by weight.</para>
        /// <para>Display Name: Target (Decimal)</para>
        /// </summary>
        [AttributeLogicalName("targetdecimal")]
        public decimal? TargetDecimal {
            get {
                return GetAttributeValue<decimal?>("targetdecimal");
            }
            set {
                SetAttributeValue("targetdecimal", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the in-progress value (integer) against the target. This value could contribute to a goal, but is not counted yet as actual.</para>
        /// <para>Display Name: In-progress (Integer)</para>
        /// </summary>
        [AttributeLogicalName("inprogressinteger")]
        public int? InProgressInteger {
            get {
                return GetAttributeValue<int?>("inprogressinteger");
            }
            set {
                SetAttributeValue("inprogressinteger", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate the actual data for the goal (integer).</para>
        /// <para>Display Name: Rollup Query - Actual(Integer)</para>
        /// </summary>
        [AttributeLogicalName("rollupqueryactualintegerid")]
        public EntityReference RollupQueryActualIntegerId {
            get {
                return GetAttributeValue<EntityReference>("rollupqueryactualintegerid");
            }
            set {
                SetAttributeValue("rollupqueryactualintegerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the goal is open, completed, or canceled. Completed and canceled goals are read-only and can't be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public GoalState? StateCode {
            get {
                return GetOptionSetValue<GoalState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("goalowneridname")]
        public string GoalOwnerIdName {
            get {
                return GetAttributeValue<string>("goalowneridname");
            }
        }
        
        /// <summary>
        /// <para>Choose the user or team responsible for meeting the goal.</para>
        /// <para>Display Name: Goal Owner</para>
        /// </summary>
        [AttributeLogicalName("goalownerid")]
        public EntityReference GoalOwnerId {
            get {
                return GetAttributeValue<EntityReference>("goalownerid");
            }
            set {
                SetAttributeValue("goalownerid", value);
            }
        }
        
        [AttributeLogicalName("goalwitherroridname")]
        public string GoalWithErrorIdName {
            get {
                return GetAttributeValue<string>("goalwitherroridname");
            }
        }
        
        /// <summary>
        /// <para>Choose the metric for the goal. This metric determines how the goal is tracked.</para>
        /// <para>Display Name: Goal Metric</para>
        /// </summary>
        [AttributeLogicalName("metricid")]
        public EntityReference MetricId {
            get {
                return GetAttributeValue<EntityReference>("metricid");
            }
            set {
                SetAttributeValue("metricid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate data for the custom rollup field (decimal).</para>
        /// <para>Display Name: Rollup Query - Custom Rollup Field (Decimal)</para>
        /// </summary>
        [AttributeLogicalName("rollupquerycustomdecimalid")]
        public EntityReference RollUpQueryCustomDecimalId {
            get {
                return GetAttributeValue<EntityReference>("rollupquerycustomdecimalid");
            }
            set {
                SetAttributeValue("rollupquerycustomdecimalid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate data for the custom rollup field (money).</para>
        /// <para>Display Name: Rollup Query - Custom Rollup Field (Money)</para>
        /// </summary>
        [AttributeLogicalName("rollupquerycustommoneyid")]
        public EntityReference RollUpQueryCustomMoneyId {
            get {
                return GetAttributeValue<EntityReference>("rollupquerycustommoneyid");
            }
            set {
                SetAttributeValue("rollupquerycustommoneyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the expected amount for actual value (integer type) against the target goal as of the current date.</para>
        /// <para>Display Name: Today's Target (Integer)</para>
        /// </summary>
        [AttributeLogicalName("computedtargetasoftodayinteger")]
        public int? ComputedTargetAsOfTodayInteger {
            get {
                return GetAttributeValue<int?>("computedtargetasoftodayinteger");
            }
        }
        
        /// <summary>
        /// <para>Indicates a placeholder rollup field for a decimal value to track a third category of results other than actuals and in-progress results.</para>
        /// <para>Display Name: Custom Rollup Field (Decimal)</para>
        /// </summary>
        [AttributeLogicalName("customrollupfielddecimal")]
        public decimal? CustomRollupFieldDecimal {
            get {
                return GetAttributeValue<decimal?>("customrollupfielddecimal");
            }
            set {
                SetAttributeValue("customrollupfielddecimal", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the goal that caused an error in the rollup of the goal hierarchy.</para>
        /// <para>Display Name: Goal With Error</para>
        /// </summary>
        [AttributeLogicalName("goalwitherrorid")]
        public EntityReference GoalWithErrorId {
            get {
                return GetAttributeValue<EntityReference>("goalwitherrorid");
            }
            set {
                SetAttributeValue("goalwitherrorid", value);
            }
        }
        
        [AttributeLogicalName("rollupqueryactualintegeridname")]
        public string RollupQueryActualIntegerIdName {
            get {
                return GetAttributeValue<string>("rollupqueryactualintegeridname");
            }
        }
        
        [AttributeLogicalName("rollupqueryinprogressdecimalidname")]
        public string RollUpQueryInprogressDecimalIdName {
            get {
                return GetAttributeValue<string>("rollupqueryinprogressdecimalidname");
            }
        }
        
        /// <summary>
        /// <para>Indicates a placeholder rollup field for a money value in base currency to track a third category of results other than actuals and in-progress results.</para>
        /// <para>Display Name: Custom Rollup Field (Money) (Base)</para>
        /// </summary>
        [AttributeLogicalName("customrollupfieldmoney_base")]
        public decimal? CustomRollupFieldMoney_Base {
            get {
                return GetMoneyValue("customrollupfieldmoney_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the actual value (money type) in base currency to track goal results against the target.</para>
        /// <para>Display Name: Actual (Money) (Base)</para>
        /// </summary>
        [AttributeLogicalName("actualmoney_base")]
        public decimal? ActualMoney_Base {
            get {
                return GetMoneyValue("actualmoney_base");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Goal Owner Type</para>
        /// </summary>
        [AttributeLogicalName("goalowneridtype")]
        public string GoalOwnerIdType {
            get {
                return GetAttributeValue<string>("goalowneridtype");
            }
            set {
                SetAttributeValue("goalowneridtype", value);
            }
        }
        
        [AttributeLogicalName("parentgoalidname")]
        public string ParentGoalIdName {
            get {
                return GetAttributeValue<string>("parentgoalidname");
            }
        }
        
        /// <summary>
        /// <para>Choose the query that will be used to calculate the actual data for the goal (decimal).</para>
        /// <para>Display Name: Rollup Query - Actual(Decimal)</para>
        /// </summary>
        [AttributeLogicalName("rollupqueryactualdecimalid")]
        public EntityReference RollUpQueryActualDecimalId {
            get {
                return GetAttributeValue<EntityReference>("rollupqueryactualdecimalid");
            }
            set {
                SetAttributeValue("rollupqueryactualdecimalid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the goal was last rolled up. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Last Rolled Up Date</para>
        /// </summary>
        [AttributeLogicalName("lastrolledupdate")]
        public DateTime? LastRolledupDate {
            get {
                return GetAttributeValue<DateTime?>("lastrolledupdate");
            }
            set {
                SetAttributeValue("lastrolledupdate", value);
            }
        }
        
        [AttributeLogicalName("rollupqueryinprogressmoneyidname")]
        public string RollUpQueryInprogressMoneyIdName {
            get {
                return GetAttributeValue<string>("rollupqueryinprogressmoneyidname");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the stretch target (integer) of the goal to define a higher or difficult level of goal than the usual ones.</para>
        /// <para>Display Name: Stretch Target (Integer)</para>
        /// </summary>
        [AttributeLogicalName("stretchtargetinteger")]
        public int? StretchTargetInteger {
            get {
                return GetAttributeValue<int?>("stretchtargetinteger");
            }
            set {
                SetAttributeValue("stretchtargetinteger", value);
            }
        }
        
        /// <summary>
        /// <para>Depth of the goal in the tree.</para>
        /// <para>Display Name: Depth</para>
        /// </summary>
        [AttributeLogicalName("depth")]
        public int? Depth {
            get {
                return GetAttributeValue<int?>("depth");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the goal tree.</para>
        /// <para>Display Name: Tree ID</para>
        /// </summary>
        [AttributeLogicalName("treeid")]
        public Guid? TreeId {
            get {
                return GetAttributeValue<Guid?>("treeid");
            }
        }
        
        /// <summary>
        /// <para>Type a title or name that describes the goal.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Manager</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose a parent goal if the current goal is a child goal. This sets up a parent-child relationship for reporting and analytics.</para>
        /// <para>Display Name: Parent Goal</para>
        /// </summary>
        [AttributeLogicalName("parentgoalid")]
        public EntityReference ParentGoalId {
            get {
                return GetAttributeValue<EntityReference>("parentgoalid");
            }
            set {
                SetAttributeValue("parentgoalid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the actual value (integer) achieved towards the target as of the last rolled-up date. This field appears when the metric type of the goal is Amount or Count and the amount data type is Integer.</para>
        /// <para>Display Name: Actual (Integer)</para>
        /// </summary>
        [AttributeLogicalName("actualinteger")]
        public int? ActualInteger {
            get {
                return GetAttributeValue<int?>("actualinteger");
            }
            set {
                SetAttributeValue("actualinteger", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the percentage achieved against the target goal.</para>
        /// <para>Display Name: Percentage Achieved</para>
        /// </summary>
        [AttributeLogicalName("percentage")]
        public decimal? Percentage {
            get {
                return GetAttributeValue<decimal?>("percentage");
            }
            set {
                SetAttributeValue("percentage", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Target value of the goal.</para>
        /// <para>Display Name: Target</para>
        /// </summary>
        [AttributeLogicalName("targetstring")]
        public string TargetString {
            get {
                return GetAttributeValue<string>("targetstring");
            }
        }
        
        [AttributeLogicalName("goalownerid")]
        [RelationshipSchemaName("team_goal_goalowner")]
        public Team team_goal_goalowner {
            get {
                return GetRelatedEntity<Team>("team_goal_goalowner", null);
            }
            set {
                SetRelatedEntity("team_goal_goalowner", null, value);
            }
        }
        
        [AttributeLogicalName("goalwitherrorid")]
        [RelationshipSchemaName("Goal_RollupError_Goal", EntityRole.Referencing)]
        public Goal ReferencingGoal_RollupError_Goal {
            get {
                return GetRelatedEntity<Goal>("Goal_RollupError_Goal", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("Goal_RollupError_Goal", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Goal")]
        public TransactionCurrency TransactionCurrency_Goal {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Goal", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Goal", null, value);
            }
        }
        
        [AttributeLogicalName("parentgoalid")]
        [RelationshipSchemaName("goal_parent_goal", EntityRole.Referencing)]
        public Goal Referencinggoal_parent_goal {
            get {
                return GetRelatedEntity<Goal>("goal_parent_goal", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("goal_parent_goal", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("goalownerid")]
        [RelationshipSchemaName("user_goal_goalowner")]
        public SystemUser user_goal_goalowner {
            get {
                return GetRelatedEntity<SystemUser>("user_goal_goalowner", null);
            }
            set {
                SetRelatedEntity("user_goal_goalowner", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_goal")]
        public BusinessUnit business_unit_goal {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_goal", null);
            }
            set {
                SetRelatedEntity("business_unit_goal", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_goal")]
        public SystemUser user_goal {
            get {
                return GetRelatedEntity<SystemUser>("user_goal", null);
            }
            set {
                SetRelatedEntity("user_goal", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_goal_modifiedonbehalfby")]
        public SystemUser lk_goal_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_goal_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_goal_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_goal_modifiedby")]
        public SystemUser lk_goal_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_goal_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_goal_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_goal_createdonbehalfby")]
        public SystemUser lk_goal_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_goal_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_goal_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_goal_createdby")]
        public SystemUser lk_goal_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_goal_createdby", null);
            }
            set {
                SetRelatedEntity("lk_goal_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_goal")]
        public Team team_goal {
            get {
                return GetRelatedEntity<Team>("team_goal", null);
            }
            set {
                SetRelatedEntity("team_goal", null, value);
            }
        }
        
        [RelationshipSchemaName("goal_connections2")]
        public IEnumerable<Connection> goal_connections2 {
            get {
                return GetRelatedEntities<Connection>("goal_connections2", null);
            }
            set {
                SetRelatedEntities("goal_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("goal_connections1")]
        public IEnumerable<Connection> goal_connections1 {
            get {
                return GetRelatedEntities<Connection>("goal_connections1", null);
            }
            set {
                SetRelatedEntities("goal_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Goal_SyncErrors")]
        public IEnumerable<SyncError> Goal_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Goal_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Goal_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("Goal_RollupError_Goal", EntityRole.Referenced)]
        public IEnumerable<Goal> ReferencedGoal_RollupError_Goal {
            get {
                return GetRelatedEntities<Goal>("Goal_RollupError_Goal", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("Goal_RollupError_Goal", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("goal_parent_goal", EntityRole.Referenced)]
        public IEnumerable<Goal> Referencedgoal_parent_goal {
            get {
                return GetRelatedEntities<Goal>("goal_parent_goal", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("goal_parent_goal", EntityRole.Referenced, value);
            }
        }
        
        public static Goal Retrieve(IOrganizationService service, Guid id, params Expression<Func<Goal,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Service request case associated with a contract.</para>
    /// <para>Display Name: Case</para>
    /// </summary>
    [EntityLogicalName("incident")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Incident : ExtendedEntity<IncidentState, Incident_StatusCode> {
        
        public const string EntityLogicalName = "incident";
        
        public const int EntityTypeCode = 112;
        
        public Incident() : 
                base(EntityLogicalName) {
        }
        
        public Incident(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("incidentid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("incidentid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the case.</para>
        /// <para>Display Name: Case</para>
        /// </summary>
        [AttributeLogicalName("incidentid")]
        public Guid? IncidentId {
            get {
                return GetAttributeValue<Guid?>("incidentid");
            }
            set {
                SetId("incidentid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the post originated as a public or private message.</para>
        /// <para>Display Name: Received As</para>
        /// </summary>
        [AttributeLogicalName("messagetypecode")]
        public socialactivity_postmessagetype? MessageTypeCode {
            get {
                return GetOptionSetValue<socialactivity_postmessagetype>("messagetypecode");
            }
            set {
                SetOptionSetValue("messagetypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Number of child incidents associated with the incident.</para>
        /// <para>Display Name: Child Cases</para>
        /// </summary>
        [AttributeLogicalName("numberofchildincidents")]
        public int? NumberOfChildIncidents {
            get {
                return GetAttributeValue<int?>("numberofchildincidents");
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Indicates the date and time when the case was escalated.</para>
        /// <para>Display Name: Escalated On</para>
        /// </summary>
        [AttributeLogicalName("escalatedon")]
        public DateTime? EscalatedOn {
            get {
                return GetAttributeValue<DateTime?>("escalatedon");
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Follow up Task Created</para>
        /// </summary>
        [AttributeLogicalName("followuptaskcreated")]
        public bool? FollowUpTaskCreated {
            get {
                return GetAttributeValue<bool?>("followuptaskcreated");
            }
            set {
                SetAttributeValue("followuptaskcreated", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        [AttributeLogicalName("parentcaseidname")]
        public string ParentCaseIdName {
            get {
                return GetAttributeValue<string>("parentcaseidname");
            }
        }
        
        [AttributeLogicalName("resolvebykpiidname")]
        public string ResolveByKPIIdName {
            get {
                return GetAttributeValue<string>("resolvebykpiidname");
            }
        }
        
        /// <summary>
        /// <para>Enter the date by when the case must be resolved.</para>
        /// <para>Display Name: Resolve By</para>
        /// </summary>
        [AttributeLogicalName("resolveby")]
        public DateTime? ResolveBy {
            get {
                return GetAttributeValue<DateTime?>("resolveby");
            }
            set {
                SetAttributeValue("resolveby", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Incident_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Incident_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the social profile with which the case is associated.</para>
        /// <para>Display Name: Social Profile</para>
        /// </summary>
        [AttributeLogicalName("socialprofileid")]
        public EntityReference SocialProfileId {
            get {
                return GetAttributeValue<EntityReference>("socialprofileid");
            }
            set {
                SetAttributeValue("socialprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the case.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("firstresponsebykpiidname")]
        public string FirstResponseByKPIIdName {
            get {
                return GetAttributeValue<string>("firstresponsebykpiidname");
            }
        }
        
        [AttributeLogicalName("entitlementidname")]
        public string EntitlementIdName {
            get {
                return GetAttributeValue<string>("entitlementidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName {
            get {
                return GetAttributeValue<string>("customeridname");
            }
        }
        
        /// <summary>
        /// <para>Choose the contract line that the case should be logged under to make sure the customer is charged correctly.</para>
        /// <para>Display Name: Contract Line</para>
        /// </summary>
        [AttributeLogicalName("contractdetailid")]
        public EntityReference ContractDetailId {
            get {
                return GetAttributeValue<EntityReference>("contractdetailid");
            }
            set {
                SetAttributeValue("contractdetailid", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether customer service representative has contacted the customer or not.</para>
        /// <para>Display Name: Customer Contacted</para>
        /// </summary>
        [AttributeLogicalName("customercontacted")]
        public bool? CustomerContacted {
            get {
                return GetAttributeValue<bool?>("customercontacted");
            }
            set {
                SetAttributeValue("customercontacted", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Select the current stage of the service process for the case to assist service team members when they review or transfer a case.</para>
        /// <para>Display Name: Case Stage</para>
        /// </summary>
        [AttributeLogicalName("incidentstagecode")]
        public Incident_IncidentStageCode? IncidentStageCode {
            get {
                return GetOptionSetValue<Incident_IncidentStageCode>("incidentstagecode");
            }
            set {
                SetOptionSetValue("incidentstagecode", value);
            }
        }
        
        [AttributeLogicalName("kbarticleidname")]
        public string KbArticleIdName {
            get {
                return GetAttributeValue<string>("kbarticleidname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: First Response By KPI</para>
        /// </summary>
        [AttributeLogicalName("firstresponsebykpiid")]
        public EntityReference FirstResponseByKPIId {
            get {
                return GetAttributeValue<EntityReference>("firstresponsebykpiid");
            }
            set {
                SetAttributeValue("firstresponsebykpiid", value);
            }
        }
        
        [AttributeLogicalName("masteridname")]
        public string MasterIdName {
            get {
                return GetAttributeValue<string>("masteridname");
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the case is active, resolved, or canceled. Resolved and canceled cases are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public IncidentState? StateCode {
            get {
                return GetOptionSetValue<IncidentState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("contractidname")]
        public string ContractIdName {
            get {
                return GetAttributeValue<string>("contractidname");
            }
        }
        
        /// <summary>
        /// <para>For system use only.</para>
        /// <para>Display Name: Decrementing</para>
        /// </summary>
        [AttributeLogicalName("isdecrementing")]
        public bool? IsDecrementing {
            get {
                return GetAttributeValue<bool?>("isdecrementing");
            }
            set {
                SetAttributeValue("isdecrementing", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the resolution time for the case according to the terms of the SLA.</para>
        /// <para>Display Name: Resolve By SLA Status</para>
        /// </summary>
        [AttributeLogicalName("resolvebyslastatus")]
        public Incident_ResolveBySLAStatus? ResolveBySLAStatus {
            get {
                return GetOptionSetValue<Incident_ResolveBySLAStatus>("resolvebyslastatus");
            }
            set {
                SetOptionSetValue("resolvebyslastatus", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date by which a customer service representative has to follow up with the customer on this case.</para>
        /// <para>Display Name: Follow Up By</para>
        /// </summary>
        [AttributeLogicalName("followupby")]
        public DateTime? FollowupBy {
            get {
                return GetAttributeValue<DateTime?>("followupby");
            }
            set {
                SetAttributeValue("followupby", value);
            }
        }
        
        /// <summary>
        /// <para>Select the severity of this case to indicate the incident's impact on the customer's business.</para>
        /// <para>Display Name: Severity</para>
        /// </summary>
        [AttributeLogicalName("severitycode")]
        public Incident_SeverityCode? SeverityCode {
            get {
                return GetOptionSetValue<Incident_SeverityCode>("severitycode");
            }
            set {
                SetOptionSetValue("severitycode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Tells whether the incident has been merged with another incident.</para>
        /// <para>Display Name: Internal Use Only</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        [AttributeLogicalName("subjectidname")]
        public string SubjectIdName {
            get {
                return GetAttributeValue<string>("subjectidname");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the primary case the current case was merged into.</para>
        /// <para>Display Name: Master Case</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
            set {
                SetAttributeValue("masterid", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Tells whether the incident has been routed to queue or not.</para>
        /// <para>Display Name: Route Case</para>
        /// </summary>
        [AttributeLogicalName("routecase")]
        public bool? RouteCase {
            get {
                return GetAttributeValue<bool?>("routecase");
            }
            set {
                SetAttributeValue("routecase", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether terms of the associated entitlement should be decremented or not.</para>
        /// <para>Display Name: Decrement Entitlement Terms</para>
        /// </summary>
        [AttributeLogicalName("decremententitlementterm")]
        public bool? DecrementEntitlementTerm {
            get {
                return GetAttributeValue<bool?>("decremententitlementterm");
            }
            set {
                SetAttributeValue("decremententitlementterm", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: First Response By</para>
        /// </summary>
        [AttributeLogicalName("responseby")]
        public DateTime? ResponseBy {
            get {
                return GetAttributeValue<DateTime?>("responseby");
            }
            set {
                SetAttributeValue("responseby", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the case.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the type of case to identify the incident for use in case routing and analysis.</para>
        /// <para>Display Name: Case Type</para>
        /// </summary>
        [AttributeLogicalName("casetypecode")]
        public Incident_CaseTypeCode? CaseTypeCode {
            get {
                return GetOptionSetValue<Incident_CaseTypeCode>("casetypecode");
            }
            set {
                SetOptionSetValue("casetypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of service units that were billed to the customer for the case.</para>
        /// <para>Display Name: Billed Service Units</para>
        /// </summary>
        [AttributeLogicalName("billedserviceunits")]
        public int? BilledServiceUnits {
            get {
                return GetAttributeValue<int?>("billedserviceunits");
            }
            set {
                SetAttributeValue("billedserviceunits", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Check Email</para>
        /// </summary>
        [AttributeLogicalName("checkemail")]
        public bool? CheckEmail {
            get {
                return GetAttributeValue<bool?>("checkemail");
            }
            set {
                SetAttributeValue("checkemail", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the case.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the entitlement that is applicable for the case.</para>
        /// <para>Display Name: Entitlement</para>
        /// </summary>
        [AttributeLogicalName("entitlementid")]
        public EntityReference EntitlementId {
            get {
                return GetAttributeValue<EntityReference>("entitlementid");
            }
            set {
                SetAttributeValue("entitlementid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the case has been escalated.</para>
        /// <para>Display Name: IsEscalated</para>
        /// </summary>
        [AttributeLogicalName("isescalated")]
        public bool? IsEscalated {
            get {
                return GetAttributeValue<bool?>("isescalated");
            }
            set {
                SetAttributeValue("isescalated", value);
            }
        }
        
        /// <summary>
        /// <para>Select the service level for the case to make sure the case is handled correctly.</para>
        /// <para>Display Name: Service Level</para>
        /// </summary>
        [AttributeLogicalName("contractservicelevelcode")]
        public Incident_ContractServiceLevelCode? ContractServiceLevelCode {
            get {
                return GetOptionSetValue<Incident_ContractServiceLevelCode>("contractservicelevelcode");
            }
            set {
                SetOptionSetValue("contractservicelevelcode", value);
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Choose the subject for the case, such as catalog request or product complaint, so customer service managers can identify frequent requests or problem areas. Administrators can configure subjects under Business Management in the Settings area.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subjectid")]
        public EntityReference SubjectId {
            get {
                return GetAttributeValue<EntityReference>("subjectid");
            }
            set {
                SetAttributeValue("subjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select a primary contact for this case.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference PrimaryContactId {
            get {
                return GetAttributeValue<EntityReference>("primarycontactid");
            }
            set {
                SetAttributeValue("primarycontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the parent case for a case.</para>
        /// <para>Display Name: Parent Case</para>
        /// </summary>
        [AttributeLogicalName("parentcaseid")]
        public EntityReference ParentCaseId {
            get {
                return GetAttributeValue<EntityReference>("parentcaseid");
            }
            set {
                SetAttributeValue("parentcaseid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of service units that were actually required to resolve the case.</para>
        /// <para>Display Name: Actual Service Units</para>
        /// </summary>
        [AttributeLogicalName("actualserviceunits")]
        public int? ActualServiceUnits {
            get {
                return GetAttributeValue<int?>("actualserviceunits");
            }
            set {
                SetAttributeValue("actualserviceunits", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the case to assist the service team in reaching a resolution.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Type the serial number of the product that is associated with this case, so that the number of cases per product can be reported.</para>
        /// <para>Display Name: Serial Number</para>
        /// </summary>
        [AttributeLogicalName("productserialnumber")]
        public string ProductSerialNumber {
            get {
                return GetAttributeValue<string>("productserialnumber");
            }
            set {
                SetAttributeValue("productserialnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Customer Type</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType {
            get {
                return GetAttributeValue<string>("customeridtype");
            }
            set {
                SetAttributeValue("customeridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the first response has been sent.</para>
        /// <para>Display Name: First Response Sent</para>
        /// </summary>
        [AttributeLogicalName("firstresponsesent")]
        public bool? FirstResponseSent {
            get {
                return GetAttributeValue<bool?>("firstresponsesent");
            }
            set {
                SetAttributeValue("firstresponsesent", value);
            }
        }
        
        /// <summary>
        /// <para>Details whether the profile is blocked or not.</para>
        /// <para>Display Name: Blocked Profile</para>
        /// </summary>
        [AttributeLogicalName("blockedprofile")]
        public bool? BlockedProfile {
            get {
                return GetAttributeValue<bool?>("blockedprofile");
            }
            set {
                SetAttributeValue("blockedprofile", value);
            }
        }
        
        [AttributeLogicalName("productidname")]
        public string ProductIdName {
            get {
                return GetAttributeValue<string>("productidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Type a subject or descriptive name, such as the request, issue, or company name, to identify the case in Microsoft Dynamics CRM views.</para>
        /// <para>Display Name: Case Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Will contain the Influencer score coming from NetBreeze.</para>
        /// <para>Display Name: Influence Score</para>
        /// </summary>
        [AttributeLogicalName("influencescore")]
        public double? InfluenceScore {
            get {
                return GetAttributeValue<double?>("influencescore");
            }
            set {
                SetAttributeValue("influencescore", value);
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Activities Complete</para>
        /// </summary>
        [AttributeLogicalName("activitiescomplete")]
        public bool? ActivitiesComplete {
            get {
                return GetAttributeValue<bool?>("activitiescomplete");
            }
            set {
                SetAttributeValue("activitiescomplete", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        [AttributeLogicalName("modifiedbyexternalpartyname")]
        public string ModifiedByExternalPartyName {
            get {
                return GetAttributeValue<string>("modifiedbyexternalpartyname");
            }
        }
        
        [AttributeLogicalName("contractdetailidname")]
        public string ContractDetailIdName {
            get {
                return GetAttributeValue<string>("contractdetailidname");
            }
        }
        
        [AttributeLogicalName("responsiblecontactidname")]
        public string ResponsibleContactIdName {
            get {
                return GetAttributeValue<string>("responsiblecontactidname");
            }
        }
        
        [AttributeLogicalName("socialprofileidname")]
        public string SocialProfileIdName {
            get {
                return GetAttributeValue<string>("socialprofileidname");
            }
        }
        
        /// <summary>
        /// <para>Select the stage, in the case resolution process, that the case is in.</para>
        /// <para>Display Name: Service Stage</para>
        /// </summary>
        [AttributeLogicalName("servicestage")]
        public servicestage? ServiceStage {
            get {
                return GetOptionSetValue<servicestage>("servicestage");
            }
            set {
                SetOptionSetValue("servicestage", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the initial response time for the case according to the terms of the SLA.</para>
        /// <para>Display Name: First Response SLA Status</para>
        /// </summary>
        [AttributeLogicalName("firstresponseslastatus")]
        public Incident_FirstResponseSLAStatus? FirstResponseSLAStatus {
            get {
                return GetOptionSetValue<Incident_FirstResponseSLAStatus>("firstresponseslastatus");
            }
            set {
                SetOptionSetValue("firstresponseslastatus", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer's level of satisfaction with the handling and resolution of the case.</para>
        /// <para>Display Name: Satisfaction</para>
        /// </summary>
        [AttributeLogicalName("customersatisfactioncode")]
        public Incident_CustomerSatisfactionCode? CustomerSatisfactionCode {
            get {
                return GetOptionSetValue<Incident_CustomerSatisfactionCode>("customersatisfactioncode");
            }
            set {
                SetOptionSetValue("customersatisfactioncode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the case was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Select how contact about the case was originated, such as email, phone, or web, for use in reporting and analysis.</para>
        /// <para>Display Name: Origin</para>
        /// </summary>
        [AttributeLogicalName("caseorigincode")]
        public incident_caseorigincode? CaseOriginCode {
            get {
                return GetOptionSetValue<incident_caseorigincode>("caseorigincode");
            }
            set {
                SetOptionSetValue("caseorigincode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the case's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Incident_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Incident_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the article that contains additional information or a resolution for the case, for reference during research or follow up with the customer.</para>
        /// <para>Display Name: Knowledge Base Article</para>
        /// </summary>
        [AttributeLogicalName("kbarticleid")]
        public EntityReference KbArticleId {
            get {
                return GetAttributeValue<EntityReference>("kbarticleid");
            }
            set {
                SetAttributeValue("kbarticleid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the case is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Choose an additional customer contact who can also help resolve the case.</para>
        /// <para>Display Name: Responsible Contact</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactid")]
        public EntityReference ResponsibleContactId {
            get {
                return GetAttributeValue<EntityReference>("responsiblecontactid");
            }
            set {
                SetAttributeValue("responsiblecontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.</para>
        /// <para>Display Name: Sentiment Value</para>
        /// </summary>
        [AttributeLogicalName("sentimentvalue")]
        public double? SentimentValue {
            get {
                return GetAttributeValue<double?>("sentimentvalue");
            }
            set {
                SetAttributeValue("sentimentvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the case.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Choose the service contract that the case should be logged under to make sure the customer is eligible for support services.</para>
        /// <para>Display Name: Contract</para>
        /// </summary>
        [AttributeLogicalName("contractid")]
        public EntityReference ContractId {
            get {
                return GetAttributeValue<EntityReference>("contractid");
            }
            set {
                SetAttributeValue("contractid", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        [AttributeLogicalName("primarycontactidname")]
        public string PrimaryContactIdName {
            get {
                return GetAttributeValue<string>("primarycontactidname");
            }
        }
        
        /// <summary>
        /// <para>Select an existing case for the customer that has been populated. For internal use only.</para>
        /// <para>Display Name: Existing Case</para>
        /// </summary>
        [AttributeLogicalName("existingcase")]
        public EntityReference ExistingCase {
            get {
                return GetAttributeValue<EntityReference>("existingcase");
            }
            set {
                SetAttributeValue("existingcase", value);
            }
        }
        
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        [AttributeLogicalName("createdbyexternalpartyname")]
        public string CreatedByExternalPartyName {
            get {
                return GetAttributeValue<string>("createdbyexternalpartyname");
            }
        }
        
        /// <summary>
        /// <para>Choose the product associated with the case to identify warranty, service, or other product issues and be able to report the number of incidents for each product.</para>
        /// <para>Display Name: Product</para>
        /// </summary>
        [AttributeLogicalName("productid")]
        public EntityReference ProductId {
            get {
                return GetAttributeValue<EntityReference>("productid");
            }
            set {
                SetAttributeValue("productid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the case number for customer reference and searching capabilities. This cannot be modified.</para>
        /// <para>Display Name: Case Number</para>
        /// </summary>
        [AttributeLogicalName("ticketnumber")]
        public string TicketNumber {
            get {
                return GetAttributeValue<string>("ticketnumber");
            }
            set {
                SetAttributeValue("ticketnumber", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Resolve By KPI</para>
        /// </summary>
        [AttributeLogicalName("resolvebykpiid")]
        public EntityReference ResolveByKPIId {
            get {
                return GetAttributeValue<EntityReference>("resolvebykpiid");
            }
            set {
                SetAttributeValue("resolvebykpiid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the case record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact associated with the case.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_cases")]
        public SLA sla_cases {
            get {
                return GetRelatedEntity<SLA>("sla_cases", null);
            }
            set {
                SetRelatedEntity("sla_cases", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_incidents")]
        public BusinessUnit business_unit_incidents {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_incidents", null);
            }
            set {
                SetRelatedEntity("business_unit_incidents", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_incidentbase_createdonbehalfby")]
        public SystemUser lk_incidentbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("parentcaseid")]
        [RelationshipSchemaName("incident_parent_incident", EntityRole.Referencing)]
        public Incident Referencingincident_parent_incident {
            get {
                return GetRelatedEntity<Incident>("incident_parent_incident", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_parent_incident", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_incidentbase_modifiedonbehalfby")]
        public SystemUser lk_incidentbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_incidentbase_modifiedby")]
        public SystemUser lk_incidentbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_cases")]
        public SLA manualsla_cases {
            get {
                return GetRelatedEntity<SLA>("manualsla_cases", null);
            }
            set {
                SetRelatedEntity("manualsla_cases", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedbyexternalparty")]
        [RelationshipSchemaName("lk_externalparty_incident_modifiedby")]
        public ExternalParty lk_externalparty_incident_modifiedby {
            get {
                return GetRelatedEntity<ExternalParty>("lk_externalparty_incident_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_incident_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Incident")]
        public TransactionCurrency TransactionCurrency_Incident {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Incident", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Incident", null, value);
            }
        }
        
        [AttributeLogicalName("contractid")]
        [RelationshipSchemaName("contract_cases")]
        public Contract contract_cases {
            get {
                return GetRelatedEntity<Contract>("contract_cases", null);
            }
            set {
                SetRelatedEntity("contract_cases", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_incidentbase_createdby")]
        public SystemUser lk_incidentbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_incidentbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_incidentbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdbyexternalparty")]
        [RelationshipSchemaName("lk_externalparty_incident_createdby")]
        public ExternalParty lk_externalparty_incident_createdby {
            get {
                return GetRelatedEntity<ExternalParty>("lk_externalparty_incident_createdby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_incident_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("incident_customer_accounts")]
        public Account incident_customer_accounts {
            get {
                return GetRelatedEntity<Account>("incident_customer_accounts", null);
            }
            set {
                SetRelatedEntity("incident_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_incidents")]
        public Team team_incidents {
            get {
                return GetRelatedEntity<Team>("team_incidents", null);
            }
            set {
                SetRelatedEntity("team_incidents", null, value);
            }
        }
        
        [AttributeLogicalName("existingcase")]
        [RelationshipSchemaName("incident_existingcase", EntityRole.Referencing)]
        public Incident Referencingincident_existingcase {
            get {
                return GetRelatedEntity<Incident>("incident_existingcase", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_existingcase", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("incident_master_incident", EntityRole.Referencing)]
        public Incident Referencingincident_master_incident {
            get {
                return GetRelatedEntity<Incident>("incident_master_incident", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("incident_master_incident", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("responsiblecontactid")]
        [RelationshipSchemaName("contact_as_responsible_contact")]
        public Contact contact_as_responsible_contact {
            get {
                return GetRelatedEntity<Contact>("contact_as_responsible_contact", null);
            }
            set {
                SetRelatedEntity("contact_as_responsible_contact", null, value);
            }
        }
        
        [AttributeLogicalName("entitlementid")]
        [RelationshipSchemaName("entitlement_cases")]
        public Entitlement entitlement_cases {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_cases", null);
            }
            set {
                SetRelatedEntity("entitlement_cases", null, value);
            }
        }
        
        [AttributeLogicalName("primarycontactid")]
        [RelationshipSchemaName("contact_as_primary_contact")]
        public Contact contact_as_primary_contact {
            get {
                return GetRelatedEntity<Contact>("contact_as_primary_contact", null);
            }
            set {
                SetRelatedEntity("contact_as_primary_contact", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("incident_customer_contacts")]
        public Contact incident_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("incident_customer_contacts", null);
            }
            set {
                SetRelatedEntity("incident_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_incidents")]
        public SystemUser system_user_incidents {
            get {
                return GetRelatedEntity<SystemUser>("system_user_incidents", null);
            }
            set {
                SetRelatedEntity("system_user_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_Phonecalls")]
        public IEnumerable<PhoneCall> Incident_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Incident_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Incident_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_SocialActivities")]
        public IEnumerable<SocialActivity> Incident_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("Incident_SocialActivities", null);
            }
            set {
                SetRelatedEntities("Incident_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_master_incident", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_master_incident {
            get {
                return GetRelatedEntities<Incident>("incident_master_incident", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_master_incident", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("incident_parent_incident", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_parent_incident {
            get {
                return GetRelatedEntities<Incident>("incident_parent_incident", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_parent_incident", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("Incident_Letters")]
        public IEnumerable<Letter> Incident_Letters {
            get {
                return GetRelatedEntities<Letter>("Incident_Letters", null);
            }
            set {
                SetRelatedEntities("Incident_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_SyncErrors")]
        public IEnumerable<SyncError> Incident_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Incident_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Incident_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_Appointments")]
        public IEnumerable<Appointment> Incident_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Incident_Appointments", null);
            }
            set {
                SetRelatedEntities("Incident_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Incident_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Incident_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Incident_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_Tasks")]
        public IEnumerable<Task> Incident_Tasks {
            get {
                return GetRelatedEntities<Task>("Incident_Tasks", null);
            }
            set {
                SetRelatedEntities("Incident_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_ActivityPointers")]
        public IEnumerable<ActivityPointer> Incident_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Incident_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Incident_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_Emails")]
        public IEnumerable<Email> Incident_Emails {
            get {
                return GetRelatedEntities<Email>("Incident_Emails", null);
            }
            set {
                SetRelatedEntities("Incident_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Incident_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Incident_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Incident_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_Faxes")]
        public IEnumerable<Fax> Incident_Faxes {
            get {
                return GetRelatedEntities<Fax>("Incident_Faxes", null);
            }
            set {
                SetRelatedEntities("Incident_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_connections1")]
        public IEnumerable<Connection> incident_connections1 {
            get {
                return GetRelatedEntities<Connection>("incident_connections1", null);
            }
            set {
                SetRelatedEntities("incident_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Incident_QueueItem")]
        public IEnumerable<QueueItem> Incident_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Incident_QueueItem", null);
            }
            set {
                SetRelatedEntities("Incident_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("OriginatingCase_Lead")]
        public IEnumerable<Lead> OriginatingCase_Lead {
            get {
                return GetRelatedEntities<Lead>("OriginatingCase_Lead", null);
            }
            set {
                SetRelatedEntities("OriginatingCase_Lead", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_existingcase", EntityRole.Referenced)]
        public IEnumerable<Incident> Referencedincident_existingcase {
            get {
                return GetRelatedEntities<Incident>("incident_existingcase", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("incident_existingcase", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("incident_activity_parties")]
        public IEnumerable<ActivityParty> incident_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("incident_activity_parties", null);
            }
            set {
                SetRelatedEntities("incident_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("incident_connections2")]
        public IEnumerable<Connection> incident_connections2 {
            get {
                return GetRelatedEntities<Connection>("incident_connections2", null);
            }
            set {
                SetRelatedEntities("incident_connections2", null, value);
            }
        }
        
        public static Incident Retrieve(IOrganizationService service, Guid id, params Expression<Func<Incident,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Order that has been billed.</para>
    /// <para>Display Name: Invoice</para>
    /// </summary>
    [EntityLogicalName("invoice")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Invoice : ExtendedEntity<InvoiceState, Invoice_StatusCode> {
        
        public const string EntityLogicalName = "invoice";
        
        public const int EntityTypeCode = 1090;
        
        public Invoice() : 
                base(EntityLogicalName) {
        }
        
        public Invoice(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("invoiceid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("invoiceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the invoice.</para>
        /// <para>Display Name: Invoice</para>
        /// </summary>
        [AttributeLogicalName("invoiceid")]
        public Guid? InvoiceId {
            get {
                return GetAttributeValue<Guid?>("invoiceid");
            }
            set {
                SetId("invoiceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamount_base")]
        public decimal? TotalAmount_Base {
            get {
                return GetMoneyValue("totalamount_base");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the invoice.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount_base")]
        public decimal? TotalDiscountAmount_Base {
            get {
                return GetMoneyValue("totaldiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the billing address.</para>
        /// <para>Display Name: Bill To Street 3</para>
        /// </summary>
        [AttributeLogicalName("billto_line3")]
        public string BillTo_Line3 {
            get {
                return GetAttributeValue<string>("billto_line3");
            }
            set {
                SetAttributeValue("billto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the products included in the invoice were delivered.</para>
        /// <para>Display Name: Date Delivered</para>
        /// </summary>
        [AttributeLogicalName("datedelivered")]
        public DateTime? DateDelivered {
            get {
                return GetAttributeValue<DateTime?>("datedelivered");
            }
            set {
                SetAttributeValue("datedelivered", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 1</para>
        /// </summary>
        [AttributeLogicalName("billto_line1")]
        public string BillTo_Line1 {
            get {
                return GetAttributeValue<string>("billto_line1");
            }
            set {
                SetAttributeValue("billto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Phone</para>
        /// </summary>
        [AttributeLogicalName("shipto_telephone")]
        public string ShipTo_Telephone {
            get {
                return GetAttributeValue<string>("shipto_telephone");
            }
            set {
                SetAttributeValue("shipto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Manual Discount amounts specified on all products included in the invoice. This value is reflected in the Detail Amount field on the invoice and is added to any discount amount or rate specified on the invoice.</para>
        /// <para>Display Name: Total Line Item Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount")]
        public decimal? TotalLineItemDiscountAmount {
            get {
                return GetMoneyValue("totallineitemdiscountamount");
            }
            set {
                SetMoneyValue("totallineitemdiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Manual Discount amounts specified on all products included in the invoice. This value is reflected in the Detail Amount field on the invoice and is added to any discount amount or rate specified on the invoice.</para>
        /// <para>Display Name: Total Line Item Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount_base")]
        public decimal? TotalLineItemDiscountAmount_Base {
            get {
                return GetMoneyValue("totallineitemdiscountamount_base");
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Select the invoice's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Invoice_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Invoice_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the invoice.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the invoice was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time when the invoice was last submitted to an accounting or ERP system for processing.</para>
        /// <para>Display Name: Last Submitted to Back Office</para>
        /// </summary>
        [AttributeLogicalName("lastbackofficesubmit")]
        public DateTime? LastBackofficeSubmit {
            get {
                return GetAttributeValue<DateTime?>("lastbackofficesubmit");
            }
            set {
                SetAttributeValue("lastbackofficesubmit", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the shipping address.</para>
        /// <para>Display Name: Ship To State/Province</para>
        /// </summary>
        [AttributeLogicalName("shipto_stateorprovince")]
        public string ShipTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("shipto_stateorprovince");
            }
            set {
                SetAttributeValue("shipto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 2</para>
        /// </summary>
        [AttributeLogicalName("shipto_line2")]
        public string ShipTo_Line2 {
            get {
                return GetAttributeValue<string>("shipto_line2");
            }
            set {
                SetAttributeValue("shipto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the invoice.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the invoice is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Type of pricing error for the invoice.</para>
        /// <para>Display Name: Pricing Error </para>
        /// </summary>
        [AttributeLogicalName("pricingerrorcode")]
        public qooi_pricingerrorcode? PricingErrorCode {
            get {
                return GetOptionSetValue<qooi_pricingerrorcode>("pricingerrorcode");
            }
            set {
                SetOptionSetValue("pricingerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Ship To address.</para>
        /// <para>Display Name: Ship To Address</para>
        /// </summary>
        [AttributeLogicalName("shipto_composite")]
        public string ShipTo_Composite {
            get {
                return GetAttributeValue<string>("shipto_composite");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this invoice. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the cost of freight or shipping for the products included in the invoice for use in calculating the total amount due.</para>
        /// <para>Display Name: Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("freightamount")]
        public decimal? FreightAmount {
            get {
                return GetMoneyValue("freightamount");
            }
            set {
                SetMoneyValue("freightamount", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Fax</para>
        /// </summary>
        [AttributeLogicalName("shipto_fax")]
        public string ShipTo_Fax {
            get {
                return GetAttributeValue<string>("shipto_fax");
            }
            set {
                SetAttributeValue("shipto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's billing address.</para>
        /// <para>Display Name: Bill To City</para>
        /// </summary>
        [AttributeLogicalName("billto_city")]
        public string BillTo_City {
            get {
                return GetAttributeValue<string>("billto_city");
            }
            set {
                SetAttributeValue("billto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether prices specified on the invoice are locked from any further updates.</para>
        /// <para>Display Name: Prices Locked</para>
        /// </summary>
        [AttributeLogicalName("ispricelocked")]
        public bool? IsPriceLocked {
            get {
                return GetAttributeValue<bool?>("ispricelocked");
            }
            set {
                SetAttributeValue("ispricelocked", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total product amount due, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount due for the invoice.</para>
        /// <para>Display Name: Total Pre-Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight")]
        public decimal? TotalAmountLessFreight {
            get {
                return GetMoneyValue("totalamountlessfreight");
            }
            set {
                SetMoneyValue("totalamountlessfreight", value);
            }
        }
        
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName {
            get {
                return GetAttributeValue<string>("customeridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total amount due, calculated as the sum of the products, discount, freight, and taxes for the invoice.</para>
        /// <para>Display Name: Total Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamount")]
        public decimal? TotalAmount {
            get {
                return GetMoneyValue("totalamount");
            }
            set {
                SetMoneyValue("totalamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("freightamount_base")]
        public decimal? FreightAmount_Base {
            get {
                return GetMoneyValue("freightamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the invoice, such as shipping details or product substitutions.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the shipping address.</para>
        /// <para>Display Name: Ship To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("shipto_postalcode")]
        public string ShipTo_PostalCode {
            get {
                return GetAttributeValue<string>("shipto_postalcode");
            }
            set {
                SetAttributeValue("shipto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Fax</para>
        /// </summary>
        [AttributeLogicalName("billto_fax")]
        public string BillTo_Fax {
            get {
                return GetAttributeValue<string>("billto_fax");
            }
            set {
                SetAttributeValue("billto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public Invoice_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Invoice_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Invoice Discount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Invoice Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("discountamount_base")]
        public decimal? DiscountAmount_Base {
            get {
                return GetMoneyValue("discountamount_base");
            }
        }
        
        [AttributeLogicalName("salesorderidname")]
        public string SalesOrderIdName {
            get {
                return GetAttributeValue<string>("salesorderidname");
            }
        }
        
        [AttributeLogicalName("opportunityidname")]
        public string OpportunityIdName {
            get {
                return GetAttributeValue<string>("opportunityidname");
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Phone</para>
        /// </summary>
        [AttributeLogicalName("billto_telephone")]
        public string BillTo_Telephone {
            get {
                return GetAttributeValue<string>("billto_telephone");
            }
            set {
                SetAttributeValue("billto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Tax field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Tax (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaltax_base")]
        public decimal? TotalTax_Base {
            get {
                return GetMoneyValue("totaltax_base");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the invoice record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's billing address, such as "Headquarters" or "Field office", to identify the address.</para>
        /// <para>Display Name: Bill To Name</para>
        /// </summary>
        [AttributeLogicalName("billto_name")]
        public string BillTo_Name {
            get {
                return GetAttributeValue<string>("billto_name");
            }
            set {
                SetAttributeValue("billto_name", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date by which the invoice should be paid by the customer.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("duedate")]
        public DateTime? DueDate {
            get {
                return GetAttributeValue<DateTime?>("duedate");
            }
            set {
                SetAttributeValue("duedate", value);
            }
        }
        
        /// <summary>
        /// <para>Type the discount amount for the invoice if the customer is eligible for special savings.</para>
        /// <para>Display Name: Invoice Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("discountamount")]
        public decimal? DiscountAmount {
            get {
                return GetMoneyValue("discountamount");
            }
            set {
                SetMoneyValue("discountamount", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public Invoice_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Invoice_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the identifying number or code of the invoice.</para>
        /// <para>Display Name: Invoice ID</para>
        /// </summary>
        [AttributeLogicalName("invoicenumber")]
        public string InvoiceNumber {
            get {
                return GetAttributeValue<string>("invoicenumber");
            }
            set {
                SetAttributeValue("invoicenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's shipping address, such as "Headquarters" or "Field office", to identify the address.</para>
        /// <para>Display Name: Ship To Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_name")]
        public string ShipTo_Name {
            get {
                return GetAttributeValue<string>("shipto_name");
            }
            set {
                SetAttributeValue("shipto_name", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the invoice is active, paid, or canceled. Paid and canceled invoices are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public InvoiceState? StateCode {
            get {
                return GetOptionSetValue<InvoiceState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of all existing and write-in products included on the invoice, based on the specified price list and quantities.</para>
        /// <para>Display Name: Total Detail Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount")]
        public decimal? TotalLineItemAmount {
            get {
                return GetMoneyValue("totallineitemamount");
            }
            set {
                SetMoneyValue("totallineitemamount", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's billing address.</para>
        /// <para>Display Name: Bill To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("billto_country")]
        public string BillTo_Country {
            get {
                return GetAttributeValue<string>("billto_country");
            }
            set {
                SetAttributeValue("billto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Tax amounts specified on all products included in the invoice, included in the Total Amount due calculation for the invoice.</para>
        /// <para>Display Name: Total Tax</para>
        /// </summary>
        [AttributeLogicalName("totaltax")]
        public decimal? TotalTax {
            get {
                return GetMoneyValue("totaltax");
            }
            set {
                SetMoneyValue("totaltax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Choose the opportunity that the invoice is related to for reporting and analytics.</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public EntityReference OpportunityId {
            get {
                return GetAttributeValue<EntityReference>("opportunityid");
            }
            set {
                SetAttributeValue("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 2</para>
        /// </summary>
        [AttributeLogicalName("billto_line2")]
        public string BillTo_Line2 {
            get {
                return GetAttributeValue<string>("billto_line2");
            }
            set {
                SetAttributeValue("billto_line2", value);
            }
        }
        
        [AttributeLogicalName("pricelevelidname")]
        public string PriceLevelIdName {
            get {
                return GetAttributeValue<string>("pricelevelidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total discount amount, based on the discount price and rate entered on the invoice.</para>
        /// <para>Display Name: Total Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount")]
        public decimal? TotalDiscountAmount {
            get {
                return GetMoneyValue("totaldiscountamount");
            }
            set {
                SetMoneyValue("totaldiscountamount", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Ship To Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("shipto_freighttermscode")]
        public Invoice_ShipTo_FreightTermsCode? ShipTo_FreightTermsCode {
            get {
                return GetOptionSetValue<Invoice_ShipTo_FreightTermsCode>("shipto_freighttermscode");
            }
            set {
                SetOptionSetValue("shipto_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 1</para>
        /// </summary>
        [AttributeLogicalName("shipto_line1")]
        public string ShipTo_Line1 {
            get {
                return GetAttributeValue<string>("shipto_line1");
            }
            set {
                SetAttributeValue("shipto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the billing address.</para>
        /// <para>Display Name: Bill To State/Province</para>
        /// </summary>
        [AttributeLogicalName("billto_stateorprovince")]
        public string BillTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("billto_stateorprovince");
            }
            set {
                SetAttributeValue("billto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the invoice.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the Detail Amount field converted to the system's default base currency. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Detail Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount_base")]
        public decimal? TotalLineItemAmount_Base {
            get {
                return GetMoneyValue("totallineitemamount_base");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact associated with the invoice.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Shows the Pre-Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Pre-Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight_base")]
        public decimal? TotalAmountLessFreight_Base {
            get {
                return GetMoneyValue("totalamountlessfreight_base");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Invoice_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Invoice_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Customer Type</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType {
            get {
                return GetAttributeValue<string>("customeridtype");
            }
            set {
                SetAttributeValue("customeridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("shipto_country")]
        public string ShipTo_Country {
            get {
                return GetAttributeValue<string>("shipto_country");
            }
            set {
                SetAttributeValue("shipto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("pricelevelid")]
        public EntityReference PriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("pricelevelid");
            }
            set {
                SetAttributeValue("pricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the shipping address.</para>
        /// <para>Display Name: Ship To Street 3</para>
        /// </summary>
        [AttributeLogicalName("shipto_line3")]
        public string ShipTo_Line3 {
            get {
                return GetAttributeValue<string>("shipto_line3");
            }
            set {
                SetAttributeValue("shipto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Bill To address.</para>
        /// <para>Display Name: Bill To Address</para>
        /// </summary>
        [AttributeLogicalName("billto_composite")]
        public string BillTo_Composite {
            get {
                return GetAttributeValue<string>("billto_composite");
            }
        }
        
        /// <summary>
        /// <para>Choose the order related to the invoice to make sure the order is fulfilled and invoiced correctly.</para>
        /// <para>Display Name: Order</para>
        /// </summary>
        [AttributeLogicalName("salesorderid")]
        public EntityReference SalesOrderId {
            get {
                return GetAttributeValue<EntityReference>("salesorderid");
            }
            set {
                SetAttributeValue("salesorderid", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the billing address.</para>
        /// <para>Display Name: Bill To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("billto_postalcode")]
        public string BillTo_PostalCode {
            get {
                return GetAttributeValue<string>("billto_postalcode");
            }
            set {
                SetAttributeValue("billto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Type the discount rate that should be applied to the Detail Amount field, for use in calculating the Pre-Freight Amount and Total Amount values for the invoice.</para>
        /// <para>Display Name: Invoice Discount (%)</para>
        /// </summary>
        [AttributeLogicalName("discountpercentage")]
        public decimal? DiscountPercentage {
            get {
                return GetAttributeValue<decimal?>("discountpercentage");
            }
            set {
                SetAttributeValue("discountpercentage", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the products included in the invoice should be shipped to the specified address or held until the customer calls with further pick up or delivery instructions.</para>
        /// <para>Display Name: Ship To</para>
        /// </summary>
        [AttributeLogicalName("willcall")]
        public bool? WillCall {
            get {
                return GetAttributeValue<bool?>("willcall");
            }
            set {
                SetAttributeValue("willcall", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's shipping address.</para>
        /// <para>Display Name: Ship To City</para>
        /// </summary>
        [AttributeLogicalName("shipto_city")]
        public string ShipTo_City {
            get {
                return GetAttributeValue<string>("shipto_city");
            }
            set {
                SetAttributeValue("shipto_city", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Version number of the invoice.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [RelationshipSchemaName("contactinvoices_association")]
        public IEnumerable<Contact> contactinvoices_association {
            get {
                return GetRelatedEntities<Contact>("contactinvoices_association", null);
            }
            set {
                SetRelatedEntities("contactinvoices_association", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_invoicebase_createdby")]
        public SystemUser lk_invoicebase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_invoicebase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_invoicebase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_invoices")]
        public Team team_invoices {
            get {
                return GetRelatedEntity<Team>("team_invoices", null);
            }
            set {
                SetRelatedEntity("team_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_invoices")]
        public SystemUser system_user_invoices {
            get {
                return GetRelatedEntity<SystemUser>("system_user_invoices", null);
            }
            set {
                SetRelatedEntity("system_user_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_invoices")]
        public BusinessUnit business_unit_invoices {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_invoices", null);
            }
            set {
                SetRelatedEntity("business_unit_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("invoice_customer_accounts")]
        public Account invoice_customer_accounts {
            get {
                return GetRelatedEntity<Account>("invoice_customer_accounts", null);
            }
            set {
                SetRelatedEntity("invoice_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_invoice_modifiedonbehalfby")]
        public SystemUser lk_invoice_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_invoice_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_invoice_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("opportunityid")]
        [RelationshipSchemaName("opportunity_invoices")]
        public Opportunity opportunity_invoices {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_invoices", null);
            }
            set {
                SetRelatedEntity("opportunity_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("invoice_customer_contacts")]
        public Contact invoice_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("invoice_customer_contacts", null);
            }
            set {
                SetRelatedEntity("invoice_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_invoice")]
        public SLA manualsla_invoice {
            get {
                return GetRelatedEntity<SLA>("manualsla_invoice", null);
            }
            set {
                SetRelatedEntity("manualsla_invoice", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_invoice")]
        public SLA sla_invoice {
            get {
                return GetRelatedEntity<SLA>("sla_invoice", null);
            }
            set {
                SetRelatedEntity("sla_invoice", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_invoicebase_modifiedby")]
        public SystemUser lk_invoicebase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_invoicebase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_invoicebase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_invoice_createdonbehalfby")]
        public SystemUser lk_invoice_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_invoice_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_invoice_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("salesorderid")]
        [RelationshipSchemaName("order_invoices")]
        public SalesOrder order_invoices {
            get {
                return GetRelatedEntity<SalesOrder>("order_invoices", null);
            }
            set {
                SetRelatedEntity("order_invoices", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_invoice")]
        public TransactionCurrency transactioncurrency_invoice {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_invoice", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_invoice", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_SocialActivities")]
        public IEnumerable<SocialActivity> Invoice_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("Invoice_SocialActivities", null);
            }
            set {
                SetRelatedEntities("Invoice_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_Tasks")]
        public IEnumerable<Task> Invoice_Tasks {
            get {
                return GetRelatedEntities<Task>("Invoice_Tasks", null);
            }
            set {
                SetRelatedEntities("Invoice_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_Phonecalls")]
        public IEnumerable<PhoneCall> Invoice_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Invoice_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Invoice_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_Letters")]
        public IEnumerable<Letter> Invoice_Letters {
            get {
                return GetRelatedEntities<Letter>("Invoice_Letters", null);
            }
            set {
                SetRelatedEntities("Invoice_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_connections1")]
        public IEnumerable<Connection> invoice_connections1 {
            get {
                return GetRelatedEntities<Connection>("invoice_connections1", null);
            }
            set {
                SetRelatedEntities("invoice_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_Appointments")]
        public IEnumerable<Appointment> Invoice_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Invoice_Appointments", null);
            }
            set {
                SetRelatedEntities("Invoice_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_connections2")]
        public IEnumerable<Connection> invoice_connections2 {
            get {
                return GetRelatedEntities<Connection>("invoice_connections2", null);
            }
            set {
                SetRelatedEntities("invoice_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Invoice_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Invoice_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Invoice_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Invoice_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Invoice_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Invoice_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_ActivityPointers")]
        public IEnumerable<ActivityPointer> Invoice_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Invoice_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Invoice_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_Faxes")]
        public IEnumerable<Fax> Invoice_Faxes {
            get {
                return GetRelatedEntities<Fax>("Invoice_Faxes", null);
            }
            set {
                SetRelatedEntities("Invoice_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_SyncErrors")]
        public IEnumerable<SyncError> Invoice_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Invoice_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Invoice_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("invoice_activity_parties")]
        public IEnumerable<ActivityParty> invoice_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("invoice_activity_parties", null);
            }
            set {
                SetRelatedEntities("invoice_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("Invoice_Emails")]
        public IEnumerable<Email> Invoice_Emails {
            get {
                return GetRelatedEntities<Email>("Invoice_Emails", null);
            }
            set {
                SetRelatedEntities("Invoice_Emails", null, value);
            }
        }
        
        public static Invoice Retrieve(IOrganizationService service, Guid id, params Expression<Func<Invoice,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Organizational knowledge for internal and external use.</para>
    /// <para>Display Name: Knowledge Article</para>
    /// </summary>
    [EntityLogicalName("knowledgearticle")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class KnowledgeArticle : ExtendedEntity<KnowledgeArticleState, KnowledgeArticle_StatusCode> {
        
        public const string EntityLogicalName = "knowledgearticle";
        
        public const int EntityTypeCode = 9953;
        
        public KnowledgeArticle() : 
                base(EntityLogicalName) {
        }
        
        public KnowledgeArticle(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("knowledgearticleid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("knowledgearticleid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Knowledge Article</para>
        /// </summary>
        [AttributeLogicalName("knowledgearticleid")]
        public Guid? knowledgearticleId {
            get {
                return GetAttributeValue<Guid?>("knowledgearticleid");
            }
            set {
                SetId("knowledgearticleid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the minor version number of this article's content.</para>
        /// <para>Display Name: Minor Version Number</para>
        /// </summary>
        [AttributeLogicalName("minorversionnumber")]
        public int? MinorVersionNumber {
            get {
                return GetAttributeValue<int?>("minorversionnumber");
            }
            set {
                SetAttributeValue("minorversionnumber", value);
            }
        }
        
        [AttributeLogicalName("parentarticlecontentidname")]
        public string ParentArticleContentIdName {
            get {
                return GetAttributeValue<string>("parentarticlecontentidname");
            }
        }
        
        /// <summary>
        /// <para>Choose the subject of the article to assist with article searches. You can configure subjects under Business Management in the Settings area.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subjectid")]
        public EntityReference SubjectId {
            get {
                return GetAttributeValue<EntityReference>("subjectid");
            }
            set {
                SetAttributeValue("subjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter an expiration date for the article. Leave this field blank for no expiration date.</para>
        /// <para>Display Name: Expiration Date</para>
        /// </summary>
        [AttributeLogicalName("expirationdate")]
        public DateTime? ExpirationDate {
            get {
                return GetAttributeValue<DateTime?>("expirationdate");
            }
            set {
                SetAttributeValue("expirationdate", value);
            }
        }
        
        /// <summary>
        /// <para>Select the language that the article's content is in.</para>
        /// <para>Display Name: Language</para>
        /// </summary>
        [AttributeLogicalName("languagelocaleid")]
        public EntityReference LanguageLocaleId {
            get {
                return GetAttributeValue<EntityReference>("languagelocaleid");
            }
            set {
                SetAttributeValue("languagelocaleid", value);
            }
        }
        
        /// <summary>
        /// <para>Set Product Associations</para>
        /// <para>Display Name: Set Product Associations</para>
        /// </summary>
        [AttributeLogicalName("setproductassociations")]
        public bool? SetProductAssociations {
            get {
                return GetAttributeValue<bool?>("setproductassociations");
            }
            set {
                SetAttributeValue("setproductassociations", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the article's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public KnowledgeArticle_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<KnowledgeArticle_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("rootarticleidname")]
        public string RootArticleIdName {
            get {
                return GetAttributeValue<string>("rootarticleidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the body of the article stored in HTML format.</para>
        /// <para>Display Name: Content</para>
        /// </summary>
        [AttributeLogicalName("content")]
        public string Content {
            get {
                return GetAttributeValue<string>("content");
            }
            set {
                SetAttributeValue("content", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the parent article content associated with the entity.</para>
        /// <para>Display Name: Parent Article Content Id</para>
        /// </summary>
        [AttributeLogicalName("parentarticlecontentid")]
        public EntityReference ParentArticleContentId {
            get {
                return GetAttributeValue<EntityReference>("parentarticlecontentid");
            }
            set {
                SetAttributeValue("parentarticlecontentid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the automatically generated ID exposed to customers, partners, and other external users to reference and look up articles.</para>
        /// <para>Display Name: Article Public Number</para>
        /// </summary>
        [AttributeLogicalName("articlepublicnumber")]
        public string ArticlePublicNumber {
            get {
                return GetAttributeValue<string>("articlepublicnumber");
            }
            set {
                SetAttributeValue("articlepublicnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>The date time for Rating.</para>
        /// <para>Display Name: Rating(Last Updated Time)</para>
        /// </summary>
        [AttributeLogicalName("rating_date")]
        public DateTime? Rating_Date {
            get {
                return GetAttributeValue<DateTime?>("rating_date");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Update Content</para>
        /// <para>Display Name: Update Content</para>
        /// </summary>
        [AttributeLogicalName("updatecontent")]
        public bool? UpdateContent {
            get {
                return GetAttributeValue<bool?>("updatecontent");
            }
            set {
                SetAttributeValue("updatecontent", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the scheduled status of the entity.</para>
        /// <para>Display Name: Scheduled Status</para>
        /// </summary>
        [AttributeLogicalName("scheduledstatusid")]
        public int? ScheduledStatusId {
            get {
                return GetAttributeValue<int?>("scheduledstatusid");
            }
            set {
                SetAttributeValue("scheduledstatusid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Review</para>
        /// <para>Display Name: Review</para>
        /// </summary>
        [AttributeLogicalName("review")]
        public KnowledgeArticle_Review? Review {
            get {
                return GetOptionSetValue<KnowledgeArticle_Review>("review");
            }
            set {
                SetOptionSetValue("review", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the KnowledgeArticle with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a title for the article.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the root article.</para>
        /// <para>Display Name: Root Article Id</para>
        /// </summary>
        [AttributeLogicalName("rootarticleid")]
        public EntityReference RootArticleId {
            get {
                return GetAttributeValue<EntityReference>("rootarticleid");
            }
            set {
                SetAttributeValue("rootarticleid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total number of article views.</para>
        /// <para>Display Name: Knowledge Article Views</para>
        /// </summary>
        [AttributeLogicalName("knowledgearticleviews")]
        public int? KnowledgeArticleViews {
            get {
                return GetAttributeValue<int?>("knowledgearticleviews");
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the stage where the entity is located.</para>
        /// <para>Display Name: Stage Id</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? stageid {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the version that the current article was restored from.</para>
        /// <para>Display Name: Previous Article Content ID</para>
        /// </summary>
        [AttributeLogicalName("previousarticlecontentid")]
        public EntityReference PreviousArticleContentId {
            get {
                return GetAttributeValue<EntityReference>("previousarticlecontentid");
            }
            set {
                SetAttributeValue("previousarticlecontentid", value);
            }
        }
        
        /// <summary>
        /// <para>Ready For Review</para>
        /// <para>Display Name: Ready For Review</para>
        /// </summary>
        [AttributeLogicalName("readyforreview")]
        public bool? ReadyForReview {
            get {
                return GetAttributeValue<bool?>("readyforreview");
            }
            set {
                SetAttributeValue("readyforreview", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        [AttributeLogicalName("subjectidname")]
        public string SubjectIdName {
            get {
                return GetAttributeValue<string>("subjectidname");
            }
        }
        
        /// <summary>
        /// <para>A short overview of the article, primarily used in search results and for search engine optimization.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the process associated with the entity.</para>
        /// <para>Display Name: Process Id</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? processid {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the primary author associated with the article.</para>
        /// <para>Display Name: Primary Author Id</para>
        /// </summary>
        [AttributeLogicalName("primaryauthorid")]
        public EntityReference primaryauthorid {
            get {
                return GetAttributeValue<EntityReference>("primaryauthorid");
            }
            set {
                SetAttributeValue("primaryauthorid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether category associations have been set</para>
        /// <para>Display Name: Set Category Associations</para>
        /// </summary>
        [AttributeLogicalName("setcategoryassociations")]
        public bool? SetCategoryAssociations {
            get {
                return GetAttributeValue<bool?>("setcategoryassociations");
            }
            set {
                SetAttributeValue("setcategoryassociations", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows whether this article is only visible internally.</para>
        /// <para>Display Name: Internal</para>
        /// </summary>
        [AttributeLogicalName("isinternal")]
        public bool? IsInternal {
            get {
                return GetAttributeValue<bool?>("isinternal");
            }
            set {
                SetAttributeValue("isinternal", value);
            }
        }
        
        /// <summary>
        /// <para>Expired Review Options</para>
        /// <para>Display Name: Expired Review Options</para>
        /// </summary>
        [AttributeLogicalName("expiredreviewoptions")]
        public KnowledgeArticle_ExpiredReviewOptions? ExpiredReviewOptions {
            get {
                return GetOptionSetValue<KnowledgeArticle_ExpiredReviewOptions>("expiredreviewoptions");
            }
            set {
                SetOptionSetValue("expiredreviewoptions", value);
            }
        }
        
        [AttributeLogicalName("previousarticlecontentidname")]
        public string PreviousArticleContentIdName {
            get {
                return GetAttributeValue<string>("previousarticlecontentidname");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>The date time for Knowledge Article View.</para>
        /// <para>Display Name: Knowledge Article View(Last Updated Time)</para>
        /// </summary>
        [AttributeLogicalName("knowledgearticleviews_date")]
        public DateTime? KnowledgeArticleViews_Date {
            get {
                return GetAttributeValue<DateTime?>("knowledgearticleviews_date");
            }
        }
        
        /// <summary>
        /// <para>Shows which version of the knowledge article is the latest version.</para>
        /// <para>Display Name: Is Latest Version</para>
        /// </summary>
        [AttributeLogicalName("islatestversion")]
        public bool? IsLatestVersion {
            get {
                return GetAttributeValue<bool?>("islatestversion");
            }
            set {
                SetAttributeValue("islatestversion", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string traversedpath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the expiration status of the entity.</para>
        /// <para>Display Name: Expired Status</para>
        /// </summary>
        [AttributeLogicalName("expirationstatusid")]
        public int? ExpirationStatusId {
            get {
                return GetAttributeValue<int?>("expirationstatusid");
            }
            set {
                SetAttributeValue("expirationstatusid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the id of the expiration state of the entity.</para>
        /// <para>Display Name: Expiration State Id</para>
        /// </summary>
        [AttributeLogicalName("expirationstateid")]
        public int? ExpirationStateId {
            get {
                return GetAttributeValue<int?>("expirationstateid");
            }
            set {
                SetAttributeValue("expirationstateid", value);
            }
        }
        
        [AttributeLogicalName("subjectiddsc")]
        public int? SubjectIdDsc {
            get {
                return GetAttributeValue<int?>("subjectiddsc");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Publish Status of the Article.</para>
        /// <para>Display Name: Published Status</para>
        /// </summary>
        [AttributeLogicalName("publishstatusid")]
        public int? PublishStatusId {
            get {
                return GetAttributeValue<int?>("publishstatusid");
            }
            set {
                SetAttributeValue("publishstatusid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the article is a draft or is published, archived, or discarded. Draft articles aren't available externally and can be edited. Published articles are available externally, based on applicable permissions, but can't be edited. All metadata changes are reflected in the published version. Archived and discarded articles aren't available externally and can't be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public KnowledgeArticleState? StateCode {
            get {
                return GetOptionSetValue<KnowledgeArticleState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Select whether the article is the root article.</para>
        /// <para>Display Name: Root Article</para>
        /// </summary>
        [AttributeLogicalName("isrootarticle")]
        public bool? IsRootArticle {
            get {
                return GetAttributeValue<bool?>("isrootarticle");
            }
            set {
                SetAttributeValue("isrootarticle", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the KnowledgeArticle with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select whether the article is the primary article.</para>
        /// <para>Display Name: Primary Article</para>
        /// </summary>
        [AttributeLogicalName("isprimary")]
        public bool? IsPrimary {
            get {
                return GetAttributeValue<bool?>("isprimary");
            }
            set {
                SetAttributeValue("isprimary", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was published.</para>
        /// <para>Display Name: Publish On</para>
        /// </summary>
        [AttributeLogicalName("publishon")]
        public DateTime? PublishOn {
            get {
                return GetAttributeValue<DateTime?>("publishon");
            }
            set {
                SetAttributeValue("publishon", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>State of Rating</para>
        /// <para>Display Name: Rating(State)</para>
        /// </summary>
        [AttributeLogicalName("rating_state")]
        public int? Rating_State {
            get {
                return GetAttributeValue<int?>("rating_state");
            }
        }
        
        /// <summary>
        /// <para>Shows the major version number of this article's content.</para>
        /// <para>Display Name: Major Version Number</para>
        /// </summary>
        [AttributeLogicalName("majorversionnumber")]
        public int? MajorVersionNumber {
            get {
                return GetAttributeValue<int?>("majorversionnumber");
            }
            set {
                SetAttributeValue("majorversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("languagelocaleidname")]
        public string LanguageLocaleIdName {
            get {
                return GetAttributeValue<string>("languagelocaleidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Information which specifies how helpful the related record was.</para>
        /// <para>Display Name: Rating</para>
        /// </summary>
        [AttributeLogicalName("rating")]
        public decimal? Rating {
            get {
                return GetAttributeValue<decimal?>("rating");
            }
        }
        
        /// <summary>
        /// <para>Rating Count</para>
        /// <para>Display Name: Rating(Count)</para>
        /// </summary>
        [AttributeLogicalName("rating_count")]
        public int? Rating_Count {
            get {
                return GetAttributeValue<int?>("rating_count");
            }
        }
        
        [AttributeLogicalName("languagelocaleidlocaleid")]
        public int? LanguageLocaleIdLocaleId {
            get {
                return GetAttributeValue<int?>("languagelocaleidlocaleid");
            }
        }
        
        /// <summary>
        /// <para>State of Knowledge Article View.</para>
        /// <para>Display Name: Knowledge Article View(State)</para>
        /// </summary>
        [AttributeLogicalName("knowledgearticleviews_state")]
        public int? KnowledgeArticleViews_State {
            get {
                return GetAttributeValue<int?>("knowledgearticleviews_state");
            }
        }
        
        /// <summary>
        /// <para>Total sum of Rating</para>
        /// <para>Display Name: Rating(sum)</para>
        /// </summary>
        [AttributeLogicalName("rating_sum")]
        public decimal? Rating_Sum {
            get {
                return GetAttributeValue<decimal?>("rating_sum");
            }
        }
        
        /// <summary>
        /// <para>Type keywords to be used for searches in knowledge base articles. Separate keywords by using commas.</para>
        /// <para>Display Name: Keywords</para>
        /// </summary>
        [AttributeLogicalName("keywords")]
        public string Keywords {
            get {
                return GetAttributeValue<string>("keywords");
            }
            set {
                SetAttributeValue("keywords", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("primaryauthoridname")]
        public string primaryauthoridName {
            get {
                return GetAttributeValue<string>("primaryauthoridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_knowledgearticle")]
        public TransactionCurrency TransactionCurrency_knowledgearticle {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_knowledgearticle", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_knowledgearticle", null, value);
            }
        }
        
        [AttributeLogicalName("rootarticleid")]
        [RelationshipSchemaName("knowledgearticle_rootarticle_id", EntityRole.Referencing)]
        public KnowledgeArticle Referencingknowledgearticle_rootarticle_id {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_rootarticle_id", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("knowledgearticle_rootarticle_id", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("previousarticlecontentid")]
        [RelationshipSchemaName("knowledgearticle_previousarticle_contentid", EntityRole.Referencing)]
        public KnowledgeArticle Referencingknowledgearticle_previousarticle_contentid {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("knowledgearticle_previousarticle_contentid", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("parentarticlecontentid")]
        [RelationshipSchemaName("knowledgearticle_parentarticle_contentid", EntityRole.Referencing)]
        public KnowledgeArticle Referencingknowledgearticle_parentarticle_contentid {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("knowledgearticle_parentarticle_contentid", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("primaryauthorid")]
        [RelationshipSchemaName("knowledgearticle_primaryauthorid")]
        public SystemUser knowledgearticle_primaryauthorid {
            get {
                return GetRelatedEntity<SystemUser>("knowledgearticle_primaryauthorid", null);
            }
            set {
                SetRelatedEntity("knowledgearticle_primaryauthorid", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_knowledgearticle")]
        public BusinessUnit business_unit_knowledgearticle {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_knowledgearticle", null);
            }
            set {
                SetRelatedEntity("business_unit_knowledgearticle", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_knowledgearticle")]
        public Team team_knowledgearticle {
            get {
                return GetRelatedEntity<Team>("team_knowledgearticle", null);
            }
            set {
                SetRelatedEntity("team_knowledgearticle", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_knowledgearticle")]
        public SystemUser user_knowledgearticle {
            get {
                return GetRelatedEntity<SystemUser>("user_knowledgearticle", null);
            }
            set {
                SetRelatedEntity("user_knowledgearticle", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_knowledgearticle_modifiedonbehalfby")]
        public SystemUser lk_knowledgearticle_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_knowledgearticle_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_knowledgearticle_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_knowledgearticle_modifiedby")]
        public SystemUser lk_knowledgearticle_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_knowledgearticle_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_knowledgearticle_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_knowledgearticle_createdonbehalfby")]
        public SystemUser lk_knowledgearticle_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_knowledgearticle_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_knowledgearticle_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_knowledgearticle_createdby")]
        public SystemUser lk_knowledgearticle_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_knowledgearticle_createdby", null);
            }
            set {
                SetRelatedEntity("lk_knowledgearticle_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_Emails")]
        public IEnumerable<Email> KnowledgeArticle_Emails {
            get {
                return GetRelatedEntities<Email>("KnowledgeArticle_Emails", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_Phonecalls")]
        public IEnumerable<PhoneCall> KnowledgeArticle_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("KnowledgeArticle_Phonecalls", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_parentarticle_contentid", EntityRole.Referenced)]
        public IEnumerable<KnowledgeArticle> Referencedknowledgearticle_parentarticle_contentid {
            get {
                return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("knowledgearticle_parentarticle_contentid", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_activity_parties")]
        public IEnumerable<ActivityParty> knowledgearticle_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("knowledgearticle_activity_parties", null);
            }
            set {
                SetRelatedEntities("knowledgearticle_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_previousarticle_contentid", EntityRole.Referenced)]
        public IEnumerable<KnowledgeArticle> Referencedknowledgearticle_previousarticle_contentid {
            get {
                return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("knowledgearticle_previousarticle_contentid", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_SyncErrors")]
        public IEnumerable<SyncError> KnowledgeArticle_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("KnowledgeArticle_SyncErrors", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_ActivityPointers")]
        public IEnumerable<ActivityPointer> KnowledgeArticle_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("KnowledgeArticle_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> KnowledgeArticle_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("KnowledgeArticle_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_rootarticle_id", EntityRole.Referenced)]
        public IEnumerable<KnowledgeArticle> Referencedknowledgearticle_rootarticle_id {
            get {
                return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_rootarticle_id", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("knowledgearticle_rootarticle_id", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_Appointments")]
        public IEnumerable<Appointment> KnowledgeArticle_Appointments {
            get {
                return GetRelatedEntities<Appointment>("KnowledgeArticle_Appointments", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> KnowledgeArticle_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("KnowledgeArticle_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_Faxes")]
        public IEnumerable<Fax> KnowledgeArticle_Faxes {
            get {
                return GetRelatedEntities<Fax>("KnowledgeArticle_Faxes", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_Tasks")]
        public IEnumerable<Task> KnowledgeArticle_Tasks {
            get {
                return GetRelatedEntities<Task>("KnowledgeArticle_Tasks", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_Letters")]
        public IEnumerable<Letter> KnowledgeArticle_Letters {
            get {
                return GetRelatedEntities<Letter>("KnowledgeArticle_Letters", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("KnowledgeArticle_SocialActivities")]
        public IEnumerable<SocialActivity> KnowledgeArticle_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("KnowledgeArticle_SocialActivities", null);
            }
            set {
                SetRelatedEntities("KnowledgeArticle_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_Teams")]
        public IEnumerable<Team> knowledgearticle_Teams {
            get {
                return GetRelatedEntities<Team>("knowledgearticle_Teams", null);
            }
            set {
                SetRelatedEntities("knowledgearticle_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_QueueItems")]
        public IEnumerable<QueueItem> knowledgearticle_QueueItems {
            get {
                return GetRelatedEntities<QueueItem>("knowledgearticle_QueueItems", null);
            }
            set {
                SetRelatedEntities("knowledgearticle_QueueItems", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_SharePointDocumentLocations")]
        public IEnumerable<SharePointDocumentLocation> knowledgearticle_SharePointDocumentLocations {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("knowledgearticle_SharePointDocumentLocations", null);
            }
            set {
                SetRelatedEntities("knowledgearticle_SharePointDocumentLocations", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_connections2")]
        public IEnumerable<Connection> knowledgearticle_connections2 {
            get {
                return GetRelatedEntities<Connection>("knowledgearticle_connections2", null);
            }
            set {
                SetRelatedEntities("knowledgearticle_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_connections1")]
        public IEnumerable<Connection> knowledgearticle_connections1 {
            get {
                return GetRelatedEntities<Connection>("knowledgearticle_connections1", null);
            }
            set {
                SetRelatedEntities("knowledgearticle_connections1", null, value);
            }
        }
        
        public static KnowledgeArticle Retrieve(IOrganizationService service, Guid id, params Expression<Func<KnowledgeArticle,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Prospect or potential sales opportunity. Leads are converted into accounts, contacts, or opportunities when they are qualified. Otherwise, they are deleted or archived.</para>
    /// <para>Display Name: Lead</para>
    /// </summary>
    [EntityLogicalName("lead")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Lead : ExtendedEntity<LeadState, Lead_StatusCode> {
        
        public const string EntityLogicalName = "lead";
        
        public const int EntityTypeCode = 4;
        
        public Lead() : 
                base(EntityLogicalName) {
        }
        
        public Lead(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("leadid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("leadid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the lead.</para>
        /// <para>Display Name: Lead</para>
        /// </summary>
        [AttributeLogicalName("leadid")]
        public Guid? LeadId {
            get {
                return GetAttributeValue<Guid?>("leadid");
            }
            set {
                SetId("leadid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the lead is open, qualified, or disqualified. Qualified and disqualified leads are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public LeadState? StateCode {
            get {
                return GetOptionSetValue<LeadState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the Standard Industrial Classification (SIC) code that indicates the lead's primary industry of business for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: SIC Code</para>
        /// </summary>
        [AttributeLogicalName("sic")]
        public string SIC {
            get {
                return GetAttributeValue<string>("sic");
            }
            set {
                SetAttributeValue("sic", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the primary address.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Choose how high the level of need is for the lead's company.</para>
        /// <para>Display Name: Need</para>
        /// </summary>
        [AttributeLogicalName("need")]
        public need? Need {
            get {
                return GetOptionSetValue<need>("need");
            }
            set {
                SetOptionSetValue("need", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Combines and shows the lead's first and last names so the full name can be displayed in views and reports.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>Type the last name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the Est. Value field converted to the system's default base currency. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Est. Value (Base)</para>
        /// </summary>
        [AttributeLogicalName("estimatedamount_base")]
        public decimal? EstimatedAmount_Base {
            get {
                return GetMoneyValue("estimatedamount_base");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Choose whether an individual or a committee will be involved in the purchase process for the lead.</para>
        /// <para>Display Name: Purchase Process</para>
        /// </summary>
        [AttributeLogicalName("purchaseprocess")]
        public purchaseprocess? PurchaseProcess {
            get {
                return GetOptionSetValue<purchaseprocess>("purchaseprocess");
            }
            set {
                SetOptionSetValue("purchaseprocess", value);
            }
        }
        
        [AttributeLogicalName("parentcontactidname")]
        public string ParentContactIdName {
            get {
                return GetAttributeValue<string>("parentcontactidname");
            }
        }
        
        [AttributeLogicalName("originatingcaseidname")]
        public string OriginatingCaseIdName {
            get {
                return GetAttributeValue<string>("originatingcaseidname");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the lead's company name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
        /// <para>Display Name: Yomi Company Name</para>
        /// </summary>
        [AttributeLogicalName("yomicompanyname")]
        public string YomiCompanyName {
            get {
                return GetAttributeValue<string>("yomicompanyname");
            }
            set {
                SetAttributeValue("yomicompanyname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the primary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Type the work phone number for the primary contact for the lead.</para>
        /// <para>Display Name: Business Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        public string Telephone1 {
            get {
                return GetAttributeValue<string>("telephone1");
            }
            set {
                SetAttributeValue("telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the lead.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the home phone number for the primary contact for the lead.</para>
        /// <para>Display Name: Home Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        public string Telephone2 {
            get {
                return GetAttributeValue<string>("telephone2");
            }
            set {
                SetAttributeValue("telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName {
            get {
                return GetAttributeValue<string>("customeridname");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected close date for the lead, so that the sales team can schedule timely follow-up meetings to move the prospect to the next sales stage.</para>
        /// <para>Display Name: Est. Close Date</para>
        /// </summary>
        [AttributeLogicalName("estimatedclosedate")]
        public DateTime? EstimatedCloseDate {
            get {
                return GetAttributeValue<DateTime?>("estimatedclosedate");
            }
            set {
                SetAttributeValue("estimatedclosedate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        [AttributeLogicalName("qualifyingopportunityidname")]
        public string QualifyingOpportunityIdName {
            get {
                return GetAttributeValue<string>("qualifyingopportunityidname");
            }
        }
        
        /// <summary>
        /// <para>Choose the campaign that the lead was generated from to track the effectiveness of marketing campaigns and identify communications received by the lead.</para>
        /// <para>Display Name: Source Campaign</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public EntityReference CampaignId {
            get {
                return GetAttributeValue<EntityReference>("campaignid");
            }
            set {
                SetAttributeValue("campaignid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the primary address.</para>
        /// <para>Display Name: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Lead_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Lead_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the salutation of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email messages, and marketing campaigns.</para>
        /// <para>Display Name: Salutation</para>
        /// </summary>
        [AttributeLogicalName("salutation")]
        public string Salutation {
            get {
                return GetAttributeValue<string>("salutation");
            }
            set {
                SetAttributeValue("salutation", value);
            }
        }
        
        /// <summary>
        /// <para>Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Select the secondary address type.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public Lead_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<Lead_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead accepts marketing materials, such as brochures or catalogs. Leads that opt out can be excluded from marketing initiatives.</para>
        /// <para>Display Name: Marketing Material</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        public bool? DoNotSendMM {
            get {
                return GetAttributeValue<bool?>("donotsendmm");
            }
            set {
                SetAttributeValue("donotsendmm", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the primary address.</para>
        /// <para>Display Name: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the prospecting follow-up meeting with the lead.</para>
        /// <para>Display Name: Schedule Follow Up (Prospect)</para>
        /// </summary>
        [AttributeLogicalName("schedulefollowup_prospect")]
        public DateTime? ScheduleFollowUp_Prospect {
            get {
                return GetAttributeValue<DateTime?>("schedulefollowup_prospect");
            }
            set {
                SetAttributeValue("schedulefollowup_prospect", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead allows phone calls.</para>
        /// <para>Display Name: Do not allow Phone Calls</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? DoNotPhone {
            get {
                return GetAttributeValue<bool?>("donotphone");
            }
            set {
                SetAttributeValue("donotphone", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead allows direct email sent from Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Do not allow Emails</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? DoNotEMail {
            get {
                return GetAttributeValue<bool?>("donotemail");
            }
            set {
                SetAttributeValue("donotemail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Information about the budget amount of the lead's company or organization.</para>
        /// <para>Display Name: Budget Amount</para>
        /// </summary>
        [AttributeLogicalName("budgetamount")]
        public decimal? BudgetAmount {
            get {
                return GetMoneyValue("budgetamount");
            }
            set {
                SetMoneyValue("budgetamount", value);
            }
        }
        
        /// <summary>
        /// <para>Choose how long the lead will likely take to make the purchase, so the sales team will be aware.</para>
        /// <para>Display Name: Purchase Timeframe</para>
        /// </summary>
        [AttributeLogicalName("purchasetimeframe")]
        public purchasetimeframe? PurchaseTimeFrame {
            get {
                return GetOptionSetValue<purchasetimeframe>("purchasetimeframe");
            }
            set {
                SetOptionSetValue("purchasetimeframe", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether the lead has been merged with another lead.</para>
        /// <para>Display Name: Merged</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged {
            get {
                return GetAttributeValue<bool?>("merged");
            }
        }
        
        /// <summary>
        /// <para>Shows the Annual Revenue field converted to the system's default base currency. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Annual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        public decimal? Revenue_Base {
            get {
                return GetMoneyValue("revenue_base");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("masterleadidname")]
        public string MasterLeadIdName {
            get {
                return GetAttributeValue<string>("masterleadidname");
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the lead's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the master lead for merge.</para>
        /// <para>Display Name: Master ID</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId {
            get {
                return GetAttributeValue<EntityReference>("masterid");
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the primary contact for the lead.</para>
        /// <para>Display Name: Fax</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string Fax {
            get {
                return GetAttributeValue<string>("fax");
            }
            set {
                SetAttributeValue("fax", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the primary address.</para>
        /// <para>Display Name: Address 1: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the job title of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: Job Title</para>
        /// </summary>
        [AttributeLogicalName("jobtitle")]
        public string JobTitle {
            get {
                return GetAttributeValue<string>("jobtitle");
            }
            set {
                SetAttributeValue("jobtitle", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this case. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Select whether your notes include information about who makes the purchase decisions at the lead's company.</para>
        /// <para>Display Name: Decision Maker?</para>
        /// </summary>
        [AttributeLogicalName("decisionmaker")]
        public bool? DecisionMaker {
            get {
                return GetAttributeValue<bool?>("decisionmaker");
            }
            set {
                SetAttributeValue("decisionmaker", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the primary address.</para>
        /// <para>Display Name: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the primary address.</para>
        /// <para>Display Name: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the lead.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the lead participates in workflow rules.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Address 2</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Type the middle name or initial of the primary contact for the lead to make sure the prospect is addressed correctly.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the qualifying follow-up meeting with the lead.</para>
        /// <para>Display Name: Schedule Follow Up (Qualify)</para>
        /// </summary>
        [AttributeLogicalName("schedulefollowup_qualify")]
        public DateTime? ScheduleFollowUp_Qualify {
            get {
                return GetAttributeValue<DateTime?>("schedulefollowup_qualify");
            }
            set {
                SetAttributeValue("schedulefollowup_qualify", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the secondary address, such as Corporate Headquarters.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Select the sales process stage for the lead to help determine the probability of the lead converting to an opportunity.</para>
        /// <para>Display Name: Sales Stage Code</para>
        /// </summary>
        [AttributeLogicalName("salesstagecode")]
        public Lead_SalesStageCode? SalesStageCode {
            get {
                return GetOptionSetValue<Lead_SalesStageCode>("salesstagecode");
            }
            set {
                SetOptionSetValue("salesstagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary industry in which the lead's business is focused, for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: Industry</para>
        /// </summary>
        [AttributeLogicalName("industrycode")]
        public Lead_IndustryCode? IndustryCode {
            get {
                return GetOptionSetValue<Lead_IndustryCode>("industrycode");
            }
            set {
                SetOptionSetValue("industrycode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the annual revenue of the company associated with the lead to provide an understanding of the prospect's business.</para>
        /// <para>Display Name: Annual Revenue</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        public decimal? Revenue {
            get {
                return GetMoneyValue("revenue");
            }
            set {
                SetMoneyValue("revenue", value);
            }
        }
        
        /// <summary>
        /// <para>Select the primary marketing source that prompted the lead to contact you.</para>
        /// <para>Display Name: Lead Source</para>
        /// </summary>
        [AttributeLogicalName("leadsourcecode")]
        public Lead_LeadSourceCode? LeadSourceCode {
            get {
                return GetOptionSetValue<Lead_LeadSourceCode>("leadsourcecode");
            }
            set {
                SetOptionSetValue("leadsourcecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a numeric value of the lead's estimated value, such as a product quantity, if no revenue amount can be specified in the Est. Value field. This can be used for sales forecasting and planning.</para>
        /// <para>Display Name: Est. Value (deprecated)</para>
        /// </summary>
        [AttributeLogicalName("estimatedvalue")]
        public double? EstimatedValue {
            get {
                return GetAttributeValue<double?>("estimatedvalue");
            }
            set {
                SetAttributeValue("estimatedvalue", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the lead's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the main phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the post office box number of the secondary address.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Type a second phone number associated with the secondary address.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subject or descriptive name, such as the expected order, company name, or marketing source list, to identify the lead.</para>
        /// <para>Display Name: Topic</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the primary address.</para>
        /// <para>Display Name: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the preferred method of contact.</para>
        /// <para>Display Name: Preferred Method of Contact</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public Lead_PreferredContactMethodCode? PreferredContactMethodCode {
            get {
                return GetOptionSetValue<Lead_PreferredContactMethodCode>("preferredcontactmethodcode");
            }
            set {
                SetOptionSetValue("preferredcontactmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the lead.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the county for the primary address.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the lead, such as an excerpt from the company's website.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>This attribute is used for Sample Service Business Processes.</para>
        /// <para>Display Name: Originating Case</para>
        /// </summary>
        [AttributeLogicalName("originatingcaseid")]
        public EntityReference OriginatingCaseId {
            get {
                return GetAttributeValue<EntityReference>("originatingcaseid");
            }
            set {
                SetAttributeValue("originatingcaseid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date when the lead was last included in a marketing campaign or quick campaign.</para>
        /// <para>Display Name: Last Campaign Date</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? LastUsedInCampaign {
            get {
                return GetAttributeValue<DateTime?>("lastusedincampaign");
            }
            set {
                SetAttributeValue("lastusedincampaign", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Customer Type</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType {
            get {
                return GetAttributeValue<string>("customeridtype");
            }
            set {
                SetAttributeValue("customeridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the secondary address.</para>
        /// <para>Display Name: Address 2: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type comments about the qualification or scoring of the lead.</para>
        /// <para>Display Name: Qualification Comments</para>
        /// </summary>
        [AttributeLogicalName("qualificationcomments")]
        public string QualificationComments {
            get {
                return GetAttributeValue<string>("qualificationcomments");
            }
            set {
                SetAttributeValue("qualificationcomments", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the primary address.</para>
        /// <para>Display Name: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the fit between the lead's requirements and your offerings was evaluated.</para>
        /// <para>Display Name: Evaluate Fit</para>
        /// </summary>
        [AttributeLogicalName("evaluatefit")]
        public bool? EvaluateFit {
            get {
                return GetAttributeValue<bool?>("evaluatefit");
            }
            set {
                SetAttributeValue("evaluatefit", value);
            }
        }
        
        /// <summary>
        /// <para>Select the sales stage of this lead to aid the sales team in their efforts to convert this lead to an opportunity.</para>
        /// <para>Display Name: Sales Stage</para>
        /// </summary>
        [AttributeLogicalName("salesstage")]
        public lead_salesstage? SalesStage {
            get {
                return GetOptionSetValue<lead_salesstage>("salesstage");
            }
            set {
                SetOptionSetValue("salesstage", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the first name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address 1</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead allows faxes.</para>
        /// <para>Display Name: Do not allow Faxes</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? DoNotFax {
            get {
                return GetAttributeValue<bool?>("donotfax");
            }
            set {
                SetAttributeValue("donotfax", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the lead can be added to marketing lists, but will be excluded from the email.</para>
        /// <para>Display Name: Do not allow Bulk Emails</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        public bool? DoNotBulkEMail {
            get {
                return GetAttributeValue<bool?>("donotbulkemail");
            }
            set {
                SetAttributeValue("donotbulkemail", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Type the latitude value for the secondary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public Lead_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<Lead_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the secondary address.</para>
        /// <para>Display Name: Address 2: City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Choose an account to connect this lead to, so that the relationship is visible in reports and analytics.</para>
        /// <para>Display Name: Parent Account for lead</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference ParentAccountId {
            get {
                return GetAttributeValue<EntityReference>("parentaccountid");
            }
            set {
                SetAttributeValue("parentaccountid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the company associated with the lead. This becomes the account name when the lead is qualified and converted to a customer account.</para>
        /// <para>Display Name: Company Name</para>
        /// </summary>
        [AttributeLogicalName("companyname")]
        public string CompanyName {
            get {
                return GetAttributeValue<string>("companyname");
            }
            set {
                SetAttributeValue("companyname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Choose whether someone from the sales team contacted this lead earlier.</para>
        /// <para>Display Name: Initial Communication</para>
        /// </summary>
        [AttributeLogicalName("initialcommunication")]
        public initialcommunication? InitialCommunication {
            get {
                return GetOptionSetValue<initialcommunication>("initialcommunication");
            }
            set {
                SetOptionSetValue("initialcommunication", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of employees that work at the company associated with the lead, for use in marketing segmentation and demographic analysis.</para>
        /// <para>Display Name: No. of Employees</para>
        /// </summary>
        [AttributeLogicalName("numberofemployees")]
        public int? NumberOfEmployees {
            get {
                return GetAttributeValue<int?>("numberofemployees");
            }
            set {
                SetAttributeValue("numberofemployees", value);
            }
        }
        
        /// <summary>
        /// <para>Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        [AttributeLogicalName("parentaccountidname")]
        public string ParentAccountIdName {
            get {
                return GetAttributeValue<string>("parentaccountidname");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Select the lead's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Lead_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Lead_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose a contact to connect this lead to, so that the relationship is visible in reports and analytics.</para>
        /// <para>Display Name: Parent Contact for lead</para>
        /// </summary>
        [AttributeLogicalName("parentcontactid")]
        public EntityReference ParentContactId {
            get {
                return GetAttributeValue<EntityReference>("parentcontactid");
            }
            set {
                SetAttributeValue("parentcontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Related Campaign Response.</para>
        /// <para>Display Name: Related Campaign Response</para>
        /// </summary>
        [AttributeLogicalName("relatedobjectid")]
        public EntityReference RelatedObjectId {
            get {
                return GetAttributeValue<EntityReference>("relatedobjectid");
            }
            set {
                SetAttributeValue("relatedobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the opportunity that the lead was qualified on and then converted to.</para>
        /// <para>Display Name: Qualifying Opportunity</para>
        /// </summary>
        [AttributeLogicalName("qualifyingopportunityid")]
        public EntityReference QualifyingOpportunityId {
            get {
                return GetAttributeValue<EntityReference>("qualifyingopportunityid");
            }
            set {
                SetAttributeValue("qualifyingopportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the secondary address.</para>
        /// <para>Display Name: Address 2: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the secondary address.</para>
        /// <para>Display Name: Address 2: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Select a rating value to indicate the lead's potential to become a customer.</para>
        /// <para>Display Name: Rating</para>
        /// </summary>
        [AttributeLogicalName("leadqualitycode")]
        public Lead_LeadQualityCode? LeadQualityCode {
            get {
                return GetOptionSetValue<Lead_LeadQualityCode>("leadqualitycode");
            }
            set {
                SetOptionSetValue("leadqualitycode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the mobile phone number for the primary contact for the lead.</para>
        /// <para>Display Name: Mobile Phone</para>
        /// </summary>
        [AttributeLogicalName("mobilephone")]
        public string MobilePhone {
            get {
                return GetAttributeValue<string>("mobilephone");
            }
            set {
                SetAttributeValue("mobilephone", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province of the secondary address.</para>
        /// <para>Display Name: Address 2: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the lead.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Type the pager number for the primary contact for the lead.</para>
        /// <para>Display Name: Pager</para>
        /// </summary>
        [AttributeLogicalName("pager")]
        public string Pager {
            get {
                return GetAttributeValue<string>("pager");
            }
            set {
                SetAttributeValue("pager", value);
            }
        }
        
        [AttributeLogicalName("campaignidname")]
        public string CampaignIdName {
            get {
                return GetAttributeValue<string>("campaignidname");
            }
        }
        
        [AttributeLogicalName("relatedobjectidname")]
        public string RelatedObjectIdName {
            get {
                return GetAttributeValue<string>("relatedobjectidname");
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Type the estimated revenue value that this lead will generate to assist in sales forecasting and planning.</para>
        /// <para>Display Name: Est. Value</para>
        /// </summary>
        [AttributeLogicalName("estimatedamount")]
        public decimal? EstimatedAmount {
            get {
                return GetMoneyValue("estimatedamount");
            }
            set {
                SetMoneyValue("estimatedamount", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public Lead_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<Lead_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Type the county for the secondary address.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality.</para>
        /// <para>Display Name: Confirm Interest</para>
        /// </summary>
        [AttributeLogicalName("confirminterest")]
        public bool? ConfirmInterest {
            get {
                return GetAttributeValue<bool?>("confirminterest");
            }
            set {
                SetAttributeValue("confirminterest", value);
            }
        }
        
        /// <summary>
        /// <para>Type an alternate phone number for the primary contact for the lead.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        public string Telephone3 {
            get {
                return GetAttributeValue<string>("telephone3");
            }
            set {
                SetAttributeValue("telephone3", value);
            }
        }
        
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Select the primary address type.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public Lead_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<Lead_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the lead is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Combines and shows the lead's Yomi first and last names so the full phonetic name can be displayed in views and reports.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead allows direct mail.</para>
        /// <para>Display Name: Do not allow Mails</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? DoNotPostalMail {
            get {
                return GetAttributeValue<bool?>("donotpostalmail");
            }
            set {
                SetAttributeValue("donotpostalmail", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phonetic spelling of the lead's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the website URL for the company associated with this lead.</para>
        /// <para>Display Name: Website</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string WebSiteUrl {
            get {
                return GetAttributeValue<string>("websiteurl");
            }
            set {
                SetAttributeValue("websiteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Type the longitude value for the primary address for use in mapping and other applications.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Information about the budget status of the lead's company or organization.</para>
        /// <para>Display Name: Budget</para>
        /// </summary>
        [AttributeLogicalName("budgetstatus")]
        public budgetstatus? BudgetStatus {
            get {
                return GetOptionSetValue<budgetstatus>("budgetstatus");
            }
            set {
                SetOptionSetValue("budgetstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Lead record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Base currency equivalent of the estimated budget of the lead.</para>
        /// <para>Display Name: Budget Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("budgetamount_base")]
        public decimal? BudgetAmount_Base {
            get {
                return GetMoneyValue("budgetamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type the city for the primary address.</para>
        /// <para>Display Name: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary email address for the lead.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        public string EMailAddress1 {
            get {
                return GetAttributeValue<string>("emailaddress1");
            }
            set {
                SetAttributeValue("emailaddress1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the secondary email address for the lead.</para>
        /// <para>Display Name: Email Address 2</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        public string EMailAddress2 {
            get {
                return GetAttributeValue<string>("emailaddress2");
            }
            set {
                SetAttributeValue("emailaddress2", value);
            }
        }
        
        /// <summary>
        /// <para>Type a third email address for the lead.</para>
        /// <para>Display Name: Email Address 3</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        public string EMailAddress3 {
            get {
                return GetAttributeValue<string>("emailaddress3");
            }
            set {
                SetAttributeValue("emailaddress3", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact with which the lead is associated.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        [RelationshipSchemaName("accountleads_association")]
        public IEnumerable<Account> accountleads_association {
            get {
                return GetRelatedEntities<Account>("accountleads_association", null);
            }
            set {
                SetRelatedEntities("accountleads_association", null, value);
            }
        }
        
        [RelationshipSchemaName("listlead_association")]
        public IEnumerable<List> listlead_association {
            get {
                return GetRelatedEntities<List>("listlead_association", null);
            }
            set {
                SetRelatedEntities("listlead_association", null, value);
            }
        }
        
        [RelationshipSchemaName("contactleads_association")]
        public IEnumerable<Contact> contactleads_association {
            get {
                return GetRelatedEntities<Contact>("contactleads_association", null);
            }
            set {
                SetRelatedEntities("contactleads_association", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_leads")]
        public BusinessUnit business_unit_leads {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_leads", null);
            }
            set {
                SetRelatedEntity("business_unit_leads", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_lead_createdonbehalfby")]
        public SystemUser lk_lead_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_lead_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_lead_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_lead")]
        public SLA manualsla_lead {
            get {
                return GetRelatedEntity<SLA>("manualsla_lead", null);
            }
            set {
                SetRelatedEntity("manualsla_lead", null, value);
            }
        }
        
        [AttributeLogicalName("originatingcaseid")]
        [RelationshipSchemaName("OriginatingCase_Lead")]
        public Incident OriginatingCase_Lead {
            get {
                return GetRelatedEntity<Incident>("OriginatingCase_Lead", null);
            }
            set {
                SetRelatedEntity("OriginatingCase_Lead", null, value);
            }
        }
        
        [AttributeLogicalName("qualifyingopportunityid")]
        [RelationshipSchemaName("lead_qualifying_opportunity")]
        public Opportunity lead_qualifying_opportunity {
            get {
                return GetRelatedEntity<Opportunity>("lead_qualifying_opportunity", null);
            }
            set {
                SetRelatedEntity("lead_qualifying_opportunity", null, value);
            }
        }
        
        [AttributeLogicalName("relatedobjectid")]
        [RelationshipSchemaName("CampaignResponse_Lead")]
        public CampaignResponse CampaignResponse_Lead {
            get {
                return GetRelatedEntity<CampaignResponse>("CampaignResponse_Lead", null);
            }
            set {
                SetRelatedEntity("CampaignResponse_Lead", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_leadbase_createdby")]
        public SystemUser lk_leadbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_leadbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_leadbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("lead_customer_contacts")]
        public Contact lead_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("lead_customer_contacts", null);
            }
            set {
                SetRelatedEntity("lead_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("masterid")]
        [RelationshipSchemaName("lead_master_lead", EntityRole.Referencing)]
        public Lead Referencinglead_master_lead {
            get {
                return GetRelatedEntity<Lead>("lead_master_lead", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lead_master_lead", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("lead_owning_user")]
        public SystemUser lead_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("lead_owning_user", null);
            }
            set {
                SetRelatedEntity("lead_owning_user", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_leadbase_modifiedby")]
        public SystemUser lk_leadbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_leadbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_leadbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_lead_modifiedonbehalfby")]
        public SystemUser lk_lead_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_lead_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_lead_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_lead")]
        public TransactionCurrency transactioncurrency_lead {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_lead", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_lead", null, value);
            }
        }
        
        [AttributeLogicalName("parentcontactid")]
        [RelationshipSchemaName("lead_parent_contact")]
        public Contact lead_parent_contact {
            get {
                return GetRelatedEntity<Contact>("lead_parent_contact", null);
            }
            set {
                SetRelatedEntity("lead_parent_contact", null, value);
            }
        }
        
        [AttributeLogicalName("parentaccountid")]
        [RelationshipSchemaName("lead_parent_account")]
        public Account lead_parent_account {
            get {
                return GetRelatedEntity<Account>("lead_parent_account", null);
            }
            set {
                SetRelatedEntity("lead_parent_account", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_lead")]
        public SLA sla_lead {
            get {
                return GetRelatedEntity<SLA>("sla_lead", null);
            }
            set {
                SetRelatedEntity("sla_lead", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("lead_customer_accounts")]
        public Account lead_customer_accounts {
            get {
                return GetRelatedEntity<Account>("lead_customer_accounts", null);
            }
            set {
                SetRelatedEntity("lead_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("campaignid")]
        [RelationshipSchemaName("campaign_leads")]
        public Campaign campaign_leads {
            get {
                return GetRelatedEntity<Campaign>("campaign_leads", null);
            }
            set {
                SetRelatedEntity("campaign_leads", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("lead_owning_team")]
        public Team lead_owning_team {
            get {
                return GetRelatedEntity<Team>("lead_owning_team", null);
            }
            set {
                SetRelatedEntity("lead_owning_team", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Tasks")]
        public IEnumerable<Task> Lead_Tasks {
            get {
                return GetRelatedEntities<Task>("Lead_Tasks", null);
            }
            set {
                SetRelatedEntities("Lead_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Lead_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Lead_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Lead_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Faxes")]
        public IEnumerable<Fax> Lead_Faxes {
            get {
                return GetRelatedEntities<Fax>("Lead_Faxes", null);
            }
            set {
                SetRelatedEntities("Lead_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Phonecalls")]
        public IEnumerable<PhoneCall> Lead_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Lead_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Lead_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Email_EmailSender")]
        public IEnumerable<Email> Lead_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("Lead_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("Lead_Email_EmailSender", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_activity_parties")]
        public IEnumerable<ActivityParty> lead_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("lead_activity_parties", null);
            }
            set {
                SetRelatedEntities("lead_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_SyncErrors")]
        public IEnumerable<SyncError> Lead_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Lead_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Lead_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_originating_lead")]
        public IEnumerable<Contact> contact_originating_lead {
            get {
                return GetRelatedEntities<Contact>("contact_originating_lead", null);
            }
            set {
                SetRelatedEntities("contact_originating_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_master_lead", EntityRole.Referenced)]
        public IEnumerable<Lead> Referencedlead_master_lead {
            get {
                return GetRelatedEntities<Lead>("lead_master_lead", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lead_master_lead", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Appointments")]
        public IEnumerable<Appointment> Lead_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Lead_Appointments", null);
            }
            set {
                SetRelatedEntities("Lead_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("account_originating_lead")]
        public IEnumerable<Account> account_originating_lead {
            get {
                return GetRelatedEntities<Account>("account_originating_lead", null);
            }
            set {
                SetRelatedEntities("account_originating_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_originating_lead")]
        public IEnumerable<Opportunity> opportunity_originating_lead {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_originating_lead", null);
            }
            set {
                SetRelatedEntities("opportunity_originating_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Lead_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Lead_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Lead_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Letters")]
        public IEnumerable<Letter> Lead_Letters {
            get {
                return GetRelatedEntities<Letter>("Lead_Letters", null);
            }
            set {
                SetRelatedEntities("Lead_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_ActivityPointers")]
        public IEnumerable<ActivityPointer> Lead_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Lead_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Lead_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_connections1")]
        public IEnumerable<Connection> lead_connections1 {
            get {
                return GetRelatedEntities<Connection>("lead_connections1", null);
            }
            set {
                SetRelatedEntities("lead_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_SocialActivities")]
        public IEnumerable<SocialActivity> Lead_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("Lead_SocialActivities", null);
            }
            set {
                SetRelatedEntities("Lead_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_Emails")]
        public IEnumerable<Email> Lead_Emails {
            get {
                return GetRelatedEntities<Email>("Lead_Emails", null);
            }
            set {
                SetRelatedEntities("Lead_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Lead_SharepointDocumentLocation")]
        public IEnumerable<SharePointDocumentLocation> Lead_SharepointDocumentLocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("Lead_SharepointDocumentLocation", null);
            }
            set {
                SetRelatedEntities("Lead_SharepointDocumentLocation", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_connections2")]
        public IEnumerable<Connection> lead_connections2 {
            get {
                return GetRelatedEntities<Connection>("lead_connections2", null);
            }
            set {
                SetRelatedEntities("lead_connections2", null, value);
            }
        }
        
        public static Lead Retrieve(IOrganizationService service, Guid id, params Expression<Func<Lead,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Activity that tracks the delivery of a letter. The activity can contain the electronic copy of the letter.</para>
    /// <para>Display Name: Letter</para>
    /// </summary>
    [EntityLogicalName("letter")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Letter : ExtendedEntity<LetterState, Letter_StatusCode> {
        
        public const string EntityLogicalName = "letter";
        
        public const int EntityTypeCode = 4207;
        
        public Letter() : 
                base(EntityLogicalName) {
        }
        
        public Letter(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the letter activity.</para>
        /// <para>Display Name: Letter</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent creating and sending the letter. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Select the letter's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Letter_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Letter_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the letter activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the letter. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual time to create and send the letter.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the letter activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for an associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type the complete recipient address for the letter to ensure timely delivery.</para>
        /// <para>Display Name: Address</para>
        /// </summary>
        [AttributeLogicalName("address")]
        public string Address {
            get {
                return GetAttributeValue<string>("address");
            }
            set {
                SetAttributeValue("address", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this Letter. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type the letter body or additional information to describe the letter, such as the primary message or the products and services described.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the letter type, such as sales offer or past due notice, to tie the letter to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the letter type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the letter activity was created by a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Letter record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the letter activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Shows the type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Select the direction of the letter as incoming or outbound.</para>
        /// <para>Display Name: Direction</para>
        /// </summary>
        [AttributeLogicalName("directioncode")]
        public bool? DirectionCode {
            get {
                return GetAttributeValue<bool?>("directioncode");
            }
            set {
                SetAttributeValue("directioncode", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Enter the recipients that should be copied on the letter.</para>
        /// <para>Display Name: Cc</para>
        /// </summary>
        [AttributeLogicalName("cc")]
        public IEnumerable<ActivityParty> Cc {
            get {
                return GetEntityCollection<ActivityParty>("cc");
            }
            set {
                SetEntityCollection("cc", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the recipients that are included in the letter distribution, but are not displayed to other recipients.</para>
        /// <para>Display Name: Bcc</para>
        /// </summary>
        [AttributeLogicalName("bcc")]
        public IEnumerable<ActivityParty> Bcc {
            get {
                return GetEntityCollection<ActivityParty>("bcc");
            }
            set {
                SetEntityCollection("bcc", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the letter.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the letter is open, completed, or canceled. Completed and canceled letters are read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public LetterState? StateCode {
            get {
                return GetOptionSetValue<LetterState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the letter activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, or user recipients for the letter.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the letter activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the letter. By default, it displays the date and time when the activity was created, but can be edited to capture the actual time to create and send the letter.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Letter_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Letter_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, or user who sent the letter.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the letter.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the letter activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_Letters")]
        public msdyn_PostAlbum msdyn_postalbum_Letters {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_Letters", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_Letters")]
        public dg_event dg_event_Letters {
            get {
                return GetRelatedEntity<dg_event>("dg_event_Letters", null);
            }
            set {
                SetRelatedEntity("dg_event_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_Letters")]
        public dg_participant dg_participant_Letters {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_Letters", null);
            }
            set {
                SetRelatedEntity("dg_participant_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_Letters")]
        public CampaignActivity CampaignActivity_Letters {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_Letters", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_letter_modifiedonbehalfby")]
        public SystemUser lk_letter_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_letter_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_letter_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_letter")]
        public SLA manualsla_letter {
            get {
                return GetRelatedEntity<SLA>("manualsla_letter", null);
            }
            set {
                SetRelatedEntity("manualsla_letter", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_Letters")]
        public SalesOrder SalesOrder_Letters {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_Letters", null);
            }
            set {
                SetRelatedEntity("SalesOrder_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_Letters")]
        public Lead Lead_Letters {
            get {
                return GetRelatedEntity<Lead>("Lead_Letters", null);
            }
            set {
                SetRelatedEntity("Lead_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_letter_activities")]
        public BusinessUnit business_unit_letter_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_letter_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_letter_activities", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_letter_createdonbehalfby")]
        public SystemUser lk_letter_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_letter_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_letter_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Letters")]
        public Account Account_Letters {
            get {
                return GetRelatedEntity<Account>("Account_Letters", null);
            }
            set {
                SetRelatedEntity("Account_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_Letters")]
        public Quote Quote_Letters {
            get {
                return GetRelatedEntity<Quote>("Quote_Letters", null);
            }
            set {
                SetRelatedEntity("Quote_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_letter_modifiedby")]
        public SystemUser lk_letter_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_letter_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_letter_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_Letters")]
        public Opportunity Opportunity_Letters {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_Letters", null);
            }
            set {
                SetRelatedEntity("Opportunity_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Letter")]
        public TransactionCurrency TransactionCurrency_Letter {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Letter", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Letter", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Letters")]
        public Incident Incident_Letters {
            get {
                return GetRelatedEntity<Incident>("Incident_Letters", null);
            }
            set {
                SetRelatedEntity("Incident_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_letter_createdby")]
        public SystemUser lk_letter_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_letter_createdby", null);
            }
            set {
                SetRelatedEntity("lk_letter_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_Letters")]
        public KnowledgeArticle KnowledgeArticle_Letters {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_Letters", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_Letters")]
        public Contract Contract_Letters {
            get {
                return GetRelatedEntity<Contract>("Contract_Letters", null);
            }
            set {
                SetRelatedEntity("Contract_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_letter")]
        public SystemUser user_letter {
            get {
                return GetRelatedEntity<SystemUser>("user_letter", null);
            }
            set {
                SetRelatedEntity("user_letter", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_letter")]
        public Team team_letter {
            get {
                return GetRelatedEntity<Team>("team_letter", null);
            }
            set {
                SetRelatedEntity("team_letter", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_Letters")]
        public Campaign Campaign_Letters {
            get {
                return GetRelatedEntity<Campaign>("Campaign_Letters", null);
            }
            set {
                SetRelatedEntity("Campaign_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_Letters")]
        public Invoice Invoice_Letters {
            get {
                return GetRelatedEntity<Invoice>("Invoice_Letters", null);
            }
            set {
                SetRelatedEntity("Invoice_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_letter")]
        public ActivityPointer activity_pointer_letter {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_letter", null);
            }
            set {
                SetRelatedEntity("activity_pointer_letter", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_letter")]
        public SLA sla_letter {
            get {
                return GetRelatedEntity<SLA>("sla_letter", null);
            }
            set {
                SetRelatedEntity("sla_letter", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Letters")]
        public Contact Contact_Letters {
            get {
                return GetRelatedEntity<Contact>("Contact_Letters", null);
            }
            set {
                SetRelatedEntity("Contact_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_Letters")]
        public BookableResourceBookingHeader bookableresourcebookingheader_Letters {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_Letters", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_Letters")]
        public BookableResourceBooking bookableresourcebooking_Letters {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_Letters", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_Letters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_Letters")]
        public Entitlement entitlement_Letters {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_Letters", null);
            }
            set {
                SetRelatedEntity("entitlement_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("letter_connections2")]
        public IEnumerable<Connection> letter_connections2 {
            get {
                return GetRelatedEntities<Connection>("letter_connections2", null);
            }
            set {
                SetRelatedEntities("letter_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("Letter_QueueItem")]
        public IEnumerable<QueueItem> Letter_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Letter_QueueItem", null);
            }
            set {
                SetRelatedEntities("Letter_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("letter_campaignresponse")]
        public IEnumerable<CampaignResponse> letter_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("letter_campaignresponse", null);
            }
            set {
                SetRelatedEntities("letter_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("letter_activity_parties")]
        public IEnumerable<ActivityParty> letter_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("letter_activity_parties", null);
            }
            set {
                SetRelatedEntities("letter_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("Letter_SyncErrors")]
        public IEnumerable<SyncError> Letter_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Letter_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Letter_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("letter_connections1")]
        public IEnumerable<Connection> letter_connections1 {
            get {
                return GetRelatedEntities<Connection>("letter_connections1", null);
            }
            set {
                SetRelatedEntities("letter_connections1", null, value);
            }
        }
        
        public static Letter Retrieve(IOrganizationService service, Guid id, params Expression<Func<Letter,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Group of existing or potential customers created for a marketing campaign or other sales purposes.</para>
    /// <para>Display Name: Marketing List</para>
    /// </summary>
    [EntityLogicalName("list")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class List : ExtendedEntity<ListState, List_StatusCode> {
        
        public const string EntityLogicalName = "list";
        
        public const int EntityTypeCode = 4300;
        
        public List() : 
                base(EntityLogicalName) {
        }
        
        public List(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("listname");
            }
        }
        
        [AttributeLogicalName("listid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("listid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the marketing list.</para>
        /// <para>Display Name: List</para>
        /// </summary>
        [AttributeLogicalName("listid")]
        public Guid? ListId {
            get {
                return GetAttributeValue<Guid?>("listid");
            }
            set {
                SetId("listid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to override the opt-out settings on leads, contacts, and accounts for the members of the target marketing lists of the campaign activity. If No is selected, those who have chosen to opt out won't be excluded from the list. This means they will receive marketing materials.</para>
        /// <para>Display Name: Exclude Members Who Opt Out</para>
        /// </summary>
        [AttributeLogicalName("donotsendonoptout")]
        public bool? DoNotSendOnOptOut {
            get {
                return GetAttributeValue<bool?>("donotsendonoptout");
            }
            set {
                SetAttributeValue("donotsendonoptout", value);
            }
        }
        
        /// <summary>
        /// <para>Type the source of the marketing list, such as a third-party supplier or internal database.</para>
        /// <para>Display Name: Source</para>
        /// </summary>
        [AttributeLogicalName("source")]
        public string Source {
            get {
                return GetAttributeValue<string>("source");
            }
            set {
                SetAttributeValue("source", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Version number of the marketing list.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type of the owner of the marketing list. such as user, team, or business unit.</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether you want the marketing list to be static or dynamic. The members in a static marketing list are unchanging. A dynamic marketing list is based on a dynamic query that retrieves the updated list of members</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("type")]
        public bool? Type {
            get {
                return GetAttributeValue<bool?>("type");
            }
            set {
                SetAttributeValue("type", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether inactive accounts, contacts, or leads should be excluded from the campaign activity distribution when the marketing list is included in a campaign.</para>
        /// <para>Display Name: Ignore Inactive List Members</para>
        /// </summary>
        [AttributeLogicalName("ignoreinactivelistmembers")]
        public bool? IgnoreInactiveListMembers {
            get {
                return GetAttributeValue<bool?>("ignoreinactivelistmembers");
            }
            set {
                SetAttributeValue("ignoreinactivelistmembers", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Name of the user who created the marketing list.</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the cost of obtaining the marketing list.</para>
        /// <para>Display Name: Cost</para>
        /// </summary>
        [AttributeLogicalName("cost")]
        public decimal? Cost {
            get {
                return GetMoneyValue("cost");
            }
            set {
                SetMoneyValue("cost", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the marketing list was last used in a campaign or in the creation of activities or opportunities.</para>
        /// <para>Display Name: Last Used On</para>
        /// </summary>
        [AttributeLogicalName("lastusedon")]
        public DateTime? LastUsedOn {
            get {
                return GetAttributeValue<DateTime?>("lastusedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of all members in the marketing list.</para>
        /// <para>Display Name: Members Count</para>
        /// </summary>
        [AttributeLogicalName("membercount")]
        public int? MemberCount {
            get {
                return GetAttributeValue<int?>("membercount");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the marketing list.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Name of the user who last modified the marketing list.</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the marketing list is locked. If Yes is selected, no additional members can be added to the marketing list.</para>
        /// <para>Display Name: Locked</para>
        /// </summary>
        [AttributeLogicalName("lockstatus")]
        public bool? LockStatus {
            get {
                return GetAttributeValue<bool?>("lockstatus");
            }
            set {
                SetAttributeValue("lockstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the marketing list is active or inactive. Inactive marketing lists are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ListState? StateCode {
            get {
                return GetOptionSetValue<ListState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner of the marketing list.</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Type of the members that can be stored in the marketing list.</para>
        /// <para>Display Name: Member Type</para>
        /// </summary>
        [AttributeLogicalName("membertype")]
        public int? MemberType {
            get {
                return GetAttributeValue<int?>("membertype");
            }
            set {
                SetAttributeValue("membertype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Query used for retrieving members of marketing list.</para>
        /// <para>Display Name: Query</para>
        /// </summary>
        [AttributeLogicalName("query")]
        public string Query {
            get {
                return GetAttributeValue<string>("query");
            }
            set {
                SetAttributeValue("query", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the marketing list.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type a name for the marketing list so that it is identified correctly in lists.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("listname")]
        public string ListName {
            get {
                return GetAttributeValue<string>("listname");
            }
            set {
                SetAttributeValue("listname", value);
            }
        }
        
        /// <summary>
        /// <para>Select the marketing list's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public List_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<List_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the marketing list, such as the intended use or date of the last update.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Type the intended use of the marketing list to identify its key segments, target offers, or business group.</para>
        /// <para>Display Name: Purpose</para>
        /// </summary>
        [AttributeLogicalName("purpose")]
        public string Purpose {
            get {
                return GetAttributeValue<string>("purpose");
            }
            set {
                SetAttributeValue("purpose", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Cost field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Cost (Base)</para>
        /// </summary>
        [AttributeLogicalName("cost_base")]
        public decimal? Cost_Base {
            get {
                return GetMoneyValue("cost_base");
            }
        }
        
        /// <summary>
        /// <para>Select the type of members that this marketing list will contain: accounts, contacts, or leads. Each list can have only one member type and this value can't be changed after the marketing list is created.</para>
        /// <para>Display Name: Marketing List Member Type</para>
        /// </summary>
        [AttributeLogicalName("createdfromcode")]
        public List_CreatedFromCode? CreatedFromCode {
            get {
                return GetOptionSetValue<List_CreatedFromCode>("createdfromcode");
            }
            set {
                SetOptionSetValue("createdfromcode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the marketing list.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [RelationshipSchemaName("campaignactivitylist_association")]
        public IEnumerable<CampaignActivity> campaignactivitylist_association {
            get {
                return GetRelatedEntities<CampaignActivity>("campaignactivitylist_association", null);
            }
            set {
                SetRelatedEntities("campaignactivitylist_association", null, value);
            }
        }
        
        [RelationshipSchemaName("listcontact_association")]
        public IEnumerable<Contact> listcontact_association {
            get {
                return GetRelatedEntities<Contact>("listcontact_association", null);
            }
            set {
                SetRelatedEntities("listcontact_association", null, value);
            }
        }
        
        [RelationshipSchemaName("listlead_association")]
        public IEnumerable<Lead> listlead_association {
            get {
                return GetRelatedEntities<Lead>("listlead_association", null);
            }
            set {
                SetRelatedEntities("listlead_association", null, value);
            }
        }
        
        [RelationshipSchemaName("listaccount_association")]
        public IEnumerable<Account> listaccount_association {
            get {
                return GetRelatedEntities<Account>("listaccount_association", null);
            }
            set {
                SetRelatedEntities("listaccount_association", null, value);
            }
        }
        
        [RelationshipSchemaName("campaignlist_association")]
        public IEnumerable<Campaign> campaignlist_association {
            get {
                return GetRelatedEntities<Campaign>("campaignlist_association", null);
            }
            set {
                SetRelatedEntities("campaignlist_association", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_list_createdonbehalfby")]
        public SystemUser lk_list_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_list_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_list_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_list_createdby")]
        public SystemUser lk_list_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_list_createdby", null);
            }
            set {
                SetRelatedEntity("lk_list_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_list")]
        public SystemUser user_list {
            get {
                return GetRelatedEntity<SystemUser>("user_list", null);
            }
            set {
                SetRelatedEntity("user_list", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_list_modifiedby")]
        public SystemUser lk_list_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_list_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_list_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_list")]
        public TransactionCurrency transactioncurrency_list {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_list", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_list", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_list")]
        public Team team_list {
            get {
                return GetRelatedEntity<Team>("team_list", null);
            }
            set {
                SetRelatedEntity("team_list", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_list_modifiedonbehalfby")]
        public SystemUser lk_list_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_list_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_list_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_list")]
        public BusinessUnit business_unit_list {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_list", null);
            }
            set {
                SetRelatedEntity("business_unit_list", null, value);
            }
        }
        
        [RelationshipSchemaName("List_SyncErrors")]
        public IEnumerable<SyncError> List_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("List_SyncErrors", null);
            }
            set {
                SetRelatedEntities("List_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("list_connections2")]
        public IEnumerable<Connection> list_connections2 {
            get {
                return GetRelatedEntities<Connection>("list_connections2", null);
            }
            set {
                SetRelatedEntities("list_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("list_connections1")]
        public IEnumerable<Connection> list_connections1 {
            get {
                return GetRelatedEntities<Connection>("list_connections1", null);
            }
            set {
                SetRelatedEntities("list_connections1", null, value);
            }
        }
        
        public static List Retrieve(IOrganizationService service, Guid id, params Expression<Func<List,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Item in a marketing list.</para>
    /// <para>Display Name: Marketing List Member</para>
    /// </summary>
    [EntityLogicalName("listmember")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ListMember : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "listmember";
        
        public const int EntityTypeCode = 4301;
        
        public ListMember() : 
                base(EntityLogicalName) {
        }
        
        public ListMember(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("listmemberid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("listmemberid", value);
            }
        }
        
        [AttributeLogicalName("listmemberid")]
        public Guid? ListMemberId {
            get {
                return GetAttributeValue<Guid?>("listmemberid");
            }
            set {
                SetId("listmemberid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the list member.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the listmember.</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the list member was last modified.</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Entity</para>
        /// </summary>
        [AttributeLogicalName("entityid")]
        public EntityReference EntityId {
            get {
                return GetAttributeValue<EntityReference>("entityid");
            }
            set {
                SetAttributeValue("entityid", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Marketing List</para>
        /// </summary>
        [AttributeLogicalName("listid")]
        public EntityReference ListId {
            get {
                return GetAttributeValue<EntityReference>("listid");
            }
            set {
                SetAttributeValue("listid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the list member.</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        public Guid? OwningBusinessUnit {
            get {
                return GetAttributeValue<Guid?>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Regarding Object Type</para>
        /// </summary>
        [AttributeLogicalName("entityidtypecode")]
        public string EntityIdTypeCode {
            get {
                return GetAttributeValue<string>("entityidtypecode");
            }
            set {
                SetAttributeValue("entityidtypecode", value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("entitytype")]
        public string EntityType {
            get {
                return GetAttributeValue<string>("entitytype");
            }
            set {
                SetAttributeValue("entitytype", value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        public Guid? OwningUser {
            get {
                return GetAttributeValue<Guid?>("owninguser");
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_listmember_createdonbehalfby")]
        public SystemUser lk_listmember_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_listmember_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_listmember_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_listmember_createdby")]
        public SystemUser lk_listmember_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_listmember_createdby", null);
            }
            set {
                SetRelatedEntity("lk_listmember_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_listmember_modifiedonbehalfby")]
        public SystemUser lk_listmember_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_listmember_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_listmember_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_listmember_modifiedby")]
        public SystemUser lk_listmember_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_listmember_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_listmember_modifiedby", null, value);
            }
        }
        
        public static ListMember Retrieve(IOrganizationService service, Guid id, params Expression<Func<ListMember,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Display Name: Mailbox</para>
    /// </summary>
    [EntityLogicalName("mailbox")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Mailbox : ExtendedEntity<MailboxState, Mailbox_StatusCode> {
        
        public const string EntityLogicalName = "mailbox";
        
        public const int EntityTypeCode = 9606;
        
        public Mailbox() : 
                base(EntityLogicalName) {
        }
        
        public Mailbox(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("mailboxid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("mailboxid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the mailbox.</para>
        /// <para>Display Name: Mailbox</para>
        /// </summary>
        [AttributeLogicalName("mailboxid")]
        public Guid? MailboxId {
            get {
                return GetAttributeValue<Guid?>("mailboxid");
            }
            set {
                SetId("mailboxid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the mailbox.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether to allow the email connector to use credentials.</para>
        /// <para>Display Name: Allow to Use Credentials for Email Processing</para>
        /// </summary>
        [AttributeLogicalName("allowemailconnectortousecredentials")]
        public bool? AllowEmailConnectorToUseCredentials {
            get {
                return GetAttributeValue<bool?>("allowemailconnectortousecredentials");
            }
            set {
                SetAttributeValue("allowemailconnectortousecredentials", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Processing Context of the Mailbox</para>
        /// </summary>
        [AttributeLogicalName("mailboxprocessingcontext")]
        public int? MailboxProcessingContext {
            get {
                return GetAttributeValue<int?>("mailboxprocessingcontext");
            }
            set {
                SetAttributeValue("mailboxprocessingcontext", value);
            }
        }
        
        /// <summary>
        /// <para>Last Sync Start Time</para>
        /// <para>Display Name: Last Sync Start Time</para>
        /// </summary>
        [AttributeLogicalName("lastsyncstartedon")]
        public DateTime? LastSyncStartedOn {
            get {
                return GetAttributeValue<DateTime?>("lastsyncstartedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time to start processing email received by the mailbox.</para>
        /// <para>Display Name: Process Email Received After</para>
        /// </summary>
        [AttributeLogicalName("processemailreceivedafter")]
        public DateTime? ProcessEmailReceivedAfter {
            get {
                return GetAttributeValue<DateTime?>("processemailreceivedafter");
            }
            set {
                SetAttributeValue("processemailreceivedafter", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if verbose tracing needs to be enabled for this mailbox.</para>
        /// <para>Display Name: Verbose Logging</para>
        /// </summary>
        [AttributeLogicalName("verboseloggingenabled")]
        public int? VerboseLoggingEnabled {
            get {
                return GetAttributeValue<int?>("verboseloggingenabled");
            }
            set {
                SetAttributeValue("verboseloggingenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the record.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Exchange web services endpoint URL for the mailbox.</para>
        /// <para>Display Name: Exchange Web Services URL</para>
        /// </summary>
        [AttributeLogicalName("ewsurl")]
        public string EWSURL {
            get {
                return GetAttributeValue<string>("ewsurl");
            }
            set {
                SetAttributeValue("ewsurl", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Mailbox_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Mailbox_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the email server profile of the mailbox.</para>
        /// <para>Display Name: Server Profile</para>
        /// </summary>
        [AttributeLogicalName("emailserverprofile")]
        public EntityReference EmailServerProfile {
            get {
                return GetAttributeValue<EntityReference>("emailserverprofile");
            }
            set {
                SetAttributeValue("emailserverprofile", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Mailbox Total Duration in Average</para>
        /// <para>Display Name: Monitor Total Performance</para>
        /// </summary>
        [AttributeLogicalName("averagetotalduration")]
        public int? AverageTotalDuration {
            get {
                return GetAttributeValue<int?>("averagetotalduration");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Last Sync Error Time</para>
        /// </summary>
        [AttributeLogicalName("lastsyncerroroccurredon")]
        public DateTime? LastSyncErrorOccurredOn {
            get {
                return GetAttributeValue<DateTime?>("lastsyncerroroccurredon");
            }
            set {
                SetAttributeValue("lastsyncerroroccurredon", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the Exchange web services URL was last discovered using the AutoDiscover service.</para>
        /// <para>Display Name: Last Auto Discovered On</para>
        /// </summary>
        [AttributeLogicalName("lastautodiscoveredon")]
        public DateTime? LastAutoDiscoveredOn {
            get {
                return GetAttributeValue<DateTime?>("lastautodiscoveredon");
            }
            set {
                SetAttributeValue("lastautodiscoveredon", value);
            }
        }
        
        /// <summary>
        /// <para>Holds the hierarchy of folders under inbox in XML format.</para>
        /// <para>Display Name: Folder Hierarchy</para>
        /// </summary>
        [AttributeLogicalName("folderhierarchy")]
        public string FolderHierarchy {
            get {
                return GetAttributeValue<string>("folderhierarchy");
            }
            set {
                SetAttributeValue("folderhierarchy", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the mailbox corresponds to one for the service account.</para>
        /// <para>Display Name: Is Service Account</para>
        /// </summary>
        [AttributeLogicalName("isserviceaccount")]
        public bool? IsServiceAccount {
            get {
                return GetAttributeValue<bool?>("isserviceaccount");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Last Sync Error Machine Name</para>
        /// </summary>
        [AttributeLogicalName("lastsyncerrormachinename")]
        public string LastSyncErrorMachineName {
            get {
                return GetAttributeValue<string>("lastsyncerrormachinename");
            }
            set {
                SetAttributeValue("lastsyncerrormachinename", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Items Failed For Last Sync</para>
        /// </summary>
        [AttributeLogicalName("itemsfailedforlastsync")]
        public int? ItemsFailedForLastSync {
            get {
                return GetAttributeValue<int?>("itemsfailedforlastsync");
            }
            set {
                SetAttributeValue("itemsfailedforlastsync", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the business unit that owns the record.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Choose the delivery method for the mailbox for appointments, contacts, and tasks.</para>
        /// <para>Display Name: Appointments, Contacts, and Tasks</para>
        /// </summary>
        [AttributeLogicalName("actdeliverymethod")]
        public Mailbox_ACTDeliveryMethod? ACTDeliveryMethod {
            get {
                return GetOptionSetValue<Mailbox_ACTDeliveryMethod>("actdeliverymethod");
            }
            set {
                SetOptionSetValue("actdeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Information that indicates whether email will be processed for this mailbox</para>
        /// <para>Display Name: Mailbox Processing State</para>
        /// </summary>
        [AttributeLogicalName("processingstatecode")]
        public int? ProcessingStateCode {
            get {
                return GetAttributeValue<int?>("processingstatecode");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only</para>
        /// <para>Display Name: Count of the number of times a mailbox gets forced unlocked</para>
        /// </summary>
        [AttributeLogicalName("forcedunlockcount")]
        public int? ForcedUnlockCount {
            get {
                return GetAttributeValue<int?>("forcedunlockcount");
            }
        }
        
        /// <summary>
        /// <para>Select how incoming email will be delivered to the mailbox.</para>
        /// <para>Display Name: Incoming Email</para>
        /// </summary>
        [AttributeLogicalName("incomingemaildeliverymethod")]
        public Mailbox_IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<Mailbox_IncomingEmailDeliveryMethod>("incomingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("incomingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Last Sync Status for Outgoing, Incoming and ACT as a whole.</para>
        /// <para>Display Name: Mailbox Status</para>
        /// </summary>
        [AttributeLogicalName("mailboxstatus")]
        public Mailbox_MailboxStatus? MailboxStatus {
            get {
                return GetOptionSetValue<Mailbox_MailboxStatus>("mailboxstatus");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Choose whether the mailbox is enabled for sending email.</para>
        /// <para>Display Name: Enabled For Outgoing Email</para>
        /// </summary>
        [AttributeLogicalName("enabledforoutgoingemail")]
        public bool? EnabledForOutgoingEmail {
            get {
                return GetAttributeValue<bool?>("enabledforoutgoingemail");
            }
        }
        
        /// <summary>
        /// <para>Shows the number of times an email configuration test has been performed.</para>
        /// <para>Display Name: Test Email Configuration Retry Count</para>
        /// </summary>
        [AttributeLogicalName("testemailconfigurationretrycount")]
        public int? TestEmailConfigurationRetryCount {
            get {
                return GetAttributeValue<int?>("testemailconfigurationretrycount");
            }
            set {
                SetAttributeValue("testemailconfigurationretrycount", value);
            }
        }
        
        [AttributeLogicalName("organizationidname")]
        public string OrganizationIdName {
            get {
                return GetAttributeValue<string>("organizationidname");
            }
        }
        
        /// <summary>
        /// <para>Contains the exchange synchronization state in XML format.</para>
        /// <para>Display Name: Exchange Sync State</para>
        /// </summary>
        [AttributeLogicalName("exchangesyncstatexml")]
        public string ExchangeSyncStateXml {
            get {
                return GetAttributeValue<string>("exchangesyncstatexml");
            }
            set {
                SetAttributeValue("exchangesyncstatexml", value);
            }
        }
        
        /// <summary>
        /// <para>Type the password for the mailbox.</para>
        /// <para>Display Name: Password</para>
        /// </summary>
        [AttributeLogicalName("password")]
        public string Password {
            get {
                return GetAttributeValue<string>("password");
            }
            set {
                SetAttributeValue("password", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the last office apps deployment was completed for a mailbox record.</para>
        /// <para>Display Name: Office Apps Deployment Completed On</para>
        /// </summary>
        [AttributeLogicalName("officeappsdeploymentcompleteon")]
        public DateTime? OfficeAppsDeploymentCompleteOn {
            get {
                return GetAttributeValue<DateTime?>("officeappsdeploymentcompleteon");
            }
        }
        
        /// <summary>
        /// <para>Object Type of the entity associated with the mailbox.</para>
        /// <para>Display Name: Regarding Object Type Code</para>
        /// </summary>
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Last Date Time when a mailbox got forced unlocked</para>
        /// </summary>
        [AttributeLogicalName("lastmailboxforcedunlockoccurredon")]
        public DateTime? LastMailboxForcedUnlockOccurredOn {
            get {
                return GetAttributeValue<DateTime?>("lastmailboxforcedunlockoccurredon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Items Processed For Last Sync</para>
        /// </summary>
        [AttributeLogicalName("itemsprocessedforlastsync")]
        public int? ItemsProcessedForLastSync {
            get {
                return GetAttributeValue<int?>("itemsprocessedforlastsync");
            }
            set {
                SetAttributeValue("itemsprocessedforlastsync", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the next email configuration test will be run for a mailbox record.</para>
        /// <para>Display Name: Postpone Test Email Configuration Until</para>
        /// </summary>
        [AttributeLogicalName("postponetestemailconfigurationuntil")]
        public DateTime? PostponeTestEmailConfigurationUntil {
            get {
                return GetAttributeValue<DateTime?>("postponetestemailconfigurationuntil");
            }
            set {
                SetAttributeValue("postponetestemailconfigurationuntil", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the last email configuration test was completed for a mailbox record.</para>
        /// <para>Display Name: Mailbox Test Completed On</para>
        /// </summary>
        [AttributeLogicalName("testmailboxaccesscompletedon")]
        public DateTime? TestMailboxAccessCompletedOn {
            get {
                return GetAttributeValue<DateTime?>("testmailboxaccesscompletedon");
            }
        }
        
        /// <summary>
        /// <para>Concatenation of transient failure counts of all mailbox operations.</para>
        /// <para>Display Name: Transient Failure Count</para>
        /// </summary>
        [AttributeLogicalName("transientfailurecount")]
        public int? TransientFailureCount {
            get {
                return GetAttributeValue<int?>("transientfailurecount");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the next outlook mail app install will be run for a mailbox record.</para>
        /// <para>Display Name: Postpone Outlook Mail App Install Until</para>
        /// </summary>
        [AttributeLogicalName("postponeofficeappsdeploymentuntil")]
        public DateTime? PostponeOfficeAppsDeploymentUntil {
            get {
                return GetAttributeValue<DateTime?>("postponeofficeappsdeploymentuntil");
            }
            set {
                SetAttributeValue("postponeofficeappsdeploymentuntil", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Last Duration for the mailbox</para>
        /// <para>Display Name: Monitor last duration Performance</para>
        /// </summary>
        [AttributeLogicalName("lastduration")]
        public int? LastDuration {
            get {
                return GetAttributeValue<int?>("lastduration");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Postpone processing Appointments, Contacts, and Tasks for the mailbox until the specified data and time.</para>
        /// </summary>
        [AttributeLogicalName("receivingpostponeduntilforact")]
        public DateTime? ReceivingPostponedUntilForACT {
            get {
                return GetAttributeValue<DateTime?>("receivingpostponeduntilforact");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the Undeliverable folder in the mailbox managed by Microsoft Exchange.</para>
        /// <para>Display Name: Undeliverable Folder</para>
        /// </summary>
        [AttributeLogicalName("undeliverablefolder")]
        public string UndeliverableFolder {
            get {
                return GetAttributeValue<string>("undeliverablefolder");
            }
            set {
                SetAttributeValue("undeliverablefolder", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Last Sync Error Stack</para>
        /// </summary>
        [AttributeLogicalName("lastsyncerror")]
        public string LastSyncError {
            get {
                return GetAttributeValue<string>("lastsyncerror");
            }
            set {
                SetAttributeValue("lastsyncerror", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of approval of the email address by O365 Admin.</para>
        /// <para>Display Name: Email Address O365 Admin Approval Status</para>
        /// </summary>
        [AttributeLogicalName("isemailaddressapprovedbyo365admin")]
        public bool? IsEmailAddressApprovedByO365Admin {
            get {
                return GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when processing will begin on this mailbox.</para>
        /// <para>Display Name: Postpone Mailbox Processing Until</para>
        /// </summary>
        [AttributeLogicalName("postponemailboxprocessinguntil")]
        public DateTime? PostponeMailboxProcessingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponemailboxprocessinguntil");
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the email address.</para>
        /// <para>Display Name: Email Address Status</para>
        /// </summary>
        [AttributeLogicalName("emailrouteraccessapproval")]
        public Mailbox_EmailRouterAccessApproval? EmailRouterAccessApproval {
            get {
                return GetOptionSetValue<Mailbox_EmailRouterAccessApproval>("emailrouteraccessapproval");
            }
            set {
                SetOptionSetValue("emailrouteraccessapproval", value);
            }
        }
        
        /// <summary>
        /// <para>The number of times mailbox has processed</para>
        /// <para>Display Name: Monitor Performance</para>
        /// </summary>
        [AttributeLogicalName("processedtimes")]
        public int? ProcessedTimes {
            get {
                return GetAttributeValue<int?>("processedtimes");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("ispasswordset")]
        public bool? IsPasswordSet {
            get {
                return GetAttributeValue<bool?>("ispasswordset");
            }
        }
        
        /// <summary>
        /// <para>Name for User associated with Mailbox.</para>
        /// <para>Display Name: Regarding Name</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only</para>
        /// <para>Display Name: Last Sync Error Continuous Count</para>
        /// </summary>
        [AttributeLogicalName("lastsyncerrorcount")]
        public int? LastSyncErrorCount {
            get {
                return GetAttributeValue<int?>("lastsyncerrorcount");
            }
            set {
                SetAttributeValue("lastsyncerrorcount", value);
            }
        }
        
        /// <summary>
        /// <para>Type the email address of the mailbox.</para>
        /// <para>Display Name: Email Address</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EmailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Last Sync Error Code</para>
        /// </summary>
        [AttributeLogicalName("lastsyncerrorcode")]
        public int? LastSyncErrorCode {
            get {
                return GetAttributeValue<int?>("lastsyncerrorcode");
            }
            set {
                SetAttributeValue("lastsyncerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Zero email count for mailbox</para>
        /// </summary>
        [AttributeLogicalName("noemailcount")]
        public int? NoEmailCount {
            get {
                return GetAttributeValue<int?>("noemailcount");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Zero appointment, contact, task count for mailbox</para>
        /// </summary>
        [AttributeLogicalName("noactcount")]
        public int? NoACTCount {
            get {
                return GetAttributeValue<int?>("noactcount");
            }
        }
        
        /// <summary>
        /// <para>Select whether to delete emails from the mailbox after processing.</para>
        /// <para>Display Name: Delete Emails after Processing</para>
        /// </summary>
        [AttributeLogicalName("processanddeleteemails")]
        public bool? ProcessAndDeleteEmails {
            get {
                return GetAttributeValue<bool?>("processanddeleteemails");
            }
            set {
                SetAttributeValue("processanddeleteemails", value);
            }
        }
        
        /// <summary>
        /// <para>Set the current organization as the synchronization organization.</para>
        /// <para>Display Name: Set Current Organization as Synchronization Organization</para>
        /// </summary>
        [AttributeLogicalName("isactsyncorgflagset")]
        public bool? IsACTSyncOrgFlagSet {
            get {
                return GetAttributeValue<bool?>("isactsyncorgflagset");
            }
            set {
                SetAttributeValue("isactsyncorgflagset", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the office apps deployment has been scheduled for a mailbox record.</para>
        /// <para>Display Name: Office Apps Deployment Scheduled</para>
        /// </summary>
        [AttributeLogicalName("officeappsdeploymentscheduled")]
        public bool? OfficeAppsDeploymentScheduled {
            get {
                return GetAttributeValue<bool?>("officeappsdeploymentscheduled");
            }
            set {
                SetAttributeValue("officeappsdeploymentscheduled", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the mailbox is active or inactive.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public MailboxState? StateCode {
            get {
                return GetOptionSetValue<MailboxState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the crm org is to be marked as primary syncing org for the mailbox record.</para>
        /// <para>Display Name: Crm Org Marked as Primary Org for Exchange Mailbox</para>
        /// </summary>
        [AttributeLogicalName("orgmarkedasprimaryforexchangesync")]
        public bool? OrgMarkedAsPrimaryForExchangeSync {
            get {
                return GetAttributeValue<bool?>("orgmarkedasprimaryforexchangesync");
            }
            set {
                SetAttributeValue("orgmarkedasprimaryforexchangesync", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the mailbox is a forward mailbox.</para>
        /// <para>Display Name: Is Forward Mailbox</para>
        /// </summary>
        [AttributeLogicalName("isforwardmailbox")]
        public bool? IsForwardMailbox {
            get {
                return GetAttributeValue<bool?>("isforwardmailbox");
            }
        }
        
        /// <summary>
        /// <para>Choose the user associated to the mailbox.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
        }
        
        /// <summary>
        /// <para>Indicates the office apps deployment type for a mailbox record.</para>
        /// <para>Display Name: Office Apps Deployment Type</para>
        /// </summary>
        [AttributeLogicalName("officeappsdeploymentstatus")]
        public Mailbox_OfficeAppsDeploymentStatus? OfficeAppsDeploymentStatus {
            get {
                return GetOptionSetValue<Mailbox_OfficeAppsDeploymentStatus>("officeappsdeploymentstatus");
            }
            set {
                SetOptionSetValue("officeappsdeploymentstatus", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Postpone receiving emails for the mailbox until the specified data and time.</para>
        /// </summary>
        [AttributeLogicalName("receivingpostponeduntil")]
        public DateTime? ReceivingPostponedUntil {
            get {
                return GetAttributeValue<DateTime?>("receivingpostponeduntil");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Status of the Appointments, Contacts, and Tasks.</para>
        /// <para>Display Name: Appointments, Contacts, and Tasks Status</para>
        /// </summary>
        [AttributeLogicalName("actstatus")]
        public Mailbox_ACTStatus? ACTStatus {
            get {
                return GetOptionSetValue<Mailbox_ACTStatus>("actstatus");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the mailbox is enabled for Appointments, Contacts, and Tasks.</para>
        /// <para>Display Name: Enabled For Appointments, Contacts, And Tasks</para>
        /// </summary>
        [AttributeLogicalName("enabledforact")]
        public bool? EnabledForACT {
            get {
                return GetAttributeValue<bool?>("enabledforact");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the processing of the mailbox was last attempted.</para>
        /// <para>Display Name: Date Processing Last Attempted</para>
        /// </summary>
        [AttributeLogicalName("processinglastattemptedon")]
        public DateTime? ProcessingLastAttemptedOn {
            get {
                return GetAttributeValue<DateTime?>("processinglastattemptedon");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>The Office Apps deployment error.</para>
        /// <para>Display Name: Office Apps Deployment Error</para>
        /// </summary>
        [AttributeLogicalName("officeappsdeploymenterror")]
        public string OfficeAppsDeploymentError {
            get {
                return GetAttributeValue<string>("officeappsdeploymenterror");
            }
        }
        
        /// <summary>
        /// <para>Select the status of outgoing email messages.</para>
        /// <para>Display Name: Outgoing Email Status</para>
        /// </summary>
        [AttributeLogicalName("outgoingemailstatus")]
        public Mailbox_OutgoingEmailStatus? OutgoingEmailStatus {
            get {
                return GetOptionSetValue<Mailbox_OutgoingEmailStatus>("outgoingemailstatus");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Last Successful Sync Time</para>
        /// <para>Display Name: Last Successful Sync Time</para>
        /// </summary>
        [AttributeLogicalName("lastsuccessfulsynccompletedon")]
        public DateTime? LastSuccessfulSyncCompletedOn {
            get {
                return GetAttributeValue<DateTime?>("lastsuccessfulsynccompletedon");
            }
        }
        
        /// <summary>
        /// <para>Choose whether the mailbox is enabled for receiving email.</para>
        /// <para>Display Name: Enabled For Incoming Email</para>
        /// </summary>
        [AttributeLogicalName("enabledforincomingemail")]
        public bool? EnabledForIncomingEmail {
            get {
                return GetAttributeValue<bool?>("enabledforincomingemail");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the mailbox can start sending emails.</para>
        /// <para>Display Name: Postpone Sending Until</para>
        /// </summary>
        [AttributeLogicalName("postponesendinguntil")]
        public DateTime? PostponeSendingUntil {
            get {
                return GetAttributeValue<DateTime?>("postponesendinguntil");
            }
            set {
                SetAttributeValue("postponesendinguntil", value);
            }
        }
        
        [AttributeLogicalName("emailserverprofilename")]
        public string EmailServerProfileName {
            get {
                return GetAttributeValue<string>("emailserverprofilename");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if the email configuration test has been scheduled for a mailbox record.</para>
        /// <para>Display Name: Test Email Configuration Scheduled</para>
        /// </summary>
        [AttributeLogicalName("testemailconfigurationscheduled")]
        public bool? TestEmailConfigurationScheduled {
            get {
                return GetAttributeValue<bool?>("testemailconfigurationscheduled");
            }
            set {
                SetAttributeValue("testemailconfigurationscheduled", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the async host that is processing this mailbox.</para>
        /// <para>Display Name: Host</para>
        /// </summary>
        [AttributeLogicalName("hostid")]
        public string HostId {
            get {
                return GetAttributeValue<string>("hostid");
            }
        }
        
        [AttributeLogicalName("owningbusinessunitname")]
        public string OwningBusinessUnitName {
            get {
                return GetAttributeValue<string>("owningbusinessunitname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Select how outgoing email will be sent from the mailbox.</para>
        /// <para>Display Name: Outgoing Email</para>
        /// </summary>
        [AttributeLogicalName("outgoingemaildeliverymethod")]
        public Mailbox_OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<Mailbox_OutgoingEmailDeliveryMethod>("outgoingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("outgoingemaildeliverymethod", value);
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Version number of the mailbox.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type a user name used for mailbox authentication.</para>
        /// <para>Display Name: User Name</para>
        /// </summary>
        [AttributeLogicalName("username")]
        public string Username {
            get {
                return GetAttributeValue<string>("username");
            }
            set {
                SetAttributeValue("username", value);
            }
        }
        
        /// <summary>
        /// <para>Select the status that will be assigned to incoming email messages.</para>
        /// <para>Display Name: Incoming Email Status</para>
        /// </summary>
        [AttributeLogicalName("incomingemailstatus")]
        public Mailbox_IncomingEmailStatus? IncomingEmailStatus {
            get {
                return GetOptionSetValue<Mailbox_IncomingEmailStatus>("incomingemailstatus");
            }
        }
        
        [AttributeLogicalName("organizationid")]
        [RelationshipSchemaName("organization_mailbox")]
        public Organization organization_mailbox {
            get {
                return GetRelatedEntity<Organization>("organization_mailbox", null);
            }
            set {
                SetRelatedEntity("organization_mailbox", null, value);
            }
        }
        
        [AttributeLogicalName("emailserverprofile")]
        [RelationshipSchemaName("emailserverprofile_mailbox")]
        public EmailServerProfile emailserverprofile_mailbox {
            get {
                return GetRelatedEntity<EmailServerProfile>("emailserverprofile_mailbox", null);
            }
            set {
                SetRelatedEntity("emailserverprofile_mailbox", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("mailbox_regarding_systemuser")]
        public SystemUser mailbox_regarding_systemuser {
            get {
                return GetRelatedEntity<SystemUser>("mailbox_regarding_systemuser", null);
            }
            set {
                SetRelatedEntity("mailbox_regarding_systemuser", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_mailbox")]
        public BusinessUnit business_unit_mailbox {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_mailbox", null);
            }
            set {
                SetRelatedEntity("business_unit_mailbox", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_mailbox")]
        public Team team_mailbox {
            get {
                return GetRelatedEntity<Team>("team_mailbox", null);
            }
            set {
                SetRelatedEntity("team_mailbox", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_mailbox")]
        public SystemUser user_mailbox {
            get {
                return GetRelatedEntity<SystemUser>("user_mailbox", null);
            }
            set {
                SetRelatedEntity("user_mailbox", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_mailbox_modifiedonbehalfby")]
        public SystemUser lk_mailbox_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mailbox_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mailbox_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_mailbox_modifiedby")]
        public SystemUser lk_mailbox_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mailbox_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_mailbox_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_mailbox_createdonbehalfby")]
        public SystemUser lk_mailbox_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mailbox_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_mailbox_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_mailbox_createdby")]
        public SystemUser lk_mailbox_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_mailbox_createdby", null);
            }
            set {
                SetRelatedEntity("lk_mailbox_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("email_sendermailboxid_mailbox")]
        public IEnumerable<Email> email_sendermailboxid_mailbox {
            get {
                return GetRelatedEntities<Email>("email_sendermailboxid_mailbox", null);
            }
            set {
                SetRelatedEntities("email_sendermailboxid_mailbox", null, value);
            }
        }
        
        [RelationshipSchemaName("Mailbox_SyncErrors")]
        public IEnumerable<SyncError> Mailbox_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Mailbox_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Mailbox_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("activitypointer_sendermailboxid_mailbox")]
        public IEnumerable<ActivityPointer> activitypointer_sendermailboxid_mailbox {
            get {
                return GetRelatedEntities<ActivityPointer>("activitypointer_sendermailboxid_mailbox", null);
            }
            set {
                SetRelatedEntities("activitypointer_sendermailboxid_mailbox", null, value);
            }
        }
        
        [RelationshipSchemaName("systemuser_defaultmailbox_mailbox")]
        public IEnumerable<SystemUser> systemuser_defaultmailbox_mailbox {
            get {
                return GetRelatedEntities<SystemUser>("systemuser_defaultmailbox_mailbox", null);
            }
            set {
                SetRelatedEntities("systemuser_defaultmailbox_mailbox", null, value);
            }
        }
        
        public static Mailbox Retrieve(IOrganizationService service, Guid id, params Expression<Func<Mailbox,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Contains user profile images that are stored as attachments and displayed in posts.</para>
    /// <para>Display Name: Profile Album</para>
    /// </summary>
    [EntityLogicalName("msdyn_postalbum")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class msdyn_PostAlbum : ExtendedEntity<msdyn_PostAlbumState, msdyn_PostAlbum_statuscode> {
        
        public const string EntityLogicalName = "msdyn_postalbum";
        
        public const int EntityTypeCode = 10000;
        
        public msdyn_PostAlbum() : 
                base(EntityLogicalName) {
        }
        
        public msdyn_PostAlbum(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("msdyn_name");
            }
        }
        
        [AttributeLogicalName("msdyn_postalbumid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("msdyn_postalbumid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Profile Album</para>
        /// </summary>
        [AttributeLogicalName("msdyn_postalbumid")]
        public Guid? msdyn_PostAlbumId {
            get {
                return GetAttributeValue<Guid?>("msdyn_postalbumid");
            }
            set {
                SetId("msdyn_postalbumid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Profile Album</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public msdyn_PostAlbum_statuscode? statuscode {
            get {
                return GetOptionSetValue<msdyn_PostAlbum_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>The name of the custom entity.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("msdyn_name")]
        public string msdyn_name {
            get {
                return GetAttributeValue<string>("msdyn_name");
            }
            set {
                SetAttributeValue("msdyn_name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Profile Album</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public msdyn_PostAlbumState? statecode {
            get {
                return GetOptionSetValue<msdyn_PostAlbumState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_msdyn_postalbum")]
        public BusinessUnit business_unit_msdyn_postalbum {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_msdyn_postalbum", null);
            }
            set {
                SetRelatedEntity("business_unit_msdyn_postalbum", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_msdyn_postalbum")]
        public Team team_msdyn_postalbum {
            get {
                return GetRelatedEntity<Team>("team_msdyn_postalbum", null);
            }
            set {
                SetRelatedEntity("team_msdyn_postalbum", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_msdyn_postalbum")]
        public SystemUser user_msdyn_postalbum {
            get {
                return GetRelatedEntity<SystemUser>("user_msdyn_postalbum", null);
            }
            set {
                SetRelatedEntity("user_msdyn_postalbum", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_msdyn_postalbum_modifiedonbehalfby")]
        public SystemUser lk_msdyn_postalbum_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_msdyn_postalbum_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_msdyn_postalbum_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_msdyn_postalbum_modifiedby")]
        public SystemUser lk_msdyn_postalbum_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_msdyn_postalbum_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_msdyn_postalbum_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_msdyn_postalbum_createdonbehalfby")]
        public SystemUser lk_msdyn_postalbum_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_msdyn_postalbum_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_msdyn_postalbum_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_msdyn_postalbum_createdby")]
        public SystemUser lk_msdyn_postalbum_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_msdyn_postalbum_createdby", null);
            }
            set {
                SetRelatedEntity("lk_msdyn_postalbum_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_connections2")]
        public IEnumerable<Connection> msdyn_postalbum_connections2 {
            get {
                return GetRelatedEntities<Connection>("msdyn_postalbum_connections2", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_connections1")]
        public IEnumerable<Connection> msdyn_postalbum_connections1 {
            get {
                return GetRelatedEntities<Connection>("msdyn_postalbum_connections1", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_SyncErrors")]
        public IEnumerable<SyncError> msdyn_postalbum_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("msdyn_postalbum_SyncErrors", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_SocialActivities")]
        public IEnumerable<SocialActivity> msdyn_postalbum_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("msdyn_postalbum_SocialActivities", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> msdyn_postalbum_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("msdyn_postalbum_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_Tasks")]
        public IEnumerable<Task> msdyn_postalbum_Tasks {
            get {
                return GetRelatedEntities<Task>("msdyn_postalbum_Tasks", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> msdyn_postalbum_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("msdyn_postalbum_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_PhoneCalls")]
        public IEnumerable<PhoneCall> msdyn_postalbum_PhoneCalls {
            get {
                return GetRelatedEntities<PhoneCall>("msdyn_postalbum_PhoneCalls", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_PhoneCalls", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_Letters")]
        public IEnumerable<Letter> msdyn_postalbum_Letters {
            get {
                return GetRelatedEntities<Letter>("msdyn_postalbum_Letters", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_Faxes")]
        public IEnumerable<Fax> msdyn_postalbum_Faxes {
            get {
                return GetRelatedEntities<Fax>("msdyn_postalbum_Faxes", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_Emails")]
        public IEnumerable<Email> msdyn_postalbum_Emails {
            get {
                return GetRelatedEntities<Email>("msdyn_postalbum_Emails", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_Appointments")]
        public IEnumerable<Appointment> msdyn_postalbum_Appointments {
            get {
                return GetRelatedEntities<Appointment>("msdyn_postalbum_Appointments", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_postalbum_ActivityPointers")]
        public IEnumerable<ActivityPointer> msdyn_postalbum_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("msdyn_postalbum_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("msdyn_postalbum_ActivityPointers", null, value);
            }
        }
        
        public static msdyn_PostAlbum Retrieve(IOrganizationService service, Guid id, params Expression<Func<msdyn_PostAlbum,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Contains user personalization information regarding which of the administrator’s selected views to display on a user’s personal wall.</para>
    /// <para>Display Name: Filter</para>
    /// </summary>
    [EntityLogicalName("msdyn_wallsavedqueryusersettings")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class msdyn_wallsavedqueryusersettings : ExtendedEntity<msdyn_wallsavedqueryusersettingsState, msdyn_wallsavedqueryusersettings_statuscode> {
        
        public const string EntityLogicalName = "msdyn_wallsavedqueryusersettings";
        
        public const int EntityTypeCode = 10004;
        
        public msdyn_wallsavedqueryusersettings() : 
                base(EntityLogicalName) {
        }
        
        public msdyn_wallsavedqueryusersettings(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("msdyn_entityname");
            }
        }
        
        [AttributeLogicalName("msdyn_wallsavedqueryusersettingsid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("msdyn_wallsavedqueryusersettingsid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for entity instances</para>
        /// <para>Display Name: Filter</para>
        /// </summary>
        [AttributeLogicalName("msdyn_wallsavedqueryusersettingsid")]
        public Guid? msdyn_wallsavedqueryusersettingsId {
            get {
                return GetAttributeValue<Guid?>("msdyn_wallsavedqueryusersettingsid");
            }
            set {
                SetId("msdyn_wallsavedqueryusersettingsid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that corresponding view is following view</para>
        /// <para>Display Name: Is Following</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isfollowing")]
        public bool? msdyn_isfollowing {
            get {
                return GetAttributeValue<bool?>("msdyn_isfollowing");
            }
            set {
                SetAttributeValue("msdyn_isfollowing", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("msdyn_wallsavedqueryidname")]
        public string msdyn_wallsavedqueryidName {
            get {
                return GetAttributeValue<string>("msdyn_wallsavedqueryidname");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the entity to which the corresponding views belong.</para>
        /// <para>Display Name: Entity Name</para>
        /// </summary>
        [AttributeLogicalName("msdyn_entityname")]
        public string msdyn_entityname {
            get {
                return GetAttributeValue<string>("msdyn_entityname");
            }
            set {
                SetAttributeValue("msdyn_entityname", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Indicates that the record is virtual</para>
        /// <para>Display Name: Is Virtual</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isvirtual")]
        public bool? msdyn_IsVirtual {
            get {
                return GetAttributeValue<bool?>("msdyn_isvirtual");
            }
            set {
                SetAttributeValue("msdyn_isvirtual", value);
            }
        }
        
        /// <summary>
        /// <para>Display name of the entity to which the corresponding views belong.</para>
        /// <para>Display Name: Entity Display Name</para>
        /// </summary>
        [AttributeLogicalName("msdyn_entitydisplayname")]
        public string msdyn_entitydisplayname {
            get {
                return GetAttributeValue<string>("msdyn_entitydisplayname");
            }
            set {
                SetAttributeValue("msdyn_entitydisplayname", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        [AttributeLogicalName("msdyn_useridname")]
        public string msdyn_useridName {
            get {
                return GetAttributeValue<string>("msdyn_useridname");
            }
        }
        
        /// <summary>
        /// <para>Name of the corresponding view.</para>
        /// <para>Display Name: View Name</para>
        /// </summary>
        [AttributeLogicalName("msdyn_savedqueryname")]
        public string msdyn_savedqueryname {
            get {
                return GetAttributeValue<string>("msdyn_savedqueryname");
            }
            set {
                SetAttributeValue("msdyn_savedqueryname", value);
            }
        }
        
        /// <summary>
        /// <para>Sort order to be used when displaying the filter on the user’s personal wall.</para>
        /// <para>Display Name: Sort Order</para>
        /// </summary>
        [AttributeLogicalName("msdyn_sortorder")]
        public int? msdyn_sortorder {
            get {
                return GetAttributeValue<int?>("msdyn_sortorder");
            }
            set {
                SetAttributeValue("msdyn_sortorder", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>XML blob that stores personalization data for the user.</para>
        /// <para>Display Name: Data</para>
        /// </summary>
        [AttributeLogicalName("msdyn_data")]
        public string msdyn_data {
            get {
                return GetAttributeValue<string>("msdyn_data");
            }
            set {
                SetAttributeValue("msdyn_data", value);
            }
        }
        
        /// <summary>
        /// <para>Information that indicates whether the corresponding view should be displayed on the personal wall for this user.</para>
        /// <para>Display Name: Display on the wall</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isvisible")]
        public bool? msdyn_isvisible {
            get {
                return GetAttributeValue<bool?>("msdyn_isvisible");
            }
            set {
                SetAttributeValue("msdyn_isvisible", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Indicates that wall should be included in response to avoid roundtrips to server</para>
        /// <para>Display Name: Include Wall in response</para>
        /// </summary>
        [AttributeLogicalName("msdyn_includewallinresponse")]
        public bool? msdyn_includewallinresponse {
            get {
                return GetAttributeValue<bool?>("msdyn_includewallinresponse");
            }
            set {
                SetAttributeValue("msdyn_includewallinresponse", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Visible bit</para>
        /// </summary>
        [AttributeLogicalName("msdyn_isvisiblebit")]
        public int? msdyn_isvisiblebit {
            get {
                return GetAttributeValue<int?>("msdyn_isvisiblebit");
            }
            set {
                SetAttributeValue("msdyn_isvisiblebit", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Reserved to support different view types. Currently not used.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_type")]
        public int? msdyn_type {
            get {
                return GetAttributeValue<int?>("msdyn_type");
            }
            set {
                SetAttributeValue("msdyn_type", value);
            }
        }
        
        /// <summary>
        /// <para>Virtual column which contains entity type code for the entities returned by corresponding savedquery</para>
        /// <para>Display Name: Entity Type</para>
        /// </summary>
        [AttributeLogicalName("msdyn_otc")]
        public int? msdyn_otc {
            get {
                return GetAttributeValue<int?>("msdyn_otc");
            }
            set {
                SetAttributeValue("msdyn_otc", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates that view is selected by default if value is greater than 0. Also contains information which specific filter is applied.</para>
        /// <para>Display Name: Default</para>
        /// </summary>
        [AttributeLogicalName("msdyn_default")]
        public int? msdyn_default {
            get {
                return GetAttributeValue<int?>("msdyn_default");
            }
            set {
                SetAttributeValue("msdyn_default", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Wall View User Setting</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public msdyn_wallsavedqueryusersettings_statuscode? statuscode {
            get {
                return GetOptionSetValue<msdyn_wallsavedqueryusersettings_statuscode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for User associated with Wall View User Setting.</para>
        /// <para>Display Name: User Id</para>
        /// </summary>
        [AttributeLogicalName("msdyn_userid")]
        public EntityReference msdyn_userid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_userid");
            }
            set {
                SetAttributeValue("msdyn_userid", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the Wall View User Setting</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public msdyn_wallsavedqueryusersettingsState? statecode {
            get {
                return GetOptionSetValue<msdyn_wallsavedqueryusersettingsState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for Wall View associated with Wall View User Setting.</para>
        /// <para>Display Name: Wall View Id</para>
        /// </summary>
        [AttributeLogicalName("msdyn_wallsavedqueryid")]
        public EntityReference msdyn_wallsavedqueryid {
            get {
                return GetAttributeValue<EntityReference>("msdyn_wallsavedqueryid");
            }
            set {
                SetAttributeValue("msdyn_wallsavedqueryid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("msdyn_userid")]
        [RelationshipSchemaName("msdyn_systemuser_wallsavedqueryusersettings_userid")]
        public SystemUser msdyn_systemuser_wallsavedqueryusersettings_userid {
            get {
                return GetRelatedEntity<SystemUser>("msdyn_systemuser_wallsavedqueryusersettings_userid", null);
            }
            set {
                SetRelatedEntity("msdyn_systemuser_wallsavedqueryusersettings_userid", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_msdyn_wallsavedqueryusersettings")]
        public BusinessUnit business_unit_msdyn_wallsavedqueryusersettings {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_msdyn_wallsavedqueryusersettings", null);
            }
            set {
                SetRelatedEntity("business_unit_msdyn_wallsavedqueryusersettings", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_msdyn_wallsavedqueryusersettings")]
        public Team team_msdyn_wallsavedqueryusersettings {
            get {
                return GetRelatedEntity<Team>("team_msdyn_wallsavedqueryusersettings", null);
            }
            set {
                SetRelatedEntity("team_msdyn_wallsavedqueryusersettings", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_msdyn_wallsavedqueryusersettings")]
        public SystemUser user_msdyn_wallsavedqueryusersettings {
            get {
                return GetRelatedEntity<SystemUser>("user_msdyn_wallsavedqueryusersettings", null);
            }
            set {
                SetRelatedEntity("user_msdyn_wallsavedqueryusersettings", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_msdyn_wallsavedqueryusersettings_modifiedonbehalfby")]
        public SystemUser lk_msdyn_wallsavedqueryusersettings_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_msdyn_wallsavedqueryusersettings_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_msdyn_wallsavedqueryusersettings_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_msdyn_wallsavedqueryusersettings_modifiedby")]
        public SystemUser lk_msdyn_wallsavedqueryusersettings_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_msdyn_wallsavedqueryusersettings_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_msdyn_wallsavedqueryusersettings_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_msdyn_wallsavedqueryusersettings_createdonbehalfby")]
        public SystemUser lk_msdyn_wallsavedqueryusersettings_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_msdyn_wallsavedqueryusersettings_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_msdyn_wallsavedqueryusersettings_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_msdyn_wallsavedqueryusersettings_createdby")]
        public SystemUser lk_msdyn_wallsavedqueryusersettings_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_msdyn_wallsavedqueryusersettings_createdby", null);
            }
            set {
                SetRelatedEntity("lk_msdyn_wallsavedqueryusersettings_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_wallsavedqueryusersettings_SyncErrors")]
        public IEnumerable<SyncError> msdyn_wallsavedqueryusersettings_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("msdyn_wallsavedqueryusersettings_SyncErrors", null);
            }
            set {
                SetRelatedEntities("msdyn_wallsavedqueryusersettings_SyncErrors", null, value);
            }
        }
        
        public static msdyn_wallsavedqueryusersettings Retrieve(IOrganizationService service, Guid id, params Expression<Func<msdyn_wallsavedqueryusersettings,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Potential revenue-generating event, or sale to an account, which needs to be tracked through a sales process to completion.</para>
    /// <para>Display Name: Opportunity</para>
    /// </summary>
    [EntityLogicalName("opportunity")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Opportunity : ExtendedEntity<OpportunityState, Opportunity_StatusCode> {
        
        public const string EntityLogicalName = "opportunity";
        
        public const int EntityTypeCode = 3;
        
        public Opportunity() : 
                base(EntityLogicalName) {
        }
        
        public Opportunity(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("opportunityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the opportunity.</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public Guid? OpportunityId {
            get {
                return GetAttributeValue<Guid?>("opportunityid");
            }
            set {
                SetId("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Type notes about the company or organization associated with the opportunity.</para>
        /// <para>Display Name: Current Situation</para>
        /// </summary>
        [AttributeLogicalName("currentsituation")]
        public string CurrentSituation {
            get {
                return GetAttributeValue<string>("currentsituation");
            }
            set {
                SetAttributeValue("currentsituation", value);
            }
        }
        
        /// <summary>
        /// <para>Choose how high the level of need is for the lead's company.</para>
        /// <para>Display Name: Need</para>
        /// </summary>
        [AttributeLogicalName("need")]
        public need? Need {
            get {
                return GetOptionSetValue<need>("need");
            }
            set {
                SetOptionSetValue("need", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Shows the Actual Revenue field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Actual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("actualvalue_base")]
        public decimal? ActualValue_Base {
            get {
                return GetMoneyValue("actualvalue_base");
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the customer contacts for this opportunity have been identified.</para>
        /// <para>Display Name: Identify Customer Contacts</para>
        /// </summary>
        [AttributeLogicalName("identifycustomercontacts")]
        public bool? IdentifyCustomerContacts {
            get {
                return GetAttributeValue<bool?>("identifycustomercontacts");
            }
            set {
                SetAttributeValue("identifycustomercontacts", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Choose whether an individual or a committee will be involved in the purchase process for the lead.</para>
        /// <para>Display Name: Purchase Process</para>
        /// </summary>
        [AttributeLogicalName("purchaseprocess")]
        public purchaseprocess? PurchaseProcess {
            get {
                return GetOptionSetValue<purchaseprocess>("purchaseprocess");
            }
            set {
                SetOptionSetValue("purchaseprocess", value);
            }
        }
        
        [AttributeLogicalName("parentcontactidname")]
        public string ParentContactIdName {
            get {
                return GetAttributeValue<string>("parentcontactidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Tax field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Tax (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaltax_base")]
        public decimal? TotalTax_Base {
            get {
                return GetMoneyValue("totaltax_base");
            }
        }
        
        /// <summary>
        /// <para>Type the discount amount for the opportunity if the customer is eligible for special savings.</para>
        /// <para>Display Name: Opportunity Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("discountamount")]
        public decimal? DiscountAmount {
            get {
                return GetMoneyValue("discountamount");
            }
            set {
                SetMoneyValue("discountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Type comments about the quotes associated with the opportunity.</para>
        /// <para>Display Name: Quote Comments</para>
        /// </summary>
        [AttributeLogicalName("quotecomments")]
        public string QuoteComments {
            get {
                return GetAttributeValue<string>("quotecomments");
            }
            set {
                SetAttributeValue("quotecomments", value);
            }
        }
        
        [AttributeLogicalName("pricelevelidname")]
        public string PriceLevelIdName {
            get {
                return GetAttributeValue<string>("pricelevelidname");
            }
        }
        
        /// <summary>
        /// <para>Version number of the opportunity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Tax amounts specified on all products included in the opportunity, included in the Total Amount field calculation for the opportunity.</para>
        /// <para>Display Name: Total Tax</para>
        /// </summary>
        [AttributeLogicalName("totaltax")]
        public decimal? TotalTax {
            get {
                return GetMoneyValue("totaltax");
            }
            set {
                SetMoneyValue("totaltax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamount_base")]
        public decimal? TotalAmount_Base {
            get {
                return GetMoneyValue("totalamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type notes about the customer's pain points to help the sales team identify products and services that could address these pain points.</para>
        /// <para>Display Name: Customer Pain Points</para>
        /// </summary>
        [AttributeLogicalName("customerpainpoints")]
        public string CustomerPainPoints {
            get {
                return GetAttributeValue<string>("customerpainpoints");
            }
            set {
                SetAttributeValue("customerpainpoints", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the opportunity.</para>
        /// <para>Display Name: Total Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamount")]
        public decimal? TotalAmount {
            get {
                return GetMoneyValue("totalamount");
            }
            set {
                SetMoneyValue("totalamount", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Opportunity_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Opportunity_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName {
            get {
                return GetAttributeValue<string>("customeridname");
            }
        }
        
        /// <summary>
        /// <para>Enter the expected closing date of the opportunity to help make accurate revenue forecasts.</para>
        /// <para>Display Name: Est. Close Date</para>
        /// </summary>
        [AttributeLogicalName("estimatedclosedate")]
        public DateTime? EstimatedCloseDate {
            get {
                return GetAttributeValue<DateTime?>("estimatedclosedate");
            }
            set {
                SetAttributeValue("estimatedclosedate", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Manual Discount amounts specified on all products included in the opportunity. This value is reflected in the Total Detail Amount field on the opportunity and is added to any discount amount or rate specified on the opportunity.</para>
        /// <para>Display Name: Total Line Item Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount")]
        public decimal? TotalLineItemDiscountAmount {
            get {
                return GetMoneyValue("totallineitemdiscountamount");
            }
            set {
                SetMoneyValue("totallineitemdiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount_base")]
        public decimal? TotalDiscountAmount_Base {
            get {
                return GetMoneyValue("totaldiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Actual Revenue field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Est. Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("estimatedvalue_base")]
        public decimal? EstimatedValue_Base {
            get {
                return GetMoneyValue("estimatedvalue_base");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the prospecting follow-up meeting with the lead.</para>
        /// <para>Display Name: Scheduled Follow up (Prospect)</para>
        /// </summary>
        [AttributeLogicalName("schedulefollowup_prospect")]
        public DateTime? ScheduleFollowup_Prospect {
            get {
                return GetAttributeValue<DateTime?>("schedulefollowup_prospect");
            }
            set {
                SetAttributeValue("schedulefollowup_prospect", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Potential Customer Type</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType {
            get {
                return GetAttributeValue<string>("customeridtype");
            }
            set {
                SetAttributeValue("customeridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the opportunity is open, won, or lost. Won and lost opportunities are read-only and can't be edited until they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OpportunityState? StateCode {
            get {
                return GetOptionSetValue<OpportunityState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Pricing error for the opportunity.</para>
        /// <para>Display Name: Pricing Error </para>
        /// </summary>
        [AttributeLogicalName("pricingerrorcode")]
        public qooi_pricingerrorcode? PricingErrorCode {
            get {
                return GetOptionSetValue<qooi_pricingerrorcode>("pricingerrorcode");
            }
            set {
                SetOptionSetValue("pricingerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the sales process stage for the opportunity to indicate the probability of closing the opportunity.</para>
        /// <para>Display Name: Process Code</para>
        /// </summary>
        [AttributeLogicalName("salesstagecode")]
        public Opportunity_SalesStageCode? SalesStageCode {
            get {
                return GetOptionSetValue<Opportunity_SalesStageCode>("salesstagecode");
            }
            set {
                SetOptionSetValue("salesstagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subject or descriptive name, such as the expected order or company name, for the opportunity.</para>
        /// <para>Display Name: Topic</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Type a value between 0 and 1,000,000,000,000 to indicate the lead's potential available budget.</para>
        /// <para>Display Name: Budget Amount</para>
        /// </summary>
        [AttributeLogicalName("budgetamount")]
        public decimal? BudgetAmount {
            get {
                return GetMoneyValue("budgetamount");
            }
            set {
                SetMoneyValue("budgetamount", value);
            }
        }
        
        /// <summary>
        /// <para>Choose how long the lead will likely take to make the purchase.</para>
        /// <para>Display Name: Purchase Timeframe</para>
        /// </summary>
        [AttributeLogicalName("purchasetimeframe")]
        public purchasetimeframe? PurchaseTimeframe {
            get {
                return GetOptionSetValue<purchasetimeframe>("purchasetimeframe");
            }
            set {
                SetOptionSetValue("purchasetimeframe", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the proposal meeting for the opportunity.</para>
        /// <para>Display Name: Schedule Proposal Meeting</para>
        /// </summary>
        [AttributeLogicalName("scheduleproposalmeeting")]
        public DateTime? ScheduleProposalMeeting {
            get {
                return GetAttributeValue<DateTime?>("scheduleproposalmeeting");
            }
            set {
                SetAttributeValue("scheduleproposalmeeting", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the lead that the opportunity was created from for reporting and analytics. The field is read-only after the opportunity is created and defaults to the correct lead when an opportunity is created from a converted lead.</para>
        /// <para>Display Name: Originating Lead</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference OriginatingLeadId {
            get {
                return GetAttributeValue<EntityReference>("originatingleadid");
            }
            set {
                SetAttributeValue("originatingleadid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the discount rate that should be applied to the Product Totals field to include additional savings for the customer in the opportunity.</para>
        /// <para>Display Name: Opportunity Discount (%)</para>
        /// </summary>
        [AttributeLogicalName("discountpercentage")]
        public decimal? DiscountPercentage {
            get {
                return GetAttributeValue<decimal?>("discountpercentage");
            }
            set {
                SetAttributeValue("discountpercentage", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the actual revenue amount for the opportunity for reporting and analysis of estimated versus actual sales. Field defaults to the Est. Revenue value when an opportunity is won.</para>
        /// <para>Display Name: Actual Revenue</para>
        /// </summary>
        [AttributeLogicalName("actualvalue")]
        public decimal? ActualValue {
            get {
                return GetMoneyValue("actualvalue");
            }
            set {
                SetMoneyValue("actualvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether the proposal feedback has been captured and resolved for the opportunity.</para>
        /// <para>Display Name: Feedback Resolved</para>
        /// </summary>
        [AttributeLogicalName("resolvefeedback")]
        public bool? ResolveFeedback {
            get {
                return GetAttributeValue<bool?>("resolvefeedback");
            }
            set {
                SetAttributeValue("resolvefeedback", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the campaign that the opportunity was created from. The ID is used for tracking the success of the campaign.</para>
        /// <para>Display Name: Source Campaign</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public EntityReference CampaignId {
            get {
                return GetAttributeValue<EntityReference>("campaignid");
            }
            set {
                SetAttributeValue("campaignid", value);
            }
        }
        
        /// <summary>
        /// <para>Type some notes about the customer's requirements, to help the sales team identify products and services that could meet their requirements.</para>
        /// <para>Display Name: Customer Need</para>
        /// </summary>
        [AttributeLogicalName("customerneed")]
        public string CustomerNeed {
            get {
                return GetAttributeValue<string>("customerneed");
            }
            set {
                SetAttributeValue("customerneed", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this opportunity. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Select whether your notes include information about who makes the purchase decisions at the lead's company.</para>
        /// <para>Display Name: Decision Maker?</para>
        /// </summary>
        [AttributeLogicalName("decisionmaker")]
        public bool? DecisionMaker {
            get {
                return GetAttributeValue<bool?>("decisionmaker");
            }
            set {
                SetAttributeValue("decisionmaker", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type comments about the qualification or scoring of the lead.</para>
        /// <para>Display Name: Qualification Comments</para>
        /// </summary>
        [AttributeLogicalName("qualificationcomments")]
        public string QualificationComments {
            get {
                return GetAttributeValue<string>("qualificationcomments");
            }
            set {
                SetAttributeValue("qualificationcomments", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of all existing and write-in products included on the opportunity, based on the specified price list and quantities.</para>
        /// <para>Display Name: Total Detail Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount")]
        public decimal? TotalLineItemAmount {
            get {
                return GetMoneyValue("totallineitemamount");
            }
            set {
                SetMoneyValue("totallineitemamount", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the opportunity participates in workflow rules.</para>
        /// <para>Display Name: Participates in Workflow</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? ParticipatesInWorkflow {
            get {
                return GetAttributeValue<bool?>("participatesinworkflow");
            }
            set {
                SetAttributeValue("participatesinworkflow", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to provide a quick link to additional customer details, such as address, phone number, activities, and orders.</para>
        /// <para>Display Name: Potential Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total product amount for the opportunity, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount of the opportunity.</para>
        /// <para>Display Name: Total Pre-Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight")]
        public decimal? TotalAmountLessFreight {
            get {
                return GetMoneyValue("totalamountlessfreight");
            }
            set {
                SetMoneyValue("totalamountlessfreight", value);
            }
        }
        
        /// <summary>
        /// <para>Type a number from 0 to 100 that represents the likelihood of closing the opportunity. This can aid the sales team in their efforts to convert the opportunity in a sale.</para>
        /// <para>Display Name: Probability</para>
        /// </summary>
        [AttributeLogicalName("closeprobability")]
        public int? CloseProbability {
            get {
                return GetAttributeValue<int?>("closeprobability");
            }
            set {
                SetAttributeValue("closeprobability", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Pre-Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Pre-Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight_base")]
        public decimal? TotalAmountLessFreight_Base {
            get {
                return GetMoneyValue("totalamountlessfreight_base");
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time of the qualifying follow-up meeting with the lead.</para>
        /// <para>Display Name: Scheduled Follow up (Qualify)</para>
        /// </summary>
        [AttributeLogicalName("schedulefollowup_qualify")]
        public DateTime? ScheduleFollowup_Qualify {
            get {
                return GetAttributeValue<DateTime?>("schedulefollowup_qualify");
            }
            set {
                SetAttributeValue("schedulefollowup_qualify", value);
            }
        }
        
        /// <summary>
        /// <para>Select when the opportunity is likely to be closed.</para>
        /// <para>Display Name: Timeline</para>
        /// </summary>
        [AttributeLogicalName("timeline")]
        public Opportunity_TimeLine? TimeLine {
            get {
                return GetOptionSetValue<Opportunity_TimeLine>("timeline");
            }
            set {
                SetOptionSetValue("timeline", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether the proposal feedback has been captured for the opportunity.</para>
        /// <para>Display Name: Proposal Feedback Captured</para>
        /// </summary>
        [AttributeLogicalName("captureproposalfeedback")]
        public bool? CaptureProposalFeedback {
            get {
                return GetAttributeValue<bool?>("captureproposalfeedback");
            }
            set {
                SetAttributeValue("captureproposalfeedback", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the opportunity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the estimated revenue amount to indicate the potential sale or value of the opportunity for revenue forecasting. This field can be either system-populated or editable based on the selection in the Revenue field.</para>
        /// <para>Display Name: Est. Revenue</para>
        /// </summary>
        [AttributeLogicalName("estimatedvalue")]
        public decimal? EstimatedValue {
            get {
                return GetMoneyValue("estimatedvalue");
            }
            set {
                SetMoneyValue("estimatedvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether a proposal for the opportunity has been presented to the account.</para>
        /// <para>Display Name: Presented Proposal</para>
        /// </summary>
        [AttributeLogicalName("presentproposal")]
        public bool? PresentProposal {
            get {
                return GetAttributeValue<bool?>("presentproposal");
            }
            set {
                SetAttributeValue("presentproposal", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the opportunity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("freightamount_base")]
        public decimal? FreightAmount_Base {
            get {
                return GetMoneyValue("freightamount_base");
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the current phase in the sales pipeline for the opportunity. This is updated by a workflow.</para>
        /// <para>Display Name: Pipeline Phase</para>
        /// </summary>
        [AttributeLogicalName("stepname")]
        public string StepName {
            get {
                return GetAttributeValue<string>("stepname");
            }
            set {
                SetAttributeValue("stepname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the opportunity, such as possible products to sell or past purchases from the customer.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total discount amount, based on the discount price and rate entered on the opportunity.</para>
        /// <para>Display Name: Total Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount")]
        public decimal? TotalDiscountAmount {
            get {
                return GetMoneyValue("totaldiscountamount");
            }
            set {
                SetMoneyValue("totaldiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Line Item Discount Amount field to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Line Item Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount_base")]
        public decimal? TotalLineItemDiscountAmount_Base {
            get {
                return GetMoneyValue("totallineitemdiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the fit between the lead's requirements and your offerings was evaluated.</para>
        /// <para>Display Name: Evaluate Fit</para>
        /// </summary>
        [AttributeLogicalName("evaluatefit")]
        public bool? EvaluateFit {
            get {
                return GetAttributeValue<bool?>("evaluatefit");
            }
            set {
                SetAttributeValue("evaluatefit", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether an internal review has been completed for this opportunity.</para>
        /// <para>Display Name: Complete Internal Review</para>
        /// </summary>
        [AttributeLogicalName("completeinternalreview")]
        public bool? CompleteInternalReview {
            get {
                return GetAttributeValue<bool?>("completeinternalreview");
            }
            set {
                SetAttributeValue("completeinternalreview", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether information about competitors is included.</para>
        /// <para>Display Name: Identify Competitors</para>
        /// </summary>
        [AttributeLogicalName("identifycompetitors")]
        public bool? IdentifyCompetitors {
            get {
                return GetAttributeValue<bool?>("identifycompetitors");
            }
            set {
                SetAttributeValue("identifycompetitors", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the workflow step.</para>
        /// <para>Display Name: Step</para>
        /// </summary>
        [AttributeLogicalName("stepid")]
        public Guid? StepId {
            get {
                return GetAttributeValue<Guid?>("stepid");
            }
            set {
                SetAttributeValue("stepid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the opportunity was closed or canceled.</para>
        /// <para>Display Name: Actual Close Date</para>
        /// </summary>
        [AttributeLogicalName("actualclosedate")]
        public DateTime? ActualCloseDate {
            get {
                return GetAttributeValue<DateTime?>("actualclosedate");
            }
            set {
                SetAttributeValue("actualclosedate", value);
            }
        }
        
        /// <summary>
        /// <para>Select the sales stage of this opportunity to aid the sales team in their efforts to win this opportunity.</para>
        /// <para>Display Name: Sales Stage</para>
        /// </summary>
        [AttributeLogicalName("salesstage")]
        public opportunity_salesstage? SalesStage {
            get {
                return GetOptionSetValue<opportunity_salesstage>("salesstage");
            }
            set {
                SetOptionSetValue("salesstage", value);
            }
        }
        
        /// <summary>
        /// <para>Select the expected value or priority of the opportunity based on revenue, customer status, or closing probability.</para>
        /// <para>Display Name: Rating</para>
        /// </summary>
        [AttributeLogicalName("opportunityratingcode")]
        public Opportunity_OpportunityRatingCode? OpportunityRatingCode {
            get {
                return GetOptionSetValue<Opportunity_OpportunityRatingCode>("opportunityratingcode");
            }
            set {
                SetOptionSetValue("opportunityratingcode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select whether a thank you note has been sent to the account for considering the proposal.</para>
        /// <para>Display Name: Send Thank You Note</para>
        /// </summary>
        [AttributeLogicalName("sendthankyounote")]
        public bool? SendThankYouNote {
            get {
                return GetAttributeValue<bool?>("sendthankyounote");
            }
            set {
                SetAttributeValue("sendthankyounote", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("pricelevelid")]
        public EntityReference PriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("pricelevelid");
            }
            set {
                SetAttributeValue("pricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose whether the sales team has recorded detailed notes on the proposals and the account's responses.</para>
        /// <para>Display Name: File Debrief</para>
        /// </summary>
        [AttributeLogicalName("filedebrief")]
        public bool? FileDebrief {
            get {
                return GetAttributeValue<bool?>("filedebrief");
            }
            set {
                SetAttributeValue("filedebrief", value);
            }
        }
        
        /// <summary>
        /// <para>Choose an account to connect this opportunity to, so that the relationship is visible in reports and analytics, and to provide a quick link to additional details, such as financial information and activities.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference ParentAccountId {
            get {
                return GetAttributeValue<EntityReference>("parentaccountid");
            }
            set {
                SetAttributeValue("parentaccountid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Choose whether someone from the sales team contacted this lead earlier.</para>
        /// <para>Display Name: Initial Communication</para>
        /// </summary>
        [AttributeLogicalName("initialcommunication")]
        public initialcommunication? InitialCommunication {
            get {
                return GetOptionSetValue<initialcommunication>("initialcommunication");
            }
            set {
                SetOptionSetValue("initialcommunication", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the decision about pursuing the opportunity has been made.</para>
        /// <para>Display Name: Decide Go/No-Go</para>
        /// </summary>
        [AttributeLogicalName("pursuitdecision")]
        public bool? PursuitDecision {
            get {
                return GetAttributeValue<bool?>("pursuitdecision");
            }
            set {
                SetAttributeValue("pursuitdecision", value);
            }
        }
        
        [AttributeLogicalName("originatingleadidname")]
        public string OriginatingLeadIdName {
            get {
                return GetAttributeValue<string>("originatingleadidname");
            }
        }
        
        [AttributeLogicalName("parentaccountidname")]
        public string ParentAccountIdName {
            get {
                return GetAttributeValue<string>("parentaccountidname");
            }
        }
        
        /// <summary>
        /// <para>Choose whether you have recorded who will pursue the opportunity.</para>
        /// <para>Display Name: Identify Sales Team</para>
        /// </summary>
        [AttributeLogicalName("identifypursuitteam")]
        public bool? IdentifyPursuitTeam {
            get {
                return GetAttributeValue<bool?>("identifypursuitteam");
            }
            set {
                SetAttributeValue("identifypursuitteam", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Detail Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Detail Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount_base")]
        public decimal? TotalLineItemAmount_Base {
            get {
                return GetMoneyValue("totallineitemamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the opportunity was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Select the opportunity's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Opportunity_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Opportunity_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose a contact to connect this opportunity to, so that the relationship is visible in reports and analytics.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("parentcontactid")]
        public EntityReference ParentContactId {
            get {
                return GetAttributeValue<EntityReference>("parentcontactid");
            }
            set {
                SetAttributeValue("parentcontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the opportunity is associated.</para>
        /// <para>Display Name: </para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Select whether a final proposal has been completed for the opportunity.</para>
        /// <para>Display Name: Final Proposal Ready</para>
        /// </summary>
        [AttributeLogicalName("completefinalproposal")]
        public bool? CompleteFinalProposal {
            get {
                return GetAttributeValue<bool?>("completefinalproposal");
            }
            set {
                SetAttributeValue("completefinalproposal", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Opportunity Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Opportunity Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("discountamount_base")]
        public decimal? DiscountAmount_Base {
            get {
                return GetMoneyValue("discountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the opportunity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        [AttributeLogicalName("campaignidname")]
        public string CampaignIdName {
            get {
                return GetAttributeValue<string>("campaignidname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Type the cost of freight or shipping for the products included in the opportunity for use in calculating the Total Amount field.</para>
        /// <para>Display Name: Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("freightamount")]
        public decimal? FreightAmount {
            get {
                return GetMoneyValue("freightamount");
            }
            set {
                SetMoneyValue("freightamount", value);
            }
        }
        
        /// <summary>
        /// <para>Type notes about the proposed solution for the opportunity.</para>
        /// <para>Display Name: Proposed Solution</para>
        /// </summary>
        [AttributeLogicalName("proposedsolution")]
        public string ProposedSolution {
            get {
                return GetAttributeValue<string>("proposedsolution");
            }
            set {
                SetAttributeValue("proposedsolution", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality and the probability of it turning into an opportunity.</para>
        /// <para>Display Name: Confirm Interest</para>
        /// </summary>
        [AttributeLogicalName("confirminterest")]
        public bool? ConfirmInterest {
            get {
                return GetAttributeValue<bool?>("confirminterest");
            }
            set {
                SetAttributeValue("confirminterest", value);
            }
        }
        
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the estimated revenue for the opportunity is calculated automatically based on the products entered or entered manually by a user.</para>
        /// <para>Display Name: Revenue</para>
        /// </summary>
        [AttributeLogicalName("isrevenuesystemcalculated")]
        public bool? IsRevenueSystemCalculated {
            get {
                return GetAttributeValue<bool?>("isrevenuesystemcalculated");
            }
            set {
                SetAttributeValue("isrevenuesystemcalculated", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether a proposal has been developed for the opportunity.</para>
        /// <para>Display Name: Develop Proposal</para>
        /// </summary>
        [AttributeLogicalName("developproposal")]
        public bool? DevelopProposal {
            get {
                return GetAttributeValue<bool?>("developproposal");
            }
            set {
                SetAttributeValue("developproposal", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Select the likely budget status for the lead's company. This may help determine the lead rating or your sales approach.</para>
        /// <para>Display Name: Budget</para>
        /// </summary>
        [AttributeLogicalName("budgetstatus")]
        public budgetstatus? BudgetStatus {
            get {
                return GetOptionSetValue<budgetstatus>("budgetstatus");
            }
            set {
                SetOptionSetValue("budgetstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the opportunity record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the budget amount converted to the system's base currency.</para>
        /// <para>Display Name: Budget Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("budgetamount_base")]
        public decimal? BudgetAmount_Base {
            get {
                return GetMoneyValue("budgetamount_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the final proposal has been presented to the account.</para>
        /// <para>Display Name: Present Final Proposal</para>
        /// </summary>
        [AttributeLogicalName("presentfinalproposal")]
        public bool? PresentFinalProposal {
            get {
                return GetAttributeValue<bool?>("presentfinalproposal");
            }
            set {
                SetAttributeValue("presentfinalproposal", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time when the final decision of the opportunity was made.</para>
        /// <para>Display Name: Final Decision Date</para>
        /// </summary>
        [AttributeLogicalName("finaldecisiondate")]
        public DateTime? FinalDecisionDate {
            get {
                return GetAttributeValue<DateTime?>("finaldecisiondate");
            }
            set {
                SetAttributeValue("finaldecisiondate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact associated with the opportunity.</para>
        /// <para>Display Name: </para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_opportunity")]
        public SLA sla_opportunity {
            get {
                return GetRelatedEntity<SLA>("sla_opportunity", null);
            }
            set {
                SetRelatedEntity("sla_opportunity", null, value);
            }
        }
        
        [AttributeLogicalName("parentcontactid")]
        [RelationshipSchemaName("opportunity_parent_contact")]
        public Contact opportunity_parent_contact {
            get {
                return GetRelatedEntity<Contact>("opportunity_parent_contact", null);
            }
            set {
                SetRelatedEntity("opportunity_parent_contact", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_opportunity_modifiedonbehalfby")]
        public SystemUser lk_opportunity_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunity_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_opportunity_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_opportunities")]
        public Team team_opportunities {
            get {
                return GetRelatedEntity<Team>("team_opportunities", null);
            }
            set {
                SetRelatedEntity("team_opportunities", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_opportunities")]
        public BusinessUnit business_unit_opportunities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_opportunities", null);
            }
            set {
                SetRelatedEntity("business_unit_opportunities", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("opportunity_owning_user")]
        public SystemUser opportunity_owning_user {
            get {
                return GetRelatedEntity<SystemUser>("opportunity_owning_user", null);
            }
            set {
                SetRelatedEntity("opportunity_owning_user", null, value);
            }
        }
        
        [AttributeLogicalName("originatingleadid")]
        [RelationshipSchemaName("opportunity_originating_lead")]
        public Lead opportunity_originating_lead {
            get {
                return GetRelatedEntity<Lead>("opportunity_originating_lead", null);
            }
            set {
                SetRelatedEntity("opportunity_originating_lead", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_opportunity")]
        public TransactionCurrency transactioncurrency_opportunity {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_opportunity", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_opportunity", null, value);
            }
        }
        
        [AttributeLogicalName("parentaccountid")]
        [RelationshipSchemaName("opportunity_parent_account")]
        public Account opportunity_parent_account {
            get {
                return GetRelatedEntity<Account>("opportunity_parent_account", null);
            }
            set {
                SetRelatedEntity("opportunity_parent_account", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("opportunity_customer_contacts")]
        public Contact opportunity_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("opportunity_customer_contacts", null);
            }
            set {
                SetRelatedEntity("opportunity_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_opportunity")]
        public SLA manualsla_opportunity {
            get {
                return GetRelatedEntity<SLA>("manualsla_opportunity", null);
            }
            set {
                SetRelatedEntity("manualsla_opportunity", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_opportunity_createdonbehalfby")]
        public SystemUser lk_opportunity_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunity_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_opportunity_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_opportunitybase_modifiedby")]
        public SystemUser lk_opportunitybase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunitybase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_opportunitybase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("campaignid")]
        [RelationshipSchemaName("campaign_opportunities")]
        public Campaign campaign_opportunities {
            get {
                return GetRelatedEntity<Campaign>("campaign_opportunities", null);
            }
            set {
                SetRelatedEntity("campaign_opportunities", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("opportunity_customer_accounts")]
        public Account opportunity_customer_accounts {
            get {
                return GetRelatedEntity<Account>("opportunity_customer_accounts", null);
            }
            set {
                SetRelatedEntity("opportunity_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_opportunitybase_createdby")]
        public SystemUser lk_opportunitybase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunitybase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_opportunitybase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_sales_orders")]
        public IEnumerable<SalesOrder> opportunity_sales_orders {
            get {
                return GetRelatedEntities<SalesOrder>("opportunity_sales_orders", null);
            }
            set {
                SetRelatedEntities("opportunity_sales_orders", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_Emails")]
        public IEnumerable<Email> Opportunity_Emails {
            get {
                return GetRelatedEntities<Email>("Opportunity_Emails", null);
            }
            set {
                SetRelatedEntities("Opportunity_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_invoices")]
        public IEnumerable<Invoice> opportunity_invoices {
            get {
                return GetRelatedEntities<Invoice>("opportunity_invoices", null);
            }
            set {
                SetRelatedEntities("opportunity_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_connections1")]
        public IEnumerable<Connection> opportunity_connections1 {
            get {
                return GetRelatedEntities<Connection>("opportunity_connections1", null);
            }
            set {
                SetRelatedEntities("opportunity_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_Teams")]
        public IEnumerable<Team> opportunity_Teams {
            get {
                return GetRelatedEntities<Team>("opportunity_Teams", null);
            }
            set {
                SetRelatedEntities("opportunity_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_SharepointDocumentLocation")]
        public IEnumerable<SharePointDocumentLocation> Opportunity_SharepointDocumentLocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("Opportunity_SharepointDocumentLocation", null);
            }
            set {
                SetRelatedEntities("Opportunity_SharepointDocumentLocation", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Opportunity_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Opportunity_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Opportunity_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_Faxes")]
        public IEnumerable<Fax> Opportunity_Faxes {
            get {
                return GetRelatedEntities<Fax>("Opportunity_Faxes", null);
            }
            set {
                SetRelatedEntities("Opportunity_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_OpportunityClose")]
        public IEnumerable<OpportunityClose> Opportunity_OpportunityClose {
            get {
                return GetRelatedEntities<OpportunityClose>("Opportunity_OpportunityClose", null);
            }
            set {
                SetRelatedEntities("Opportunity_OpportunityClose", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_quotes")]
        public IEnumerable<Quote> opportunity_quotes {
            get {
                return GetRelatedEntities<Quote>("opportunity_quotes", null);
            }
            set {
                SetRelatedEntities("opportunity_quotes", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_connections2")]
        public IEnumerable<Connection> opportunity_connections2 {
            get {
                return GetRelatedEntities<Connection>("opportunity_connections2", null);
            }
            set {
                SetRelatedEntities("opportunity_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_Appointments")]
        public IEnumerable<Appointment> Opportunity_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Opportunity_Appointments", null);
            }
            set {
                SetRelatedEntities("Opportunity_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_ActivityPointers")]
        public IEnumerable<ActivityPointer> Opportunity_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Opportunity_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Opportunity_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_Letters")]
        public IEnumerable<Letter> Opportunity_Letters {
            get {
                return GetRelatedEntities<Letter>("Opportunity_Letters", null);
            }
            set {
                SetRelatedEntities("Opportunity_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_qualifying_opportunity")]
        public IEnumerable<Lead> lead_qualifying_opportunity {
            get {
                return GetRelatedEntities<Lead>("lead_qualifying_opportunity", null);
            }
            set {
                SetRelatedEntities("lead_qualifying_opportunity", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_Phonecalls")]
        public IEnumerable<PhoneCall> Opportunity_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Opportunity_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Opportunity_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_SyncErrors")]
        public IEnumerable<SyncError> Opportunity_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Opportunity_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Opportunity_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Opportunity_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Opportunity_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Opportunity_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_activity_parties")]
        public IEnumerable<ActivityParty> opportunity_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("opportunity_activity_parties", null);
            }
            set {
                SetRelatedEntities("opportunity_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_Tasks")]
        public IEnumerable<Task> Opportunity_Tasks {
            get {
                return GetRelatedEntities<Task>("Opportunity_Tasks", null);
            }
            set {
                SetRelatedEntities("Opportunity_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("Opportunity_SocialActivities")]
        public IEnumerable<SocialActivity> Opportunity_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("Opportunity_SocialActivities", null);
            }
            set {
                SetRelatedEntities("Opportunity_SocialActivities", null, value);
            }
        }
        
        public static Opportunity Retrieve(IOrganizationService service, Guid id, params Expression<Func<Opportunity,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Activity that is created automatically when an opportunity is closed, containing information such as the description of the closing and actual revenue.</para>
    /// <para>Display Name: Opportunity Close</para>
    /// </summary>
    [EntityLogicalName("opportunityclose")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class OpportunityClose : ExtendedEntity<OpportunityCloseState, OpportunityClose_StatusCode> {
        
        public const string EntityLogicalName = "opportunityclose";
        
        public const int EntityTypeCode = 4208;
        
        public OpportunityClose() : 
                base(EntityLogicalName) {
        }
        
        public OpportunityClose(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the opportunity close activity.</para>
        /// <para>Display Name: Opportunity Close</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Actual duration of the opportunity close activity in minutes.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the opportunity close activity.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public OpportunityClose_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<OpportunityClose_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the opportunity close activity.</para>
        /// <para>Display Name: Scheduled End</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        [AttributeLogicalName("opportunityidtype")]
        public string OpportunityIdType {
            get {
                return GetAttributeValue<string>("opportunityidtype");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who created the record.</para>
        /// <para>Display Name: Created By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("createdbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the opportunity close activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Actual end time of the opportunity close activity.</para>
        /// <para>Display Name: Closed On</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the opportunity close activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the service with which the opportunity close activity is associated.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the opportunity close activity.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the opportunityclose.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the opportunity close activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the competitor with which the opportunity close activity is associated.</para>
        /// <para>Display Name: Competitor</para>
        /// </summary>
        [AttributeLogicalName("competitorid")]
        public EntityReference CompetitorId {
            get {
                return GetAttributeValue<EntityReference>("competitorid");
            }
            set {
                SetAttributeValue("competitorid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        [AttributeLogicalName("competitoridname")]
        public string CompetitorIdName {
            get {
                return GetAttributeValue<string>("competitoridname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the opportunity close activity was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Activity that is created automatically when an opportunity is closed, containing information such as the description of the closing and actual revenue.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Category of the opportunity close activity.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the opportunity close activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the opportunity close activity.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Actual Revenue field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Actual Revenue (Base)</para>
        /// </summary>
        [AttributeLogicalName("actualrevenue_base")]
        public decimal? ActualRevenue_Base {
            get {
                return GetMoneyValue("actualrevenue_base");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the opportunity close activity.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Actual revenue generated for the opportunity.</para>
        /// <para>Display Name: Actual Revenue</para>
        /// </summary>
        [AttributeLogicalName("actualrevenue")]
        public decimal? ActualRevenue {
            get {
                return GetMoneyValue("actualrevenue");
            }
            set {
                SetMoneyValue("actualrevenue", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the external party who modified the record.</para>
        /// <para>Display Name: Modified By (External Party)</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty {
            get {
                return GetAttributeValue<EntityReference>("modifiedbyexternalparty");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the opportunity closed.</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public EntityReference OpportunityId {
            get {
                return GetAttributeValue<EntityReference>("opportunityid");
            }
            set {
                SetAttributeValue("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the opportunity close activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the opportunity close activity is open, completed, or canceled. By default, opportunity close activities are completed unless the opportunity is reactivated, which updates them to canceled.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OpportunityCloseState? StateCode {
            get {
                return GetOptionSetValue<OpportunityCloseState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("createdbyexternalpartyname")]
        public string CreatedByExternalPartyName {
            get {
                return GetAttributeValue<string>("createdbyexternalpartyname");
            }
        }
        
        /// <summary>
        /// <para>Subcategory of the opportunity close activity.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the opportunityclose.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the opportunity close activity.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyexternalpartyname")]
        public string ModifiedByExternalPartyName {
            get {
                return GetAttributeValue<string>("modifiedbyexternalpartyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("opportunityidname")]
        public string OpportunityIdName {
            get {
                return GetAttributeValue<string>("opportunityidname");
            }
        }
        
        /// <summary>
        /// <para>Information that specifies if the opportunity close activity was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the opportunity close activity was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the opportunity close activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Information about whether the opportunity close activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Actual start time of the opportunity close activity.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_opportunity_close_activities")]
        public BusinessUnit business_unit_opportunity_close_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_opportunity_close_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_opportunity_close_activities", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_opportunity_close")]
        public ActivityPointer activity_pointer_opportunity_close {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_opportunity_close", null);
            }
            set {
                SetRelatedEntity("activity_pointer_opportunity_close", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_opportunityclose_modifiedby")]
        public SystemUser lk_opportunityclose_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunityclose_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_opportunityclose_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("opportunityid")]
        [RelationshipSchemaName("Opportunity_OpportunityClose")]
        public Opportunity Opportunity_OpportunityClose {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_OpportunityClose", null);
            }
            set {
                SetRelatedEntity("Opportunity_OpportunityClose", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_opportunityclose_createdonbehalfby")]
        public SystemUser lk_opportunityclose_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunityclose_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_opportunityclose_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_opportunityclose_createdby")]
        public SystemUser lk_opportunityclose_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunityclose_createdby", null);
            }
            set {
                SetRelatedEntity("lk_opportunityclose_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedbyexternalparty")]
        [RelationshipSchemaName("lk_externalparty_opportunityclose_modifiedby")]
        public ExternalParty lk_externalparty_opportunityclose_modifiedby {
            get {
                return GetRelatedEntity<ExternalParty>("lk_externalparty_opportunityclose_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_opportunityclose_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdbyexternalparty")]
        [RelationshipSchemaName("lk_externalparty_opportunityclose_createdby")]
        public ExternalParty lk_externalparty_opportunityclose_createdby {
            get {
                return GetRelatedEntity<ExternalParty>("lk_externalparty_opportunityclose_createdby", null);
            }
            set {
                SetRelatedEntity("lk_externalparty_opportunityclose_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_opportunityclose")]
        public Team team_opportunityclose {
            get {
                return GetRelatedEntity<Team>("team_opportunityclose", null);
            }
            set {
                SetRelatedEntity("team_opportunityclose", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_opportunityclose_modifiedonbehalfby")]
        public SystemUser lk_opportunityclose_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_opportunityclose_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_opportunityclose_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_opportunityclose")]
        public SystemUser user_opportunityclose {
            get {
                return GetRelatedEntity<SystemUser>("user_opportunityclose", null);
            }
            set {
                SetRelatedEntity("user_opportunityclose", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_opportunityclose")]
        public TransactionCurrency transactioncurrency_opportunityclose {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_opportunityclose", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_opportunityclose", null, value);
            }
        }
        
        [RelationshipSchemaName("OpportunityClose_SyncErrors")]
        public IEnumerable<SyncError> OpportunityClose_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("OpportunityClose_SyncErrors", null);
            }
            set {
                SetRelatedEntities("OpportunityClose_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunityclose_activity_parties")]
        public IEnumerable<ActivityParty> opportunityclose_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("opportunityclose_activity_parties", null);
            }
            set {
                SetRelatedEntities("opportunityclose_activity_parties", null, value);
            }
        }
        
        public static OpportunityClose Retrieve(IOrganizationService service, Guid id, params Expression<Func<OpportunityClose,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Top level of the Microsoft Dynamics CRM business hierarchy. The organization can be a specific business, holding company, or corporation.</para>
    /// <para>Display Name: Organization</para>
    /// </summary>
    [EntityLogicalName("organization")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Organization : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "organization";
        
        public const int EntityTypeCode = 1019;
        
        public Organization() : 
                base(EntityLogicalName) {
        }
        
        public Organization(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("organizationid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("organizationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public Guid? OrganizationId {
            get {
                return GetAttributeValue<Guid?>("organizationid");
            }
            set {
                SetId("organizationid", value);
            }
        }
        
        /// <summary>
        /// <para>Prevent upload or download of certain attachment types that are considered dangerous.</para>
        /// <para>Display Name: Block Attachments</para>
        /// </summary>
        [AttributeLogicalName("blockedattachments")]
        public string BlockedAttachments {
            get {
                return GetAttributeValue<string>("blockedattachments");
            }
            set {
                SetAttributeValue("blockedattachments", value);
            }
        }
        
        /// <summary>
        /// <para>Enable or disable mailbox keep alive for Server Side Sync.</para>
        /// <para>Display Name: Is Mailbox Keep Alive Enabled</para>
        /// </summary>
        [AttributeLogicalName("ismailboxinactivebackoffenabled")]
        public bool? IsMailboxInactiveBackoffEnabled {
            get {
                return GetAttributeValue<bool?>("ismailboxinactivebackoffenabled");
            }
            set {
                SetAttributeValue("ismailboxinactivebackoffenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the interval (in seconds) for pausing expansion job.</para>
        /// <para>Display Name: Recurrence Expansion Job Batch Interval</para>
        /// </summary>
        [AttributeLogicalName("recurrenceexpansionjobbatchinterval")]
        public int? RecurrenceExpansionJobBatchInterval {
            get {
                return GetAttributeValue<int?>("recurrenceexpansionjobbatchinterval");
            }
            set {
                SetAttributeValue("recurrenceexpansionjobbatchinterval", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the organization.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Current bulk operation number.</para>
        /// <para>Display Name: Current Bulk Operation Number</para>
        /// </summary>
        [AttributeLogicalName("currentbulkoperationnumber")]
        public int? CurrentBulkOperationNumber {
            get {
                return GetAttributeValue<int?>("currentbulkoperationnumber");
            }
            set {
                SetAttributeValue("currentbulkoperationnumber", value);
            }
        }
        
        /// <summary>
        /// <para>URL for the web page global help.</para>
        /// <para>Display Name: Global Help URL.</para>
        /// </summary>
        [AttributeLogicalName("globalhelpurl")]
        public string GlobalHelpUrl {
            get {
                return GetAttributeValue<string>("globalhelpurl");
            }
            set {
                SetAttributeValue("globalhelpurl", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether Get Started content is enabled for this organization.</para>
        /// <para>Display Name: Is Get Started Pane Content Enabled</para>
        /// </summary>
        [AttributeLogicalName("getstartedpanecontentenabled")]
        public bool? GetStartedPaneContentEnabled {
            get {
                return GetAttributeValue<bool?>("getstartedpanecontentenabled");
            }
            set {
                SetAttributeValue("getstartedpanecontentenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the feature One Drive should be enabled for the organization.</para>
        /// <para>Display Name: Enable One Drive for this Organization</para>
        /// </summary>
        [AttributeLogicalName("isonedriveenabled")]
        public bool? IsOneDriveEnabled {
            get {
                return GetAttributeValue<bool?>("isonedriveenabled");
            }
            set {
                SetAttributeValue("isonedriveenabled", value);
            }
        }
        
        /// <summary>
        /// <para>XML string containing the Knowledge Management settings that are applied in Knowledge Management Wizard.</para>
        /// <para>Display Name: Knowledge Management Settings</para>
        /// </summary>
        [AttributeLogicalName("kmsettings")]
        public string KMSettings {
            get {
                return GetAttributeValue<string>("kmsettings");
            }
            set {
                SetAttributeValue("kmsettings", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the feature CortanaProactiveExperience Flow processes should be enabled for the organization.</para>
        /// <para>Display Name: Enable Cortana Proactive Experience Flow processes for this Organization</para>
        /// </summary>
        [AttributeLogicalName("cortanaproactiveexperienceenabled")]
        public bool? CortanaProactiveExperienceEnabled {
            get {
                return GetAttributeValue<bool?>("cortanaproactiveexperienceenabled");
            }
            set {
                SetAttributeValue("cortanaproactiveexperienceenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the organization.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default group of users in the organization.</para>
        /// <para>Display Name: User Group</para>
        /// </summary>
        [AttributeLogicalName("usergroupid")]
        public Guid? UserGroupId {
            get {
                return GetAttributeValue<Guid?>("usergroupid");
            }
            set {
                SetAttributeValue("usergroupid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to turn on text analytics for the organization.</para>
        /// <para>Display Name: Enable Text Analytics for this Organization</para>
        /// </summary>
        [AttributeLogicalName("textanalyticsenabled")]
        public bool? TextAnalyticsEnabled {
            get {
                return GetAttributeValue<bool?>("textanalyticsenabled");
            }
            set {
                SetAttributeValue("textanalyticsenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Character used to separate the month, the day, and the year in dates throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Date Separator</para>
        /// </summary>
        [AttributeLogicalName("dateseparator")]
        public string DateSeparator {
            get {
                return GetAttributeValue<string>("dateseparator");
            }
            set {
                SetAttributeValue("dateseparator", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the organization was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Base number used to provide separate tracking token identifiers to users belonging to different deployments.</para>
        /// <para>Display Name: Tracking Token Base</para>
        /// </summary>
        [AttributeLogicalName("trackingtokenidbase")]
        public int? TrackingTokenIdBase {
            get {
                return GetAttributeValue<int?>("trackingtokenidbase");
            }
            set {
                SetAttributeValue("trackingtokenidbase", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix used for campaign numbering.</para>
        /// <para>Display Name: Campaign Prefix</para>
        /// </summary>
        [AttributeLogicalName("campaignprefix")]
        public string CampaignPrefix {
            get {
                return GetAttributeValue<string>("campaignprefix");
            }
            set {
                SetAttributeValue("campaignprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Calendar type for the system. Set to Gregorian US by default.</para>
        /// <para>Display Name: Calendar Type</para>
        /// </summary>
        [AttributeLogicalName("calendartype")]
        public int? CalendarType {
            get {
                return GetAttributeValue<int?>("calendartype");
            }
            set {
                SetAttributeValue("calendartype", value);
            }
        }
        
        /// <summary>
        /// <para>Enable or disable attachments sync for outlook and exchange.</para>
        /// <para>Display Name: Is Attachment Sync Enabled</para>
        /// </summary>
        [AttributeLogicalName("isappointmentattachmentsyncenabled")]
        public bool? IsAppointmentAttachmentSyncEnabled {
            get {
                return GetAttributeValue<bool?>("isappointmentattachmentsyncenabled");
            }
            set {
                SetAttributeValue("isappointmentattachmentsyncenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Suffix for the display of the fiscal year.</para>
        /// <para>Display Name: Suffix for Fiscal Year</para>
        /// </summary>
        [AttributeLogicalName("fiscalyearformatsuffix")]
        public Organization_FiscalYearFormatSuffix? FiscalYearFormatSuffix {
            get {
                return GetOptionSetValue<Organization_FiscalYearFormatSuffix>("fiscalyearformatsuffix");
            }
            set {
                SetOptionSetValue("fiscalyearformatsuffix", value);
            }
        }
        
        /// <summary>
        /// <para>Normal polling frequency used for background offline synchronization in Microsoft Office Outlook.</para>
        /// <para>Display Name: Min Offline Synchronization Frequency</para>
        /// </summary>
        [AttributeLogicalName("minofflinesyncinterval")]
        public int? MinOfflineSyncInterval {
            get {
                return GetAttributeValue<int?>("minofflinesyncinterval");
            }
            set {
                SetAttributeValue("minofflinesyncinterval", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether Send As Other User privilege is enabled.</para>
        /// <para>Display Name: Is Approval For Queue Email Required</para>
        /// </summary>
        [AttributeLogicalName("requireapprovalforqueueemail")]
        public bool? RequireApprovalForQueueEmail {
            get {
                return GetAttributeValue<bool?>("requireapprovalforqueueemail");
            }
            set {
                SetAttributeValue("requireapprovalforqueueemail", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the fiscal period is displayed as the month number.</para>
        /// <para>Display Name: Is Fiscal Period Monthly</para>
        /// </summary>
        [AttributeLogicalName("isfiscalperiodmonthbased")]
        public bool? IsFiscalPeriodMonthBased {
            get {
                return GetAttributeValue<bool?>("isfiscalperiodmonthbased");
            }
            set {
                SetAttributeValue("isfiscalperiodmonthbased", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies how the names of the fiscal year and the fiscal period should be connected when displayed together.</para>
        /// <para>Display Name: Fiscal Year Period Connector</para>
        /// </summary>
        [AttributeLogicalName("fiscalyearperiodconnect")]
        public string FiscalYearPeriodConnect {
            get {
                return GetAttributeValue<string>("fiscalyearperiodconnect");
            }
            set {
                SetAttributeValue("fiscalyearperiodconnect", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the maximum number of months in past for which the recurring activities can be created.</para>
        /// <para>Display Name: Past Expansion Window</para>
        /// </summary>
        [AttributeLogicalName("pastexpansionwindow")]
        public int? PastExpansionWindow {
            get {
                return GetAttributeValue<int?>("pastexpansionwindow");
            }
            set {
                SetAttributeValue("pastexpansionwindow", value);
            }
        }
        
        /// <summary>
        /// <para>Normal polling frequency used for address book synchronization in Microsoft Office Outlook.</para>
        /// <para>Display Name: Min Address Synchronization Frequency</para>
        /// </summary>
        [AttributeLogicalName("minaddressbooksyncinterval")]
        public int? MinAddressBookSyncInterval {
            get {
                return GetAttributeValue<int?>("minaddressbooksyncinterval");
            }
            set {
                SetAttributeValue("minaddressbooksyncinterval", value);
            }
        }
        
        /// <summary>
        /// <para>Enable or disable auditing of user access.</para>
        /// <para>Display Name: Is User Access Auditing Enabled</para>
        /// </summary>
        [AttributeLogicalName("isuseraccessauditenabled")]
        public bool? IsUserAccessAuditEnabled {
            get {
                return GetAttributeValue<bool?>("isuseraccessauditenabled");
            }
            set {
                SetAttributeValue("isuseraccessauditenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates default protocol selected for organization.</para>
        /// <para>Display Name: User Skype Protocol</para>
        /// </summary>
        [AttributeLogicalName("useskypeprotocol")]
        public bool? UseSkypeProtocol {
            get {
                return GetAttributeValue<bool?>("useskypeprotocol");
            }
            set {
                SetAttributeValue("useskypeprotocol", value);
            }
        }
        
        /// <summary>
        /// <para>Enable or disable auditing of changes.</para>
        /// <para>Display Name: Is Auditing Enabled</para>
        /// </summary>
        [AttributeLogicalName("isauditenabled")]
        public bool? IsAuditEnabled {
            get {
                return GetAttributeValue<bool?>("isauditenabled");
            }
            set {
                SetAttributeValue("isauditenabled", value);
            }
        }
        
        /// <summary>
        /// <para>First article number to use.</para>
        /// <para>Display Name: Current Article Number</para>
        /// </summary>
        [AttributeLogicalName("currentkbnumber")]
        public int? CurrentKbNumber {
            get {
                return GetAttributeValue<int?>("currentkbnumber");
            }
            set {
                SetAttributeValue("currentkbnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Text for how time is displayed in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Time Format String</para>
        /// </summary>
        [AttributeLogicalName("timeformatstring")]
        public string TimeFormatString {
            get {
                return GetAttributeValue<string>("timeformatstring");
            }
            set {
                SetAttributeValue("timeformatstring", value);
            }
        }
        
        /// <summary>
        /// <para>Setting for SQM data collection, 0 no, 1 yes enabled</para>
        /// <para>Display Name: Is SQM Enabled</para>
        /// </summary>
        [AttributeLogicalName("sqmenabled")]
        public bool? SQMEnabled {
            get {
                return GetAttributeValue<bool?>("sqmenabled");
            }
            set {
                SetAttributeValue("sqmenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix used for parsed tables.</para>
        /// <para>Display Name: Parsed Table Prefix</para>
        /// </summary>
        [AttributeLogicalName("parsedtableprefix")]
        public string ParsedTablePrefix {
            get {
                return GetAttributeValue<string>("parsedtableprefix");
            }
        }
        
        /// <summary>
        /// <para>Default theme data for the organization.</para>
        /// <para>Display Name: Default Theme Data</para>
        /// </summary>
        [AttributeLogicalName("defaultthemedata")]
        public string DefaultThemeData {
            get {
                return GetAttributeValue<string>("defaultthemedata");
            }
            set {
                SetAttributeValue("defaultthemedata", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies how the Long Date format is displayed in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Long Date Format</para>
        /// </summary>
        [AttributeLogicalName("longdateformatcode")]
        public int? LongDateFormatCode {
            get {
                return GetAttributeValue<int?>("longdateformatcode");
            }
            set {
                SetAttributeValue("longdateformatcode", value);
            }
        }
        
        [AttributeLogicalName("pinpointlanguagecode")]
        public int? PinpointLanguageCode {
            get {
                return GetAttributeValue<int?>("pinpointlanguagecode");
            }
            set {
                SetAttributeValue("pinpointlanguagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Flag to render the body of email in the Web form in an IFRAME with the security='restricted' attribute set. This is additional security but can cause a credentials prompt.</para>
        /// <para>Display Name: Render Secure Frame For Email</para>
        /// </summary>
        [AttributeLogicalName("rendersecureiframeforemail")]
        public bool? RenderSecureIFrameForEmail {
            get {
                return GetAttributeValue<bool?>("rendersecureiframeforemail");
            }
            set {
                SetAttributeValue("rendersecureiframeforemail", value);
            }
        }
        
        /// <summary>
        /// <para>Information on whether IM presence is enabled.</para>
        /// <para>Display Name: Presence Enabled</para>
        /// </summary>
        [AttributeLogicalName("ispresenceenabled")]
        public bool? IsPresenceEnabled {
            get {
                return GetAttributeValue<bool?>("ispresenceenabled");
            }
            set {
                SetAttributeValue("ispresenceenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether Outlook Client message bar advertisement is allowed.</para>
        /// <para>Display Name: Allow Outlook Client Message Bar Advertisement</para>
        /// </summary>
        [AttributeLogicalName("allowclientmessagebarad")]
        public bool? AllowClientMessageBarAd {
            get {
                return GetAttributeValue<bool?>("allowclientmessagebarad");
            }
            set {
                SetAttributeValue("allowclientmessagebarad", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether automatic unsubscribe is allowed.</para>
        /// <para>Display Name: Allow Automatic Unsubscribe</para>
        /// </summary>
        [AttributeLogicalName("allowautounsubscribe")]
        public bool? AllowAutoUnsubscribe {
            get {
                return GetAttributeValue<bool?>("allowautounsubscribe");
            }
            set {
                SetAttributeValue("allowautounsubscribe", value);
            }
        }
        
        /// <summary>
        /// <para>Setting for the Async Service Mailbox Queue. Defines the retrieval batch size of exchange server.</para>
        /// <para>Display Name: Exchange Email Retrieval Batch Size</para>
        /// </summary>
        [AttributeLogicalName("incomingemailexchangeemailretrievalbatchsize")]
        public int? IncomingEmailExchangeEmailRetrievalBatchSize {
            get {
                return GetAttributeValue<int?>("incomingemailexchangeemailretrievalbatchsize");
            }
            set {
                SetAttributeValue("incomingemailexchangeemailretrievalbatchsize", value);
            }
        }
        
        /// <summary>
        /// <para>Restrict the maximum number of product properties for a product family/bundle</para>
        /// <para>Display Name: Product Properties Item Limit</para>
        /// </summary>
        [AttributeLogicalName("maximumdynamicpropertiesallowed")]
        public int? MaximumDynamicPropertiesAllowed {
            get {
                return GetAttributeValue<int?>("maximumdynamicpropertiesallowed");
            }
            set {
                SetAttributeValue("maximumdynamicpropertiesallowed", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the template to be used for unsubscription acknowledgement.</para>
        /// </summary>
        [AttributeLogicalName("acknowledgementtemplateidname")]
        public string AcknowledgementTemplateIdName {
            get {
                return GetAttributeValue<string>("acknowledgementtemplateidname");
            }
        }
        
        /// <summary>
        /// <para>Plug-in Trace Log Setting for the Organization.</para>
        /// <para>Display Name: Plug-in Trace Log Setting</para>
        /// </summary>
        [AttributeLogicalName("plugintracelogsetting")]
        public Organization_PluginTraceLogSetting? PluginTraceLogSetting {
            get {
                return GetOptionSetValue<Organization_PluginTraceLogSetting>("plugintracelogsetting");
            }
            set {
                SetOptionSetValue("plugintracelogsetting", value);
            }
        }
        
        /// <summary>
        /// <para>Discount calculation method for the QOOI product.</para>
        /// <para>Display Name: Discount calculation method</para>
        /// </summary>
        [AttributeLogicalName("discountcalculationmethod")]
        public Organization_DiscountCalculationMethod? DiscountCalculationMethod {
            get {
                return GetOptionSetValue<Organization_DiscountCalculationMethod>("discountcalculationmethod");
            }
            set {
                SetOptionSetValue("discountcalculationmethod", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether session timeout is enabled</para>
        /// <para>Display Name: Session timeout enabled</para>
        /// </summary>
        [AttributeLogicalName("sessiontimeoutenabled")]
        public bool? SessionTimeoutEnabled {
            get {
                return GetAttributeValue<bool?>("sessiontimeoutenabled");
            }
            set {
                SetAttributeValue("sessiontimeoutenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Format for the year.</para>
        /// <para>Display Name: Fiscal Year Format Year</para>
        /// </summary>
        [AttributeLogicalName("fiscalyearformatyear")]
        public Organization_FiscalYearFormatYear? FiscalYearFormatYear {
            get {
                return GetOptionSetValue<Organization_FiscalYearFormatYear>("fiscalyearformatyear");
            }
            set {
                SetOptionSetValue("fiscalyearformatyear", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of mailboxes that can be toggled for verbose logging</para>
        /// <para>Display Name: Max No Of Mailboxes To Enable For Verbose Logging</para>
        /// </summary>
        [AttributeLogicalName("maxverboseloggingmailbox")]
        public int? MaxVerboseLoggingMailbox {
            get {
                return GetAttributeValue<int?>("maxverboseloggingmailbox");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the organization.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the customizable global help is enabled.</para>
        /// <para>Display Name: Is Customizable Global Help enabled</para>
        /// </summary>
        [AttributeLogicalName("globalhelpurlenabled")]
        public bool? GlobalHelpUrlEnabled {
            get {
                return GetAttributeValue<bool?>("globalhelpurlenabled");
            }
            set {
                SetAttributeValue("globalhelpurlenabled", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Prefix to use for all quotes throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Quote Prefix</para>
        /// </summary>
        [AttributeLogicalName("quoteprefix")]
        public string QuotePrefix {
            get {
                return GetAttributeValue<string>("quoteprefix");
            }
            set {
                SetAttributeValue("quoteprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Privacy Statement URL</para>
        /// <para>Display Name: Privacy Statement URL</para>
        /// </summary>
        [AttributeLogicalName("privacystatementurl")]
        public string PrivacyStatementUrl {
            get {
                return GetAttributeValue<string>("privacystatementurl");
            }
            set {
                SetAttributeValue("privacystatementurl", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the organization. The name is set when Microsoft CRM is installed and should not be changed.</para>
        /// <para>Display Name: Organization Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>AM designator to use throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: AM Designator</para>
        /// </summary>
        [AttributeLogicalName("amdesignator")]
        public string AMDesignator {
            get {
                return GetAttributeValue<string>("amdesignator");
            }
            set {
                SetAttributeValue("amdesignator", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the feature MobileOffline should be enabled for the organization.</para>
        /// <para>Display Name: Enable MobileOffline for this Organization</para>
        /// </summary>
        [AttributeLogicalName("ismobileofflineenabled")]
        public bool? IsMobileOfflineEnabled {
            get {
                return GetAttributeValue<bool?>("ismobileofflineenabled");
            }
            set {
                SetAttributeValue("ismobileofflineenabled", value);
            }
        }
        
        /// <summary>
        /// <para>The interval at which user access is checked for auditing.</para>
        /// <para>Display Name: User Authentication Auditing Interval</para>
        /// </summary>
        [AttributeLogicalName("useraccessauditinginterval")]
        public int? UserAccessAuditingInterval {
            get {
                return GetAttributeValue<int?>("useraccessauditinginterval");
            }
            set {
                SetAttributeValue("useraccessauditinginterval", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of days an appointment can last.</para>
        /// <para>Display Name: Max Appointment Duration</para>
        /// </summary>
        [AttributeLogicalName("maxappointmentdurationdays")]
        public int? MaxAppointmentDurationDays {
            get {
                return GetAttributeValue<int?>("maxappointmentdurationdays");
            }
            set {
                SetAttributeValue("maxappointmentdurationdays", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of active business process flows allowed per entity</para>
        /// <para>Display Name: Maximum active business process flows per entity</para>
        /// </summary>
        [AttributeLogicalName("maximumactivebusinessprocessflowsallowedperentity")]
        public int? MaximumActiveBusinessProcessFlowsAllowedPerEntity {
            get {
                return GetAttributeValue<int?>("maximumactivebusinessprocessflowsallowedperentity");
            }
            set {
                SetAttributeValue("maximumactivebusinessprocessflowsallowedperentity", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of aggressive polling cycles executed for email auto-tagging when a new email is received.</para>
        /// <para>Display Name: Auto-Tag Max Cycles</para>
        /// </summary>
        [AttributeLogicalName("tagmaxaggressivecycles")]
        public int? TagMaxAggressiveCycles {
            get {
                return GetAttributeValue<int?>("tagmaxaggressivecycles");
            }
            set {
                SetAttributeValue("tagmaxaggressivecycles", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the system user for the organization.</para>
        /// <para>Display Name: System User</para>
        /// </summary>
        [AttributeLogicalName("systemuserid")]
        public Guid? SystemUserId {
            get {
                return GetAttributeValue<Guid?>("systemuserid");
            }
            set {
                SetAttributeValue("systemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the sample data import job.</para>
        /// <para>Display Name: Sample Data Import</para>
        /// </summary>
        [AttributeLogicalName("sampledataimportid")]
        public Guid? SampleDataImportId {
            get {
                return GetAttributeValue<Guid?>("sampledataimportid");
            }
            set {
                SetAttributeValue("sampledataimportid", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether Inactivity timeout is enabled</para>
        /// <para>Display Name: Inactivity timeout enabled</para>
        /// </summary>
        [AttributeLogicalName("inactivitytimeoutenabled")]
        public bool? InactivityTimeoutEnabled {
            get {
                return GetAttributeValue<bool?>("inactivitytimeoutenabled");
            }
            set {
                SetAttributeValue("inactivitytimeoutenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of lookup and picklist records that can be selected by user for filtering.</para>
        /// <para>Display Name: Max Records Filter Selection</para>
        /// </summary>
        [AttributeLogicalName("maxrecordsforlookupfilters")]
        public int? MaxRecordsForLookupFilters {
            get {
                return GetAttributeValue<int?>("maxrecordsforlookupfilters");
            }
            set {
                SetAttributeValue("maxrecordsforlookupfilters", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether the fiscal settings have been updated.</para>
        /// <para>Display Name: Is Fiscal Settings Updated</para>
        /// </summary>
        [AttributeLogicalName("fiscalsettingsupdated")]
        public bool? FiscalSettingsUpdated {
            get {
                return GetAttributeValue<bool?>("fiscalsettingsupdated");
            }
        }
        
        /// <summary>
        /// <para>Enable Initial state of newly created products to be Active instead of Draft</para>
        /// <para>Display Name: Enable Active Initial Product State</para>
        /// </summary>
        [AttributeLogicalName("createproductswithoutparentinactivestate")]
        public bool? CreateProductsWithoutParentInActiveState {
            get {
                return GetAttributeValue<bool?>("createproductswithoutparentinactivestate");
            }
            set {
                SetAttributeValue("createproductswithoutparentinactivestate", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the first number to use for Categories.</para>
        /// <para>Display Name: Current Category Number</para>
        /// </summary>
        [AttributeLogicalName("currentcategorynumber")]
        public int? CurrentCategoryNumber {
            get {
                return GetAttributeValue<int?>("currentcategorynumber");
            }
            set {
                SetAttributeValue("currentcategorynumber", value);
            }
        }
        
        /// <summary>
        /// <para>Information about how the date is displayed throughout Microsoft CRM.</para>
        /// <para>Display Name: Date Format Code</para>
        /// </summary>
        [AttributeLogicalName("dateformatcode")]
        public Object DateFormatCode {
            get {
                return GetAttributeValue<Object>("dateformatcode");
            }
            set {
                SetAttributeValue("dateformatcode", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of subject keywords or recipients used for correlation</para>
        /// <para>Display Name: Hash Max Count</para>
        /// </summary>
        [AttributeLogicalName("hashmaxcount")]
        public int? HashMaxCount {
            get {
                return GetAttributeValue<int?>("hashmaxcount");
            }
            set {
                SetAttributeValue("hashmaxcount", value);
            }
        }
        
        /// <summary>
        /// <para>Flag to cascade Update on incident.</para>
        /// <para>Display Name: Cascade Status Update</para>
        /// </summary>
        [AttributeLogicalName("cascadestatusupdate")]
        public bool? CascadeStatusUpdate {
            get {
                return GetAttributeValue<bool?>("cascadestatusupdate");
            }
            set {
                SetAttributeValue("cascadestatusupdate", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred language for the organization.</para>
        /// <para>Display Name: Language</para>
        /// </summary>
        [AttributeLogicalName("languagecode")]
        public int? LanguageCode {
            get {
                return GetAttributeValue<int?>("languagecode");
            }
            set {
                SetAttributeValue("languagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the feature OfficeGraph should be enabled for the organization.</para>
        /// <para>Display Name: Enable OfficeGraph for this Organization</para>
        /// </summary>
        [AttributeLogicalName("isofficegraphenabled")]
        public bool? IsOfficeGraphEnabled {
            get {
                return GetAttributeValue<bool?>("isofficegraphenabled");
            }
            set {
                SetAttributeValue("isofficegraphenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether scheduled synchronizations to Outlook are allowed.</para>
        /// <para>Display Name: Allow Scheduled Synchronization</para>
        /// </summary>
        [AttributeLogicalName("allowoutlookscheduledsyncs")]
        public bool? AllowOutlookScheduledSyncs {
            get {
                return GetAttributeValue<bool?>("allowoutlookscheduledsyncs");
            }
            set {
                SetAttributeValue("allowoutlookscheduledsyncs", value);
            }
        }
        
        /// <summary>
        /// <para>Type the prefix to use for all knowledge articles in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Knowledge Article Prefix</para>
        /// </summary>
        [AttributeLogicalName("kaprefix")]
        public string KaPrefix {
            get {
                return GetAttributeValue<string>("kaprefix");
            }
            set {
                SetAttributeValue("kaprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the organization.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the feature Action Hub should be enabled for the organization.</para>
        /// <para>Display Name: Enable Action Hub for this Organization</para>
        /// </summary>
        [AttributeLogicalName("isdelveactionhubintegrationenabled")]
        public bool? IsDelveActionHubIntegrationEnabled {
            get {
                return GetAttributeValue<bool?>("isdelveactionhubintegrationenabled");
            }
            set {
                SetAttributeValue("isdelveactionhubintegrationenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default privilege for users in the organization.</para>
        /// <para>Display Name: Privilege User Group</para>
        /// </summary>
        [AttributeLogicalName("privilegeusergroupid")]
        public Guid? PrivilegeUserGroupId {
            get {
                return GetAttributeValue<Guid?>("privilegeusergroupid");
            }
            set {
                SetAttributeValue("privilegeusergroupid", value);
            }
        }
        
        /// <summary>
        /// <para>Symbol used for the base currency.</para>
        /// <para>Display Name: Base Currency Symbol</para>
        /// </summary>
        [AttributeLogicalName("basecurrencysymbol")]
        public string BaseCurrencySymbol {
            get {
                return GetAttributeValue<string>("basecurrencysymbol");
            }
        }
        
        /// <summary>
        /// <para>XML string that defines the navigation structure for the application.</para>
        /// <para>Display Name: SiteMap XML</para>
        /// </summary>
        [AttributeLogicalName("sitemapxml")]
        public string SiteMapXml {
            get {
                return GetAttributeValue<string>("sitemapxml");
            }
            set {
                SetAttributeValue("sitemapxml", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the maximum number of months in future for which the recurring activities can be created.</para>
        /// <para>Display Name: Future Expansion Window</para>
        /// </summary>
        [AttributeLogicalName("futureexpansionwindow")]
        public int? FutureExpansionWindow {
            get {
                return GetAttributeValue<int?>("futureexpansionwindow");
            }
            set {
                SetAttributeValue("futureexpansionwindow", value);
            }
        }
        
        /// <summary>
        /// <para>Symbol used for currency throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Currency Symbol</para>
        /// </summary>
        [AttributeLogicalName("currencysymbol")]
        public string CurrencySymbol {
            get {
                return GetAttributeValue<string>("currencysymbol");
            }
            set {
                SetAttributeValue("currencysymbol", value);
            }
        }
        
        /// <summary>
        /// <para>Number of digits used to represent a tracking token identifier.</para>
        /// <para>Display Name: Tracking Token Digits</para>
        /// </summary>
        [AttributeLogicalName("trackingtokeniddigits")]
        public int? TrackingTokenIdDigits {
            get {
                return GetAttributeValue<int?>("trackingtokeniddigits");
            }
            set {
                SetAttributeValue("trackingtokeniddigits", value);
            }
        }
        
        /// <summary>
        /// <para>Information on whether auto save is enabled.</para>
        /// <para>Display Name: Auto Save Enabled</para>
        /// </summary>
        [AttributeLogicalName("isautosaveenabled")]
        public bool? IsAutoSaveEnabled {
            get {
                return GetAttributeValue<bool?>("isautosaveenabled");
            }
            set {
                SetAttributeValue("isautosaveenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Hash of the V3 callout configuration file.</para>
        /// <para>Display Name: V3 Callout Hash</para>
        /// </summary>
        [AttributeLogicalName("v3calloutconfighash")]
        public string V3CalloutConfigHash {
            get {
                return GetAttributeValue<string>("v3calloutconfighash");
            }
        }
        
        /// <summary>
        /// <para>The url to open the Delve for the organization.</para>
        /// <para>Display Name: The url to open the Delve</para>
        /// </summary>
        [AttributeLogicalName("officegraphdelveurl")]
        public string OfficeGraphDelveUrl {
            get {
                return GetAttributeValue<string>("officegraphdelveurl");
            }
            set {
                SetAttributeValue("officegraphdelveurl", value);
            }
        }
        
        /// <summary>
        /// <para>Specification of how numbers are displayed throughout Microsoft CRM.</para>
        /// <para>Display Name: Number Format</para>
        /// </summary>
        [AttributeLogicalName("numberformat")]
        public string NumberFormat {
            get {
                return GetAttributeValue<string>("numberformat");
            }
            set {
                SetAttributeValue("numberformat", value);
            }
        }
        
        /// <summary>
        /// <para>XML string containing the default email settings that are applied when a user or queue is created.</para>
        /// <para>Display Name: Default Email Settings</para>
        /// </summary>
        [AttributeLogicalName("defaultemailsettings")]
        public string DefaultEmailSettings {
            get {
                return GetAttributeValue<string>("defaultemailsettings");
            }
            set {
                SetAttributeValue("defaultemailsettings", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the default mobile offline profile to be used as default profile for mobile offline.</para>
        /// </summary>
        [AttributeLogicalName("defaultmobileofflineprofileidname")]
        public string DefaultMobileOfflineProfileIdName {
            get {
                return GetAttributeValue<string>("defaultmobileofflineprofileidname");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether auditing of changes to entity is allowed when no attributes have changed.</para>
        /// <para>Display Name: Allow Entity Level Auditing</para>
        /// </summary>
        [AttributeLogicalName("allowentityonlyaudit")]
        public bool? AllowEntityOnlyAudit {
            get {
                return GetAttributeValue<bool?>("allowentityonlyaudit");
            }
            set {
                SetAttributeValue("allowentityonlyaudit", value);
            }
        }
        
        /// <summary>
        /// <para>Denotes the Yammer group ID</para>
        /// <para>Display Name: Yammer Group Id</para>
        /// </summary>
        [AttributeLogicalName("yammergroupid")]
        public int? YammerGroupId {
            get {
                return GetAttributeValue<int?>("yammergroupid");
            }
            set {
                SetAttributeValue("yammergroupid", value);
            }
        }
        
        /// <summary>
        /// <para>Identifier for the Social Insights instance for the organization.</para>
        /// <para>Display Name: Social Insights instance identifier</para>
        /// </summary>
        [AttributeLogicalName("socialinsightsinstance")]
        public string SocialInsightsInstance {
            get {
                return GetAttributeValue<string>("socialinsightsinstance");
            }
            set {
                SetAttributeValue("socialinsightsinstance", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to auto apply the default customer entitlement on case creation.</para>
        /// <para>Display Name: Auto Apply Default Entitlement on Case Create</para>
        /// </summary>
        [AttributeLogicalName("autoapplydefaultoncasecreate")]
        public bool? AutoApplyDefaultonCaseCreate {
            get {
                return GetAttributeValue<bool?>("autoapplydefaultoncasecreate");
            }
            set {
                SetAttributeValue("autoapplydefaultoncasecreate", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: SQL Access Group Name</para>
        /// </summary>
        [AttributeLogicalName("sqlaccessgroupname")]
        public string SqlAccessGroupName {
            get {
                return GetAttributeValue<string>("sqlaccessgroupname");
            }
            set {
                SetAttributeValue("sqlaccessgroupname", value);
            }
        }
        
        /// <summary>
        /// <para>First case number to use.</para>
        /// <para>Display Name: Current Case Number</para>
        /// </summary>
        [AttributeLogicalName("currentcasenumber")]
        public int? CurrentCaseNumber {
            get {
                return GetAttributeValue<int?>("currentcasenumber");
            }
            set {
                SetAttributeValue("currentcasenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of sync cycles for which verbose logging will be enabled by default</para>
        /// <para>Display Name: Maximum number of sync cycles for which verbose logging will be enabled by default</para>
        /// </summary>
        [AttributeLogicalName("maxverboseloggingsynccycles")]
        public int? MaxVerboseLoggingSyncCycles {
            get {
                return GetAttributeValue<int?>("maxverboseloggingsynccycles");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Privilege Reporting Group</para>
        /// </summary>
        [AttributeLogicalName("privreportinggroupid")]
        public Guid? PrivReportingGroupId {
            get {
                return GetAttributeValue<Guid?>("privreportinggroupid");
            }
            set {
                SetAttributeValue("privreportinggroupid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether background address book synchronization in Microsoft Office Outlook is allowed.</para>
        /// <para>Display Name: Allow Address Book Synchronization</para>
        /// </summary>
        [AttributeLogicalName("allowaddressbooksyncs")]
        public bool? AllowAddressBookSyncs {
            get {
                return GetAttributeValue<bool?>("allowaddressbooksyncs");
            }
            set {
                SetAttributeValue("allowaddressbooksyncs", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the first number to use for knowledge articles.</para>
        /// <para>Display Name: Current Knowledge Article Number</para>
        /// </summary>
        [AttributeLogicalName("currentkanumber")]
        public int? CurrentKaNumber {
            get {
                return GetAttributeValue<int?>("currentkanumber");
            }
            set {
                SetAttributeValue("currentkanumber", value);
            }
        }
        
        /// <summary>
        /// <para>Inactivity timeout in minutes</para>
        /// <para>Display Name: Inactivity timeout in minutes</para>
        /// </summary>
        [AttributeLogicalName("inactivitytimeoutinmins")]
        public int? InactivityTimeoutInMins {
            get {
                return GetAttributeValue<int?>("inactivitytimeoutinmins");
            }
            set {
                SetAttributeValue("inactivitytimeoutinmins", value);
            }
        }
        
        /// <summary>
        /// <para>Select if you want to use the Email Router or server-side synchronization for email processing.</para>
        /// <para>Display Name: Email Connection Channel</para>
        /// </summary>
        [AttributeLogicalName("emailconnectionchannel")]
        public Organization_EmailConnectionChannel? EmailConnectionChannel {
            get {
                return GetOptionSetValue<Organization_EmailConnectionChannel>("emailconnectionchannel");
            }
            set {
                SetOptionSetValue("emailconnectionchannel", value);
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Specifies the value for number of instances created in on demand job in one shot.</para>
        /// <para>Display Name: Recurrence Expansion On Demand Job Batch Size</para>
        /// </summary>
        [AttributeLogicalName("recurrenceexpansionjobbatchsize")]
        public int? RecurrenceExpansionJobBatchSize {
            get {
                return GetAttributeValue<int?>("recurrenceexpansionjobbatchsize");
            }
            set {
                SetAttributeValue("recurrenceexpansionjobbatchsize", value);
            }
        }
        
        /// <summary>
        /// <para>Enable or disable mailing address sync for outlook and exchange.</para>
        /// <para>Display Name: Is Mailing Address Sync Enabled</para>
        /// </summary>
        [AttributeLogicalName("iscontactmailingaddresssyncenabled")]
        public bool? IsContactMailingAddressSyncEnabled {
            get {
                return GetAttributeValue<bool?>("iscontactmailingaddresssyncenabled");
            }
            set {
                SetAttributeValue("iscontactmailingaddresssyncenabled", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Format in which the fiscal period will be displayed.</para>
        /// <para>Display Name: Format for Fiscal Period</para>
        /// </summary>
        [AttributeLogicalName("fiscalperiodformatperiod")]
        public Organization_FiscalPeriodFormatPeriod? FiscalPeriodFormatPeriod {
            get {
                return GetOptionSetValue<Organization_FiscalPeriodFormatPeriod>("fiscalperiodformatperiod");
            }
            set {
                SetOptionSetValue("fiscalperiodformatperiod", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of SLA KPI per active SLA allowed for entity in online</para>
        /// <para>Display Name: Maximum number of active SLA KPI allowed per entity in online</para>
        /// </summary>
        [AttributeLogicalName("maximumslakpiperentitywithactivesla")]
        public int? MaximumSLAKPIPerEntityWithActiveSLA {
            get {
                return GetAttributeValue<int?>("maximumslakpiperentitywithactivesla");
            }
            set {
                SetAttributeValue("maximumslakpiperentitywithactivesla", value);
            }
        }
        
        /// <summary>
        /// <para>Duration used for token expiration.</para>
        /// <para>Display Name: Token Expiration Duration</para>
        /// </summary>
        [AttributeLogicalName("tokenexpiry")]
        public int? TokenExpiry {
            get {
                return GetAttributeValue<int?>("tokenexpiry");
            }
            set {
                SetAttributeValue("tokenexpiry", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the integration user for the organization.</para>
        /// <para>Display Name: Integration User</para>
        /// </summary>
        [AttributeLogicalName("integrationuserid")]
        public Guid? IntegrationUserId {
            get {
                return GetAttributeValue<Guid?>("integrationuserid");
            }
            set {
                SetAttributeValue("integrationuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Lower Threshold For Mailbox Permanent Issue.</para>
        /// <para>Display Name: Lower Threshold For Mailbox Permanent Issue.</para>
        /// </summary>
        [AttributeLogicalName("mailboxpermanentissueminrange")]
        public int? MailboxPermanentIssueMinRange {
            get {
                return GetAttributeValue<int?>("mailboxpermanentissueminrange");
            }
            set {
                SetAttributeValue("mailboxpermanentissueminrange", value);
            }
        }
        
        /// <summary>
        /// <para>Number of days after the goal's end date after which the rollup of the goal stops automatically.</para>
        /// <para>Display Name: Rollup Expiration Time for Goal</para>
        /// </summary>
        [AttributeLogicalName("goalrollupexpirytime")]
        public int? GoalRollupExpiryTime {
            get {
                return GetAttributeValue<int?>("goalrollupexpirytime");
            }
            set {
                SetAttributeValue("goalrollupexpirytime", value);
            }
        }
        
        /// <summary>
        /// <para>Features to be enabled as an XML BLOB.</para>
        /// <para>Display Name: Feature Set</para>
        /// </summary>
        [AttributeLogicalName("featureset")]
        public string FeatureSet {
            get {
                return GetAttributeValue<string>("featureset");
            }
            set {
                SetAttributeValue("featureset", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to display a KB article deprecation notification to the user.</para>
        /// <para>Display Name: Show KBArticle deprecation message to user</para>
        /// </summary>
        [AttributeLogicalName("showkbarticledeprecationnotification")]
        public bool? ShowKBArticleDeprecationNotification {
            get {
                return GetAttributeValue<bool?>("showkbarticledeprecationnotification");
            }
            set {
                SetAttributeValue("showkbarticledeprecationnotification", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies how negative currency numbers are displayed throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Negative Currency Format</para>
        /// </summary>
        [AttributeLogicalName("negativecurrencyformatcode")]
        public int? NegativeCurrencyFormatCode {
            get {
                return GetAttributeValue<int?>("negativecurrencyformatcode");
            }
            set {
                SetAttributeValue("negativecurrencyformatcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the prefix to use for all categories in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Category Prefix</para>
        /// </summary>
        [AttributeLogicalName("categoryprefix")]
        public string CategoryPrefix {
            get {
                return GetAttributeValue<string>("categoryprefix");
            }
            set {
                SetAttributeValue("categoryprefix", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Privilege Reporting Group Name</para>
        /// </summary>
        [AttributeLogicalName("privreportinggroupname")]
        public string PrivReportingGroupName {
            get {
                return GetAttributeValue<string>("privreportinggroupname");
            }
            set {
                SetAttributeValue("privreportinggroupname", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the Power BI feature should be enabled for the organization.</para>
        /// <para>Display Name: Enable Power BI feature for this Organization</para>
        /// </summary>
        [AttributeLogicalName("powerbifeatureenabled")]
        public bool? PowerBiFeatureEnabled {
            get {
                return GetAttributeValue<bool?>("powerbifeatureenabled");
            }
            set {
                SetAttributeValue("powerbifeatureenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Flag to restrict Update on incident.</para>
        /// <para>Display Name: Restrict Status Update</para>
        /// </summary>
        [AttributeLogicalName("restrictstatusupdate")]
        public bool? RestrictStatusUpdate {
            get {
                return GetAttributeValue<bool?>("restrictstatusupdate");
            }
            set {
                SetAttributeValue("restrictstatusupdate", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default email server profile.</para>
        /// <para>Display Name: Email Server Profile</para>
        /// </summary>
        [AttributeLogicalName("defaultemailserverprofileid")]
        public EntityReference DefaultEmailServerProfileId {
            get {
                return GetAttributeValue<EntityReference>("defaultemailserverprofileid");
            }
            set {
                SetAttributeValue("defaultemailserverprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Flag for whether the organization is using Social Insights.</para>
        /// <para>Display Name: Social Insights Enabled</para>
        /// </summary>
        [AttributeLogicalName("socialinsightsenabled")]
        public bool? SocialInsightsEnabled {
            get {
                return GetAttributeValue<bool?>("socialinsightsenabled");
            }
            set {
                SetAttributeValue("socialinsightsenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether duplicate detection of records is enabled.</para>
        /// <para>Display Name: Is Duplicate Detection Enabled</para>
        /// </summary>
        [AttributeLogicalName("isduplicatedetectionenabled")]
        public bool? IsDuplicateDetectionEnabled {
            get {
                return GetAttributeValue<bool?>("isduplicatedetectionenabled");
            }
            set {
                SetAttributeValue("isduplicatedetectionenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether to Auto-apply SLA on case record update after SLA was manually applied.</para>
        /// <para>Display Name: Is Auto-apply SLA After Manually Over-riding</para>
        /// </summary>
        [AttributeLogicalName("autoapplysla")]
        public bool? AutoApplySLA {
            get {
                return GetAttributeValue<bool?>("autoapplysla");
            }
            set {
                SetAttributeValue("autoapplysla", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix for the display of the fiscal year.</para>
        /// <para>Display Name: Prefix for Fiscal Year</para>
        /// </summary>
        [AttributeLogicalName("fiscalyearformatprefix")]
        public Organization_FiscalYearFormatPrefix? FiscalYearFormatPrefix {
            get {
                return GetOptionSetValue<Organization_FiscalYearFormatPrefix>("fiscalyearformatprefix");
            }
            set {
                SetOptionSetValue("fiscalyearformatprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Information about how currency symbols are placed throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Currency Format Code</para>
        /// </summary>
        [AttributeLogicalName("currencyformatcode")]
        public Organization_CurrencyFormatCode? CurrencyFormatCode {
            get {
                return GetOptionSetValue<Organization_CurrencyFormatCode>("currencyformatcode");
            }
            set {
                SetOptionSetValue("currencyformatcode", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of records that will be exported to a static Microsoft Office Excel worksheet when exporting from the grid.</para>
        /// <para>Display Name: Max Records For Excel Export</para>
        /// </summary>
        [AttributeLogicalName("maxrecordsforexporttoexcel")]
        public int? MaxRecordsForExportToExcel {
            get {
                return GetAttributeValue<int?>("maxrecordsforexporttoexcel");
            }
            set {
                SetAttributeValue("maxrecordsforexporttoexcel", value);
            }
        }
        
        /// <summary>
        /// <para>XML string containing the ExternalPartyEnabled entities settings.</para>
        /// <para>Display Name: ExternalPartyEnabled Entities Settings.For internal use only</para>
        /// </summary>
        [AttributeLogicalName("externalpartyentitysettings")]
        public string ExternalPartyEntitySettings {
            get {
                return GetAttributeValue<string>("externalpartyentitysettings");
            }
            set {
                SetAttributeValue("externalpartyentitysettings", value);
            }
        }
        
        /// <summary>
        /// <para>Enable Delegation Access content</para>
        /// <para>Display Name: Is Delegation Access Enabled</para>
        /// </summary>
        [AttributeLogicalName("isdelegateaccessenabled")]
        public bool? IsDelegateAccessEnabled {
            get {
                return GetAttributeValue<bool?>("isdelegateaccessenabled");
            }
            set {
                SetAttributeValue("isdelegateaccessenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether loading of Microsoft Dynamics CRM in a browser window that does not have address, tool, and menu bars is enabled.</para>
        /// <para>Display Name: Is Application Mode Enabled</para>
        /// </summary>
        [AttributeLogicalName("isappmode")]
        public bool? IsAppMode {
            get {
                return GetAttributeValue<bool?>("isappmode");
            }
            set {
                SetAttributeValue("isappmode", value);
            }
        }
        
        /// <summary>
        /// <para>Enable OOB pricing calculation logic for Opportunity, Quote, Order and Invoice entities.</para>
        /// <para>Display Name: Enable OOB Price calculation</para>
        /// </summary>
        [AttributeLogicalName("oobpricecalculationenabled")]
        public bool? OOBPriceCalculationEnabled {
            get {
                return GetAttributeValue<bool?>("oobpricecalculationenabled");
            }
            set {
                SetAttributeValue("oobpricecalculationenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Enable Email Server Profile content filtering</para>
        /// <para>Display Name: Is Email Server Profile Content Filtering Enabled</para>
        /// </summary>
        [AttributeLogicalName("isemailserverprofilecontentfilteringenabled")]
        public bool? IsEmailServerProfileContentFilteringEnabled {
            get {
                return GetAttributeValue<bool?>("isemailserverprofilecontentfilteringenabled");
            }
            set {
                SetAttributeValue("isemailserverprofilecontentfilteringenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether to display money fields with currency code or currency symbol.</para>
        /// <para>Display Name: Display Currencies Using</para>
        /// </summary>
        [AttributeLogicalName("currencydisplayoption")]
        public Organization_CurrencyDisplayOption? CurrencyDisplayOption {
            get {
                return GetOptionSetValue<Organization_CurrencyDisplayOption>("currencydisplayoption");
            }
            set {
                SetOptionSetValue("currencydisplayoption", value);
            }
        }
        
        /// <summary>
        /// <para>Enable sales order processing integration.</para>
        /// <para>Display Name: Is Sales Order Integration Enabled</para>
        /// </summary>
        [AttributeLogicalName("issopintegrationenabled")]
        public bool? IsSOPIntegrationEnabled {
            get {
                return GetAttributeValue<bool?>("issopintegrationenabled");
            }
            set {
                SetAttributeValue("issopintegrationenabled", value);
            }
        }
        
        [AttributeLogicalName("basecurrencyidname")]
        public string BaseCurrencyIdName {
            get {
                return GetAttributeValue<string>("basecurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Enable or disable forced unlocking for Server Side Sync mailboxes.</para>
        /// <para>Display Name: Is Mailbox Forced Unlocking Enabled</para>
        /// </summary>
        [AttributeLogicalName("ismailboxforcedunlockingenabled")]
        public bool? IsMailboxForcedUnlockingEnabled {
            get {
                return GetAttributeValue<bool?>("ismailboxforcedunlockingenabled");
            }
            set {
                SetAttributeValue("ismailboxforcedunlockingenabled", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether the organization is disabled.</para>
        /// <para>Display Name: Is Organization Disabled</para>
        /// </summary>
        [AttributeLogicalName("isdisabled")]
        public bool? IsDisabled {
            get {
                return GetAttributeValue<bool?>("isdisabled");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether alerts will be generated for errors.</para>
        /// <para>Display Name: Generate Alerts For Errors</para>
        /// </summary>
        [AttributeLogicalName("generatealertsforerrors")]
        public bool? GenerateAlertsForErrors {
            get {
                return GetAttributeValue<bool?>("generatealertsforerrors");
            }
            set {
                SetAttributeValue("generatealertsforerrors", value);
            }
        }
        
        /// <summary>
        /// <para>Enable or disable country code selection.</para>
        /// <para>Display Name: Enable or disable country code selection</para>
        /// </summary>
        [AttributeLogicalName("isdefaultcountrycodecheckenabled")]
        public bool? IsDefaultCountryCodeCheckEnabled {
            get {
                return GetAttributeValue<bool?>("isdefaultcountrycodecheckenabled");
            }
            set {
                SetAttributeValue("isdefaultcountrycodecheckenabled", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Reporting Group Name</para>
        /// </summary>
        [AttributeLogicalName("reportinggroupname")]
        public string ReportingGroupName {
            get {
                return GetAttributeValue<string>("reportinggroupname");
            }
            set {
                SetAttributeValue("reportinggroupname", value);
            }
        }
        
        /// <summary>
        /// <para>Minimum allowed time between scheduled Outlook synchronizations.</para>
        /// <para>Display Name: Min Synchronization Frequency</para>
        /// </summary>
        [AttributeLogicalName("minoutlooksyncinterval")]
        public int? MinOutlookSyncInterval {
            get {
                return GetAttributeValue<int?>("minoutlooksyncinterval");
            }
            set {
                SetAttributeValue("minoutlooksyncinterval", value);
            }
        }
        
        /// <summary>
        /// <para>Next token to be placed on the subject line of an email message.</para>
        /// <para>Display Name: Next Tracking Number</para>
        /// </summary>
        [AttributeLogicalName("nexttrackingnumber")]
        public int? NextTrackingNumber {
            get {
                return GetAttributeValue<int?>("nexttrackingnumber");
            }
            set {
                SetAttributeValue("nexttrackingnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Text area to enter default country code.</para>
        /// <para>Display Name: Default Country Code</para>
        /// </summary>
        [AttributeLogicalName("defaultcountrycode")]
        public string DefaultCountryCode {
            get {
                return GetAttributeValue<string>("defaultcountrycode");
            }
            set {
                SetAttributeValue("defaultcountrycode", value);
            }
        }
        
        /// <summary>
        /// <para>Session timeout reminder in minutes</para>
        /// <para>Display Name: Session timeout reminder in minutes</para>
        /// </summary>
        [AttributeLogicalName("sessiontimeoutreminderinmins")]
        public int? SessionTimeoutReminderInMins {
            get {
                return GetAttributeValue<int?>("sessiontimeoutreminderinmins");
            }
            set {
                SetAttributeValue("sessiontimeoutreminderinmins", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether to display the week number in calendar displays throughout Microsoft CRM.</para>
        /// <para>Display Name: Show Week Number</para>
        /// </summary>
        [AttributeLogicalName("showweeknumber")]
        public bool? ShowWeekNumber {
            get {
                return GetAttributeValue<bool?>("showweeknumber");
            }
            set {
                SetAttributeValue("showweeknumber", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of days to keep change tracking deleted records</para>
        /// <para>Display Name: Days to Expire Change Tracking Deleted Records</para>
        /// </summary>
        [AttributeLogicalName("expirechangetrackingindays")]
        public int? ExpireChangeTrackingInDays {
            get {
                return GetAttributeValue<int?>("expirechangetrackingindays");
            }
            set {
                SetAttributeValue("expirechangetrackingindays", value);
            }
        }
        
        /// <summary>
        /// <para>Denotes whether the OAuth access token for Yammer network has expired</para>
        /// <para>Display Name: Yammer OAuth Access Token Expired</para>
        /// </summary>
        [AttributeLogicalName("yammeroauthaccesstokenexpired")]
        public bool? YammerOAuthAccessTokenExpired {
            get {
                return GetAttributeValue<bool?>("yammeroauthaccesstokenexpired");
            }
            set {
                SetAttributeValue("yammeroauthaccesstokenexpired", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to use legacy form rendering.</para>
        /// <para>Display Name: Legacy Form Rendering</para>
        /// </summary>
        [AttributeLogicalName("uselegacyrendering")]
        public bool? UseLegacyRendering {
            get {
                return GetAttributeValue<bool?>("uselegacyrendering");
            }
            set {
                SetAttributeValue("uselegacyrendering", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of Folder Based Tracking mappings user can add</para>
        /// <para>Display Name: Max Folder Based Tracking Mappings</para>
        /// </summary>
        [AttributeLogicalName("maxfolderbasedtrackingmappings")]
        public int? MaxFolderBasedTrackingMappings {
            get {
                return GetAttributeValue<int?>("maxfolderbasedtrackingmappings");
            }
            set {
                SetAttributeValue("maxfolderbasedtrackingmappings", value);
            }
        }
        
        /// <summary>
        /// <para>Use position hierarchy</para>
        /// <para>Display Name: Use position hierarchy</para>
        /// </summary>
        [AttributeLogicalName("usepositionhierarchy")]
        public bool? UsePositionHierarchy {
            get {
                return GetAttributeValue<bool?>("usepositionhierarchy");
            }
            set {
                SetAttributeValue("usepositionhierarchy", value);
            }
        }
        
        /// <summary>
        /// <para>Import sequence to use.</para>
        /// <para>Display Name: Current Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("currentimportsequencenumber")]
        public int? CurrentImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("currentimportsequencenumber");
            }
        }
        
        /// <summary>
        /// <para>Select whether to turn on product recommendations for the organization.</para>
        /// <para>Display Name: Enable Product Recommendations for this Organization</para>
        /// </summary>
        [AttributeLogicalName("productrecommendationsenabled")]
        public bool? ProductRecommendationsEnabled {
            get {
                return GetAttributeValue<bool?>("productrecommendationsenabled");
            }
            set {
                SetAttributeValue("productrecommendationsenabled", value);
            }
        }
        
        /// <summary>
        /// <para>The maximum value for the Mobile Offline setting Days since record last modified</para>
        /// <para>Display Name: Max value of Days since record last modified</para>
        /// </summary>
        [AttributeLogicalName("dayssincerecordlastmodifiedmaxvalue")]
        public int? DaysSinceRecordLastModifiedMaxValue {
            get {
                return GetAttributeValue<int?>("dayssincerecordlastmodifiedmaxvalue");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether alerts will be generated for warnings.</para>
        /// <para>Display Name: Generate Alerts For Warnings</para>
        /// </summary>
        [AttributeLogicalName("generatealertsforwarnings")]
        public bool? GenerateAlertsForWarnings {
            get {
                return GetAttributeValue<bool?>("generatealertsforwarnings");
            }
            set {
                SetAttributeValue("generatealertsforwarnings", value);
            }
        }
        
        /// <summary>
        /// <para>Number of hours between automatic rollup jobs .</para>
        /// <para>Display Name: Automatic Rollup Frequency for Goal</para>
        /// </summary>
        [AttributeLogicalName("goalrollupfrequency")]
        public int? GoalRollupFrequency {
            get {
                return GetAttributeValue<int?>("goalrollupfrequency");
            }
            set {
                SetAttributeValue("goalrollupfrequency", value);
            }
        }
        
        /// <summary>
        /// <para>Use Smart Matching.</para>
        /// <para>Display Name: Enable Smart Matching</para>
        /// </summary>
        [AttributeLogicalName("enablesmartmatching")]
        public bool? EnableSmartMatching {
            get {
                return GetAttributeValue<bool?>("enablesmartmatching");
            }
            set {
                SetAttributeValue("enablesmartmatching", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the organization was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Restrict the maximum no of items in a bundle</para>
        /// <para>Display Name: Bundle Item Limit</para>
        /// </summary>
        [AttributeLogicalName("maxproductsinbundle")]
        public int? MaxProductsInBundle {
            get {
                return GetAttributeValue<int?>("maxproductsinbundle");
            }
            set {
                SetAttributeValue("maxproductsinbundle", value);
            }
        }
        
        /// <summary>
        /// <para>Normal polling frequency used for email receive auto-tagging in outlook.</para>
        /// <para>Display Name: Auto-Tag Interval</para>
        /// </summary>
        [AttributeLogicalName("tagpollingperiod")]
        public int? TagPollingPeriod {
            get {
                return GetAttributeValue<int?>("tagpollingperiod");
            }
            set {
                SetAttributeValue("tagpollingperiod", value);
            }
        }
        
        /// <summary>
        /// <para>XML string containing the ExternalPartyEnabled entities correlation keys for association of existing External Party instance entities to newly created IsExternalPartyEnabled entities.For internal use only</para>
        /// <para>Display Name: ExternalPartyEnabled Entities correlation Keys</para>
        /// </summary>
        [AttributeLogicalName("externalpartycorrelationkeys")]
        public string ExternalPartyCorrelationKeys {
            get {
                return GetAttributeValue<string>("externalpartycorrelationkeys");
            }
            set {
                SetAttributeValue("externalpartycorrelationkeys", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether Send As Other User privilege is enabled.</para>
        /// <para>Display Name: Is Approval For User Email Required</para>
        /// </summary>
        [AttributeLogicalName("requireapprovalforuseremail")]
        public bool? RequireApprovalForUserEmail {
            get {
                return GetAttributeValue<bool?>("requireapprovalforuseremail");
            }
            set {
                SetAttributeValue("requireapprovalforuseremail", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to use legacy application metadata sync for clients that use application metadata.</para>
        /// <para>Display Name: Is server metadata generation required for mobile client</para>
        /// </summary>
        [AttributeLogicalName("uselegacyapplicationmetadatasync")]
        public bool? UseLegacyApplicationMetadataSync {
            get {
                return GetAttributeValue<bool?>("uselegacyapplicationmetadatasync");
            }
            set {
                SetAttributeValue("uselegacyapplicationmetadatasync", value);
            }
        }
        
        /// <summary>
        /// <para>Enable Integration with Bing Maps</para>
        /// <para>Display Name: Enable Integration with Bing Maps</para>
        /// </summary>
        [AttributeLogicalName("enablebingmapsintegration")]
        public bool? EnableBingMapsIntegration {
            get {
                return GetAttributeValue<bool?>("enablebingmapsintegration");
            }
            set {
                SetAttributeValue("enablebingmapsintegration", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether duplicate detection of records during offline synchronization is enabled.</para>
        /// <para>Display Name: Is Duplicate Detection Enabled For Offline Synchronization</para>
        /// </summary>
        [AttributeLogicalName("isduplicatedetectionenabledforofflinesync")]
        public bool? IsDuplicateDetectionEnabledForOfflineSync {
            get {
                return GetAttributeValue<bool?>("isduplicatedetectionenabledforofflinesync");
            }
            set {
                SetAttributeValue("isduplicatedetectionenabledforofflinesync", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates which SharePoint deployment type is configured for Server to Server. (Online or On-Premises)</para>
        /// <para>Display Name: Choose SharePoint Deployment Type</para>
        /// </summary>
        [AttributeLogicalName("sharepointdeploymenttype")]
        public Organization_SharePointDeploymentType? SharePointDeploymentType {
            get {
                return GetOptionSetValue<Organization_SharePointDeploymentType>("sharepointdeploymenttype");
            }
            set {
                SetOptionSetValue("sharepointdeploymenttype", value);
            }
        }
        
        /// <summary>
        /// <para>First contract number to use.</para>
        /// <para>Display Name: Current Contract Number</para>
        /// </summary>
        [AttributeLogicalName("currentcontractnumber")]
        public int? CurrentContractNumber {
            get {
                return GetAttributeValue<int?>("currentcontractnumber");
            }
            set {
                SetAttributeValue("currentcontractnumber", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: SQL Access Group</para>
        /// </summary>
        [AttributeLogicalName("sqlaccessgroupid")]
        public Guid? SqlAccessGroupId {
            get {
                return GetAttributeValue<Guid?>("sqlaccessgroupid");
            }
            set {
                SetAttributeValue("sqlaccessgroupid", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies how negative numbers are displayed throughout Microsoft CRM.</para>
        /// <para>Display Name: Negative Format</para>
        /// </summary>
        [AttributeLogicalName("negativeformatcode")]
        public Organization_NegativeFormatCode? NegativeFormatCode {
            get {
                return GetOptionSetValue<Organization_NegativeFormatCode>("negativeformatcode");
            }
            set {
                SetOptionSetValue("negativeformatcode", value);
            }
        }
        
        /// <summary>
        /// <para>High contrast theme data for the organization.</para>
        /// <para>Display Name: High contrast Theme Data</para>
        /// </summary>
        [AttributeLogicalName("highcontrastthemedata")]
        public string HighContrastThemeData {
            get {
                return GetAttributeValue<string>("highcontrastthemedata");
            }
            set {
                SetAttributeValue("highcontrastthemedata", value);
            }
        }
        
        /// <summary>
        /// <para>Lower Threshold For Mailbox Intermittent Issue.</para>
        /// <para>Display Name: Lower Threshold For Mailbox Intermittent Issue</para>
        /// </summary>
        [AttributeLogicalName("mailboxintermittentissueminrange")]
        public int? MailboxIntermittentIssueMinRange {
            get {
                return GetAttributeValue<int?>("mailboxintermittentissueminrange");
            }
            set {
                SetAttributeValue("mailboxintermittentissueminrange", value);
            }
        }
        
        /// <summary>
        /// <para>Organization setting to enforce read only plugins.</para>
        /// <para>Display Name: Organization setting to enforce read only plugins.</para>
        /// </summary>
        [AttributeLogicalName("enforcereadonlyplugins")]
        public bool? EnforceReadOnlyPlugins {
            get {
                return GetAttributeValue<bool?>("enforcereadonlyplugins");
            }
            set {
                SetAttributeValue("enforcereadonlyplugins", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether to share to previous owner on assign.</para>
        /// <para>Display Name: Share To Previous Owner On Assign</para>
        /// </summary>
        [AttributeLogicalName("sharetopreviousowneronassign")]
        public bool? ShareToPreviousOwnerOnAssign {
            get {
                return GetAttributeValue<bool?>("sharetopreviousowneronassign");
            }
            set {
                SetAttributeValue("sharetopreviousowneronassign", value);
            }
        }
        
        /// <summary>
        /// <para>PM designator to use throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: PM Designator</para>
        /// </summary>
        [AttributeLogicalName("pmdesignator")]
        public string PMDesignator {
            get {
                return GetAttributeValue<string>("pmdesignator");
            }
            set {
                SetAttributeValue("pmdesignator", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business closure calendar of organization.</para>
        /// <para>Display Name: Business Closure Calendar</para>
        /// </summary>
        [AttributeLogicalName("businessclosurecalendarid")]
        public Guid? BusinessClosureCalendarId {
            get {
                return GetAttributeValue<Guid?>("businessclosurecalendarid");
            }
            set {
                SetAttributeValue("businessclosurecalendarid", value);
            }
        }
        
        /// <summary>
        /// <para>Denotes the Yammer network permalink</para>
        /// <para>Display Name: Yammer Network Permalink</para>
        /// </summary>
        [AttributeLogicalName("yammernetworkpermalink")]
        public string YammerNetworkPermalink {
            get {
                return GetAttributeValue<string>("yammernetworkpermalink");
            }
            set {
                SetAttributeValue("yammernetworkpermalink", value);
            }
        }
        
        /// <summary>
        /// <para>Number of decimal places that can be used for currency.</para>
        /// <para>Display Name: Currency Decimal Precision</para>
        /// </summary>
        [AttributeLogicalName("currencydecimalprecision")]
        public int? CurrencyDecimalPrecision {
            get {
                return GetAttributeValue<int?>("currencydecimalprecision");
            }
            set {
                SetAttributeValue("currencydecimalprecision", value);
            }
        }
        
        /// <summary>
        /// <para>History list of tracking token prefixes.</para>
        /// <para>Display Name: Tracking Prefix</para>
        /// </summary>
        [AttributeLogicalName("trackingprefix")]
        public string TrackingPrefix {
            get {
                return GetAttributeValue<string>("trackingprefix");
            }
            set {
                SetAttributeValue("trackingprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Initial version of the organization.</para>
        /// <para>Display Name: Initial Version</para>
        /// </summary>
        [AttributeLogicalName("initialversion")]
        public string InitialVersion {
            get {
                return GetAttributeValue<string>("initialversion");
            }
            set {
                SetAttributeValue("initialversion", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the base currency of the organization.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("basecurrencyid")]
        public EntityReference BaseCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("basecurrencyid");
            }
            set {
                SetAttributeValue("basecurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Picklist for selecting the organization preference for reporting scripting errors.</para>
        /// <para>Display Name: Report Script Errors</para>
        /// </summary>
        [AttributeLogicalName("reportscripterrors")]
        public Organization_ReportScriptErrors? ReportScriptErrors {
            get {
                return GetOptionSetValue<Organization_ReportScriptErrors>("reportscripterrors");
            }
            set {
                SetOptionSetValue("reportscripterrors", value);
            }
        }
        
        /// <summary>
        /// <para>Inactivity timeout reminder in minutes</para>
        /// <para>Display Name: Inactivity timeout reminder in minutes</para>
        /// </summary>
        [AttributeLogicalName("inactivitytimeoutreminderinmins")]
        public int? InactivityTimeoutReminderInMins {
            get {
                return GetAttributeValue<int?>("inactivitytimeoutreminderinmins");
            }
            set {
                SetAttributeValue("inactivitytimeoutreminderinmins", value);
            }
        }
        
        /// <summary>
        /// <para>Type of fiscal period used throughout Microsoft CRM.</para>
        /// <para>Display Name: Fiscal Period Type</para>
        /// </summary>
        [AttributeLogicalName("fiscalperiodtype")]
        public int? FiscalPeriodType {
            get {
                return GetAttributeValue<int?>("fiscalperiodtype");
            }
            set {
                SetAttributeValue("fiscalperiodtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Sort</para>
        /// </summary>
        [AttributeLogicalName("sortid")]
        public int? SortId {
            get {
                return GetAttributeValue<int?>("sortid");
            }
            set {
                SetAttributeValue("sortid", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies how the name of the fiscal year is displayed throughout Microsoft CRM.</para>
        /// <para>Display Name: Fiscal Year Format</para>
        /// </summary>
        [AttributeLogicalName("fiscalyearformat")]
        public string FiscalYearFormat {
            get {
                return GetAttributeValue<string>("fiscalyearformat");
            }
            set {
                SetAttributeValue("fiscalyearformat", value);
            }
        }
        
        /// <summary>
        /// <para>The maximum version of IE to run browser emulation for in Outlook client</para>
        /// <para>Display Name: Max supported IE version</para>
        /// </summary>
        [AttributeLogicalName("maxsupportedinternetexplorerversion")]
        public int? MaxSupportedInternetExplorerVersion {
            get {
                return GetAttributeValue<int?>("maxsupportedinternetexplorerversion");
            }
        }
        
        /// <summary>
        /// <para>Prefix to use for all cases throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Case Prefix</para>
        /// </summary>
        [AttributeLogicalName("caseprefix")]
        public string CasePrefix {
            get {
                return GetAttributeValue<string>("caseprefix");
            }
            set {
                SetAttributeValue("caseprefix", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Grant Access To Network Service</para>
        /// </summary>
        [AttributeLogicalName("grantaccesstonetworkservice")]
        public bool? GrantAccessToNetworkService {
            get {
                return GetAttributeValue<bool?>("grantaccesstonetworkservice");
            }
            set {
                SetAttributeValue("grantaccesstonetworkservice", value);
            }
        }
        
        /// <summary>
        /// <para>CRM for Outlook Download URL</para>
        /// <para>Display Name: CRMForOutlookDownloadURL</para>
        /// </summary>
        [AttributeLogicalName("signupoutlookdownloadfwlink")]
        public string SignupOutlookDownloadFWLink {
            get {
                return GetAttributeValue<string>("signupoutlookdownloadfwlink");
            }
            set {
                SetAttributeValue("signupoutlookdownloadfwlink", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether SLA is suppressed.</para>
        /// <para>Display Name: Is SLA suppressed</para>
        /// </summary>
        [AttributeLogicalName("suppresssla")]
        public bool? SuppressSLA {
            get {
                return GetAttributeValue<bool?>("suppresssla");
            }
            set {
                SetAttributeValue("suppresssla", value);
            }
        }
        
        /// <summary>
        /// <para>Enable Hierarchical Security Model</para>
        /// <para>Display Name: Enable Hierarchical Security Model</para>
        /// </summary>
        [AttributeLogicalName("ishierarchicalsecuritymodelenabled")]
        public bool? IsHierarchicalSecurityModelEnabled {
            get {
                return GetAttributeValue<bool?>("ishierarchicalsecuritymodelenabled");
            }
            set {
                SetAttributeValue("ishierarchicalsecuritymodelenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum difference allowed between subject keywords count of the email messaged to be correlated</para>
        /// <para>Display Name: Hash Delta Subject Count</para>
        /// </summary>
        [AttributeLogicalName("hashdeltasubjectcount")]
        public int? HashDeltaSubjectCount {
            get {
                return GetAttributeValue<int?>("hashdeltasubjectcount");
            }
            set {
                SetAttributeValue("hashdeltasubjectcount", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether automatic unsubscribe acknowledgement email is allowed to send.</para>
        /// <para>Display Name: Allow Automatic Unsubscribe Acknowledgement</para>
        /// </summary>
        [AttributeLogicalName("allowautounsubscribeacknowledgement")]
        public bool? AllowAutoUnsubscribeAcknowledgement {
            get {
                return GetAttributeValue<bool?>("allowautounsubscribeacknowledgement");
            }
            set {
                SetAttributeValue("allowautounsubscribeacknowledgement", value);
            }
        }
        
        /// <summary>
        /// <para>Minimum number of user license required for mobile offline service by production/preview organization</para>
        /// <para>Display Name: Minimum number of user license required for mobile offline service by production/preview organization</para>
        /// </summary>
        [AttributeLogicalName("mobileofflineminlicenseprod")]
        public int? MobileOfflineMinLicenseProd {
            get {
                return GetAttributeValue<int?>("mobileofflineminlicenseprod");
            }
        }
        
        /// <summary>
        /// <para>First invoice number to use.</para>
        /// <para>Display Name: Current Invoice Number</para>
        /// </summary>
        [AttributeLogicalName("currentinvoicenumber")]
        public int? CurrentInvoiceNumber {
            get {
                return GetAttributeValue<int?>("currentinvoicenumber");
            }
            set {
                SetAttributeValue("currentinvoicenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Flag indicates whether to Use Inbuilt Rule For DefaultPricelist.</para>
        /// <para>Display Name: Use Inbuilt Rule For Default Pricelist Selection</para>
        /// </summary>
        [AttributeLogicalName("useinbuiltrulefordefaultpricelistselection")]
        public bool? UseInbuiltRuleForDefaultPricelistSelection {
            get {
                return GetAttributeValue<bool?>("useinbuiltrulefordefaultpricelistselection");
            }
            set {
                SetAttributeValue("useinbuiltrulefordefaultpricelistselection", value);
            }
        }
        
        /// <summary>
        /// <para>Symbol used for decimal in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Decimal Symbol</para>
        /// </summary>
        [AttributeLogicalName("decimalsymbol")]
        public string DecimalSymbol {
            get {
                return GetAttributeValue<string>("decimalsymbol");
            }
            set {
                SetAttributeValue("decimalsymbol", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("azureschedulerjobcollectionname")]
        public string AzureSchedulerJobCollectionName {
            get {
                return GetAttributeValue<string>("azureschedulerjobcollectionname");
            }
            set {
                SetAttributeValue("azureschedulerjobcollectionname", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies how the first week of the year is specified in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Year Start Week Code</para>
        /// </summary>
        [AttributeLogicalName("yearstartweekcode")]
        public int? YearStartWeekCode {
            get {
                return GetAttributeValue<int?>("yearstartweekcode");
            }
            set {
                SetAttributeValue("yearstartweekcode", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum allowed size of an attachment.</para>
        /// <para>Display Name: Max Upload File Size</para>
        /// </summary>
        [AttributeLogicalName("maxuploadfilesize")]
        public int? MaxUploadFileSize {
            get {
                return GetAttributeValue<int?>("maxuploadfilesize");
            }
            set {
                SetAttributeValue("maxuploadfilesize", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether the fiscal year should be displayed based on the start date or the end date of the fiscal year.</para>
        /// <para>Display Name: Fiscal Year Display</para>
        /// </summary>
        [AttributeLogicalName("fiscalyeardisplaycode")]
        public int? FiscalYearDisplayCode {
            get {
                return GetAttributeValue<int?>("fiscalyeardisplaycode");
            }
            set {
                SetAttributeValue("fiscalyeardisplaycode", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies how numbers are grouped in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Number Grouping Format</para>
        /// </summary>
        [AttributeLogicalName("numbergroupformat")]
        public string NumberGroupFormat {
            get {
                return GetAttributeValue<string>("numbergroupformat");
            }
            set {
                SetAttributeValue("numbergroupformat", value);
            }
        }
        
        /// <summary>
        /// <para>Enable or disable assigned tasks sync for outlook and exchange.</para>
        /// <para>Display Name: Is Assigned Tasks Sync Enabled</para>
        /// </summary>
        [AttributeLogicalName("isassignedtaskssyncenabled")]
        public bool? IsAssignedTasksSyncEnabled {
            get {
                return GetAttributeValue<bool?>("isassignedtaskssyncenabled");
            }
            set {
                SetAttributeValue("isassignedtaskssyncenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Api Key to be used in requests to Bing Maps services.</para>
        /// <para>Display Name: Bing Maps API Key</para>
        /// </summary>
        [AttributeLogicalName("bingmapsapikey")]
        public string BingMapsApiKey {
            get {
                return GetAttributeValue<string>("bingmapsapikey");
            }
            set {
                SetAttributeValue("bingmapsapikey", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix to use for all contracts throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Contract Prefix</para>
        /// </summary>
        [AttributeLogicalName("contractprefix")]
        public string ContractPrefix {
            get {
                return GetAttributeValue<string>("contractprefix");
            }
            set {
                SetAttributeValue("contractprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Hash value of web resources.</para>
        /// <para>Display Name: Web resource hash</para>
        /// </summary>
        [AttributeLogicalName("webresourcehash")]
        public string WebResourceHash {
            get {
                return GetAttributeValue<string>("webresourcehash");
            }
            set {
                SetAttributeValue("webresourcehash", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Picture</para>
        /// </summary>
        [AttributeLogicalName("picture")]
        public string Picture {
            get {
                return GetAttributeValue<string>("picture");
            }
            set {
                SetAttributeValue("picture", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether incoming email sent by internal Microsoft Dynamics CRM users or queues should be tracked.</para>
        /// <para>Display Name: Ignore Internal Email</para>
        /// </summary>
        [AttributeLogicalName("ignoreinternalemail")]
        public bool? IgnoreInternalEmail {
            get {
                return GetAttributeValue<bool?>("ignoreinternalemail");
            }
            set {
                SetAttributeValue("ignoreinternalemail", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether conflict detection for mobile client is enabled.</para>
        /// <para>Display Name: Is Conflict Detection for Mobile Client enabled</para>
        /// </summary>
        [AttributeLogicalName("isconflictdetectionenabledformobileclient")]
        public bool? IsConflictDetectionEnabledForMobileClient {
            get {
                return GetAttributeValue<bool?>("isconflictdetectionenabledformobileclient");
            }
            set {
                SetAttributeValue("isconflictdetectionenabledformobileclient", value);
            }
        }
        
        /// <summary>
        /// <para>Text for how the time separator is displayed throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Time Separator</para>
        /// </summary>
        [AttributeLogicalName("timeseparator")]
        public string TimeSeparator {
            get {
                return GetAttributeValue<string>("timeseparator");
            }
            set {
                SetAttributeValue("timeseparator", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the support user for the organization.</para>
        /// <para>Display Name: Support User</para>
        /// </summary>
        [AttributeLogicalName("supportuserid")]
        public Guid? SupportUserId {
            get {
                return GetAttributeValue<Guid?>("supportuserid");
            }
            set {
                SetAttributeValue("supportuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the Office Apps auto deployment is enabled for the organization.</para>
        /// <para>Display Name: Enable Office Apps Auto Deployment for this Organization</para>
        /// </summary>
        [AttributeLogicalName("officeappsautodeploymentenabled")]
        public bool? OfficeAppsAutoDeploymentEnabled {
            get {
                return GetAttributeValue<bool?>("officeappsautodeploymentenabled");
            }
            set {
                SetAttributeValue("officeappsautodeploymentenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Token key.</para>
        /// <para>Display Name: Token Key</para>
        /// </summary>
        [AttributeLogicalName("tokenkey")]
        public string TokenKey {
            get {
                return GetAttributeValue<string>("tokenkey");
            }
            set {
                SetAttributeValue("tokenkey", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether background offline synchronization in Microsoft Office Outlook is allowed.</para>
        /// <para>Display Name: Allow Offline Scheduled Synchronization</para>
        /// </summary>
        [AttributeLogicalName("allowofflinescheduledsyncs")]
        public bool? AllowOfflineScheduledSyncs {
            get {
                return GetAttributeValue<bool?>("allowofflinescheduledsyncs");
            }
            set {
                SetAttributeValue("allowofflinescheduledsyncs", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the template to be used for acknowledgement when a user unsubscribes.</para>
        /// <para>Display Name: Acknowledgement Template</para>
        /// </summary>
        [AttributeLogicalName("acknowledgementtemplateid")]
        public EntityReference AcknowledgementTemplateId {
            get {
                return GetAttributeValue<EntityReference>("acknowledgementtemplateid");
            }
            set {
                SetAttributeValue("acknowledgementtemplateid", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix to use for all orders throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Order Prefix</para>
        /// </summary>
        [AttributeLogicalName("orderprefix")]
        public string OrderPrefix {
            get {
                return GetAttributeValue<string>("orderprefix");
            }
            set {
                SetAttributeValue("orderprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether alerts will be generated for information.</para>
        /// <para>Display Name: Generate Alerts For Information</para>
        /// </summary>
        [AttributeLogicalName("generatealertsforinformation")]
        public bool? GenerateAlertsForInformation {
            get {
                return GetAttributeValue<bool?>("generatealertsforinformation");
            }
            set {
                SetAttributeValue("generatealertsforinformation", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether marketing emails execution is allowed.</para>
        /// <para>Display Name: Allow Marketing Email Execution</para>
        /// </summary>
        [AttributeLogicalName("allowmarketingemailexecution")]
        public bool? AllowMarketingEmailExecution {
            get {
                return GetAttributeValue<bool?>("allowmarketingemailexecution");
            }
            set {
                SetAttributeValue("allowmarketingemailexecution", value);
            }
        }
        
        /// <summary>
        /// <para>Enable or disable folder based tracking for Server Side Sync.</para>
        /// <para>Display Name: Is Folder Based Tracking Enabled</para>
        /// </summary>
        [AttributeLogicalName("isfolderbasedtrackingenabled")]
        public bool? IsFolderBasedTrackingEnabled {
            get {
                return GetAttributeValue<bool?>("isfolderbasedtrackingenabled");
            }
            set {
                SetAttributeValue("isfolderbasedtrackingenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegated admin user for the organization.</para>
        /// <para>Display Name: Delegated Admin</para>
        /// </summary>
        [AttributeLogicalName("delegatedadminuserid")]
        public Guid? DelegatedAdminUserId {
            get {
                return GetAttributeValue<Guid?>("delegatedadminuserid");
            }
            set {
                SetAttributeValue("delegatedadminuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the showing tablet application notification bars in a browser is allowed.</para>
        /// <para>Display Name: Allow the showing tablet application notification bars in a browser.</para>
        /// </summary>
        [AttributeLogicalName("allowusersseeappdownloadmessage")]
        public bool? AllowUsersSeeAppdownloadMessage {
            get {
                return GetAttributeValue<bool?>("allowusersseeappdownloadmessage");
            }
            set {
                SetAttributeValue("allowusersseeappdownloadmessage", value);
            }
        }
        
        /// <summary>
        /// <para>Designated first day of the week throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Week Start Day Code</para>
        /// </summary>
        [AttributeLogicalName("weekstartdaycode")]
        public Object WeekStartDayCode {
            get {
                return GetAttributeValue<Object>("weekstartdaycode");
            }
            set {
                SetAttributeValue("weekstartdaycode", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to turn on task flows for the organization.</para>
        /// <para>Display Name: Enable Task Flow processes for this Organization</para>
        /// </summary>
        [AttributeLogicalName("taskbasedflowenabled")]
        public bool? TaskBasedFlowEnabled {
            get {
                return GetAttributeValue<bool?>("taskbasedflowenabled");
            }
            set {
                SetAttributeValue("taskbasedflowenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Symbol used for number separation in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Number Separator</para>
        /// </summary>
        [AttributeLogicalName("numberseparator")]
        public string NumberSeparator {
            get {
                return GetAttributeValue<string>("numberseparator");
            }
            set {
                SetAttributeValue("numberseparator", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum depth for hierarchy security propagation.</para>
        /// <para>Display Name: Maximum depth for hierarchy security propagation.</para>
        /// </summary>
        [AttributeLogicalName("maxdepthforhierarchicalsecuritymodel")]
        public int? MaxDepthForHierarchicalSecurityModel {
            get {
                return GetAttributeValue<int?>("maxdepthforhierarchicalsecuritymodel");
            }
            set {
                SetAttributeValue("maxdepthforhierarchicalsecuritymodel", value);
            }
        }
        
        /// <summary>
        /// <para>Minimum number of user license required for mobile offline service by trial organization</para>
        /// <para>Display Name: Minimum number of user license required for mobile offline service by trial organization</para>
        /// </summary>
        [AttributeLogicalName("mobileofflineminlicensetrial")]
        public int? MobileOfflineMinLicenseTrial {
            get {
                return GetAttributeValue<int?>("mobileofflineminlicensetrial");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether loading of Microsoft Dynamics CRM in a browser window that does not have address, tool, and menu bars is enabled.</para>
        /// <para>Display Name: ISV Integration Mode</para>
        /// </summary>
        [AttributeLogicalName("isvintegrationcode")]
        public Organization_ISVIntegrationCode? ISVIntegrationCode {
            get {
                return GetOptionSetValue<Organization_ISVIntegrationCode>("isvintegrationcode");
            }
            set {
                SetOptionSetValue("isvintegrationcode", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Flag for whether the organization has accepted the Social Insights terms of use.</para>
        /// <para>Display Name: Social Insights Terms of Use</para>
        /// </summary>
        [AttributeLogicalName("socialinsightstermsaccepted")]
        public bool? SocialInsightsTermsAccepted {
            get {
                return GetAttributeValue<bool?>("socialinsightstermsaccepted");
            }
            set {
                SetAttributeValue("socialinsightstermsaccepted", value);
            }
        }
        
        /// <summary>
        /// <para>First quote number to use.</para>
        /// <para>Display Name: Current Quote Number</para>
        /// </summary>
        [AttributeLogicalName("currentquotenumber")]
        public int? CurrentQuoteNumber {
            get {
                return GetAttributeValue<int?>("currentquotenumber");
            }
            set {
                SetAttributeValue("currentquotenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix used for custom entities and attributes.</para>
        /// <para>Display Name: Customization Name Prefix</para>
        /// </summary>
        [AttributeLogicalName("schemanameprefix")]
        public string SchemaNamePrefix {
            get {
                return GetAttributeValue<string>("schemanameprefix");
            }
            set {
                SetAttributeValue("schemanameprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the on hold case status values.</para>
        /// <para>Display Name: SLA pause states</para>
        /// </summary>
        [AttributeLogicalName("slapausestates")]
        public string SlaPauseStates {
            get {
                return GetAttributeValue<string>("slapausestates");
            }
            set {
                SetAttributeValue("slapausestates", value);
            }
        }
        
        /// <summary>
        /// <para>Filter Subject Keywords</para>
        /// <para>Display Name: Hash Filter Keywords</para>
        /// </summary>
        [AttributeLogicalName("hashfilterkeywords")]
        public string HashFilterKeywords {
            get {
                return GetAttributeValue<string>("hashfilterkeywords");
            }
            set {
                SetAttributeValue("hashfilterkeywords", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the maximum number of instances to be created synchronously after creating a recurring appointment.</para>
        /// <para>Display Name: Recurrence Expansion Synchronization Create Maximum</para>
        /// </summary>
        [AttributeLogicalName("recurrenceexpansionsynchcreatemax")]
        public int? RecurrenceExpansionSynchCreateMax {
            get {
                return GetAttributeValue<int?>("recurrenceexpansionsynchcreatemax");
            }
            set {
                SetAttributeValue("recurrenceexpansionsynchcreatemax", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether users are allowed to send email to unresolved parties (parties must still have an email address).</para>
        /// <para>Display Name: Allow Unresolved Address Email Send</para>
        /// </summary>
        [AttributeLogicalName("allowunresolvedpartiesonemailsend")]
        public bool? AllowUnresolvedPartiesOnEmailSend {
            get {
                return GetAttributeValue<bool?>("allowunresolvedpartiesonemailsend");
            }
            set {
                SetAttributeValue("allowunresolvedpartiesonemailsend", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether or not navigation tour is displayed.</para>
        /// <para>Display Name: Display Navigation Tour</para>
        /// </summary>
        [AttributeLogicalName("displaynavigationtour")]
        public bool? DisplayNavigationTour {
            get {
                return GetAttributeValue<bool?>("displaynavigationtour");
            }
            set {
                SetAttributeValue("displaynavigationtour", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the append URL parameters is enabled.</para>
        /// <para>Display Name: Is AppendUrl Parameters enabled</para>
        /// </summary>
        [AttributeLogicalName("globalappendurlparametersenabled")]
        public bool? GlobalAppendUrlParametersEnabled {
            get {
                return GetAttributeValue<bool?>("globalappendurlparametersenabled");
            }
            set {
                SetAttributeValue("globalappendurlparametersenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Number of decimal places that can be used for the base currency.</para>
        /// <para>Display Name: Base Currency Precision</para>
        /// </summary>
        [AttributeLogicalName("basecurrencyprecision")]
        public int? BaseCurrencyPrecision {
            get {
                return GetAttributeValue<int?>("basecurrencyprecision");
            }
        }
        
        /// <summary>
        /// <para>Version number of the organization.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Select whether data can be synchronized with an external search index.</para>
        /// <para>Display Name: Enable external search data syncing</para>
        /// </summary>
        [AttributeLogicalName("isexternalsearchindexenabled")]
        public bool? IsExternalSearchIndexEnabled {
            get {
                return GetAttributeValue<bool?>("isexternalsearchindexenabled");
            }
            set {
                SetAttributeValue("isexternalsearchindexenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix to use for all articles in Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Article Prefix</para>
        /// </summary>
        [AttributeLogicalName("kbprefix")]
        public string KbPrefix {
            get {
                return GetAttributeValue<string>("kbprefix");
            }
            set {
                SetAttributeValue("kbprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies how the name of the fiscal period is displayed throughout Microsoft CRM.</para>
        /// <para>Display Name: Fiscal Period Format</para>
        /// </summary>
        [AttributeLogicalName("fiscalperiodformat")]
        public string FiscalPeriodFormat {
            get {
                return GetAttributeValue<string>("fiscalperiodformat");
            }
            set {
                SetAttributeValue("fiscalperiodformat", value);
            }
        }
        
        /// <summary>
        /// <para>String showing how the date is displayed throughout Microsoft CRM.</para>
        /// <para>Display Name: Date Format String</para>
        /// </summary>
        [AttributeLogicalName("dateformatstring")]
        public string DateFormatString {
            get {
                return GetAttributeValue<string>("dateformatstring");
            }
            set {
                SetAttributeValue("dateformatstring", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for disabling the organization.</para>
        /// <para>Display Name: Disabled Reason</para>
        /// </summary>
        [AttributeLogicalName("disabledreason")]
        public string DisabledReason {
            get {
                return GetAttributeValue<string>("disabledreason");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the locale of the organization.</para>
        /// <para>Display Name: Locale</para>
        /// </summary>
        [AttributeLogicalName("localeid")]
        public int? LocaleId {
            get {
                return GetAttributeValue<int?>("localeid");
            }
            set {
                SetAttributeValue("localeid", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix used for parsed table columns.</para>
        /// <para>Display Name: Parsed Table Column Prefix</para>
        /// </summary>
        [AttributeLogicalName("parsedtablecolumnprefix")]
        public string ParsedTableColumnPrefix {
            get {
                return GetAttributeValue<string>("parsedtablecolumnprefix");
            }
        }
        
        /// <summary>
        /// <para>Type of default recurrence end range date.</para>
        /// <para>Display Name: Default Recurrence End Range Type</para>
        /// </summary>
        [AttributeLogicalName("defaultrecurrenceendrangetype")]
        public Organization_DefaultRecurrenceEndRangeType? DefaultRecurrenceEndRangeType {
            get {
                return GetOptionSetValue<Organization_DefaultRecurrenceEndRangeType>("defaultrecurrenceendrangetype");
            }
            set {
                SetOptionSetValue("defaultrecurrenceendrangetype", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether duplicate detection of records during import is enabled.</para>
        /// <para>Display Name: Is Duplicate Detection Enabled For Import</para>
        /// </summary>
        [AttributeLogicalName("isduplicatedetectionenabledforimport")]
        public bool? IsDuplicateDetectionEnabledForImport {
            get {
                return GetAttributeValue<bool?>("isduplicatedetectionenabledforimport");
            }
            set {
                SetAttributeValue("isduplicatedetectionenabledforimport", value);
            }
        }
        
        /// <summary>
        /// <para>Order in which names are to be displayed throughout Microsoft CRM.</para>
        /// <para>Display Name: Full Name Display Order</para>
        /// </summary>
        [AttributeLogicalName("fullnameconventioncode")]
        public Organization_FullNameConventionCode? FullNameConventionCode {
            get {
                return GetOptionSetValue<Organization_FullNameConventionCode>("fullnameconventioncode");
            }
            set {
                SetOptionSetValue("fullnameconventioncode", value);
            }
        }
        
        /// <summary>
        /// <para>Internal Use Only</para>
        /// <para>Display Name: Internal Use Only</para>
        /// </summary>
        [AttributeLogicalName("yammerpostmethod")]
        public Organization_YammerPostMethod? YammerPostMethod {
            get {
                return GetOptionSetValue<Organization_YammerPostMethod>("yammerpostmethod");
            }
            set {
                SetOptionSetValue("yammerpostmethod", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default mobile offline profile.</para>
        /// <para>Display Name: Default Mobile Offline Profile</para>
        /// </summary>
        [AttributeLogicalName("defaultmobileofflineprofileid")]
        public EntityReference DefaultMobileOfflineProfileId {
            get {
                return GetAttributeValue<EntityReference>("defaultmobileofflineprofileid");
            }
            set {
                SetAttributeValue("defaultmobileofflineprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether folders should be automatically created on SharePoint.</para>
        /// <para>Display Name: Automatically create folders</para>
        /// </summary>
        [AttributeLogicalName("isfolderautocreatedonsp")]
        public bool? IsFolderAutoCreatedonSP {
            get {
                return GetAttributeValue<bool?>("isfolderautocreatedonsp");
            }
            set {
                SetAttributeValue("isfolderautocreatedonsp", value);
            }
        }
        
        /// <summary>
        /// <para>Current campaign number.</para>
        /// <para>Display Name: Current Campaign Number</para>
        /// </summary>
        [AttributeLogicalName("currentcampaignnumber")]
        public int? CurrentCampaignNumber {
            get {
                return GetAttributeValue<int?>("currentcampaignnumber");
            }
            set {
                SetAttributeValue("currentcampaignnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the email server profile to be used as default profile for the mailboxes.</para>
        /// </summary>
        [AttributeLogicalName("defaultemailserverprofileidname")]
        public string DefaultEmailServerProfileIdName {
            get {
                return GetAttributeValue<string>("defaultemailserverprofileidname");
            }
        }
        
        /// <summary>
        /// <para>Number of characters appended to invoice, quote, and order numbers.</para>
        /// <para>Display Name: Unique String Length</para>
        /// </summary>
        [AttributeLogicalName("uniquespecifierlength")]
        public int? UniqueSpecifierLength {
            get {
                return GetAttributeValue<int?>("uniquespecifierlength");
            }
            set {
                SetAttributeValue("uniquespecifierlength", value);
            }
        }
        
        /// <summary>
        /// <para>Start date for the fiscal period that is to be used throughout Microsoft CRM.</para>
        /// <para>Display Name: Fiscal Calendar Start</para>
        /// </summary>
        [AttributeLogicalName("fiscalcalendarstart")]
        public DateTime? FiscalCalendarStart {
            get {
                return GetAttributeValue<DateTime?>("fiscalcalendarstart");
            }
            set {
                SetAttributeValue("fiscalcalendarstart", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to auto apply the default customer entitlement on case update.</para>
        /// <para>Display Name: Auto Apply Default Entitlement on Case Update</para>
        /// </summary>
        [AttributeLogicalName("autoapplydefaultoncaseupdate")]
        public bool? AutoApplyDefaultonCaseUpdate {
            get {
                return GetAttributeValue<bool?>("autoapplydefaultoncaseupdate");
            }
            set {
                SetAttributeValue("autoapplydefaultoncaseupdate", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether individuals can select their form mode preference in their personal options.</para>
        /// <para>Display Name: Allow User Form Mode Preference</para>
        /// </summary>
        [AttributeLogicalName("allowuserformmodepreference")]
        public bool? AllowUserFormModePreference {
            get {
                return GetAttributeValue<bool?>("allowuserformmodepreference");
            }
            set {
                SetAttributeValue("allowuserformmodepreference", value);
            }
        }
        
        /// <summary>
        /// <para>XML string that defines the navigation structure for the application. This is the site map from the previously upgraded build and is used in a 3-way merge during upgrade.</para>
        /// <para>Display Name: Reference SiteMap XML</para>
        /// </summary>
        [AttributeLogicalName("referencesitemapxml")]
        public string ReferenceSiteMapXml {
            get {
                return GetAttributeValue<string>("referencesitemapxml");
            }
            set {
                SetAttributeValue("referencesitemapxml", value);
            }
        }
        
        /// <summary>
        /// <para>Flag to turn email correlation on or off.</para>
        /// <para>Display Name: Use Email Correlation</para>
        /// </summary>
        [AttributeLogicalName("emailcorrelationenabled")]
        public bool? EmailCorrelationEnabled {
            get {
                return GetAttributeValue<bool?>("emailcorrelationenabled");
            }
            set {
                SetAttributeValue("emailcorrelationenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Enable pricing calculations on a Create call.</para>
        /// <para>Display Name: Enable Pricing On Create</para>
        /// </summary>
        [AttributeLogicalName("enablepricingoncreate")]
        public bool? EnablePricingOnCreate {
            get {
                return GetAttributeValue<bool?>("enablepricingoncreate");
            }
            set {
                SetAttributeValue("enablepricingoncreate", value);
            }
        }
        
        /// <summary>
        /// <para>Information that specifies how the time is displayed throughout Microsoft CRM.</para>
        /// <para>Display Name: Time Format Code</para>
        /// </summary>
        [AttributeLogicalName("timeformatcode")]
        public Object TimeFormatCode {
            get {
                return GetAttributeValue<Object>("timeformatcode");
            }
            set {
                SetAttributeValue("timeformatcode", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether mailbox owners will be notified of email server profile level alerts.</para>
        /// <para>Display Name: Notify Mailbox Owner Of Email Server Level Alerts</para>
        /// </summary>
        [AttributeLogicalName("notifymailboxownerofemailserverlevelalerts")]
        public bool? NotifyMailboxOwnerOfEmailServerLevelAlerts {
            get {
                return GetAttributeValue<bool?>("notifymailboxownerofemailserverlevelalerts");
            }
            set {
                SetAttributeValue("notifymailboxownerofemailserverlevelalerts", value);
            }
        }
        
        /// <summary>
        /// <para>Normal polling frequency used for sending email in Microsoft Office Outlook.</para>
        /// <para>Display Name: Email Send Polling Frequency</para>
        /// </summary>
        [AttributeLogicalName("emailsendpollingperiod")]
        public int? EmailSendPollingPeriod {
            get {
                return GetAttributeValue<int?>("emailsendpollingperiod");
            }
            set {
                SetAttributeValue("emailsendpollingperiod", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether duplicate detection during online create or update is enabled.</para>
        /// <para>Display Name: Is Duplicate Detection Enabled for Online Create/Update</para>
        /// </summary>
        [AttributeLogicalName("isduplicatedetectionenabledforonlinecreateupdate")]
        public bool? IsDuplicateDetectionEnabledForOnlineCreateUpdate {
            get {
                return GetAttributeValue<bool?>("isduplicatedetectionenabledforonlinecreateupdate");
            }
            set {
                SetAttributeValue("isduplicatedetectionenabledforonlinecreateupdate", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether full-text search for Quick Find entities should be enabled for the organization.</para>
        /// <para>Display Name: Enable Full-text search for Quick Find</para>
        /// </summary>
        [AttributeLogicalName("isfulltextsearchenabled")]
        public bool? IsFullTextSearchEnabled {
            get {
                return GetAttributeValue<bool?>("isfulltextsearchenabled");
            }
            set {
                SetAttributeValue("isfulltextsearchenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Prefix to use for all invoice numbers throughout Microsoft Dynamics CRM.</para>
        /// <para>Display Name: Invoice Prefix</para>
        /// </summary>
        [AttributeLogicalName("invoiceprefix")]
        public string InvoicePrefix {
            get {
                return GetAttributeValue<string>("invoiceprefix");
            }
            set {
                SetAttributeValue("invoiceprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of active SLA allowed per entity in online</para>
        /// <para>Display Name: Maximum number of active SLA allowed per entity in online</para>
        /// </summary>
        [AttributeLogicalName("maximumentitieswithactivesla")]
        public int? MaximumEntitiesWithActiveSLA {
            get {
                return GetAttributeValue<int?>("maximumentitieswithactivesla");
            }
            set {
                SetAttributeValue("maximumentitieswithactivesla", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the default value for number of occurrences field in the recurrence dialog.</para>
        /// <para>Display Name: Recurrence Default Number of Occurrences</para>
        /// </summary>
        [AttributeLogicalName("recurrencedefaultnumberofoccurrences")]
        public int? RecurrenceDefaultNumberOfOccurrences {
            get {
                return GetAttributeValue<int?>("recurrencedefaultnumberofoccurrences");
            }
            set {
                SetAttributeValue("recurrencedefaultnumberofoccurrences", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether to turn on OrgInsights for the organization.</para>
        /// <para>Display Name: Enable OrgInsights for this Organization</para>
        /// </summary>
        [AttributeLogicalName("orginsightsenabled")]
        public bool? OrgInsightsEnabled {
            get {
                return GetAttributeValue<bool?>("orginsightsenabled");
            }
            set {
                SetAttributeValue("orginsightsenabled", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Minimum number of recipients required to match for email messaged to be correlated</para>
        /// <para>Display Name: Hash Min Address Count</para>
        /// </summary>
        [AttributeLogicalName("hashminaddresscount")]
        public int? HashMinAddressCount {
            get {
                return GetAttributeValue<int?>("hashminaddresscount");
            }
            set {
                SetAttributeValue("hashminaddresscount", value);
            }
        }
        
        /// <summary>
        /// <para>First order number to use.</para>
        /// <para>Display Name: Current Order Number</para>
        /// </summary>
        [AttributeLogicalName("currentordernumber")]
        public int? CurrentOrderNumber {
            get {
                return GetAttributeValue<int?>("currentordernumber");
            }
            set {
                SetAttributeValue("currentordernumber", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether Social Care is disabled.</para>
        /// <para>Display Name: Is Social Care disabled</para>
        /// </summary>
        [AttributeLogicalName("disablesocialcare")]
        public bool? DisableSocialCare {
            get {
                return GetAttributeValue<bool?>("disablesocialcare");
            }
            set {
                SetAttributeValue("disablesocialcare", value);
            }
        }
        
        /// <summary>
        /// <para>First parsed table number to use.</para>
        /// <para>Display Name: Current Parsed Table Number</para>
        /// </summary>
        [AttributeLogicalName("currentparsedtablenumber")]
        public int? CurrentParsedTableNumber {
            get {
                return GetAttributeValue<int?>("currentparsedtablenumber");
            }
        }
        
        /// <summary>
        /// <para>Prefix used for bulk operation numbering.</para>
        /// <para>Display Name: Bulk Operation Prefix</para>
        /// </summary>
        [AttributeLogicalName("bulkoperationprefix")]
        public string BulkOperationPrefix {
            get {
                return GetAttributeValue<string>("bulkoperationprefix");
            }
            set {
                SetAttributeValue("bulkoperationprefix", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum tracking number before recycling takes place.</para>
        /// <para>Display Name: Max Tracking Number</para>
        /// </summary>
        [AttributeLogicalName("maximumtrackingnumber")]
        public int? MaximumTrackingNumber {
            get {
                return GetAttributeValue<int?>("maximumtrackingnumber");
            }
            set {
                SetAttributeValue("maximumtrackingnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of conditions allowed for mobile offline filters</para>
        /// <para>Display Name: Maximum number of conditions allowed for mobile offline filters</para>
        /// </summary>
        [AttributeLogicalName("maxconditionsformobileofflinefilters")]
        public int? MaxConditionsForMobileOfflineFilters {
            get {
                return GetAttributeValue<int?>("maxconditionsformobileofflinefilters");
            }
            set {
                SetAttributeValue("maxconditionsformobileofflinefilters", value);
            }
        }
        
        /// <summary>
        /// <para>Organization settings stored in Organization Database.</para>
        /// <para>Display Name: Organization Database Organization Settings</para>
        /// </summary>
        [AttributeLogicalName("orgdborgsettings")]
        public string OrgDbOrgSettings {
            get {
                return GetAttributeValue<string>("orgdborgsettings");
            }
            set {
                SetAttributeValue("orgdborgsettings", value);
            }
        }
        
        /// <summary>
        /// <para>Maximum number of days before deleting inactive subscriptions.</para>
        /// <para>Display Name: Days to Expire Subscriptions</para>
        /// </summary>
        [AttributeLogicalName("expiresubscriptionsindays")]
        public int? ExpireSubscriptionsInDays {
            get {
                return GetAttributeValue<int?>("expiresubscriptionsindays");
            }
            set {
                SetAttributeValue("expiresubscriptionsindays", value);
            }
        }
        
        /// <summary>
        /// <para>Session timeout in minutes</para>
        /// <para>Display Name: Session timeout in minutes</para>
        /// </summary>
        [AttributeLogicalName("sessiontimeoutinmins")]
        public int? SessionTimeoutInMins {
            get {
                return GetAttributeValue<int?>("sessiontimeoutinmins");
            }
            set {
                SetAttributeValue("sessiontimeoutinmins", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether a quick find record limit should be enabled for this organization (allows for faster Quick Find queries but prevents overly broad searches).</para>
        /// <para>Display Name: Quick Find Record Limit Enabled</para>
        /// </summary>
        [AttributeLogicalName("quickfindrecordlimitenabled")]
        public bool? QuickFindRecordLimitEnabled {
            get {
                return GetAttributeValue<bool?>("quickfindrecordlimitenabled");
            }
            set {
                SetAttributeValue("quickfindrecordlimitenabled", value);
            }
        }
        
        /// <summary>
        /// <para>Number of decimal places that can be used for prices.</para>
        /// <para>Display Name: Pricing Decimal Precision</para>
        /// </summary>
        [AttributeLogicalName("pricingdecimalprecision")]
        public int? PricingDecimalPrecision {
            get {
                return GetAttributeValue<int?>("pricingdecimalprecision");
            }
            set {
                SetAttributeValue("pricingdecimalprecision", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether Web-based export of grids to Microsoft Office Excel is allowed.</para>
        /// <para>Display Name: Allow Export to Excel</para>
        /// </summary>
        [AttributeLogicalName("allowwebexcelexport")]
        public bool? AllowWebExcelExport {
            get {
                return GetAttributeValue<bool?>("allowwebexcelexport");
            }
            set {
                SetAttributeValue("allowwebexcelexport", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Reporting Group</para>
        /// </summary>
        [AttributeLogicalName("reportinggroupid")]
        public Guid? ReportingGroupId {
            get {
                return GetAttributeValue<Guid?>("reportinggroupid");
            }
            set {
                SetAttributeValue("reportinggroupid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the read-optimized form should be enabled for this organization.</para>
        /// <para>Display Name: Use Read-Optimized Form</para>
        /// </summary>
        [AttributeLogicalName("usereadform")]
        public bool? UseReadForm {
            get {
                return GetAttributeValue<bool?>("usereadform");
            }
            set {
                SetAttributeValue("usereadform", value);
            }
        }
        
        /// <summary>
        /// <para>Sync interval for mobile offline.</para>
        /// <para>Display Name: Sync interval for mobile offline.</para>
        /// </summary>
        [AttributeLogicalName("mobileofflinesyncinterval")]
        public int? MobileOfflineSyncInterval {
            get {
                return GetAttributeValue<int?>("mobileofflinesyncinterval");
            }
            set {
                SetAttributeValue("mobileofflinesyncinterval", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether automatic response creation is allowed.</para>
        /// <para>Display Name: Allow Automatic Response Creation</para>
        /// </summary>
        [AttributeLogicalName("allowautoresponsecreation")]
        public bool? AllowAutoResponseCreation {
            get {
                return GetAttributeValue<bool?>("allowautoresponsecreation");
            }
            set {
                SetAttributeValue("allowautoresponsecreation", value);
            }
        }
        
        [AttributeLogicalName("businessclosurecalendarid")]
        [RelationshipSchemaName("calendar_organization")]
        public Calendar calendar_organization {
            get {
                return GetRelatedEntity<Calendar>("calendar_organization", null);
            }
            set {
                SetRelatedEntity("calendar_organization", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_organization_modifiedonbehalfby")]
        public SystemUser lk_organization_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_organization_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_organization_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("basecurrencyid")]
        [RelationshipSchemaName("basecurrency_organization")]
        public TransactionCurrency basecurrency_organization {
            get {
                return GetRelatedEntity<TransactionCurrency>("basecurrency_organization", null);
            }
            set {
                SetRelatedEntity("basecurrency_organization", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_organizationbase_createdby")]
        public SystemUser lk_organizationbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_organizationbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_organizationbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("defaultemailserverprofileid")]
        [RelationshipSchemaName("EmailServerProfile_Organization")]
        public EmailServerProfile EmailServerProfile_Organization {
            get {
                return GetRelatedEntity<EmailServerProfile>("EmailServerProfile_Organization", null);
            }
            set {
                SetRelatedEntity("EmailServerProfile_Organization", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_organization_createdonbehalfby")]
        public SystemUser lk_organization_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_organization_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_organization_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_organizationbase_modifiedby")]
        public SystemUser lk_organizationbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_organizationbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_organizationbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("organization_business_units")]
        public IEnumerable<BusinessUnit> organization_business_units {
            get {
                return GetRelatedEntities<BusinessUnit>("organization_business_units", null);
            }
            set {
                SetRelatedEntities("organization_business_units", null, value);
            }
        }
        
        [RelationshipSchemaName("organization_system_users")]
        public IEnumerable<SystemUser> organization_system_users {
            get {
                return GetRelatedEntities<SystemUser>("organization_system_users", null);
            }
            set {
                SetRelatedEntities("organization_system_users", null, value);
            }
        }
        
        [RelationshipSchemaName("organization_emailserverprofile")]
        public IEnumerable<EmailServerProfile> organization_emailserverprofile {
            get {
                return GetRelatedEntities<EmailServerProfile>("organization_emailserverprofile", null);
            }
            set {
                SetRelatedEntities("organization_emailserverprofile", null, value);
            }
        }
        
        [RelationshipSchemaName("Organization_SyncErrors")]
        public IEnumerable<SyncError> Organization_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Organization_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Organization_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("organization_mailbox")]
        public IEnumerable<Mailbox> organization_mailbox {
            get {
                return GetRelatedEntities<Mailbox>("organization_mailbox", null);
            }
            set {
                SetRelatedEntities("organization_mailbox", null, value);
            }
        }
        
        [RelationshipSchemaName("organization_transactioncurrencies")]
        public IEnumerable<TransactionCurrency> organization_transactioncurrencies {
            get {
                return GetRelatedEntities<TransactionCurrency>("organization_transactioncurrencies", null);
            }
            set {
                SetRelatedEntities("organization_transactioncurrencies", null, value);
            }
        }
        
        [RelationshipSchemaName("organization_teams")]
        public IEnumerable<Team> organization_teams {
            get {
                return GetRelatedEntities<Team>("organization_teams", null);
            }
            set {
                SetRelatedEntities("organization_teams", null, value);
            }
        }
        
        [RelationshipSchemaName("organization_queueitems")]
        public IEnumerable<QueueItem> organization_queueitems {
            get {
                return GetRelatedEntities<QueueItem>("organization_queueitems", null);
            }
            set {
                SetRelatedEntities("organization_queueitems", null, value);
            }
        }
        
        [RelationshipSchemaName("organization_calendars")]
        public IEnumerable<Calendar> organization_calendars {
            get {
                return GetRelatedEntities<Calendar>("organization_calendars", null);
            }
            set {
                SetRelatedEntities("organization_calendars", null, value);
            }
        }
        
        public static Organization Retrieve(IOrganizationService service, Guid id, params Expression<Func<Organization,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Activity to track a telephone call.</para>
    /// <para>Display Name: Phone Call</para>
    /// </summary>
    [EntityLogicalName("phonecall")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class PhoneCall : ExtendedEntity<PhoneCallState, PhoneCall_StatusCode> {
        
        public const string EntityLogicalName = "phonecall";
        
        public const int EntityTypeCode = 4210;
        
        public PhoneCall() : 
                base(EntityLogicalName) {
        }
        
        public PhoneCall(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the phone call activity.</para>
        /// <para>Display Name: Phone Call</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Phone Call record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent on the phone call. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Select the phone call's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public PhoneCall_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<PhoneCall_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the phone call activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the phone call. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual duration of the phone call.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the phone call activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for an associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this Phone Call. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether a voice mail was left for the person.</para>
        /// <para>Display Name: Left Voice Mail</para>
        /// </summary>
        [AttributeLogicalName("leftvoicemail")]
        public bool? LeftVoiceMail {
            get {
                return GetAttributeValue<bool?>("leftvoicemail");
            }
            set {
                SetAttributeValue("leftvoicemail", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Due</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the phone call, such as the primary message or the products and services discussed.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the phone call type, such as lead gathering or customer follow-up, to tie the phone call to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the phone call activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number.</para>
        /// <para>Display Name: Phone Number</para>
        /// </summary>
        [AttributeLogicalName("phonenumber")]
        public string PhoneNumber {
            get {
                return GetAttributeValue<string>("phonenumber");
            }
            set {
                SetAttributeValue("phonenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows the type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Select the direction of the phone call as incoming or outbound.</para>
        /// <para>Display Name: Direction</para>
        /// </summary>
        [AttributeLogicalName("directioncode")]
        public bool? DirectionCode {
            get {
                return GetAttributeValue<bool?>("directioncode");
            }
            set {
                SetAttributeValue("directioncode", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the phone call.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the phone call is open, completed, or canceled. Completed and canceled phone calls are read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public PhoneCallState? StateCode {
            get {
                return GetOptionSetValue<PhoneCallState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the phone call activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, or user recipients of the phone call.</para>
        /// <para>Display Name: Call To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the phone call activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the phone call type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the phone call. By default, it displays the date and time when the activity was created, but can be edited to capture the actual duration of the phone call.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public PhoneCall_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<PhoneCall_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, or user who made the phone call.</para>
        /// <para>Display Name: Call From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Indication which specifies if the phone call activity was created by a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the phone call activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Information which specifies whether the phone call activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_PhoneCalls")]
        public msdyn_PostAlbum msdyn_postalbum_PhoneCalls {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_PhoneCalls", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_PhoneCalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_PhoneCalls")]
        public dg_event dg_event_PhoneCalls {
            get {
                return GetRelatedEntity<dg_event>("dg_event_PhoneCalls", null);
            }
            set {
                SetRelatedEntity("dg_event_PhoneCalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_PhoneCalls")]
        public dg_participant dg_participant_PhoneCalls {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_PhoneCalls", null);
            }
            set {
                SetRelatedEntity("dg_participant_PhoneCalls", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_phone_call_activities")]
        public BusinessUnit business_unit_phone_call_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_phone_call_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_phone_call_activities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_Phonecalls")]
        public Opportunity Opportunity_Phonecalls {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Opportunity_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_PhoneCall")]
        public TransactionCurrency TransactionCurrency_PhoneCall {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_PhoneCall", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_PhoneCall", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_Phonecalls")]
        public Contract Contract_Phonecalls {
            get {
                return GetRelatedEntity<Contract>("Contract_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Contract_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_phonecall")]
        public Team team_phonecall {
            get {
                return GetRelatedEntity<Team>("team_phonecall", null);
            }
            set {
                SetRelatedEntity("team_phonecall", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_phonecall")]
        public ActivityPointer activity_pointer_phonecall {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_phonecall", null);
            }
            set {
                SetRelatedEntity("activity_pointer_phonecall", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_phonecall")]
        public SystemUser user_phonecall {
            get {
                return GetRelatedEntity<SystemUser>("user_phonecall", null);
            }
            set {
                SetRelatedEntity("user_phonecall", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_phonecall_createdby")]
        public SystemUser lk_phonecall_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_phonecall_createdby", null);
            }
            set {
                SetRelatedEntity("lk_phonecall_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_Phonecalls")]
        public SalesOrder SalesOrder_Phonecalls {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_Phonecalls", null);
            }
            set {
                SetRelatedEntity("SalesOrder_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_Phonecalls")]
        public CampaignActivity CampaignActivity_Phonecalls {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_Phonecalls", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_Phonecalls")]
        public Quote Quote_Phonecalls {
            get {
                return GetRelatedEntity<Quote>("Quote_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Quote_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_Phonecalls")]
        public Campaign Campaign_Phonecalls {
            get {
                return GetRelatedEntity<Campaign>("Campaign_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Campaign_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_Phonecalls")]
        public KnowledgeArticle KnowledgeArticle_Phonecalls {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_Phonecalls", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_phonecall")]
        public SLA sla_phonecall {
            get {
                return GetRelatedEntity<SLA>("sla_phonecall", null);
            }
            set {
                SetRelatedEntity("sla_phonecall", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_phonecall")]
        public SLA manualsla_phonecall {
            get {
                return GetRelatedEntity<SLA>("manualsla_phonecall", null);
            }
            set {
                SetRelatedEntity("manualsla_phonecall", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Phonecalls")]
        public Contact Contact_Phonecalls {
            get {
                return GetRelatedEntity<Contact>("Contact_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Contact_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_phonecall_modifiedby")]
        public SystemUser lk_phonecall_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_phonecall_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_phonecall_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Phonecalls")]
        public Account Account_Phonecalls {
            get {
                return GetRelatedEntity<Account>("Account_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Account_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_phonecall_createdonbehalfby")]
        public SystemUser lk_phonecall_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_phonecall_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_phonecall_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_Phonecalls")]
        public Lead Lead_Phonecalls {
            get {
                return GetRelatedEntity<Lead>("Lead_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Lead_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Phonecalls")]
        public Incident Incident_Phonecalls {
            get {
                return GetRelatedEntity<Incident>("Incident_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Incident_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_Phonecalls")]
        public Invoice Invoice_Phonecalls {
            get {
                return GetRelatedEntity<Invoice>("Invoice_Phonecalls", null);
            }
            set {
                SetRelatedEntity("Invoice_Phonecalls", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_phonecall_modifiedonbehalfby")]
        public SystemUser lk_phonecall_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_phonecall_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_phonecall_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_PhoneCalls")]
        public BookableResourceBookingHeader bookableresourcebookingheader_PhoneCalls {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_PhoneCalls", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_PhoneCalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_PhoneCalls")]
        public BookableResourceBooking bookableresourcebooking_PhoneCalls {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_PhoneCalls", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_PhoneCalls", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_PhoneCalls")]
        public Entitlement entitlement_PhoneCalls {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_PhoneCalls", null);
            }
            set {
                SetRelatedEntity("entitlement_PhoneCalls", null, value);
            }
        }
        
        [RelationshipSchemaName("PhoneCall_QueueItem")]
        public IEnumerable<QueueItem> PhoneCall_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("PhoneCall_QueueItem", null);
            }
            set {
                SetRelatedEntities("PhoneCall_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("phonecall_activity_parties")]
        public IEnumerable<ActivityParty> phonecall_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("phonecall_activity_parties", null);
            }
            set {
                SetRelatedEntities("phonecall_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("phonecall_connections1")]
        public IEnumerable<Connection> phonecall_connections1 {
            get {
                return GetRelatedEntities<Connection>("phonecall_connections1", null);
            }
            set {
                SetRelatedEntities("phonecall_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("phonecall_campaignresponse")]
        public IEnumerable<CampaignResponse> phonecall_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("phonecall_campaignresponse", null);
            }
            set {
                SetRelatedEntities("phonecall_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("PhoneCall_SyncErrors")]
        public IEnumerable<SyncError> PhoneCall_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("PhoneCall_SyncErrors", null);
            }
            set {
                SetRelatedEntities("PhoneCall_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("phonecall_connections2")]
        public IEnumerable<Connection> phonecall_connections2 {
            get {
                return GetRelatedEntities<Connection>("phonecall_connections2", null);
            }
            set {
                SetRelatedEntities("phonecall_connections2", null, value);
            }
        }
        
        public static PhoneCall Retrieve(IOrganizationService service, Guid id, params Expression<Func<PhoneCall,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>A specific item in a queue, such as a case record or an activity record.</para>
    /// <para>Display Name: Queue Item</para>
    /// </summary>
    [EntityLogicalName("queueitem")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class QueueItem : ExtendedEntity<QueueItemState, QueueItem_StatusCode> {
        
        public const string EntityLogicalName = "queueitem";
        
        public const int EntityTypeCode = 2029;
        
        public QueueItem() : 
                base(EntityLogicalName) {
        }
        
        public QueueItem(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("title");
            }
        }
        
        [AttributeLogicalName("queueitemid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("queueitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the queue item.</para>
        /// <para>Display Name: Queue Item</para>
        /// </summary>
        [AttributeLogicalName("queueitemid")]
        public Guid? QueueItemId {
            get {
                return GetAttributeValue<Guid?>("queueitemid");
            }
            set {
                SetId("queueitemid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the type of the queue item, such as activity, case, or appointment.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("objecttypecode")]
        public QueueItem_ObjectTypeCode? ObjectTypeCode {
            get {
                return GetOptionSetValue<QueueItem_ObjectTypeCode>("objecttypecode");
            }
        }
        
        /// <summary>
        /// <para>Shows the title or name that describes the queue record. This value is copied from the record that was assigned to the queue.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
        }
        
        /// <summary>
        /// <para>Priority of the queue item.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("priority")]
        public int? Priority {
            get {
                return GetAttributeValue<int?>("priority");
            }
            set {
                SetAttributeValue("priority", value);
            }
        }
        
        /// <summary>
        /// <para>Recipients listed on the To line of the message for email queue items.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("torecipients")]
        public string ToRecipients {
            get {
                return GetAttributeValue<string>("torecipients");
            }
            set {
                SetAttributeValue("torecipients", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the queue item.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date the record was assigned to the queue.</para>
        /// <para>Display Name: Entered Queue</para>
        /// </summary>
        [AttributeLogicalName("enteredon")]
        public DateTime? EnteredOn {
            get {
                return GetAttributeValue<DateTime?>("enteredon");
            }
        }
        
        /// <summary>
        /// <para>Status of the queue item.</para>
        /// <para>Display Name: Status (deprecated)</para>
        /// </summary>
        [AttributeLogicalName("state")]
        public int? State {
            get {
                return GetAttributeValue<int?>("state");
            }
            set {
                SetAttributeValue("state", value);
            }
        }
        
        [AttributeLogicalName("objectidname")]
        public string ObjectIdName {
            get {
                return GetAttributeValue<string>("objectidname");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the queue item.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Choose the queue that the item is assigned to.</para>
        /// <para>Display Name: Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        public EntityReference QueueId {
            get {
                return GetAttributeValue<EntityReference>("queueid");
            }
            set {
                SetAttributeValue("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        [AttributeLogicalName("queueidname")]
        public string QueueIdName {
            get {
                return GetAttributeValue<string>("queueidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Version number of the queue item.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Choose the activity, case, or article assigned to the queue.</para>
        /// <para>Display Name: Object</para>
        /// </summary>
        [AttributeLogicalName("objectid")]
        public EntityReference ObjectId {
            get {
                return GetAttributeValue<EntityReference>("objectid");
            }
            set {
                SetAttributeValue("objectid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the queue record is active or inactive. Inactive queue records are read-only and can't be edited unless they are reactivated.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public QueueItemState? StateCode {
            get {
                return GetOptionSetValue<QueueItemState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("organizationidname")]
        public string OrganizationIdName {
            get {
                return GetAttributeValue<string>("organizationidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization with which the queue item is associated.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who is working on the queue item.</para>
        /// <para>Display Name: Worked By</para>
        /// </summary>
        [AttributeLogicalName("workerid")]
        public EntityReference WorkerId {
            get {
                return GetAttributeValue<EntityReference>("workerid");
            }
            set {
                SetAttributeValue("workerid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the queue item was last assigned to a user.</para>
        /// <para>Display Name: Worked On</para>
        /// </summary>
        [AttributeLogicalName("workeridmodifiedon")]
        public DateTime? WorkerIdModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("workeridmodifiedon");
            }
        }
        
        [AttributeLogicalName("workeridname")]
        public string WorkerIdName {
            get {
                return GetAttributeValue<string>("workeridname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the queue item.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Select the item's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public QueueItem_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<QueueItem_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Regarding Object Type</para>
        /// </summary>
        [AttributeLogicalName("objectidtypecode")]
        public string ObjectIdTypeCode {
            get {
                return GetAttributeValue<string>("objectidtypecode");
            }
            set {
                SetAttributeValue("objectidtypecode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Sender who created the queue item.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("sender")]
        public string Sender {
            get {
                return GetAttributeValue<string>("sender");
            }
            set {
                SetAttributeValue("sender", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the queueitem.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the queue item.</para>
        /// <para>Display Name: Status Reason (deprecated)</para>
        /// </summary>
        [AttributeLogicalName("status")]
        public int? Status {
            get {
                return GetAttributeValue<int?>("status");
            }
            set {
                SetAttributeValue("status", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Worker Type</para>
        /// </summary>
        [AttributeLogicalName("workeridtype")]
        public string WorkerIdType {
            get {
                return GetAttributeValue<string>("workeridtype");
            }
            set {
                SetAttributeValue("workeridtype", value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Incident_QueueItem")]
        public Incident Incident_QueueItem {
            get {
                return GetRelatedEntity<Incident>("Incident_QueueItem", null);
            }
            set {
                SetRelatedEntity("Incident_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_queueitembase_modifiedby")]
        public SystemUser lk_queueitembase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitembase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_queueitembase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("CampaignActivity_QueueItem")]
        public CampaignActivity CampaignActivity_QueueItem {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_QueueItem", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Letter_QueueItem")]
        public Letter Letter_QueueItem {
            get {
                return GetRelatedEntity<Letter>("Letter_QueueItem", null);
            }
            set {
                SetRelatedEntity("Letter_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("RecurringAppointmentMaster_QueueItem")]
        public RecurringAppointmentMaster RecurringAppointmentMaster_QueueItem {
            get {
                return GetRelatedEntity<RecurringAppointmentMaster>("RecurringAppointmentMaster_QueueItem", null);
            }
            set {
                SetRelatedEntity("RecurringAppointmentMaster_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Task_QueueItem")]
        public Task Task_QueueItem {
            get {
                return GetRelatedEntity<Task>("Task_QueueItem", null);
            }
            set {
                SetRelatedEntity("Task_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("PhoneCall_QueueItem")]
        public PhoneCall PhoneCall_QueueItem {
            get {
                return GetRelatedEntity<PhoneCall>("PhoneCall_QueueItem", null);
            }
            set {
                SetRelatedEntity("PhoneCall_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_queueitem_modifiedonbehalfby")]
        public SystemUser lk_queueitem_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitem_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_queueitem_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("SocialActivity_QueueItem")]
        public SocialActivity SocialActivity_QueueItem {
            get {
                return GetRelatedEntity<SocialActivity>("SocialActivity_QueueItem", null);
            }
            set {
                SetRelatedEntity("SocialActivity_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("CampaignResponse_QueueItem")]
        public CampaignResponse CampaignResponse_QueueItem {
            get {
                return GetRelatedEntity<CampaignResponse>("CampaignResponse_QueueItem", null);
            }
            set {
                SetRelatedEntity("CampaignResponse_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Email_QueueItem")]
        public Email Email_QueueItem {
            get {
                return GetRelatedEntity<Email>("Email_QueueItem", null);
            }
            set {
                SetRelatedEntity("Email_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("workerid")]
        [RelationshipSchemaName("team_queueitembase_workerid")]
        public Team team_queueitembase_workerid {
            get {
                return GetRelatedEntity<Team>("team_queueitembase_workerid", null);
            }
            set {
                SetRelatedEntity("team_queueitembase_workerid", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Fax_QueueItem")]
        public Fax Fax_QueueItem {
            get {
                return GetRelatedEntity<Fax>("Fax_QueueItem", null);
            }
            set {
                SetRelatedEntity("Fax_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("Appointment_QueueItem")]
        public Appointment Appointment_QueueItem {
            get {
                return GetRelatedEntity<Appointment>("Appointment_QueueItem", null);
            }
            set {
                SetRelatedEntity("Appointment_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("ServiceAppointment_QueueItem")]
        public ServiceAppointment ServiceAppointment_QueueItem {
            get {
                return GetRelatedEntity<ServiceAppointment>("ServiceAppointment_QueueItem", null);
            }
            set {
                SetRelatedEntity("ServiceAppointment_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_QueueItem")]
        public TransactionCurrency TransactionCurrency_QueueItem {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_QueueItem", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("organizationid")]
        [RelationshipSchemaName("organization_queueitems")]
        public Organization organization_queueitems {
            get {
                return GetRelatedEntity<Organization>("organization_queueitems", null);
            }
            set {
                SetRelatedEntity("organization_queueitems", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_queueitembase_createdby")]
        public SystemUser lk_queueitembase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitembase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_queueitembase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("ActivityPointer_QueueItem")]
        public ActivityPointer ActivityPointer_QueueItem {
            get {
                return GetRelatedEntity<ActivityPointer>("ActivityPointer_QueueItem", null);
            }
            set {
                SetRelatedEntity("ActivityPointer_QueueItem", null, value);
            }
        }
        
        [AttributeLogicalName("workerid")]
        [RelationshipSchemaName("lk_queueitembase_workerid")]
        public SystemUser lk_queueitembase_workerid {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitembase_workerid", null);
            }
            set {
                SetRelatedEntity("lk_queueitembase_workerid", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_queueitem_createdonbehalfby")]
        public SystemUser lk_queueitem_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_queueitem_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_queueitem_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("objectid")]
        [RelationshipSchemaName("knowledgearticle_QueueItems")]
        public KnowledgeArticle knowledgearticle_QueueItems {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_QueueItems", null);
            }
            set {
                SetRelatedEntity("knowledgearticle_QueueItems", null, value);
            }
        }
        
        [RelationshipSchemaName("QueueItem_SyncErrors")]
        public IEnumerable<SyncError> QueueItem_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("QueueItem_SyncErrors", null);
            }
            set {
                SetRelatedEntities("QueueItem_SyncErrors", null, value);
            }
        }
        
        public static QueueItem Retrieve(IOrganizationService service, Guid id, params Expression<Func<QueueItem,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Formal offer for products and/or services, proposed at specific prices and related payment terms, which is sent to a prospective customer.</para>
    /// <para>Display Name: Quote</para>
    /// </summary>
    [EntityLogicalName("quote")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Quote : ExtendedEntity<QuoteState, Quote_StatusCode> {
        
        public const string EntityLogicalName = "quote";
        
        public const int EntityTypeCode = 1084;
        
        public Quote() : 
                base(EntityLogicalName) {
        }
        
        public Quote(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("quoteid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("quoteid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the quote.</para>
        /// <para>Display Name: Quote</para>
        /// </summary>
        [AttributeLogicalName("quoteid")]
        public Guid? QuoteId {
            get {
                return GetAttributeValue<Guid?>("quoteid");
            }
            set {
                SetId("quoteid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamount_base")]
        public decimal? TotalAmount_Base {
            get {
                return GetMoneyValue("totalamount_base");
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping charges are processed correctly.</para>
        /// <para>Display Name: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("freighttermscode")]
        public Quote_FreightTermsCode? FreightTermsCode {
            get {
                return GetOptionSetValue<Quote_FreightTermsCode>("freighttermscode");
            }
            set {
                SetOptionSetValue("freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of all existing and write-in products included on the quote, based on the specified price list and quantities.</para>
        /// <para>Display Name: Total Detail Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount")]
        public decimal? TotalLineItemAmount {
            get {
                return GetMoneyValue("totallineitemamount");
            }
            set {
                SetMoneyValue("totallineitemamount", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the billing address.</para>
        /// <para>Display Name: Bill To Street 3</para>
        /// </summary>
        [AttributeLogicalName("billto_line3")]
        public string BillTo_Line3 {
            get {
                return GetAttributeValue<string>("billto_line3");
            }
            set {
                SetAttributeValue("billto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the version number of the quote for revision history tracking.</para>
        /// <para>Display Name: Revision ID</para>
        /// </summary>
        [AttributeLogicalName("revisionnumber")]
        public int? RevisionNumber {
            get {
                return GetAttributeValue<int?>("revisionnumber");
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 1</para>
        /// </summary>
        [AttributeLogicalName("billto_line1")]
        public string BillTo_Line1 {
            get {
                return GetAttributeValue<string>("billto_line1");
            }
            set {
                SetAttributeValue("billto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Phone</para>
        /// </summary>
        [AttributeLogicalName("shipto_telephone")]
        public string ShipTo_Telephone {
            get {
                return GetAttributeValue<string>("shipto_telephone");
            }
            set {
                SetAttributeValue("shipto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Manual Discount amounts specified on all products included in the quote. This value is reflected in the Detail Amount field on the quote and is added to any discount amount or rate specified on the quote</para>
        /// <para>Display Name: Total Line Item Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount")]
        public decimal? TotalLineItemDiscountAmount {
            get {
                return GetMoneyValue("totallineitemdiscountamount");
            }
            set {
                SetMoneyValue("totallineitemdiscountamount", value);
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Type the cost of freight or shipping for the products included in the quote for use in calculating the Total Amount field.</para>
        /// <para>Display Name: Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("freightamount")]
        public decimal? FreightAmount {
            get {
                return GetMoneyValue("freightamount");
            }
            set {
                SetMoneyValue("freightamount", value);
            }
        }
        
        /// <summary>
        /// <para>Select the quote's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Quote_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Quote_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Discount Amount converted field to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount_base")]
        public decimal? TotalDiscountAmount_Base {
            get {
                return GetMoneyValue("totaldiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the quote.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the account with which the quote is associated.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Tax amounts specified on all products included in the quote, included in the Total Amount due calculation for the quote.</para>
        /// <para>Display Name: Total Tax</para>
        /// </summary>
        [AttributeLogicalName("totaltax")]
        public decimal? TotalTax {
            get {
                return GetMoneyValue("totaltax");
            }
            set {
                SetMoneyValue("totaltax", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the quote.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the shipping address.</para>
        /// <para>Display Name: Ship To State/Province</para>
        /// </summary>
        [AttributeLogicalName("shipto_stateorprovince")]
        public string ShipTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("shipto_stateorprovince");
            }
            set {
                SetAttributeValue("shipto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Fax</para>
        /// </summary>
        [AttributeLogicalName("shipto_fax")]
        public string ShipTo_Fax {
            get {
                return GetAttributeValue<string>("shipto_fax");
            }
            set {
                SetAttributeValue("shipto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the quote.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public Quote_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<Quote_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's shipping address, such as "Headquarters" or "Field office", to identify the address.</para>
        /// <para>Display Name: Ship To Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_name")]
        public string ShipTo_Name {
            get {
                return GetAttributeValue<string>("shipto_name");
            }
            set {
                SetAttributeValue("shipto_name", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Ship To address.</para>
        /// <para>Display Name: Ship To Address</para>
        /// </summary>
        [AttributeLogicalName("shipto_composite")]
        public string ShipTo_Composite {
            get {
                return GetAttributeValue<string>("shipto_composite");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this quote. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the delivery date requested by the customer for all products in the quote.</para>
        /// <para>Display Name: Requested Delivery Date</para>
        /// </summary>
        [AttributeLogicalName("requestdeliveryby")]
        public DateTime? RequestDeliveryBy {
            get {
                return GetAttributeValue<DateTime?>("requestdeliveryby");
            }
            set {
                SetAttributeValue("requestdeliveryby", value);
            }
        }
        
        /// <summary>
        /// <para>Display Name: Potential Customer Type</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType {
            get {
                return GetAttributeValue<string>("customeridtype");
            }
            set {
                SetAttributeValue("customeridtype", value);
            }
        }
        
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName {
            get {
                return GetAttributeValue<string>("customeridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary contact name at the customer's shipping address.</para>
        /// <para>Display Name: Ship To Contact Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_contactname")]
        public string ShipTo_ContactName {
            get {
                return GetAttributeValue<string>("shipto_contactname");
            }
            set {
                SetAttributeValue("shipto_contactname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's billing address.</para>
        /// <para>Display Name: Bill To City</para>
        /// </summary>
        [AttributeLogicalName("billto_city")]
        public string BillTo_City {
            get {
                return GetAttributeValue<string>("billto_city");
            }
            set {
                SetAttributeValue("billto_city", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total product amount for the quote, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount due for the quote.</para>
        /// <para>Display Name: Total Pre-Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight")]
        public decimal? TotalAmountLessFreight {
            get {
                return GetMoneyValue("totalamountlessfreight");
            }
            set {
                SetMoneyValue("totalamountlessfreight", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the quote.</para>
        /// <para>Display Name: Total Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamount")]
        public decimal? TotalAmount {
            get {
                return GetMoneyValue("totalamount");
            }
            set {
                SetMoneyValue("totalamount", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's shipping address.</para>
        /// <para>Display Name: Ship To City</para>
        /// </summary>
        [AttributeLogicalName("shipto_city")]
        public string ShipTo_City {
            get {
                return GetAttributeValue<string>("shipto_city");
            }
            set {
                SetAttributeValue("shipto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 2</para>
        /// </summary>
        [AttributeLogicalName("shipto_line2")]
        public string ShipTo_Line2 {
            get {
                return GetAttributeValue<string>("shipto_line2");
            }
            set {
                SetAttributeValue("shipto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the shipping address.</para>
        /// <para>Display Name: Ship To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("shipto_postalcode")]
        public string ShipTo_PostalCode {
            get {
                return GetAttributeValue<string>("shipto_postalcode");
            }
            set {
                SetAttributeValue("shipto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public Quote_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<Quote_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the quote was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        [AttributeLogicalName("opportunityidname")]
        public string OpportunityIdName {
            get {
                return GetAttributeValue<string>("opportunityidname");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Tax field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Tax (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaltax_base")]
        public decimal? TotalTax_Base {
            get {
                return GetMoneyValue("totaltax_base");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the quote record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's billing address, such as "Headquarters" or "Field office", to identify the address.</para>
        /// <para>Display Name: Bill To Name</para>
        /// </summary>
        [AttributeLogicalName("billto_name")]
        public string BillTo_Name {
            get {
                return GetAttributeValue<string>("billto_name");
            }
            set {
                SetAttributeValue("billto_name", value);
            }
        }
        
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Line Item Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Line Item Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount_base")]
        public decimal? TotalLineItemDiscountAmount_Base {
            get {
                return GetMoneyValue("totallineitemdiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type the discount amount for the quote if the customer is eligible for special savings.</para>
        /// <para>Display Name: Quote Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("discountamount")]
        public decimal? DiscountAmount {
            get {
                return GetMoneyValue("discountamount");
            }
            set {
                SetMoneyValue("discountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Bill To address.</para>
        /// <para>Display Name: Bill To Address</para>
        /// </summary>
        [AttributeLogicalName("billto_composite")]
        public string BillTo_Composite {
            get {
                return GetAttributeValue<string>("billto_composite");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the quote pricing is effective or was first communicated to the customer.</para>
        /// <para>Display Name: Effective From</para>
        /// </summary>
        [AttributeLogicalName("effectivefrom")]
        public DateTime? EffectiveFrom {
            get {
                return GetAttributeValue<DateTime?>("effectivefrom");
            }
            set {
                SetAttributeValue("effectivefrom", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the quote is draft, active, won, or closed. Only draft quotes can be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public QuoteState? StateCode {
            get {
                return GetOptionSetValue<QuoteState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the billing address.</para>
        /// <para>Display Name: Bill To Address ID</para>
        /// </summary>
        [AttributeLogicalName("billto_addressid")]
        public Guid? BillTo_AddressId {
            get {
                return GetAttributeValue<Guid?>("billto_addressid");
            }
            set {
                SetAttributeValue("billto_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Quote Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("discountamount_base")]
        public decimal? DiscountAmount_Base {
            get {
                return GetMoneyValue("discountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Enter the expiration date or last day the quote pricing is effective for the customer.</para>
        /// <para>Display Name: Effective To</para>
        /// </summary>
        [AttributeLogicalName("effectiveto")]
        public DateTime? EffectiveTo {
            get {
                return GetAttributeValue<DateTime?>("effectiveto");
            }
            set {
                SetAttributeValue("effectiveto", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's billing address.</para>
        /// <para>Display Name: Bill To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("billto_country")]
        public string BillTo_Country {
            get {
                return GetAttributeValue<string>("billto_country");
            }
            set {
                SetAttributeValue("billto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the shipping address.</para>
        /// <para>Display Name: Ship To Address ID</para>
        /// </summary>
        [AttributeLogicalName("shipto_addressid")]
        public Guid? ShipTo_AddressId {
            get {
                return GetAttributeValue<Guid?>("shipto_addressid");
            }
            set {
                SetAttributeValue("shipto_addressid", value);
            }
        }
        
        [AttributeLogicalName("campaignidname")]
        public string CampaignIdName {
            get {
                return GetAttributeValue<string>("campaignidname");
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 2</para>
        /// </summary>
        [AttributeLogicalName("billto_line2")]
        public string BillTo_Line2 {
            get {
                return GetAttributeValue<string>("billto_line2");
            }
            set {
                SetAttributeValue("billto_line2", value);
            }
        }
        
        [AttributeLogicalName("pricelevelidname")]
        public string PriceLevelIdName {
            get {
                return GetAttributeValue<string>("pricelevelidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total discount amount, based on the discount price and rate entered on the quote.</para>
        /// <para>Display Name: Total Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount")]
        public decimal? TotalDiscountAmount {
            get {
                return GetMoneyValue("totaldiscountamount");
            }
            set {
                SetMoneyValue("totaldiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Ship To Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("shipto_freighttermscode")]
        public Quote_ShipTo_FreightTermsCode? ShipTo_FreightTermsCode {
            get {
                return GetOptionSetValue<Quote_ShipTo_FreightTermsCode>("shipto_freighttermscode");
            }
            set {
                SetOptionSetValue("shipto_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 1</para>
        /// </summary>
        [AttributeLogicalName("shipto_line1")]
        public string ShipTo_Line1 {
            get {
                return GetAttributeValue<string>("shipto_line1");
            }
            set {
                SetAttributeValue("shipto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date a decision or order is due from the customer to indicate the expiration date of the quote.</para>
        /// <para>Display Name: Due By</para>
        /// </summary>
        [AttributeLogicalName("expireson")]
        public DateTime? ExpiresOn {
            get {
                return GetAttributeValue<DateTime?>("expireson");
            }
            set {
                SetAttributeValue("expireson", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the billing address.</para>
        /// <para>Display Name: Bill To State/Province</para>
        /// </summary>
        [AttributeLogicalName("billto_stateorprovince")]
        public string BillTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("billto_stateorprovince");
            }
            set {
                SetAttributeValue("billto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the quote, such as the products or services offered or details about the customer's product preferences.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the quote.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the quote number for customer reference and searching capabilities. The number cannot be modified.</para>
        /// <para>Display Name: Quote ID</para>
        /// </summary>
        [AttributeLogicalName("quotenumber")]
        public string QuoteNumber {
            get {
                return GetAttributeValue<string>("quotenumber");
            }
            set {
                SetAttributeValue("quotenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary contact name at the customer's billing address.</para>
        /// <para>Display Name: Bill To Contact Name</para>
        /// </summary>
        [AttributeLogicalName("billto_contactname")]
        public string BillTo_ContactName {
            get {
                return GetAttributeValue<string>("billto_contactname");
            }
            set {
                SetAttributeValue("billto_contactname", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact associated with the quote.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        /// <summary>
        /// <para>Shows the Pre-Freight Amount converted field to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Pre-Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight_base")]
        public decimal? TotalAmountLessFreight_Base {
            get {
                return GetMoneyValue("totalamountlessfreight_base");
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("freightamount_base")]
        public decimal? FreightAmount_Base {
            get {
                return GetMoneyValue("freightamount_base");
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("shipto_country")]
        public string ShipTo_Country {
            get {
                return GetAttributeValue<string>("shipto_country");
            }
            set {
                SetAttributeValue("shipto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("pricelevelid")]
        public EntityReference PriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("pricelevelid");
            }
            set {
                SetAttributeValue("pricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the shipping address.</para>
        /// <para>Display Name: Ship To Street 3</para>
        /// </summary>
        [AttributeLogicalName("shipto_line3")]
        public string ShipTo_Line3 {
            get {
                return GetAttributeValue<string>("shipto_line3");
            }
            set {
                SetAttributeValue("shipto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the campaign that the order was created from.</para>
        /// <para>Display Name: Source Campaign</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public EntityReference CampaignId {
            get {
                return GetAttributeValue<EntityReference>("campaignid");
            }
            set {
                SetAttributeValue("campaignid", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the billing address.</para>
        /// <para>Display Name: Bill To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("billto_postalcode")]
        public string BillTo_PostalCode {
            get {
                return GetAttributeValue<string>("billto_postalcode");
            }
            set {
                SetAttributeValue("billto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
        /// <para>Display Name: Potential Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the opportunity that the quote is related to for reporting and analytics.</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public EntityReference OpportunityId {
            get {
                return GetAttributeValue<EntityReference>("opportunityid");
            }
            set {
                SetAttributeValue("opportunityid", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Type the discount rate that should be applied to the Detail Amount field to include additional savings for the customer in the quote.</para>
        /// <para>Display Name: Quote Discount (%)</para>
        /// </summary>
        [AttributeLogicalName("discountpercentage")]
        public decimal? DiscountPercentage {
            get {
                return GetAttributeValue<decimal?>("discountpercentage");
            }
            set {
                SetAttributeValue("discountpercentage", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Detail Amount field converted to the system's default base currency. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Detail Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount_base")]
        public decimal? TotalLineItemAmount_Base {
            get {
                return GetMoneyValue("totallineitemamount_base");
            }
        }
        
        /// <summary>
        /// <para>Select whether the products included in the quote should be shipped to the specified address or held until the customer calls with further pick up or delivery instructions.</para>
        /// <para>Display Name: Ship To</para>
        /// </summary>
        [AttributeLogicalName("willcall")]
        public bool? WillCall {
            get {
                return GetAttributeValue<bool?>("willcall");
            }
            set {
                SetAttributeValue("willcall", value);
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Phone</para>
        /// </summary>
        [AttributeLogicalName("billto_telephone")]
        public string BillTo_Telephone {
            get {
                return GetAttributeValue<string>("billto_telephone");
            }
            set {
                SetAttributeValue("billto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Fax</para>
        /// </summary>
        [AttributeLogicalName("billto_fax")]
        public string BillTo_Fax {
            get {
                return GetAttributeValue<string>("billto_fax");
            }
            set {
                SetAttributeValue("billto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Pricing error for the quote.</para>
        /// <para>Display Name: Pricing Error </para>
        /// </summary>
        [AttributeLogicalName("pricingerrorcode")]
        public qooi_pricingerrorcode? PricingErrorCode {
            get {
                return GetOptionSetValue<qooi_pricingerrorcode>("pricingerrorcode");
            }
            set {
                SetOptionSetValue("pricingerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the quote.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the quote was closed to indicate the expiration, revision, or cancellation date.</para>
        /// <para>Display Name: Closed On</para>
        /// </summary>
        [AttributeLogicalName("closedon")]
        public DateTime? ClosedOn {
            get {
                return GetAttributeValue<DateTime?>("closedon");
            }
            set {
                SetAttributeValue("closedon", value);
            }
        }
        
        [RelationshipSchemaName("contactquotes_association")]
        public IEnumerable<Contact> contactquotes_association {
            get {
                return GetRelatedEntities<Contact>("contactquotes_association", null);
            }
            set {
                SetRelatedEntities("contactquotes_association", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("quote_customer_accounts")]
        public Account quote_customer_accounts {
            get {
                return GetRelatedEntity<Account>("quote_customer_accounts", null);
            }
            set {
                SetRelatedEntity("quote_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("quote_customer_contacts")]
        public Contact quote_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("quote_customer_contacts", null);
            }
            set {
                SetRelatedEntity("quote_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_quotes")]
        public Team team_quotes {
            get {
                return GetRelatedEntity<Team>("team_quotes", null);
            }
            set {
                SetRelatedEntity("team_quotes", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_quote_createdonbehalfby")]
        public SystemUser lk_quote_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_quote_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_quote_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_quotebase_createdby")]
        public SystemUser lk_quotebase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_quotebase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_quotebase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("campaignid")]
        [RelationshipSchemaName("campaign_quotes")]
        public Campaign campaign_quotes {
            get {
                return GetRelatedEntity<Campaign>("campaign_quotes", null);
            }
            set {
                SetRelatedEntity("campaign_quotes", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_quotes")]
        public SystemUser system_user_quotes {
            get {
                return GetRelatedEntity<SystemUser>("system_user_quotes", null);
            }
            set {
                SetRelatedEntity("system_user_quotes", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_quote")]
        public SLA sla_quote {
            get {
                return GetRelatedEntity<SLA>("sla_quote", null);
            }
            set {
                SetRelatedEntity("sla_quote", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_quote")]
        public SLA manualsla_quote {
            get {
                return GetRelatedEntity<SLA>("manualsla_quote", null);
            }
            set {
                SetRelatedEntity("manualsla_quote", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_quotebase_modifiedby")]
        public SystemUser lk_quotebase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_quotebase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_quotebase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_quotes")]
        public BusinessUnit business_unit_quotes {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_quotes", null);
            }
            set {
                SetRelatedEntity("business_unit_quotes", null, value);
            }
        }
        
        [AttributeLogicalName("opportunityid")]
        [RelationshipSchemaName("opportunity_quotes")]
        public Opportunity opportunity_quotes {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_quotes", null);
            }
            set {
                SetRelatedEntity("opportunity_quotes", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_quote_modifiedonbehalfby")]
        public SystemUser lk_quote_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_quote_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_quote_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_quote")]
        public TransactionCurrency transactioncurrency_quote {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_quote", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_quote", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_SocialActivities")]
        public IEnumerable<SocialActivity> Quote_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("Quote_SocialActivities", null);
            }
            set {
                SetRelatedEntities("Quote_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("quote_connections2")]
        public IEnumerable<Connection> quote_connections2 {
            get {
                return GetRelatedEntities<Connection>("quote_connections2", null);
            }
            set {
                SetRelatedEntities("quote_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_SyncErrors")]
        public IEnumerable<SyncError> Quote_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Quote_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Quote_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("quote_activity_parties")]
        public IEnumerable<ActivityParty> quote_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("quote_activity_parties", null);
            }
            set {
                SetRelatedEntities("quote_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_Emails")]
        public IEnumerable<Email> Quote_Emails {
            get {
                return GetRelatedEntities<Email>("Quote_Emails", null);
            }
            set {
                SetRelatedEntities("Quote_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> Quote_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("Quote_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("Quote_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_Tasks")]
        public IEnumerable<Task> Quote_Tasks {
            get {
                return GetRelatedEntities<Task>("Quote_Tasks", null);
            }
            set {
                SetRelatedEntities("Quote_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_Letters")]
        public IEnumerable<Letter> Quote_Letters {
            get {
                return GetRelatedEntities<Letter>("Quote_Letters", null);
            }
            set {
                SetRelatedEntities("Quote_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_Faxes")]
        public IEnumerable<Fax> Quote_Faxes {
            get {
                return GetRelatedEntities<Fax>("Quote_Faxes", null);
            }
            set {
                SetRelatedEntities("Quote_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_SharepointDocumentLocation")]
        public IEnumerable<SharePointDocumentLocation> Quote_SharepointDocumentLocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("Quote_SharepointDocumentLocation", null);
            }
            set {
                SetRelatedEntities("Quote_SharepointDocumentLocation", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_ActivityPointers")]
        public IEnumerable<ActivityPointer> Quote_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("Quote_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("Quote_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("quote_connections1")]
        public IEnumerable<Connection> quote_connections1 {
            get {
                return GetRelatedEntities<Connection>("quote_connections1", null);
            }
            set {
                SetRelatedEntities("quote_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("quote_orders")]
        public IEnumerable<SalesOrder> quote_orders {
            get {
                return GetRelatedEntities<SalesOrder>("quote_orders", null);
            }
            set {
                SetRelatedEntities("quote_orders", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> Quote_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("Quote_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("Quote_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_Appointments")]
        public IEnumerable<Appointment> Quote_Appointments {
            get {
                return GetRelatedEntities<Appointment>("Quote_Appointments", null);
            }
            set {
                SetRelatedEntities("Quote_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("Quote_Phonecalls")]
        public IEnumerable<PhoneCall> Quote_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("Quote_Phonecalls", null);
            }
            set {
                SetRelatedEntities("Quote_Phonecalls", null, value);
            }
        }
        
        public static Quote Retrieve(IOrganizationService service, Guid id, params Expression<Func<Quote,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Represents a model to evaluate skills or other related entities.</para>
    /// <para>Display Name: Rating Model</para>
    /// </summary>
    [EntityLogicalName("ratingmodel")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class RatingModel : ExtendedEntity<RatingModelState, RatingModel_StatusCode> {
        
        public const string EntityLogicalName = "ratingmodel";
        
        public const int EntityTypeCode = 1144;
        
        public RatingModel() : 
                base(EntityLogicalName) {
        }
        
        public RatingModel(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("ratingmodelid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("ratingmodelid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the rating model.</para>
        /// <para>Display Name: Rating Model</para>
        /// </summary>
        [AttributeLogicalName("ratingmodelid")]
        public Guid? RatingModelId {
            get {
                return GetAttributeValue<Guid?>("ratingmodelid");
            }
            set {
                SetId("ratingmodelid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the ratingmodel with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the minimum rating value.</para>
        /// <para>Display Name: Min Rating Value</para>
        /// </summary>
        [AttributeLogicalName("minratingvalue")]
        public int? MinRatingValue {
            get {
                return GetAttributeValue<int?>("minratingvalue");
            }
            set {
                SetAttributeValue("minratingvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the maximum rating value.</para>
        /// <para>Display Name: Max Rating Value</para>
        /// </summary>
        [AttributeLogicalName("maxratingvalue")]
        public int? MaxRatingValue {
            get {
                return GetAttributeValue<int?>("maxratingvalue");
            }
            set {
                SetAttributeValue("maxratingvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type the name of the rating model.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the RatingModel with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Rating Model</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public RatingModel_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<RatingModel_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Rating Model</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public RatingModelState? StateCode {
            get {
                return GetOptionSetValue<RatingModelState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_ratingmodel")]
        public TransactionCurrency TransactionCurrency_ratingmodel {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_ratingmodel", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_ratingmodel", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_ratingmodel")]
        public BusinessUnit business_unit_ratingmodel {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_ratingmodel", null);
            }
            set {
                SetRelatedEntity("business_unit_ratingmodel", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_ratingmodel")]
        public Team team_ratingmodel {
            get {
                return GetRelatedEntity<Team>("team_ratingmodel", null);
            }
            set {
                SetRelatedEntity("team_ratingmodel", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_ratingmodel")]
        public SystemUser user_ratingmodel {
            get {
                return GetRelatedEntity<SystemUser>("user_ratingmodel", null);
            }
            set {
                SetRelatedEntity("user_ratingmodel", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_ratingmodel_modifiedonbehalfby")]
        public SystemUser lk_ratingmodel_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_ratingmodel_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_ratingmodel_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_ratingmodel_modifiedby")]
        public SystemUser lk_ratingmodel_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_ratingmodel_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_ratingmodel_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_ratingmodel_createdonbehalfby")]
        public SystemUser lk_ratingmodel_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_ratingmodel_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_ratingmodel_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_ratingmodel_createdby")]
        public SystemUser lk_ratingmodel_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_ratingmodel_createdby", null);
            }
            set {
                SetRelatedEntity("lk_ratingmodel_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("RatingModel_SyncErrors")]
        public IEnumerable<SyncError> RatingModel_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("RatingModel_SyncErrors", null);
            }
            set {
                SetRelatedEntities("RatingModel_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("ratingmodel_ratingvalue_RatingModel")]
        public IEnumerable<RatingValue> ratingmodel_ratingvalue_RatingModel {
            get {
                return GetRelatedEntities<RatingValue>("ratingmodel_ratingvalue_RatingModel", null);
            }
            set {
                SetRelatedEntities("ratingmodel_ratingvalue_RatingModel", null, value);
            }
        }
        
        public static RatingModel Retrieve(IOrganizationService service, Guid id, params Expression<Func<RatingModel,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>A unique value associated with a rating model that allows providing a user friendly rating value.</para>
    /// <para>Display Name: Rating Value</para>
    /// </summary>
    [EntityLogicalName("ratingvalue")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class RatingValue : ExtendedEntity<RatingValueState, RatingValue_StatusCode> {
        
        public const string EntityLogicalName = "ratingvalue";
        
        public const int EntityTypeCode = 1142;
        
        public RatingValue() : 
                base(EntityLogicalName) {
        }
        
        public RatingValue(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("ratingvalueid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("ratingvalueid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the rating value.</para>
        /// <para>Display Name: Rating Value</para>
        /// </summary>
        [AttributeLogicalName("ratingvalueid")]
        public Guid? RatingValueId {
            get {
                return GetAttributeValue<Guid?>("ratingvalueid");
            }
            set {
                SetId("ratingvalueid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the Rating Value</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public RatingValue_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<RatingValue_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the ratingvalue with respect to the base currency.</para>
        /// <para>Display Name: ExchangeRate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the record was modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        [AttributeLogicalName("ratingmodelname")]
        public string RatingModelName {
            get {
                return GetAttributeValue<string>("ratingmodelname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who modified the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Select the model that this rating value is associated with.</para>
        /// <para>Display Name: Rating Model</para>
        /// </summary>
        [AttributeLogicalName("ratingmodel")]
        public EntityReference RatingModel {
            get {
                return GetAttributeValue<EntityReference>("ratingmodel");
            }
            set {
                SetAttributeValue("ratingmodel", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Type a rating value which is unique to the rating model it is associated with and lies within the range specified on the model.</para>
        /// <para>Display Name: Value</para>
        /// </summary>
        [AttributeLogicalName("value")]
        public int? Value {
            get {
                return GetAttributeValue<int?>("value");
            }
            set {
                SetAttributeValue("value", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name that represents a rating value such as familiar, good, proficient etc.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the RatingValue with respect to the base currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Status of the Rating Value</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public RatingValueState? StateCode {
            get {
                return GetOptionSetValue<RatingValueState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_ratingvalue")]
        public TransactionCurrency TransactionCurrency_ratingvalue {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_ratingvalue", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_ratingvalue", null, value);
            }
        }
        
        [AttributeLogicalName("ratingmodel")]
        [RelationshipSchemaName("ratingmodel_ratingvalue_RatingModel")]
        public RatingModel ratingmodel_ratingvalue_RatingModel {
            get {
                return GetRelatedEntity<RatingModel>("ratingmodel_ratingvalue_RatingModel", null);
            }
            set {
                SetRelatedEntity("ratingmodel_ratingvalue_RatingModel", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_ratingvalue")]
        public BusinessUnit business_unit_ratingvalue {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_ratingvalue", null);
            }
            set {
                SetRelatedEntity("business_unit_ratingvalue", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_ratingvalue")]
        public Team team_ratingvalue {
            get {
                return GetRelatedEntity<Team>("team_ratingvalue", null);
            }
            set {
                SetRelatedEntity("team_ratingvalue", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_ratingvalue")]
        public SystemUser user_ratingvalue {
            get {
                return GetRelatedEntity<SystemUser>("user_ratingvalue", null);
            }
            set {
                SetRelatedEntity("user_ratingvalue", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_ratingvalue_modifiedonbehalfby")]
        public SystemUser lk_ratingvalue_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_ratingvalue_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_ratingvalue_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_ratingvalue_modifiedby")]
        public SystemUser lk_ratingvalue_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_ratingvalue_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_ratingvalue_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_ratingvalue_createdonbehalfby")]
        public SystemUser lk_ratingvalue_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_ratingvalue_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_ratingvalue_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_ratingvalue_createdby")]
        public SystemUser lk_ratingvalue_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_ratingvalue_createdby", null);
            }
            set {
                SetRelatedEntity("lk_ratingvalue_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("RatingValue_SyncErrors")]
        public IEnumerable<SyncError> RatingValue_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("RatingValue_SyncErrors", null);
            }
            set {
                SetRelatedEntities("RatingValue_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("ratingvalue_bookableresourcecharacteristic_RatingValue")]
        public IEnumerable<BookableResourceCharacteristic> ratingvalue_bookableresourcecharacteristic_RatingValue {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("ratingvalue_bookableresourcecharacteristic_RatingValue", null);
            }
            set {
                SetRelatedEntities("ratingvalue_bookableresourcecharacteristic_RatingValue", null, value);
            }
        }
        
        public static RatingValue Retrieve(IOrganizationService service, Guid id, params Expression<Func<RatingValue,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>The Master appointment of a recurring appointment series.</para>
    /// <para>Display Name: Recurring Appointment</para>
    /// </summary>
    [EntityLogicalName("recurringappointmentmaster")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class RecurringAppointmentMaster : ExtendedEntity<RecurringAppointmentMasterState, RecurringAppointmentMaster_StatusCode> {
        
        public const string EntityLogicalName = "recurringappointmentmaster";
        
        public const int EntityTypeCode = 4251;
        
        public RecurringAppointmentMaster() : 
                base(EntityLogicalName) {
        }
        
        public RecurringAppointmentMaster(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the recurring appointment series.</para>
        /// <para>Display Name: Recurring Appointment</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Number of appointment occurrences in a recurring appointment series.</para>
        /// <para>Display Name: Occurrences</para>
        /// </summary>
        [AttributeLogicalName("occurrences")]
        public int? Occurrences {
            get {
                return GetAttributeValue<int?>("occurrences");
            }
            set {
                SetAttributeValue("occurrences", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the recurring appointment.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the recurring appointment type, such as status meeting or service call, to tie the appointment to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Microsoft Office Outlook recurring appointment series owner that correlates to the PR_OWNER_APPT_ID MAPI property.</para>
        /// <para>Display Name: Outlook Recurring Appointment Master Owner</para>
        /// </summary>
        [AttributeLogicalName("outlookownerapptid")]
        public int? OutlookOwnerApptId {
            get {
                return GetAttributeValue<int?>("outlookownerapptid");
            }
            set {
                SetAttributeValue("outlookownerapptid", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the recurring appointment's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public RecurringAppointmentMaster_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<RecurringAppointmentMaster_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the recurring appointment series.</para>
        /// <para>Display Name: End Time</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
        }
        
        /// <summary>
        /// <para>Bitmask that represents the days of the week on which the recurring appointment occurs.</para>
        /// <para>Display Name: Days Of Week Mask</para>
        /// </summary>
        [AttributeLogicalName("daysofweekmask")]
        public int? DaysOfWeekMask {
            get {
                return GetAttributeValue<int?>("daysofweekmask");
            }
            set {
                SetAttributeValue("daysofweekmask", value);
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the pattern type for the recurring appointment to indicate whether the appointment occurs daily, weekly, monthly, or yearly.</para>
        /// <para>Display Name: Recurrence Frequency</para>
        /// </summary>
        [AttributeLogicalName("recurrencepatterntype")]
        public RecurringAppointmentMaster_RecurrencePatternType? RecurrencePatternType {
            get {
                return GetOptionSetValue<RecurringAppointmentMaster_RecurrencePatternType>("recurrencepatterntype");
            }
            set {
                SetOptionSetValue("recurrencepatterntype", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the recurring appointment series.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the recurring appointment series is active or inactive.</para>
        /// <para>Display Name: Series Status</para>
        /// </summary>
        [AttributeLogicalName("seriesstatus")]
        public bool? SeriesStatus {
            get {
                return GetAttributeValue<bool?>("seriesstatus");
            }
            set {
                SetAttributeValue("seriesstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the recurring appointment is an all-day event to make sure that the required resources are scheduled for the full day.</para>
        /// <para>Display Name: All Day Event</para>
        /// </summary>
        [AttributeLogicalName("isalldayevent")]
        public bool? IsAllDayEvent {
            get {
                return GetAttributeValue<bool?>("isalldayevent");
            }
            set {
                SetAttributeValue("isalldayevent", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>List of deleted instances of the recurring appointment series.</para>
        /// <para>Display Name: Deleted Appointments</para>
        /// </summary>
        [AttributeLogicalName("deletedexceptionslist")]
        public string DeletedExceptionsList {
            get {
                return GetAttributeValue<string>("deletedexceptionslist");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>First day of week for the recurrence pattern.</para>
        /// <para>Display Name: First Day Of Week</para>
        /// </summary>
        [AttributeLogicalName("firstdayofweek")]
        public int? FirstDayOfWeek {
            get {
                return GetAttributeValue<int?>("firstdayofweek");
            }
            set {
                SetAttributeValue("firstdayofweek", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, user, or other equipment resources that are not needed at the recurring appointment, but can optionally attend.</para>
        /// <para>Display Name: Optional Attendees</para>
        /// </summary>
        [AttributeLogicalName("optionalattendees")]
        public IEnumerable<ActivityParty> OptionalAttendees {
            get {
                return GetEntityCollection<ActivityParty>("optionalattendees");
            }
            set {
                SetEntityCollection("optionalattendees", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Actual end date of the recurring appointment series based on the specified end date and recurrence pattern.</para>
        /// <para>Display Name: Effective End Date</para>
        /// </summary>
        [AttributeLogicalName("effectiveenddate")]
        public DateTime? EffectiveEndDate {
            get {
                return GetAttributeValue<DateTime?>("effectiveenddate");
            }
            set {
                SetAttributeValue("effectiveenddate", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the account, contact, lead, user, or other equipment resources that are required to attend the recurring appointment.</para>
        /// <para>Display Name: Required Attendees</para>
        /// </summary>
        [AttributeLogicalName("requiredattendees")]
        public IEnumerable<ActivityParty> RequiredAttendees {
            get {
                return GetEntityCollection<ActivityParty>("requiredattendees");
            }
            set {
                SetEntityCollection("requiredattendees", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("ismapiprivate")]
        public bool? IsMapiPrivate {
            get {
                return GetAttributeValue<bool?>("ismapiprivate");
            }
            set {
                SetAttributeValue("ismapiprivate", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>End date of the recurrence range.</para>
        /// <para>Display Name: Recurrence Range End</para>
        /// </summary>
        [AttributeLogicalName("patternenddate")]
        public DateTime? PatternEndDate {
            get {
                return GetAttributeValue<DateTime?>("patternenddate");
            }
            set {
                SetAttributeValue("patternenddate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique Outlook identifier to correlate recurring appointment series across Exchange mailboxes.</para>
        /// <para>Display Name: Outlook Recurring Appointment Master</para>
        /// </summary>
        [AttributeLogicalName("globalobjectid")]
        public string GlobalObjectId {
            get {
                return GetAttributeValue<string>("globalobjectid");
            }
            set {
                SetAttributeValue("globalobjectid", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the location where the recurring appointment will take place, such as a conference room or customer office.</para>
        /// <para>Display Name: Location</para>
        /// </summary>
        [AttributeLogicalName("location")]
        public string Location {
            get {
                return GetAttributeValue<string>("location");
            }
            set {
                SetAttributeValue("location", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the recurring appointment, such as key talking points or objectives.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates the month of the year for the recurrence pattern.</para>
        /// <para>Display Name: Month Of Year</para>
        /// </summary>
        [AttributeLogicalName("monthofyear")]
        public recurrencerule_monthofyear? MonthOfYear {
            get {
                return GetOptionSetValue<recurrencerule_monthofyear>("monthofyear");
            }
            set {
                SetOptionSetValue("monthofyear", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for an associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the recurring appointment series to occur on every Nth day of a month. Valid for monthly and yearly recurrence patterns only.</para>
        /// <para>Display Name: Instance</para>
        /// </summary>
        [AttributeLogicalName("instance")]
        public RecurringAppointmentMaster_Instance? Instance {
            get {
                return GetOptionSetValue<RecurringAppointmentMaster_Instance>("instance");
            }
            set {
                SetOptionSetValue("instance", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user who is in charge of coordinating or leading the recurring appointment to make sure the appointment is displayed in the user's My Activities view.</para>
        /// <para>Display Name: Organizer</para>
        /// </summary>
        [AttributeLogicalName("organizer")]
        public IEnumerable<ActivityParty> Organizer {
            get {
                return GetEntityCollection<ActivityParty>("organizer");
            }
            set {
                SetEntityCollection("organizer", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the recurrence rule that is associated with the recurring appointment series.</para>
        /// <para>Display Name: Recurrence Rule</para>
        /// </summary>
        [AttributeLogicalName("ruleid")]
        public EntityReference RuleId {
            get {
                return GetAttributeValue<EntityReference>("ruleid");
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the recurring appointment series should occur after every N months. Valid for monthly recurrence pattern only.</para>
        /// <para>Display Name: Nth Monthly</para>
        /// </summary>
        [AttributeLogicalName("isnthmonthly")]
        public bool? IsNthMonthly {
            get {
                return GetAttributeValue<bool?>("isnthmonthly");
            }
            set {
                SetAttributeValue("isnthmonthly", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Regenerate</para>
        /// </summary>
        [AttributeLogicalName("isregenerate")]
        public bool? IsRegenerate {
            get {
                return GetAttributeValue<bool?>("isregenerate");
            }
            set {
                SetAttributeValue("isregenerate", value);
            }
        }
        
        /// <summary>
        /// <para>Date of the next expanded instance of a recurring appointment series.</para>
        /// <para>Display Name: Next Expanded Instance Date</para>
        /// </summary>
        [AttributeLogicalName("nextexpansioninstancedate")]
        public DateTime? NextExpansionInstanceDate {
            get {
                return GetAttributeValue<DateTime?>("nextexpansioninstancedate");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the weekly recurrence pattern is a daily weekday pattern. Valid for weekly recurrence pattern only.</para>
        /// <para>Display Name: Every Weekday</para>
        /// </summary>
        [AttributeLogicalName("isweekdaypattern")]
        public bool? IsWeekDayPattern {
            get {
                return GetAttributeValue<bool?>("isweekdaypattern");
            }
            set {
                SetAttributeValue("isweekdaypattern", value);
            }
        }
        
        /// <summary>
        /// <para>Select the type of end date for the recurring appointment, such as no end date or the number of occurrences.</para>
        /// <para>Display Name: Pattern End Type</para>
        /// </summary>
        [AttributeLogicalName("patternendtype")]
        public RecurringAppointmentMaster_PatternEndType? PatternEndType {
            get {
                return GetOptionSetValue<RecurringAppointmentMaster_PatternEndType>("patternendtype");
            }
            set {
                SetOptionSetValue("patternendtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the recurring appointment is open, scheduled, completed, or canceled. Completed and canceled appointments are read-only and can't be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public RecurringAppointmentMasterState? StateCode {
            get {
                return GetOptionSetValue<RecurringAppointmentMasterState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the recurring appointment series should occur after every N years. Valid for yearly recurrence pattern only.</para>
        /// <para>Display Name: Nth Yearly</para>
        /// </summary>
        [AttributeLogicalName("isnthyearly")]
        public bool? IsNthYearly {
            get {
                return GetAttributeValue<bool?>("isnthyearly");
            }
            set {
                SetAttributeValue("isnthyearly", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the recurring appointment series is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the recurring appointment series.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the recurring appointment type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>The day of the month on which the recurring appointment occurs.</para>
        /// <para>Display Name: Day Of Month</para>
        /// </summary>
        [AttributeLogicalName("dayofmonth")]
        public int? DayOfMonth {
            get {
                return GetAttributeValue<int?>("dayofmonth");
            }
            set {
                SetAttributeValue("dayofmonth", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the recurring appointment series.</para>
        /// <para>Display Name: Start Time</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public RecurringAppointmentMaster_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<RecurringAppointmentMaster_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Start time of the recurring appointment series.</para>
        /// <para>Display Name: Pattern Start Time</para>
        /// </summary>
        [AttributeLogicalName("starttime")]
        public DateTime? StartTime {
            get {
                return GetAttributeValue<DateTime?>("starttime");
            }
            set {
                SetAttributeValue("starttime", value);
            }
        }
        
        /// <summary>
        /// <para>End time of the associated activity.</para>
        /// <para>Display Name: Pattern End Time</para>
        /// </summary>
        [AttributeLogicalName("endtime")]
        public DateTime? EndTime {
            get {
                return GetAttributeValue<DateTime?>("endtime");
            }
            set {
                SetAttributeValue("endtime", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the recurring appointment series for which the recurrence information was updated. </para>
        /// <para>Display Name: Group Id</para>
        /// </summary>
        [AttributeLogicalName("groupid")]
        public EntityReference GroupId {
            get {
                return GetAttributeValue<EntityReference>("groupid");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>State code to indicate whether the recurring appointment series is expanded fully or partially.</para>
        /// <para>Display Name: Expansion State Code</para>
        /// </summary>
        [AttributeLogicalName("expansionstatecode")]
        public RecurringAppointmentMaster_ExpansionStateCode? ExpansionStateCode {
            get {
                return GetOptionSetValue<RecurringAppointmentMaster_ExpansionStateCode>("expansionstatecode");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the recurring appointment series was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Number of units of a given recurrence type between occurrences.</para>
        /// <para>Display Name: Interval</para>
        /// </summary>
        [AttributeLogicalName("interval")]
        public int? Interval {
            get {
                return GetAttributeValue<int?>("interval");
            }
            set {
                SetAttributeValue("interval", value);
            }
        }
        
        /// <summary>
        /// <para>Date of last expanded instance of a recurring appointment series.</para>
        /// <para>Display Name: Last Expanded Instance Date</para>
        /// </summary>
        [AttributeLogicalName("lastexpandedinstancedate")]
        public DateTime? LastExpandedInstanceDate {
            get {
                return GetAttributeValue<DateTime?>("lastexpandedinstancedate");
            }
        }
        
        /// <summary>
        /// <para>Start date of the recurrence range.</para>
        /// <para>Display Name: Recurrence Range Start</para>
        /// </summary>
        [AttributeLogicalName("patternstartdate")]
        public DateTime? PatternStartDate {
            get {
                return GetAttributeValue<DateTime?>("patternstartdate");
            }
            set {
                SetAttributeValue("patternstartdate", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the recurring appointment series.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Actual start date of the recurring appointment series based on the specified start date and recurrence pattern.</para>
        /// <para>Display Name: Effective Start Date</para>
        /// </summary>
        [AttributeLogicalName("effectivestartdate")]
        public DateTime? EffectiveStartDate {
            get {
                return GetAttributeValue<DateTime?>("effectivestartdate");
            }
            set {
                SetAttributeValue("effectivestartdate", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Type of instance of a recurring appointment series.</para>
        /// <para>Display Name: Appointment Type</para>
        /// </summary>
        [AttributeLogicalName("instancetypecode")]
        public RecurringAppointmentMaster_InstanceTypeCode? InstanceTypeCode {
            get {
                return GetOptionSetValue<RecurringAppointmentMaster_InstanceTypeCode>("instancetypecode");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the recurring appointment series was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        /// <summary>
        /// <para>Duration of the recurring appointment series in minutes.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("duration")]
        public int? Duration {
            get {
                return GetAttributeValue<int?>("duration");
            }
            set {
                SetAttributeValue("duration", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_RecurringAppointmentMasters")]
        public msdyn_PostAlbum msdyn_postalbum_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_RecurringAppointmentMasters")]
        public dg_event dg_event_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<dg_event>("dg_event_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("dg_event_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_RecurringAppointmentMasters")]
        public dg_participant dg_participant_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("dg_participant_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_RecurringAppointmentMasters")]
        public KnowledgeArticle KnowledgeArticle_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_RecurringAppointmentMasters")]
        public CampaignActivity CampaignActivity_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_RecurringAppointmentMasters")]
        public Lead Lead_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Lead>("Lead_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Lead_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_RecurringAppointmentMasters")]
        public Quote Quote_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Quote>("Quote_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Quote_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_recurringappointmentmaster")]
        public SystemUser user_recurringappointmentmaster {
            get {
                return GetRelatedEntity<SystemUser>("user_recurringappointmentmaster", null);
            }
            set {
                SetRelatedEntity("user_recurringappointmentmaster", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_recurringappointmentmaster_modifiedonbehalfby")]
        public SystemUser lk_recurringappointmentmaster_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_recurringappointmentmaster_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_recurringappointmentmaster_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_RecurringAppointmentMasters")]
        public Account Account_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Account>("Account_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Account_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_recurringappointmentmaster_createdby")]
        public SystemUser lk_recurringappointmentmaster_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_recurringappointmentmaster_createdby", null);
            }
            set {
                SetRelatedEntity("lk_recurringappointmentmaster_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_RecurringAppointmentMasters")]
        public SalesOrder SalesOrder_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("SalesOrder_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_recurringappointmentmaster_createdonbehalfby")]
        public SystemUser lk_recurringappointmentmaster_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_recurringappointmentmaster_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_recurringappointmentmaster_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_RecurringAppointmentMasters")]
        public Contract Contract_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Contract>("Contract_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Contract_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_recurringappointmentmaster_activities")]
        public BusinessUnit business_unit_recurringappointmentmaster_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_recurringappointmentmaster_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_recurringappointmentmaster_activities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_RecurringAppointmentMasters")]
        public Opportunity Opportunity_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Opportunity_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_RecurringAppointmentMasters")]
        public Contact Contact_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Contact>("Contact_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Contact_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_recurringappointmentmaster")]
        public Team team_recurringappointmentmaster {
            get {
                return GetRelatedEntity<Team>("team_recurringappointmentmaster", null);
            }
            set {
                SetRelatedEntity("team_recurringappointmentmaster", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_recurringappointmentmaster")]
        public ActivityPointer activity_pointer_recurringappointmentmaster {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_recurringappointmentmaster", null);
            }
            set {
                SetRelatedEntity("activity_pointer_recurringappointmentmaster", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_RecurringAppointmentMasters")]
        public Invoice Invoice_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Invoice>("Invoice_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Invoice_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_recurringappointmentmaster_modifiedby")]
        public SystemUser lk_recurringappointmentmaster_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_recurringappointmentmaster_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_recurringappointmentmaster_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_RecurringAppointmentMaster")]
        public TransactionCurrency TransactionCurrency_RecurringAppointmentMaster {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_RecurringAppointmentMaster", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_RecurringAppointmentMaster", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_RecurringAppointmentMasters")]
        public Incident Incident_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Incident>("Incident_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Incident_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_RecurringAppointmentMasters")]
        public Campaign Campaign_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Campaign>("Campaign_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("Campaign_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_RecurringAppointmentMasters")]
        public BookableResourceBookingHeader bookableresourcebookingheader_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_RecurringAppointmentMasters")]
        public BookableResourceBooking bookableresourcebooking_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_RecurringAppointmentMasters", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_RecurringAppointmentMasters")]
        public Entitlement entitlement_RecurringAppointmentMasters {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntity("entitlement_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("recurringappointmentmaster_appointment")]
        public IEnumerable<Appointment> recurringappointmentmaster_appointment {
            get {
                return GetRelatedEntities<Appointment>("recurringappointmentmaster_appointment", null);
            }
            set {
                SetRelatedEntities("recurringappointmentmaster_appointment", null, value);
            }
        }
        
        [RelationshipSchemaName("recurringappointmentmaster_campaignresponse")]
        public IEnumerable<CampaignResponse> recurringappointmentmaster_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("recurringappointmentmaster_campaignresponse", null);
            }
            set {
                SetRelatedEntities("recurringappointmentmaster_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("recurringappointmentmaster_connections1")]
        public IEnumerable<Connection> recurringappointmentmaster_connections1 {
            get {
                return GetRelatedEntities<Connection>("recurringappointmentmaster_connections1", null);
            }
            set {
                SetRelatedEntities("recurringappointmentmaster_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("recurringappointmentmaster_connections2")]
        public IEnumerable<Connection> recurringappointmentmaster_connections2 {
            get {
                return GetRelatedEntities<Connection>("recurringappointmentmaster_connections2", null);
            }
            set {
                SetRelatedEntities("recurringappointmentmaster_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("recurringappointmentmaster_activity_parties")]
        public IEnumerable<ActivityParty> recurringappointmentmaster_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("recurringappointmentmaster_activity_parties", null);
            }
            set {
                SetRelatedEntities("recurringappointmentmaster_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("RecurringAppointmentMaster_QueueItem")]
        public IEnumerable<QueueItem> RecurringAppointmentMaster_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("RecurringAppointmentMaster_QueueItem", null);
            }
            set {
                SetRelatedEntities("RecurringAppointmentMaster_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("RecurringAppointmentMaster_SyncErrors")]
        public IEnumerable<SyncError> RecurringAppointmentMaster_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("RecurringAppointmentMaster_SyncErrors", null);
            }
            set {
                SetRelatedEntities("RecurringAppointmentMaster_SyncErrors", null, value);
            }
        }
        
        public static RecurringAppointmentMaster Retrieve(IOrganizationService service, Guid id, params Expression<Func<RecurringAppointmentMaster,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Quote that has been accepted.</para>
    /// <para>Display Name: Order</para>
    /// </summary>
    [EntityLogicalName("salesorder")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SalesOrder : ExtendedEntity<SalesOrderState, SalesOrder_StatusCode> {
        
        public const string EntityLogicalName = "salesorder";
        
        public const int EntityTypeCode = 1088;
        
        public SalesOrder() : 
                base(EntityLogicalName) {
        }
        
        public SalesOrder(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("salesorderid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("salesorderid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the order.</para>
        /// <para>Display Name: Order</para>
        /// </summary>
        [AttributeLogicalName("salesorderid")]
        public Guid? SalesOrderId {
            get {
                return GetAttributeValue<Guid?>("salesorderid");
            }
            set {
                SetId("salesorderid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the order is active, submitted, fulfilled, canceled, or invoiced. Only active orders can be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public SalesOrderState? StateCode {
            get {
                return GetOptionSetValue<SalesOrderState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the discount rate that should be applied to the Detail Amount field to include additional savings for the customer in the order.</para>
        /// <para>Display Name: Order Discount (%)</para>
        /// </summary>
        [AttributeLogicalName("discountpercentage")]
        public decimal? DiscountPercentage {
            get {
                return GetAttributeValue<decimal?>("discountpercentage");
            }
            set {
                SetAttributeValue("discountpercentage", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Choose the price list associated with this record to make sure the products associated with the campaign are offered at the correct prices.</para>
        /// <para>Display Name: Price List</para>
        /// </summary>
        [AttributeLogicalName("pricelevelid")]
        public EntityReference PriceLevelId {
            get {
                return GetAttributeValue<EntityReference>("pricelevelid");
            }
            set {
                SetAttributeValue("pricelevelid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's shipping address.</para>
        /// <para>Display Name: Ship to Fax</para>
        /// </summary>
        [AttributeLogicalName("shipto_fax")]
        public string ShipTo_Fax {
            get {
                return GetAttributeValue<string>("shipto_fax");
            }
            set {
                SetAttributeValue("shipto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Tax field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Tax (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaltax_base")]
        public decimal? TotalTax_Base {
            get {
                return GetMoneyValue("totaltax_base");
            }
        }
        
        /// <summary>
        /// <para>Type the discount amount for the order if the customer is eligible for special savings.</para>
        /// <para>Display Name: Order Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("discountamount")]
        public decimal? DiscountAmount {
            get {
                return GetMoneyValue("discountamount");
            }
            set {
                SetMoneyValue("discountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the related quote so that order data and quote data are linked for reporting and analytics.</para>
        /// <para>Display Name: Quote</para>
        /// </summary>
        [AttributeLogicalName("quoteid")]
        public EntityReference QuoteId {
            get {
                return GetAttributeValue<EntityReference>("quoteid");
            }
            set {
                SetAttributeValue("quoteid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's shipping address, such as "Headquarters" or "Field office", to identify the address.</para>
        /// <para>Display Name: Ship To Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_name")]
        public string ShipTo_Name {
            get {
                return GetAttributeValue<string>("shipto_name");
            }
            set {
                SetAttributeValue("shipto_name", value);
            }
        }
        
        [AttributeLogicalName("pricelevelidname")]
        public string PriceLevelIdName {
            get {
                return GetAttributeValue<string>("pricelevelidname");
            }
        }
        
        /// <summary>
        /// <para>Version number of the order.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamount_base")]
        public decimal? TotalAmount_Base {
            get {
                return GetMoneyValue("totalamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the total amount due, calculated as the sum of the products, discounts, freight, and taxes for the order.</para>
        /// <para>Display Name: Total Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamount")]
        public decimal? TotalAmount {
            get {
                return GetMoneyValue("totalamount");
            }
            set {
                SetMoneyValue("totalamount", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName {
            get {
                return GetAttributeValue<string>("customeridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Bill To address.</para>
        /// <para>Display Name: Bill To Address</para>
        /// </summary>
        [AttributeLogicalName("billto_composite")]
        public string BillTo_Composite {
            get {
                return GetAttributeValue<string>("billto_composite");
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the shipping address.</para>
        /// <para>Display Name: Ship To Street 3</para>
        /// </summary>
        [AttributeLogicalName("shipto_line3")]
        public string ShipTo_Line3 {
            get {
                return GetAttributeValue<string>("shipto_line3");
            }
            set {
                SetAttributeValue("shipto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Type the third line of the billing address.</para>
        /// <para>Display Name: Bill To Street 3</para>
        /// </summary>
        [AttributeLogicalName("billto_line3")]
        public string BillTo_Line3 {
            get {
                return GetAttributeValue<string>("billto_line3");
            }
            set {
                SetAttributeValue("billto_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total of the Manual Discount amounts specified on all products included in the order. This value is reflected in the Detail Amount field on the order and is added to any discount amount or rate specified on the order.</para>
        /// <para>Display Name: Total Line Item Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount")]
        public decimal? TotalLineItemDiscountAmount {
            get {
                return GetMoneyValue("totallineitemdiscountamount");
            }
            set {
                SetMoneyValue("totallineitemdiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount_base")]
        public decimal? TotalDiscountAmount_Base {
            get {
                return GetMoneyValue("totaldiscountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows the order number for customer reference and to use in search. The number cannot be modified.</para>
        /// <para>Display Name: Order ID</para>
        /// </summary>
        [AttributeLogicalName("ordernumber")]
        public string OrderNumber {
            get {
                return GetAttributeValue<string>("ordernumber");
            }
            set {
                SetAttributeValue("ordernumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Display Name: Customer Type</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType {
            get {
                return GetAttributeValue<string>("customeridtype");
            }
            set {
                SetAttributeValue("customeridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Select a shipping method for deliveries sent to this address.</para>
        /// <para>Display Name: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public SalesOrder_ShippingMethodCode? ShippingMethodCode {
            get {
                return GetOptionSetValue<SalesOrder_ShippingMethodCode>("shippingmethodcode");
            }
            set {
                SetOptionSetValue("shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public SalesOrder_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<SalesOrder_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date that all or part of the order was shipped to the customer.</para>
        /// <para>Display Name: Date Fulfilled</para>
        /// </summary>
        [AttributeLogicalName("datefulfilled")]
        public DateTime? DateFulfilled {
            get {
                return GetAttributeValue<DateTime?>("datefulfilled");
            }
            set {
                SetAttributeValue("datefulfilled", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the type of pricing error, such as a missing or invalid product, or missing quantity.</para>
        /// <para>Display Name: Pricing Error </para>
        /// </summary>
        [AttributeLogicalName("pricingerrorcode")]
        public qooi_pricingerrorcode? PricingErrorCode {
            get {
                return GetOptionSetValue<qooi_pricingerrorcode>("pricingerrorcode");
            }
            set {
                SetOptionSetValue("pricingerrorcode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether prices specified on the invoice are locked from any further updates.</para>
        /// <para>Display Name: Prices Locked</para>
        /// </summary>
        [AttributeLogicalName("ispricelocked")]
        public bool? IsPriceLocked {
            get {
                return GetAttributeValue<bool?>("ispricelocked");
            }
            set {
                SetAttributeValue("ispricelocked", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the billing address.</para>
        /// <para>Display Name: Bill To Address ID</para>
        /// </summary>
        [AttributeLogicalName("billto_addressid")]
        public Guid? BillTo_AddressId {
            get {
                return GetAttributeValue<Guid?>("billto_addressid");
            }
            set {
                SetAttributeValue("billto_addressid", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the campaign that the order was created from.</para>
        /// <para>Display Name: Source Campaign</para>
        /// </summary>
        [AttributeLogicalName("campaignid")]
        public EntityReference CampaignId {
            get {
                return GetAttributeValue<EntityReference>("campaignid");
            }
            set {
                SetAttributeValue("campaignid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the primary contact name at the customer's billing address.</para>
        /// <para>Display Name: Bill To Contact Name</para>
        /// </summary>
        [AttributeLogicalName("billto_contactname")]
        public string BillTo_ContactName {
            get {
                return GetAttributeValue<string>("billto_contactname");
            }
            set {
                SetAttributeValue("billto_contactname", value);
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the shipping address.</para>
        /// <para>Display Name: Ship To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("shipto_postalcode")]
        public string ShipTo_PostalCode {
            get {
                return GetAttributeValue<string>("shipto_postalcode");
            }
            set {
                SetAttributeValue("shipto_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's billing address.</para>
        /// <para>Display Name: Bill To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("billto_country")]
        public string BillTo_Country {
            get {
                return GetAttributeValue<string>("billto_country");
            }
            set {
                SetAttributeValue("billto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this sales order. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 2</para>
        /// </summary>
        [AttributeLogicalName("shipto_line2")]
        public string ShipTo_Line2 {
            get {
                return GetAttributeValue<string>("shipto_line2");
            }
            set {
                SetAttributeValue("shipto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the related opportunity so that the data for the order and opportunity are linked for reporting and analytics.</para>
        /// <para>Display Name: Opportunity</para>
        /// </summary>
        [AttributeLogicalName("opportunityid")]
        public EntityReference OpportunityId {
            get {
                return GetAttributeValue<EntityReference>("opportunityid");
            }
            set {
                SetAttributeValue("opportunityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the order.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the sum of all existing and write-in products included on the order, based on the specified price list and quantities.</para>
        /// <para>Display Name: Total Detail Amount</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount")]
        public decimal? TotalLineItemAmount {
            get {
                return GetMoneyValue("totallineitemamount");
            }
            set {
                SetMoneyValue("totallineitemamount", value);
            }
        }
        
        /// <summary>
        /// <para>Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.</para>
        /// <para>Display Name: Customer</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId {
            get {
                return GetAttributeValue<EntityReference>("customerid");
            }
            set {
                SetAttributeValue("customerid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows the total product amount for the order, minus any discounts. This value is added to freight and tax amounts in the calculation for the total amount due for the order.</para>
        /// <para>Display Name: Total Pre-Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight")]
        public decimal? TotalAmountLessFreight {
            get {
                return GetMoneyValue("totalamountlessfreight");
            }
            set {
                SetMoneyValue("totalamountlessfreight", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the delivery date requested by the customer for all products in the order.</para>
        /// <para>Display Name: Requested Delivery Date</para>
        /// </summary>
        [AttributeLogicalName("requestdeliveryby")]
        public DateTime? RequestDeliveryBy {
            get {
                return GetAttributeValue<DateTime?>("requestdeliveryby");
            }
            set {
                SetAttributeValue("requestdeliveryby", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Select whether the products included in the order should be shipped to the specified address or held until the customer calls with further pick-up or delivery instructions.</para>
        /// <para>Display Name: Ship To</para>
        /// </summary>
        [AttributeLogicalName("willcall")]
        public bool? WillCall {
            get {
                return GetAttributeValue<bool?>("willcall");
            }
            set {
                SetAttributeValue("willcall", value);
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name for the order.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Pre-Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Pre-Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totalamountlessfreight_base")]
        public decimal? TotalAmountLessFreight_Base {
            get {
                return GetMoneyValue("totalamountlessfreight_base");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the order.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the cost of freight or shipping for the products included in the order for use in calculating the Total Amount field.</para>
        /// <para>Display Name: Freight Amount</para>
        /// </summary>
        [AttributeLogicalName("freightamount")]
        public decimal? FreightAmount {
            get {
                return GetMoneyValue("freightamount");
            }
            set {
                SetMoneyValue("freightamount", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        [AttributeLogicalName("accountidname")]
        public string AccountIdName {
            get {
                return GetAttributeValue<string>("accountidname");
            }
        }
        
        /// <summary>
        /// <para>Type the primary contact name at the customer's shipping address.</para>
        /// <para>Display Name: Ship To Contact Name</para>
        /// </summary>
        [AttributeLogicalName("shipto_contactname")]
        public string ShipTo_ContactName {
            get {
                return GetAttributeValue<string>("shipto_contactname");
            }
            set {
                SetAttributeValue("shipto_contactname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows the Order Discount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Order Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("discountamount_base")]
        public decimal? DiscountAmount_Base {
            get {
                return GetMoneyValue("discountamount_base");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the order, such as the products or services offered or details about the customer's product preferences.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the total discount amount, based on the discount price and rate entered on the order.</para>
        /// <para>Display Name: Total Discount Amount</para>
        /// </summary>
        [AttributeLogicalName("totaldiscountamount")]
        public decimal? TotalDiscountAmount {
            get {
                return GetMoneyValue("totaldiscountamount");
            }
            set {
                SetMoneyValue("totaldiscountamount", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete Ship To address.</para>
        /// <para>Display Name: Ship To Address</para>
        /// </summary>
        [AttributeLogicalName("shipto_composite")]
        public string ShipTo_Composite {
            get {
                return GetAttributeValue<string>("shipto_composite");
            }
        }
        
        /// <summary>
        /// <para>Shows the Total Line Item Discount Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Line Item Discount Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemdiscountamount_base")]
        public decimal? TotalLineItemDiscountAmount_Base {
            get {
                return GetMoneyValue("totallineitemdiscountamount_base");
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Shows the duration in minutes for which the order was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the shipping address.</para>
        /// <para>Display Name: Ship To Address ID</para>
        /// </summary>
        [AttributeLogicalName("shipto_addressid")]
        public Guid? ShipTo_AddressId {
            get {
                return GetAttributeValue<Guid?>("shipto_addressid");
            }
            set {
                SetAttributeValue("shipto_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping charges are processed correctly.</para>
        /// <para>Display Name: Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("freighttermscode")]
        public SalesOrder_FreightTermsCode? FreightTermsCode {
            get {
                return GetOptionSetValue<SalesOrder_FreightTermsCode>("freighttermscode");
            }
            set {
                SetOptionSetValue("freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's shipping address.</para>
        /// <para>Display Name: Ship To Street 1</para>
        /// </summary>
        [AttributeLogicalName("shipto_line1")]
        public string ShipTo_Line1 {
            get {
                return GetAttributeValue<string>("shipto_line1");
            }
            set {
                SetAttributeValue("shipto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's billing address.</para>
        /// <para>Display Name: Bill To City</para>
        /// </summary>
        [AttributeLogicalName("billto_city")]
        public string BillTo_City {
            get {
                return GetAttributeValue<string>("billto_city");
            }
            set {
                SetAttributeValue("billto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the billing address.</para>
        /// <para>Display Name: Bill To State/Province</para>
        /// </summary>
        [AttributeLogicalName("billto_stateorprovince")]
        public string BillTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("billto_stateorprovince");
            }
            set {
                SetAttributeValue("billto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Select the freight terms to make sure shipping orders are processed correctly.</para>
        /// <para>Display Name: Ship To Freight Terms</para>
        /// </summary>
        [AttributeLogicalName("shipto_freighttermscode")]
        public SalesOrder_ShipTo_FreightTermsCode? ShipTo_FreightTermsCode {
            get {
                return GetOptionSetValue<SalesOrder_ShipTo_FreightTermsCode>("shipto_freighttermscode");
            }
            set {
                SetOptionSetValue("shipto_freighttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type the code for the submitted status in the fulfillment or shipping center system.</para>
        /// <para>Display Name: Submitted Status</para>
        /// </summary>
        [AttributeLogicalName("submitstatus")]
        public int? SubmitStatus {
            get {
                return GetAttributeValue<int?>("submitstatus");
            }
            set {
                SetAttributeValue("submitstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Type the fax number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Fax</para>
        /// </summary>
        [AttributeLogicalName("billto_fax")]
        public string BillTo_Fax {
            get {
                return GetAttributeValue<string>("billto_fax");
            }
            set {
                SetAttributeValue("billto_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        [AttributeLogicalName("opportunityidname")]
        public string OpportunityIdName {
            get {
                return GetAttributeValue<string>("opportunityidname");
            }
        }
        
        /// <summary>
        /// <para>Contains the date time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>Type the city for the customer's shipping address.</para>
        /// <para>Display Name: Ship To City</para>
        /// </summary>
        [AttributeLogicalName("shipto_city")]
        public string ShipTo_City {
            get {
                return GetAttributeValue<string>("shipto_city");
            }
            set {
                SetAttributeValue("shipto_city", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Freight Amount field converted to the system's default base currency for reporting purposes. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Freight Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("freightamount_base")]
        public decimal? FreightAmount_Base {
            get {
                return GetMoneyValue("freightamount_base");
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's billing address.</para>
        /// <para>Display Name: Bill To Phone</para>
        /// </summary>
        [AttributeLogicalName("billto_telephone")]
        public string BillTo_Telephone {
            get {
                return GetAttributeValue<string>("billto_telephone");
            }
            set {
                SetAttributeValue("billto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the Detail Amount field converted to the system's default base currency. The calculation uses the exchange rate specified in the Currencies area.</para>
        /// <para>Display Name: Total Detail Amount (Base)</para>
        /// </summary>
        [AttributeLogicalName("totallineitemamount_base")]
        public decimal? TotalLineItemAmount_Base {
            get {
                return GetMoneyValue("totallineitemamount_base");
            }
        }
        
        [AttributeLogicalName("quoteidname")]
        public string QuoteIdName {
            get {
                return GetAttributeValue<string>("quoteidname");
            }
        }
        
        /// <summary>
        /// <para>Type a name for the customer's billing address, such as "Headquarters" or "Field office", to identify the address.</para>
        /// <para>Display Name: Bill To Name</para>
        /// </summary>
        [AttributeLogicalName("billto_name")]
        public string BillTo_Name {
            get {
                return GetAttributeValue<string>("billto_name");
            }
            set {
                SetAttributeValue("billto_name", value);
            }
        }
        
        /// <summary>
        /// <para>Select the order's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public SalesOrder_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SalesOrder_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date when the order was submitted to the fulfillment or shipping center.</para>
        /// <para>Display Name: Date Submitted</para>
        /// </summary>
        [AttributeLogicalName("submitdate")]
        public DateTime? SubmitDate {
            get {
                return GetAttributeValue<DateTime?>("submitdate");
            }
            set {
                SetAttributeValue("submitdate", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the parent account related to the record. This information is used to link the sales order to the account selected in the Customer field for reporting and analytics.</para>
        /// <para>Display Name: Account</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId {
            get {
                return GetAttributeValue<EntityReference>("accountid");
            }
        }
        
        /// <summary>
        /// <para>Type the phone number for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Phone</para>
        /// </summary>
        [AttributeLogicalName("shipto_telephone")]
        public string ShipTo_Telephone {
            get {
                return GetAttributeValue<string>("shipto_telephone");
            }
            set {
                SetAttributeValue("shipto_telephone", value);
            }
        }
        
        /// <summary>
        /// <para>Type the state or province for the shipping address.</para>
        /// <para>Display Name: Ship To State/Province</para>
        /// </summary>
        [AttributeLogicalName("shipto_stateorprovince")]
        public string ShipTo_StateOrProvince {
            get {
                return GetAttributeValue<string>("shipto_stateorprovince");
            }
            set {
                SetAttributeValue("shipto_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Type the ZIP Code or postal code for the billing address.</para>
        /// <para>Display Name: Bill To ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("billto_postalcode")]
        public string BillTo_PostalCode {
            get {
                return GetAttributeValue<string>("billto_postalcode");
            }
            set {
                SetAttributeValue("billto_postalcode", value);
            }
        }
        
        [AttributeLogicalName("campaignidname")]
        public string CampaignIdName {
            get {
                return GetAttributeValue<string>("campaignidname");
            }
        }
        
        /// <summary>
        /// <para>Select the payment terms to indicate when the customer needs to pay the total amount.</para>
        /// <para>Display Name: Payment Terms</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public SalesOrder_PaymentTermsCode? PaymentTermsCode {
            get {
                return GetOptionSetValue<SalesOrder_PaymentTermsCode>("paymenttermscode");
            }
            set {
                SetOptionSetValue("paymenttermscode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows the Tax amounts specified on all products included in the order, included in the Total Amount due calculation for the order.</para>
        /// <para>Display Name: Total Tax</para>
        /// </summary>
        [AttributeLogicalName("totaltax")]
        public decimal? TotalTax {
            get {
                return GetMoneyValue("totaltax");
            }
            set {
                SetMoneyValue("totaltax", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Type the country or region for the customer's shipping address.</para>
        /// <para>Display Name: Ship To Country/Region</para>
        /// </summary>
        [AttributeLogicalName("shipto_country")]
        public string ShipTo_Country {
            get {
                return GetAttributeValue<string>("shipto_country");
            }
            set {
                SetAttributeValue("shipto_country", value);
            }
        }
        
        /// <summary>
        /// <para>Type the second line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 2</para>
        /// </summary>
        [AttributeLogicalName("billto_line2")]
        public string BillTo_Line2 {
            get {
                return GetAttributeValue<string>("billto_line2");
            }
            set {
                SetAttributeValue("billto_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional details or notes about the order for the fulfillment or shipping center.</para>
        /// <para>Display Name: Submitted Status Description</para>
        /// </summary>
        [AttributeLogicalName("submitstatusdescription")]
        public string SubmitStatusDescription {
            get {
                return GetAttributeValue<string>("submitstatusdescription");
            }
            set {
                SetAttributeValue("submitstatusdescription", value);
            }
        }
        
        [AttributeLogicalName("contactidname")]
        public string ContactIdName {
            get {
                return GetAttributeValue<string>("contactidname");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Type the first line of the customer's billing address.</para>
        /// <para>Display Name: Bill To Street 1</para>
        /// </summary>
        [AttributeLogicalName("billto_line1")]
        public string BillTo_Line1 {
            get {
                return GetAttributeValue<string>("billto_line1");
            }
            set {
                SetAttributeValue("billto_line1", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the sales order record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the date and time when the order was last submitted to an accounting or ERP system for processing.</para>
        /// <para>Display Name: Last Submitted to Back Office</para>
        /// </summary>
        [AttributeLogicalName("lastbackofficesubmit")]
        public DateTime? LastBackofficeSubmit {
            get {
                return GetAttributeValue<DateTime?>("lastbackofficesubmit");
            }
            set {
                SetAttributeValue("lastbackofficesubmit", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the parent contact related to the record. This information is used to link the contract to the contact selected in the Customer field for reporting and analytics.</para>
        /// <para>Display Name: Contact</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId {
            get {
                return GetAttributeValue<EntityReference>("contactid");
            }
        }
        
        [RelationshipSchemaName("contactorders_association")]
        public IEnumerable<Contact> contactorders_association {
            get {
                return GetRelatedEntities<Contact>("contactorders_association", null);
            }
            set {
                SetRelatedEntities("contactorders_association", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_orders")]
        public Team team_orders {
            get {
                return GetRelatedEntity<Team>("team_orders", null);
            }
            set {
                SetRelatedEntity("team_orders", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_salesorder")]
        public SLA manualsla_salesorder {
            get {
                return GetRelatedEntity<SLA>("manualsla_salesorder", null);
            }
            set {
                SetRelatedEntity("manualsla_salesorder", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_salesorder")]
        public SLA sla_salesorder {
            get {
                return GetRelatedEntity<SLA>("sla_salesorder", null);
            }
            set {
                SetRelatedEntity("sla_salesorder", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_salesorderbase_createdby")]
        public SystemUser lk_salesorderbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorderbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_salesorderbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("order_customer_contacts")]
        public Contact order_customer_contacts {
            get {
                return GetRelatedEntity<Contact>("order_customer_contacts", null);
            }
            set {
                SetRelatedEntity("order_customer_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_orders")]
        public BusinessUnit business_unit_orders {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_orders", null);
            }
            set {
                SetRelatedEntity("business_unit_orders", null, value);
            }
        }
        
        [AttributeLogicalName("customerid")]
        [RelationshipSchemaName("order_customer_accounts")]
        public Account order_customer_accounts {
            get {
                return GetRelatedEntity<Account>("order_customer_accounts", null);
            }
            set {
                SetRelatedEntity("order_customer_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_salesorderbase_modifiedby")]
        public SystemUser lk_salesorderbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorderbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_salesorderbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("campaignid")]
        [RelationshipSchemaName("campaign_orders")]
        public Campaign campaign_orders {
            get {
                return GetRelatedEntity<Campaign>("campaign_orders", null);
            }
            set {
                SetRelatedEntity("campaign_orders", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_orders")]
        public SystemUser system_user_orders {
            get {
                return GetRelatedEntity<SystemUser>("system_user_orders", null);
            }
            set {
                SetRelatedEntity("system_user_orders", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_salesorder")]
        public TransactionCurrency transactioncurrency_salesorder {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_salesorder", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_salesorder", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_salesorder_modifiedonbehalfby")]
        public SystemUser lk_salesorder_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorder_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_salesorder_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_salesorder_createdonbehalfby")]
        public SystemUser lk_salesorder_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_salesorder_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_salesorder_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("quoteid")]
        [RelationshipSchemaName("quote_orders")]
        public Quote quote_orders {
            get {
                return GetRelatedEntity<Quote>("quote_orders", null);
            }
            set {
                SetRelatedEntity("quote_orders", null, value);
            }
        }
        
        [AttributeLogicalName("opportunityid")]
        [RelationshipSchemaName("opportunity_sales_orders")]
        public Opportunity opportunity_sales_orders {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_sales_orders", null);
            }
            set {
                SetRelatedEntity("opportunity_sales_orders", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_SyncErrors")]
        public IEnumerable<SyncError> SalesOrder_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("SalesOrder_SyncErrors", null);
            }
            set {
                SetRelatedEntities("SalesOrder_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("order_invoices")]
        public IEnumerable<Invoice> order_invoices {
            get {
                return GetRelatedEntities<Invoice>("order_invoices", null);
            }
            set {
                SetRelatedEntities("order_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("salesorder_activity_parties")]
        public IEnumerable<ActivityParty> salesorder_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("salesorder_activity_parties", null);
            }
            set {
                SetRelatedEntities("salesorder_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("salesorder_connections1")]
        public IEnumerable<Connection> salesorder_connections1 {
            get {
                return GetRelatedEntities<Connection>("salesorder_connections1", null);
            }
            set {
                SetRelatedEntities("salesorder_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_Faxes")]
        public IEnumerable<Fax> SalesOrder_Faxes {
            get {
                return GetRelatedEntities<Fax>("SalesOrder_Faxes", null);
            }
            set {
                SetRelatedEntities("SalesOrder_Faxes", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_ActivityPointers")]
        public IEnumerable<ActivityPointer> SalesOrder_ActivityPointers {
            get {
                return GetRelatedEntities<ActivityPointer>("SalesOrder_ActivityPointers", null);
            }
            set {
                SetRelatedEntities("SalesOrder_ActivityPointers", null, value);
            }
        }
        
        [RelationshipSchemaName("salesorder_connections2")]
        public IEnumerable<Connection> salesorder_connections2 {
            get {
                return GetRelatedEntities<Connection>("salesorder_connections2", null);
            }
            set {
                SetRelatedEntities("salesorder_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_Tasks")]
        public IEnumerable<Task> SalesOrder_Tasks {
            get {
                return GetRelatedEntities<Task>("SalesOrder_Tasks", null);
            }
            set {
                SetRelatedEntities("SalesOrder_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_Letters")]
        public IEnumerable<Letter> SalesOrder_Letters {
            get {
                return GetRelatedEntities<Letter>("SalesOrder_Letters", null);
            }
            set {
                SetRelatedEntities("SalesOrder_Letters", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_Emails")]
        public IEnumerable<Email> SalesOrder_Emails {
            get {
                return GetRelatedEntities<Email>("SalesOrder_Emails", null);
            }
            set {
                SetRelatedEntities("SalesOrder_Emails", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_Appointments")]
        public IEnumerable<Appointment> SalesOrder_Appointments {
            get {
                return GetRelatedEntities<Appointment>("SalesOrder_Appointments", null);
            }
            set {
                SetRelatedEntities("SalesOrder_Appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_RecurringAppointmentMasters")]
        public IEnumerable<RecurringAppointmentMaster> SalesOrder_RecurringAppointmentMasters {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("SalesOrder_RecurringAppointmentMasters", null);
            }
            set {
                SetRelatedEntities("SalesOrder_RecurringAppointmentMasters", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_Phonecalls")]
        public IEnumerable<PhoneCall> SalesOrder_Phonecalls {
            get {
                return GetRelatedEntities<PhoneCall>("SalesOrder_Phonecalls", null);
            }
            set {
                SetRelatedEntities("SalesOrder_Phonecalls", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_SocialActivities")]
        public IEnumerable<SocialActivity> SalesOrder_SocialActivities {
            get {
                return GetRelatedEntities<SocialActivity>("SalesOrder_SocialActivities", null);
            }
            set {
                SetRelatedEntities("SalesOrder_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("SalesOrder_ServiceAppointments")]
        public IEnumerable<ServiceAppointment> SalesOrder_ServiceAppointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("SalesOrder_ServiceAppointments", null);
            }
            set {
                SetRelatedEntities("SalesOrder_ServiceAppointments", null, value);
            }
        }
        
        public static SalesOrder Retrieve(IOrganizationService service, Guid id, params Expression<Func<SalesOrder,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Activity offered by the organization to satisfy its customer's needs. Each service activity includes date, time, duration, and required resources.</para>
    /// <para>Display Name: Service Activity</para>
    /// </summary>
    [EntityLogicalName("serviceappointment")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ServiceAppointment : ExtendedEntity<ServiceAppointmentState, ServiceAppointment_StatusCode> {
        
        public const string EntityLogicalName = "serviceappointment";
        
        public const int EntityTypeCode = 4214;
        
        public ServiceAppointment() : 
                base(EntityLogicalName) {
        }
        
        public ServiceAppointment(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the service activity.</para>
        /// <para>Display Name: Service Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the value selected in the Duration field on the service activity at the time the service activity is closed as completed. The duration is used to report the time spent on the activity.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Select the service activity's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public ServiceAppointment_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<ServiceAppointment_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Scheduled End</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        [AttributeLogicalName("serviceidname")]
        public string ServiceIdName {
            get {
                return GetAttributeValue<string>("serviceidname");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Shows the business unit that the record owner belongs to.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the service activity. By default, it displays when the activity was closed or canceled.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the service activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Choose the service scheduled to be performed during the service activity.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether the service activity is an all-day event to make sure the required resources are scheduled for the full day.</para>
        /// <para>Display Name: All Day Event</para>
        /// </summary>
        [AttributeLogicalName("isalldayevent")]
        public bool? IsAllDayEvent {
            get {
                return GetAttributeValue<bool?>("isalldayevent");
            }
            set {
                SetAttributeValue("isalldayevent", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the service activity type, such as routine maintenance or service call, to tie the service activity to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this email. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Private</para>
        /// </summary>
        [AttributeLogicalName("ismapiprivate")]
        public bool? IsMapiPrivate {
            get {
                return GetAttributeValue<bool?>("ismapiprivate");
            }
            set {
                SetAttributeValue("ismapiprivate", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the location where the service activity will take place, such as a conference room, customer office, or other venue.</para>
        /// <para>Display Name: Delivery Location</para>
        /// </summary>
        [AttributeLogicalName("location")]
        public string Location {
            get {
                return GetAttributeValue<string>("location");
            }
            set {
                SetAttributeValue("location", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the expected duration of the service activity, in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
            set {
                SetAttributeValue("scheduleddurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Information which specifies if the service activity was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        [AttributeLogicalName("siteidname")]
        public string SiteIdName {
            get {
                return GetAttributeValue<string>("siteidname");
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the service appointment record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        /// <summary>
        /// <para>Enter the user, facility, or equipment required to complete the service activity.</para>
        /// <para>Display Name: Resources</para>
        /// </summary>
        [AttributeLogicalName("resources")]
        public IEnumerable<ActivityParty> Resources {
            get {
                return GetEntityCollection<ActivityParty>("resources");
            }
            set {
                SetEntityCollection("resources", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the service activity. By default, it displays when the activity was created.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Choose the site or location where the service activity will be performed.</para>
        /// <para>Display Name: Site</para>
        /// </summary>
        [AttributeLogicalName("siteid")]
        public EntityReference SiteId {
            get {
                return GetAttributeValue<EntityReference>("siteid");
            }
            set {
                SetAttributeValue("siteid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the service activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the service activity is open, completed, or canceled. Completed and canceled service activities are read-only and can't be edited.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public ServiceAppointmentState? StateCode {
            get {
                return GetOptionSetValue<ServiceAppointmentState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the service activity is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the service activity, such as key talking points or objectives.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the service activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the service activity type and relate the activity to a specific product, service region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Scheduled Start</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public ServiceAppointment_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<ServiceAppointment_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Enter the accounts and contacts for whom the service activity is being performed.</para>
        /// <para>Display Name: Customers</para>
        /// </summary>
        [AttributeLogicalName("customers")]
        public IEnumerable<ActivityParty> Customers {
            get {
                return GetEntityCollection<ActivityParty>("customers");
            }
            set {
                SetEntityCollection("customers", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the service activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Information which specifies whether the service activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_ServiceAppointments")]
        public msdyn_PostAlbum msdyn_postalbum_ServiceAppointments {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_ServiceAppointments")]
        public dg_event dg_event_ServiceAppointments {
            get {
                return GetRelatedEntity<dg_event>("dg_event_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("dg_event_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_ServiceAppointments")]
        public dg_participant dg_participant_ServiceAppointments {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("dg_participant_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_service_appointment")]
        public ActivityPointer activity_pointer_service_appointment {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_service_appointment", null);
            }
            set {
                SetRelatedEntity("activity_pointer_service_appointment", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_ServiceAppointments")]
        public SalesOrder SalesOrder_ServiceAppointments {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("SalesOrder_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_ServiceAppointments")]
        public Lead Lead_ServiceAppointments {
            get {
                return GetRelatedEntity<Lead>("Lead_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Lead_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_ServiceAppointments")]
        public Opportunity Opportunity_ServiceAppointments {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Opportunity_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_ServiceAppointments")]
        public Account Account_ServiceAppointments {
            get {
                return GetRelatedEntity<Account>("Account_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Account_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_ServiceAppointments")]
        public Quote Quote_ServiceAppointments {
            get {
                return GetRelatedEntity<Quote>("Quote_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Quote_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_ServiceAppointments")]
        public Contact Contact_ServiceAppointments {
            get {
                return GetRelatedEntity<Contact>("Contact_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Contact_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_ServiceAppointments")]
        public Campaign Campaign_ServiceAppointments {
            get {
                return GetRelatedEntity<Campaign>("Campaign_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Campaign_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_ServiceAppointments")]
        public Incident Incident_ServiceAppointments {
            get {
                return GetRelatedEntity<Incident>("Incident_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Incident_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_service_appointments")]
        public Team team_service_appointments {
            get {
                return GetRelatedEntity<Team>("team_service_appointments", null);
            }
            set {
                SetRelatedEntity("team_service_appointments", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_service_appointments")]
        public SystemUser system_user_service_appointments {
            get {
                return GetRelatedEntity<SystemUser>("system_user_service_appointments", null);
            }
            set {
                SetRelatedEntity("system_user_service_appointments", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_serviceappointment_modifiedby")]
        public SystemUser lk_serviceappointment_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_serviceappointment_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_serviceappointment_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_serviceappointment_createdby")]
        public SystemUser lk_serviceappointment_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_serviceappointment_createdby", null);
            }
            set {
                SetRelatedEntity("lk_serviceappointment_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_serviceappointment")]
        public SLA manualsla_serviceappointment {
            get {
                return GetRelatedEntity<SLA>("manualsla_serviceappointment", null);
            }
            set {
                SetRelatedEntity("manualsla_serviceappointment", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_ServiceAppointment")]
        public TransactionCurrency TransactionCurrency_ServiceAppointment {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_ServiceAppointment", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_ServiceAppointment", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_ServiceAppointments")]
        public Invoice Invoice_ServiceAppointments {
            get {
                return GetRelatedEntity<Invoice>("Invoice_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Invoice_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_ServiceAppointments")]
        public Contract Contract_ServiceAppointments {
            get {
                return GetRelatedEntity<Contract>("Contract_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("Contract_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_serviceappointment_createdonbehalfby")]
        public SystemUser lk_serviceappointment_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_serviceappointment_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_serviceappointment_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_ServiceAppointments")]
        public KnowledgeArticle KnowledgeArticle_ServiceAppointments {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_serviceappointment_modifiedonbehalfby")]
        public SystemUser lk_serviceappointment_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_serviceappointment_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_serviceappointment_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_service_appointments")]
        public BusinessUnit business_unit_service_appointments {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_service_appointments", null);
            }
            set {
                SetRelatedEntity("business_unit_service_appointments", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_serviceappointment")]
        public SLA sla_serviceappointment {
            get {
                return GetRelatedEntity<SLA>("sla_serviceappointment", null);
            }
            set {
                SetRelatedEntity("sla_serviceappointment", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_ServiceAppointments")]
        public BookableResourceBookingHeader bookableresourcebookingheader_ServiceAppointments {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_ServiceAppointments")]
        public BookableResourceBooking bookableresourcebooking_ServiceAppointments {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_ServiceAppointments", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_ServiceAppointments")]
        public Entitlement entitlement_ServiceAppointments {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_ServiceAppointments", null);
            }
            set {
                SetRelatedEntity("entitlement_ServiceAppointments", null, value);
            }
        }
        
        [RelationshipSchemaName("ServiceAppointment_QueueItem")]
        public IEnumerable<QueueItem> ServiceAppointment_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("ServiceAppointment_QueueItem", null);
            }
            set {
                SetRelatedEntities("ServiceAppointment_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("serviceappointment_connections1")]
        public IEnumerable<Connection> serviceappointment_connections1 {
            get {
                return GetRelatedEntities<Connection>("serviceappointment_connections1", null);
            }
            set {
                SetRelatedEntities("serviceappointment_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("serviceappointment_activity_parties")]
        public IEnumerable<ActivityParty> serviceappointment_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("serviceappointment_activity_parties", null);
            }
            set {
                SetRelatedEntities("serviceappointment_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("serviceappointment_connections2")]
        public IEnumerable<Connection> serviceappointment_connections2 {
            get {
                return GetRelatedEntities<Connection>("serviceappointment_connections2", null);
            }
            set {
                SetRelatedEntities("serviceappointment_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("ServiceAppointment_SyncErrors")]
        public IEnumerable<SyncError> ServiceAppointment_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("ServiceAppointment_SyncErrors", null);
            }
            set {
                SetRelatedEntities("ServiceAppointment_SyncErrors", null, value);
            }
        }
        
        public static ServiceAppointment Retrieve(IOrganizationService service, Guid id, params Expression<Func<ServiceAppointment,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("servicecontractcontacts")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class ServiceContractContacts : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "servicecontractcontacts";
        
        public const int EntityTypeCode = 20;
        
        public ServiceContractContacts() : 
                base(EntityLogicalName) {
        }
        
        public ServiceContractContacts(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("servicecontractcontactid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("servicecontractcontactid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the contact of the service contract.</para>
        /// </summary>
        [AttributeLogicalName("servicecontractcontactid")]
        public Guid? ServiceContractContactId {
            get {
                return GetAttributeValue<Guid?>("servicecontractcontactid");
            }
            set {
                SetId("servicecontractcontactid", value);
            }
        }
        
        [AttributeLogicalName("servicelevel")]
        public int? ServiceLevel {
            get {
                return GetAttributeValue<int?>("servicelevel");
            }
            set {
                SetAttributeValue("servicelevel", value);
            }
        }
        
        [AttributeLogicalName("contractid")]
        public Guid? ContractId {
            get {
                return GetAttributeValue<Guid?>("contractid");
            }
        }
        
        [AttributeLogicalName("contactid")]
        public Guid? ContactId {
            get {
                return GetAttributeValue<Guid?>("contactid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static ServiceContractContacts Retrieve(IOrganizationService service, Guid id, params Expression<Func<ServiceContractContacts,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Document libraries or folders on a SharePoint server from where documents can be managed in Microsoft Dynamics CRM.</para>
    /// <para>Display Name: Document Location</para>
    /// </summary>
    [EntityLogicalName("sharepointdocumentlocation")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SharePointDocumentLocation : ExtendedEntity<SharePointDocumentLocationState, SharePointDocumentLocation_StatusCode> {
        
        public const string EntityLogicalName = "sharepointdocumentlocation";
        
        public const int EntityTypeCode = 9508;
        
        public SharePointDocumentLocation() : 
                base(EntityLogicalName) {
        }
        
        public SharePointDocumentLocation(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("sharepointdocumentlocationid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("sharepointdocumentlocationid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the SharePoint document location record.</para>
        /// <para>Display Name: SharePoint Document Location ID</para>
        /// </summary>
        [AttributeLogicalName("sharepointdocumentlocationid")]
        public Guid? SharePointDocumentLocationId {
            get {
                return GetAttributeValue<Guid?>("sharepointdocumentlocationid");
            }
            set {
                SetId("sharepointdocumentlocationid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the SharePoint document location record.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the SharePoint document location record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("parentsiteorlocationtypecode")]
        public string ParentSiteOrLocationTypeCode {
            get {
                return GetAttributeValue<string>("parentsiteorlocationtypecode");
            }
            set {
                SetAttributeValue("parentsiteorlocationtypecode", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("sitecollectionid")]
        public Guid? SiteCollectionId {
            get {
                return GetAttributeValue<Guid?>("sitecollectionid");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the SharePoint document location record.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the SharePoint document location record.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public SharePointDocumentLocation_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SharePointDocumentLocation_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate between the currency associated with the SharePoint document location record and the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the SharePoint document location record was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        [AttributeLogicalName("parentsiteorlocationname")]
        public string ParentSiteOrLocationName {
            get {
                return GetAttributeValue<string>("parentsiteorlocationname");
            }
        }
        
        /// <summary>
        /// <para>Location type of the SharePoint document location.</para>
        /// <para>Display Name: Location Type </para>
        /// </summary>
        [AttributeLogicalName("locationtype")]
        public sharepointdocumentlocation_locationtype? LocationType {
            get {
                return GetOptionSetValue<sharepointdocumentlocation_locationtype>("locationtype");
            }
            set {
                SetOptionSetValue("locationtype", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Relative URL of the SharePoint document location.</para>
        /// <para>Display Name: Relative URL</para>
        /// </summary>
        [AttributeLogicalName("relativeurl")]
        public string RelativeUrl {
            get {
                return GetAttributeValue<string>("relativeurl");
            }
            set {
                SetAttributeValue("relativeurl", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the SharePoint document location record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the SharePoint document location record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the SharePoint document location record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the parent site or location.</para>
        /// <para>Display Name: Parent Site or Location</para>
        /// </summary>
        [AttributeLogicalName("parentsiteorlocation")]
        public EntityReference ParentSiteOrLocation {
            get {
                return GetAttributeValue<EntityReference>("parentsiteorlocation");
            }
            set {
                SetAttributeValue("parentsiteorlocation", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the SharePoint document location record.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the SharePoint document location record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Status of the SharePoint document location record.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public SharePointDocumentLocationState? StateCode {
            get {
                return GetOptionSetValue<SharePointDocumentLocationState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the service type of the SharePoint site.</para>
        /// <para>Display Name: Service Type</para>
        /// </summary>
        [AttributeLogicalName("servicetype")]
        public sharepointsite_servicetype? ServiceType {
            get {
                return GetOptionSetValue<sharepointsite_servicetype>("servicetype");
            }
            set {
                SetOptionSetValue("servicetype", value);
            }
        }
        
        /// <summary>
        /// <para>Absolute URL of the SharePoint document location.</para>
        /// <para>Display Name: Absolute URL</para>
        /// </summary>
        [AttributeLogicalName("absoluteurl")]
        public string AbsoluteURL {
            get {
                return GetAttributeValue<string>("absoluteurl");
            }
            set {
                SetAttributeValue("absoluteurl", value);
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
            set {
                SetAttributeValue("regardingobjectidname", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created the SharePoint document location record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the SharePoint document location record.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the SharePoint document location record is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the SharePoint document location record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Choose the user who owns the SharePoint document location.</para>
        /// <para>Display Name: SharePoint Document Location Owner</para>
        /// </summary>
        [AttributeLogicalName("userid")]
        public Guid? UserId {
            get {
                return GetAttributeValue<Guid?>("userid");
            }
            set {
                SetAttributeValue("userid", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the SharePoint document location record.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the SharePoint document location record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("parentsiteorlocation")]
        [RelationshipSchemaName("sharepointdocumentlocation_parent_sharepointsite")]
        public SharePointSite sharepointdocumentlocation_parent_sharepointsite {
            get {
                return GetRelatedEntity<SharePointSite>("sharepointdocumentlocation_parent_sharepointsite", null);
            }
            set {
                SetRelatedEntity("sharepointdocumentlocation_parent_sharepointsite", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_SharepointDocumentLocation")]
        public Quote Quote_SharepointDocumentLocation {
            get {
                return GetRelatedEntity<Quote>("Quote_SharepointDocumentLocation", null);
            }
            set {
                SetRelatedEntity("Quote_SharepointDocumentLocation", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_sharepointdocumentlocationbase_modifiedonbehalfby")]
        public SystemUser lk_sharepointdocumentlocationbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_sharepointdocumentlocationbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_sharepointdocumentlocationbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_SharepointDocumentLocation")]
        public Account Account_SharepointDocumentLocation {
            get {
                return GetRelatedEntity<Account>("Account_SharepointDocumentLocation", null);
            }
            set {
                SetRelatedEntity("Account_SharepointDocumentLocation", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_sharepointdocumentlocationbase_createdonbehalfby")]
        public SystemUser lk_sharepointdocumentlocationbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_sharepointdocumentlocationbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_sharepointdocumentlocationbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_SharePointDocumentLocation")]
        public TransactionCurrency TransactionCurrency_SharePointDocumentLocation {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_SharePointDocumentLocation", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_SharePointDocumentLocation", null, value);
            }
        }
        
        [AttributeLogicalName("parentsiteorlocation")]
        [RelationshipSchemaName("sharepointdocumentlocation_parent_sharepointdocumentlocation", EntityRole.Referencing)]
        public SharePointDocumentLocation Referencingsharepointdocumentlocation_parent_sharepointdocumentlocation {
            get {
                return GetRelatedEntity<SharePointDocumentLocation>("sharepointdocumentlocation_parent_sharepointdocumentlocation", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("sharepointdocumentlocation_parent_sharepointdocumentlocation", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_SharepointDocumentLocation")]
        public Opportunity Opportunity_SharepointDocumentLocation {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_SharepointDocumentLocation", null);
            }
            set {
                SetRelatedEntity("Opportunity_SharepointDocumentLocation", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_sharepointdocumentlocationbase_modifiedby")]
        public SystemUser lk_sharepointdocumentlocationbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_sharepointdocumentlocationbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_sharepointdocumentlocationbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_sharepointdocumentlocationbase_createdby")]
        public SystemUser lk_sharepointdocumentlocationbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_sharepointdocumentlocationbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_sharepointdocumentlocationbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_SharepointDocumentLocation")]
        public Lead Lead_SharepointDocumentLocation {
            get {
                return GetRelatedEntity<Lead>("Lead_SharepointDocumentLocation", null);
            }
            set {
                SetRelatedEntity("Lead_SharepointDocumentLocation", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_sharepointdocumentlocation")]
        public BusinessUnit business_unit_sharepointdocumentlocation {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_sharepointdocumentlocation", null);
            }
            set {
                SetRelatedEntity("business_unit_sharepointdocumentlocation", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_sharepointdocumentlocation")]
        public Team team_sharepointdocumentlocation {
            get {
                return GetRelatedEntity<Team>("team_sharepointdocumentlocation", null);
            }
            set {
                SetRelatedEntity("team_sharepointdocumentlocation", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_sharepointdocumentlocation")]
        public SystemUser user_sharepointdocumentlocation {
            get {
                return GetRelatedEntity<SystemUser>("user_sharepointdocumentlocation", null);
            }
            set {
                SetRelatedEntity("user_sharepointdocumentlocation", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("knowledgearticle_SharePointDocumentLocations")]
        public KnowledgeArticle knowledgearticle_SharePointDocumentLocations {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_SharePointDocumentLocations", null);
            }
            set {
                SetRelatedEntity("knowledgearticle_SharePointDocumentLocations", null, value);
            }
        }
        
        [RelationshipSchemaName("SharePointDocumentLocation_SyncErrors")]
        public IEnumerable<SyncError> SharePointDocumentLocation_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("SharePointDocumentLocation_SyncErrors", null);
            }
            set {
                SetRelatedEntities("SharePointDocumentLocation_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("sharepointdocumentlocation_parent_sharepointdocumentlocation", EntityRole.Referenced)]
        public IEnumerable<SharePointDocumentLocation> Referencedsharepointdocumentlocation_parent_sharepointdocumentlocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("sharepointdocumentlocation_parent_sharepointdocumentlocation", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("sharepointdocumentlocation_parent_sharepointdocumentlocation", EntityRole.Referenced, value);
            }
        }
        
        public static SharePointDocumentLocation Retrieve(IOrganizationService service, Guid id, params Expression<Func<SharePointDocumentLocation,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>SharePoint site from where documents can be managed in Microsoft Dynamics CRM.</para>
    /// <para>Display Name: SharePoint Site</para>
    /// </summary>
    [EntityLogicalName("sharepointsite")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SharePointSite : ExtendedEntity<SharePointSiteState, SharePointSite_StatusCode> {
        
        public const string EntityLogicalName = "sharepointsite";
        
        public const int EntityTypeCode = 9502;
        
        public SharePointSite() : 
                base(EntityLogicalName) {
        }
        
        public SharePointSite(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("sharepointsiteid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("sharepointsiteid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the SharePoint site in CRM</para>
        /// <para>Display Name: SharePoint Site ID</para>
        /// </summary>
        [AttributeLogicalName("sharepointsiteid")]
        public Guid? SharePointSiteId {
            get {
                return GetAttributeValue<Guid?>("sharepointsiteid");
            }
            set {
                SetId("sharepointsiteid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the SharePoint site is the default site or not.</para>
        /// <para>Display Name: Default Site</para>
        /// </summary>
        [AttributeLogicalName("isdefault")]
        public bool? IsDefault {
            get {
                return GetAttributeValue<bool?>("isdefault");
            }
            set {
                SetAttributeValue("isdefault", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the SharePoint site.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the SharePoint site URL was last validated.</para>
        /// <para>Display Name: Last Validated</para>
        /// </summary>
        [AttributeLogicalName("lastvalidated")]
        public DateTime? LastValidated {
            get {
                return GetAttributeValue<DateTime?>("lastvalidated");
            }
            set {
                SetAttributeValue("lastvalidated", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the SharePoint site record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the SharePoint site record was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Reason for validation status of the URL</para>
        /// <para>Display Name: Additional Information</para>
        /// </summary>
        [AttributeLogicalName("validationstatuserrorcode")]
        public sharepoint_validationstatusreason? ValidationStatusErrorCode {
            get {
                return GetOptionSetValue<sharepoint_validationstatusreason>("validationstatuserrorcode");
            }
            set {
                SetOptionSetValue("validationstatuserrorcode", value);
            }
        }
        
        [AttributeLogicalName("parentsitename")]
        public string ParentSiteName {
            get {
                return GetAttributeValue<string>("parentsitename");
            }
        }
        
        [AttributeLogicalName("parentsiteobjecttypecode")]
        public string ParentSiteObjectTypeCode {
            get {
                return GetAttributeValue<string>("parentsiteobjecttypecode");
            }
            set {
                SetAttributeValue("parentsiteobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate between the currency associated with the SharePoint site record and the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the SharePoint site record was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Allows embedding of Power BI Reports available in this SharePoint site.</para>
        /// <para>Display Name: Allow Embedding of Power BI Reports</para>
        /// </summary>
        [AttributeLogicalName("ispowerbisite")]
        public bool? IsPowerBISite {
            get {
                return GetAttributeValue<bool?>("ispowerbisite");
            }
            set {
                SetAttributeValue("ispowerbisite", value);
            }
        }
        
        /// <summary>
        /// <para>Owner Id Type</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Relative URL of the SharePoint site.</para>
        /// <para>Display Name: Relative URL</para>
        /// </summary>
        [AttributeLogicalName("relativeurl")]
        public string RelativeUrl {
            get {
                return GetAttributeValue<string>("relativeurl");
            }
            set {
                SetAttributeValue("relativeurl", value);
            }
        }
        
        /// <summary>
        /// <para>Absolute URL of the SharePoint site.</para>
        /// <para>Display Name: Absolute URL</para>
        /// </summary>
        [AttributeLogicalName("absoluteurl")]
        public string AbsoluteURL {
            get {
                return GetAttributeValue<string>("absoluteurl");
            }
            set {
                SetAttributeValue("absoluteurl", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the SharePoint site record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the SharePoint site record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the document location record.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the parent SharePoint site.</para>
        /// <para>Display Name: Parent Site</para>
        /// </summary>
        [AttributeLogicalName("parentsite")]
        public EntityReference ParentSite {
            get {
                return GetAttributeValue<EntityReference>("parentsite");
            }
            set {
                SetAttributeValue("parentsite", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the user who owns the SharePoint site.</para>
        /// <para>Display Name: SharePoint Site Owner</para>
        /// </summary>
        [AttributeLogicalName("userid")]
        public Guid? UserId {
            get {
                return GetAttributeValue<Guid?>("userid");
            }
            set {
                SetAttributeValue("userid", value);
            }
        }
        
        /// <summary>
        /// <para>Status of the SharePoint site record.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public SharePointSiteState? StateCode {
            get {
                return GetOptionSetValue<SharePointSiteState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the service type of location of the SharePoint site.</para>
        /// <para>Display Name: Service Type</para>
        /// </summary>
        [AttributeLogicalName("servicetype")]
        public sharepointsite_servicetype? ServiceType {
            get {
                return GetOptionSetValue<sharepointsite_servicetype>("servicetype");
            }
            set {
                SetOptionSetValue("servicetype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("sitecollectionid")]
        public Guid? SiteCollectionId {
            get {
                return GetAttributeValue<Guid?>("sitecollectionid");
            }
        }
        
        /// <summary>
        /// <para>Entity on which the folder structure for Microsoft Dynamics CRM records will be created in SharePoint.</para>
        /// <para>Display Name: Entity for SharePoint Folder Structure</para>
        /// </summary>
        [AttributeLogicalName("folderstructureentity")]
        public string FolderStructureEntity {
            get {
                return GetAttributeValue<string>("folderstructureentity");
            }
            set {
                SetAttributeValue("folderstructureentity", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if SharePoint Grid is present or not.</para>
        /// <para>Display Name: List component is installed</para>
        /// </summary>
        [AttributeLogicalName("isgridpresent")]
        public bool? IsGridPresent {
            get {
                return GetAttributeValue<bool?>("isgridpresent");
            }
            set {
                SetAttributeValue("isgridpresent", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the SharePoint site record.</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the SharePoint site record.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the SharePoint site record.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the SharePoint site record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the SharePoint site record.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public SharePointSite_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SharePointSite_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the SharePoint site record.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the owner</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Validation status of the SharePoint site URL.</para>
        /// <para>Display Name: Last Validation Status</para>
        /// </summary>
        [AttributeLogicalName("validationstatus")]
        public sharepoint_validationstatus? ValidationStatus {
            get {
                return GetOptionSetValue<sharepoint_validationstatus>("validationstatus");
            }
            set {
                SetOptionSetValue("validationstatus", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who modified the SharePoint site record.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_sharepointsitebase_modifiedby")]
        public SystemUser lk_sharepointsitebase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_sharepointsitebase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_sharepointsitebase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_sharepointsitebase_createdonbehalfby")]
        public SystemUser lk_sharepointsitebase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_sharepointsitebase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_sharepointsitebase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("parentsite")]
        [RelationshipSchemaName("sharepointsite_parentsite_sharepointsite", EntityRole.Referencing)]
        public SharePointSite Referencingsharepointsite_parentsite_sharepointsite {
            get {
                return GetRelatedEntity<SharePointSite>("sharepointsite_parentsite_sharepointsite", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("sharepointsite_parentsite_sharepointsite", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_sharepointsitebase_createdby")]
        public SystemUser lk_sharepointsitebase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_sharepointsitebase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_sharepointsitebase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_sharepointsitebase_modifiedonbehalfby")]
        public SystemUser lk_sharepointsitebase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_sharepointsitebase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_sharepointsitebase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_SharePointSite")]
        public TransactionCurrency TransactionCurrency_SharePointSite {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_SharePointSite", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_SharePointSite", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_sharepointsites")]
        public BusinessUnit business_unit_sharepointsites {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_sharepointsites", null);
            }
            set {
                SetRelatedEntity("business_unit_sharepointsites", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_sharepointsite")]
        public Team team_sharepointsite {
            get {
                return GetRelatedEntity<Team>("team_sharepointsite", null);
            }
            set {
                SetRelatedEntity("team_sharepointsite", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_sharepointsite")]
        public SystemUser user_sharepointsite {
            get {
                return GetRelatedEntity<SystemUser>("user_sharepointsite", null);
            }
            set {
                SetRelatedEntity("user_sharepointsite", null, value);
            }
        }
        
        [RelationshipSchemaName("sharepointsite_parentsite_sharepointsite", EntityRole.Referenced)]
        public IEnumerable<SharePointSite> Referencedsharepointsite_parentsite_sharepointsite {
            get {
                return GetRelatedEntities<SharePointSite>("sharepointsite_parentsite_sharepointsite", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("sharepointsite_parentsite_sharepointsite", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("SharePointSite_SyncErrors")]
        public IEnumerable<SyncError> SharePointSite_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("SharePointSite_SyncErrors", null);
            }
            set {
                SetRelatedEntities("SharePointSite_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("sharepointdocumentlocation_parent_sharepointsite")]
        public IEnumerable<SharePointDocumentLocation> sharepointdocumentlocation_parent_sharepointsite {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("sharepointdocumentlocation_parent_sharepointsite", null);
            }
            set {
                SetRelatedEntities("sharepointdocumentlocation_parent_sharepointsite", null, value);
            }
        }
        
        public static SharePointSite Retrieve(IOrganizationService service, Guid id, params Expression<Func<SharePointSite,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Contains information about the tracked service-level KPIs for cases that belong to different customers.</para>
    /// <para>Display Name: SLA</para>
    /// </summary>
    [EntityLogicalName("sla")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SLA : ExtendedEntity<SLAState, SLA_StatusCode> {
        
        public const string EntityLogicalName = "sla";
        
        public const int EntityTypeCode = 9750;
        
        public SLA() : 
                base(EntityLogicalName) {
        }
        
        public SLA(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("slaid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the SLA.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public Guid? SLAId {
            get {
                return GetAttributeValue<Guid?>("slaid");
            }
            set {
                SetId("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Tells whether this SLA is the default one.</para>
        /// <para>Display Name: Is Default</para>
        /// </summary>
        [AttributeLogicalName("isdefault")]
        public bool? IsDefault {
            get {
                return GetAttributeValue<bool?>("isdefault");
            }
            set {
                SetAttributeValue("isdefault", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who owns the SLA. This field is updated every time the item is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Select the field that specifies the date and time from which the SLA items will be calculated for the case record. For example, if you select the Case Created On field, SLA calculation will begin from the time the case is created. </para>
        /// <para>Display Name: Applicable From</para>
        /// </summary>
        [AttributeLogicalName("applicablefrom")]
        public string ApplicableFrom {
            get {
                return GetAttributeValue<string>("applicablefrom");
            }
            set {
                SetAttributeValue("applicablefrom", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the primary entity that the SLA has been created for.</para>
        /// <para>Display Name: Primary Entity</para>
        /// </summary>
        [AttributeLogicalName("primaryentityotc")]
        public int? PrimaryEntityOTC {
            get {
                return GetAttributeValue<int?>("primaryentityotc");
            }
            set {
                SetAttributeValue("primaryentityotc", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Workflow associated with the SLA.</para>
        /// <para>Display Name: Workflow ID</para>
        /// </summary>
        [AttributeLogicalName("workflowid")]
        public EntityReference WorkflowId {
            get {
                return GetAttributeValue<EntityReference>("workflowid");
            }
            set {
                SetAttributeValue("workflowid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the business unit that owns the record</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
            set {
                SetAttributeValue("owningbusinessunit", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the SLA</para>
        /// <para>Display Name: ChangedAttributeList</para>
        /// </summary>
        [AttributeLogicalName("changedattributelist")]
        public string ChangedAttributeList {
            get {
                return GetAttributeValue<string>("changedattributelist");
            }
            set {
                SetAttributeValue("changedattributelist", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the field that specifies the date and time from which the SLA items will be calculated. For example, if you select the Case Created On field, SLA calculation will begin from the time the case is created.</para>
        /// <para>Display Name: Applicable From</para>
        /// </summary>
        [AttributeLogicalName("applicablefrompicklist")]
        public SLA_ApplicableFromPickList? ApplicableFromPickList {
            get {
                return GetOptionSetValue<SLA_ApplicableFromPickList>("applicablefrompicklist");
            }
            set {
                SetOptionSetValue("applicablefrompicklist", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the Service Level Agreement (SLA) is active or inactive.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public SLAState? StateCode {
            get {
                return GetOptionSetValue<SLAState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate between the currency associated with the SLA record and the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Choose the business hours for calculating SLA item timelines.</para>
        /// <para>Display Name: Business Hours</para>
        /// </summary>
        [AttributeLogicalName("businesshoursid")]
        public EntityReference BusinessHoursId {
            get {
                return GetAttributeValue<EntityReference>("businesshoursid");
            }
            set {
                SetAttributeValue("businesshoursid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Unique Id</para>
        /// </summary>
        [AttributeLogicalName("slaidunique")]
        public Guid? SLAIdUnique {
            get {
                return GetAttributeValue<Guid?>("slaidunique");
            }
        }
        
        /// <summary>
        /// <para>Select whether this SLA will allow pausing and resuming during the time calculation.</para>
        /// <para>Display Name: Allow Pause and Resume</para>
        /// </summary>
        [AttributeLogicalName("allowpauseresume")]
        public bool? AllowPauseResume {
            get {
                return GetAttributeValue<bool?>("allowpauseresume");
            }
            set {
                SetAttributeValue("allowpauseresume", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team that owns the record.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
            set {
                SetAttributeValue("owningteam", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Is Managed</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Version number of the SLA.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Type a descriptive name of the service level agreement (SLA).</para>
        /// <para>Display Name: Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        [AttributeLogicalName("workflowidname")]
        public string WorkflowIdName {
            get {
                return GetAttributeValue<string>("workflowidname");
            }
            set {
                SetAttributeValue("workflowidname", value);
            }
        }
        
        /// <summary>
        /// <para>Select the type of service level agreement (SLA).</para>
        /// <para>Display Name: SLA Type</para>
        /// </summary>
        [AttributeLogicalName("slatype")]
        public SLA_SLAType? SLAType {
            get {
                return GetOptionSetValue<SLA_SLAType>("slatype");
            }
            set {
                SetOptionSetValue("slatype", value);
            }
        }
        
        [AttributeLogicalName("businesshoursidname")]
        public string BusinessHoursIdName {
            get {
                return GetAttributeValue<string>("businesshoursidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the SLA record.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Choose the entity type that the SLA is defined.</para>
        /// <para>Display Name: Object Type Code</para>
        /// </summary>
        [AttributeLogicalName("objecttypecode")]
        public SLA_ObjectTypeCode? ObjectTypeCode {
            get {
                return GetOptionSetValue<SLA_ObjectTypeCode>("objecttypecode");
            }
        }
        
        /// <summary>
        /// <para>Select the status of the service level agreement (SLA).</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public SLA_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SLA_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the SLA</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user that owns the record.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
            set {
                SetAttributeValue("owninguser", value);
            }
        }
        
        [AttributeLogicalName("businesshoursid")]
        [RelationshipSchemaName("slabase_businesshoursid")]
        public Calendar slabase_businesshoursid {
            get {
                return GetRelatedEntity<Calendar>("slabase_businesshoursid", null);
            }
            set {
                SetRelatedEntity("slabase_businesshoursid", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_slabase")]
        public BusinessUnit business_unit_slabase {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_slabase", null);
            }
            set {
                SetRelatedEntity("business_unit_slabase", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_slabase")]
        public SystemUser user_slabase {
            get {
                return GetRelatedEntity<SystemUser>("user_slabase", null);
            }
            set {
                SetRelatedEntity("user_slabase", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_slabase_modifiedby")]
        public SystemUser lk_slabase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_slabase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_slabase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_SLA")]
        public TransactionCurrency TransactionCurrency_SLA {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_SLA", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_SLA", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_slaBase")]
        public Team team_slaBase {
            get {
                return GetRelatedEntity<Team>("team_slaBase", null);
            }
            set {
                SetRelatedEntity("team_slaBase", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_slabase_createdby")]
        public SystemUser lk_slabase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_slabase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_slabase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_slabase_createdonbehalfby")]
        public SystemUser lk_slabase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_slabase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_slabase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_slabase_modifiedonbehalfby")]
        public SystemUser lk_slabase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_slabase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_slabase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("workflowid")]
        [RelationshipSchemaName("slabase_workflowid")]
        public Workflow slabase_workflowid {
            get {
                return GetRelatedEntity<Workflow>("slabase_workflowid", null);
            }
            set {
                SetRelatedEntity("slabase_workflowid", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_invoice")]
        public IEnumerable<Invoice> sla_invoice {
            get {
                return GetRelatedEntities<Invoice>("sla_invoice", null);
            }
            set {
                SetRelatedEntities("sla_invoice", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_email")]
        public IEnumerable<Email> manualsla_email {
            get {
                return GetRelatedEntities<Email>("manualsla_email", null);
            }
            set {
                SetRelatedEntities("manualsla_email", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_phonecall")]
        public IEnumerable<PhoneCall> sla_phonecall {
            get {
                return GetRelatedEntities<PhoneCall>("sla_phonecall", null);
            }
            set {
                SetRelatedEntities("sla_phonecall", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_quote")]
        public IEnumerable<Quote> manualsla_quote {
            get {
                return GetRelatedEntities<Quote>("manualsla_quote", null);
            }
            set {
                SetRelatedEntities("manualsla_quote", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_contact")]
        public IEnumerable<Contact> sla_contact {
            get {
                return GetRelatedEntities<Contact>("sla_contact", null);
            }
            set {
                SetRelatedEntities("sla_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_fax")]
        public IEnumerable<Fax> sla_fax {
            get {
                return GetRelatedEntities<Fax>("sla_fax", null);
            }
            set {
                SetRelatedEntities("sla_fax", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_serviceappointment")]
        public IEnumerable<ServiceAppointment> sla_serviceappointment {
            get {
                return GetRelatedEntities<ServiceAppointment>("sla_serviceappointment", null);
            }
            set {
                SetRelatedEntities("sla_serviceappointment", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_opportunity")]
        public IEnumerable<Opportunity> manualsla_opportunity {
            get {
                return GetRelatedEntities<Opportunity>("manualsla_opportunity", null);
            }
            set {
                SetRelatedEntities("manualsla_opportunity", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_socialactivity")]
        public IEnumerable<SocialActivity> manualsla_socialactivity {
            get {
                return GetRelatedEntities<SocialActivity>("manualsla_socialactivity", null);
            }
            set {
                SetRelatedEntities("manualsla_socialactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_appointment")]
        public IEnumerable<Appointment> manualsla_appointment {
            get {
                return GetRelatedEntities<Appointment>("manualsla_appointment", null);
            }
            set {
                SetRelatedEntities("manualsla_appointment", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_quote")]
        public IEnumerable<Quote> sla_quote {
            get {
                return GetRelatedEntities<Quote>("sla_quote", null);
            }
            set {
                SetRelatedEntities("sla_quote", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_letter")]
        public IEnumerable<Letter> manualsla_letter {
            get {
                return GetRelatedEntities<Letter>("manualsla_letter", null);
            }
            set {
                SetRelatedEntities("manualsla_letter", null, value);
            }
        }
        
        [RelationshipSchemaName("SLA_SyncErrors")]
        public IEnumerable<SyncError> SLA_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("SLA_SyncErrors", null);
            }
            set {
                SetRelatedEntities("SLA_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_account")]
        public IEnumerable<Account> sla_account {
            get {
                return GetRelatedEntities<Account>("sla_account", null);
            }
            set {
                SetRelatedEntities("sla_account", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_cases")]
        public IEnumerable<Incident> sla_cases {
            get {
                return GetRelatedEntities<Incident>("sla_cases", null);
            }
            set {
                SetRelatedEntities("sla_cases", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_lead")]
        public IEnumerable<Lead> manualsla_lead {
            get {
                return GetRelatedEntities<Lead>("manualsla_lead", null);
            }
            set {
                SetRelatedEntities("manualsla_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_appointment")]
        public IEnumerable<Appointment> sla_appointment {
            get {
                return GetRelatedEntities<Appointment>("sla_appointment", null);
            }
            set {
                SetRelatedEntities("sla_appointment", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_serviceappointment")]
        public IEnumerable<ServiceAppointment> manualsla_serviceappointment {
            get {
                return GetRelatedEntities<ServiceAppointment>("manualsla_serviceappointment", null);
            }
            set {
                SetRelatedEntities("manualsla_serviceappointment", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_email")]
        public IEnumerable<Email> sla_email {
            get {
                return GetRelatedEntities<Email>("sla_email", null);
            }
            set {
                SetRelatedEntities("sla_email", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_lead")]
        public IEnumerable<Lead> sla_lead {
            get {
                return GetRelatedEntities<Lead>("sla_lead", null);
            }
            set {
                SetRelatedEntities("sla_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_phonecall")]
        public IEnumerable<PhoneCall> manualsla_phonecall {
            get {
                return GetRelatedEntities<PhoneCall>("manualsla_phonecall", null);
            }
            set {
                SetRelatedEntities("manualsla_phonecall", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_cases")]
        public IEnumerable<Incident> manualsla_cases {
            get {
                return GetRelatedEntities<Incident>("manualsla_cases", null);
            }
            set {
                SetRelatedEntities("manualsla_cases", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_letter")]
        public IEnumerable<Letter> sla_letter {
            get {
                return GetRelatedEntities<Letter>("sla_letter", null);
            }
            set {
                SetRelatedEntities("sla_letter", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_salesorder")]
        public IEnumerable<SalesOrder> manualsla_salesorder {
            get {
                return GetRelatedEntities<SalesOrder>("manualsla_salesorder", null);
            }
            set {
                SetRelatedEntities("manualsla_salesorder", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_salesorder")]
        public IEnumerable<SalesOrder> sla_salesorder {
            get {
                return GetRelatedEntities<SalesOrder>("sla_salesorder", null);
            }
            set {
                SetRelatedEntities("sla_salesorder", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_account")]
        public IEnumerable<Account> manualsla_account {
            get {
                return GetRelatedEntities<Account>("manualsla_account", null);
            }
            set {
                SetRelatedEntities("manualsla_account", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_task")]
        public IEnumerable<Task> manualsla_task {
            get {
                return GetRelatedEntities<Task>("manualsla_task", null);
            }
            set {
                SetRelatedEntities("manualsla_task", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_activitypointer")]
        public IEnumerable<ActivityPointer> sla_activitypointer {
            get {
                return GetRelatedEntities<ActivityPointer>("sla_activitypointer", null);
            }
            set {
                SetRelatedEntities("sla_activitypointer", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_task")]
        public IEnumerable<Task> sla_task {
            get {
                return GetRelatedEntities<Task>("sla_task", null);
            }
            set {
                SetRelatedEntities("sla_task", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_activitypointer")]
        public IEnumerable<ActivityPointer> manualsla_activitypointer {
            get {
                return GetRelatedEntities<ActivityPointer>("manualsla_activitypointer", null);
            }
            set {
                SetRelatedEntities("manualsla_activitypointer", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_fax")]
        public IEnumerable<Fax> manualsla_fax {
            get {
                return GetRelatedEntities<Fax>("manualsla_fax", null);
            }
            set {
                SetRelatedEntities("manualsla_fax", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_invoice")]
        public IEnumerable<Invoice> manualsla_invoice {
            get {
                return GetRelatedEntities<Invoice>("manualsla_invoice", null);
            }
            set {
                SetRelatedEntities("manualsla_invoice", null, value);
            }
        }
        
        [RelationshipSchemaName("manualsla_contact")]
        public IEnumerable<Contact> manualsla_contact {
            get {
                return GetRelatedEntities<Contact>("manualsla_contact", null);
            }
            set {
                SetRelatedEntities("manualsla_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_socialactivity")]
        public IEnumerable<SocialActivity> sla_socialactivity {
            get {
                return GetRelatedEntities<SocialActivity>("sla_socialactivity", null);
            }
            set {
                SetRelatedEntities("sla_socialactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_opportunity")]
        public IEnumerable<Opportunity> sla_opportunity {
            get {
                return GetRelatedEntities<Opportunity>("sla_opportunity", null);
            }
            set {
                SetRelatedEntities("sla_opportunity", null, value);
            }
        }
        
        [RelationshipSchemaName("sla_entitlement")]
        public IEnumerable<Entitlement> sla_entitlement {
            get {
                return GetRelatedEntities<Entitlement>("sla_entitlement", null);
            }
            set {
                SetRelatedEntities("sla_entitlement", null, value);
            }
        }
        
        public static SLA Retrieve(IOrganizationService service, Guid id, params Expression<Func<SLA,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>For internal use only.</para>
    /// <para>Display Name: Social Activity</para>
    /// </summary>
    [EntityLogicalName("socialactivity")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SocialActivity : ExtendedEntity<SocialActivityState, SocialActivity_StatusCode> {
        
        public const string EntityLogicalName = "socialactivity";
        
        public const int EntityTypeCode = 4216;
        
        public SocialActivity() : 
                base(EntityLogicalName) {
        }
        
        public SocialActivity(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the activity.</para>
        /// <para>Display Name: Activity</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the associated service.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Subject associated with the activity.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Actual duration of the activity in minutes.</para>
        /// <para>Display Name: Actual Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Select the parent account or parent contact for post author.</para>
        /// <para>Display Name: Post author parent</para>
        /// </summary>
        [AttributeLogicalName("postauthoraccountname")]
        public string PostAuthorAccountName {
            get {
                return GetAttributeValue<string>("postauthoraccountname");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the social activity is completed, failed, or processing. This field is read-only.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public SocialActivity_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SocialActivity_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled end time of the activity.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Person who is the receiver of the activity.</para>
        /// <para>Display Name: To</para>
        /// </summary>
        [AttributeLogicalName("to")]
        public IEnumerable<ActivityParty> To {
            get {
                return GetEntityCollection<ActivityParty>("to");
            }
            set {
                SetEntityCollection("to", value);
            }
        }
        
        [AttributeLogicalName("postedbyname")]
        public string PostFromProfileIdName {
            get {
                return GetAttributeValue<string>("postedbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the activity.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Actual end time of the activity.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        /// <summary>
        /// <para>Select the parent account or parent contact for the social profile of the social activity</para>
        /// <para>Display Name: Post Author Type</para>
        /// </summary>
        [AttributeLogicalName("postauthortype")]
        public string PostAuthorType {
            get {
                return GetAttributeValue<string>("postauthortype");
            }
            set {
                SetAttributeValue("postauthortype", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the activity.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this Social Activity. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the contact or account that authored the post.</para>
        /// <para>Display Name: Post Author</para>
        /// </summary>
        [AttributeLogicalName("postauthor")]
        public EntityReference PostAuthor {
            get {
                return GetAttributeValue<EntityReference>("postauthor");
            }
            set {
                SetAttributeValue("postauthor", value);
            }
        }
        
        /// <summary>
        /// <para>Shows if the social post originated as a private or public message.</para>
        /// <para>Display Name: Received As</para>
        /// </summary>
        [AttributeLogicalName("postmessagetype")]
        public socialactivity_postmessagetype? PostMessageType {
            get {
                return GetOptionSetValue<socialactivity_postmessagetype>("postmessagetype");
            }
            set {
                SetOptionSetValue("postmessagetype", value);
            }
        }
        
        /// <summary>
        /// <para>Select the parent account or parent contact for the post author</para>
        /// <para>Display Name: Post author parent</para>
        /// </summary>
        [AttributeLogicalName("postauthoraccounttype")]
        public string PostAuthorAccountType {
            get {
                return GetAttributeValue<string>("postauthoraccounttype");
            }
            set {
                SetAttributeValue("postauthoraccounttype", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Social Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("socialadditionalparams")]
        public string SocialAdditionalParams {
            get {
                return GetAttributeValue<string>("socialadditionalparams");
            }
            set {
                SetAttributeValue("socialadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Last Updated</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows information about the social post content. This field is read-only.</para>
        /// <para>Display Name: Post Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the recipients of the social post.</para>
        /// <para>Display Name: Posted To</para>
        /// </summary>
        [AttributeLogicalName("posttoprofileid")]
        public string PostToProfileId {
            get {
                return GetAttributeValue<string>("posttoprofileid");
            }
            set {
                SetAttributeValue("posttoprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.</para>
        /// <para>Display Name: Sentiment Value</para>
        /// </summary>
        [AttributeLogicalName("sentimentvalue")]
        public double? SentimentValue {
            get {
                return GetAttributeValue<double?>("sentimentvalue");
            }
            set {
                SetAttributeValue("sentimentvalue", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the activity, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
            set {
                SetAttributeValue("scheduleddurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Sequence number of the import that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the activity.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the URL of the post.</para>
        /// <para>Display Name: Post URL</para>
        /// </summary>
        [AttributeLogicalName("posturl")]
        public string PostURL {
            get {
                return GetAttributeValue<string>("posturl");
            }
            set {
                SetAttributeValue("posturl", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Users or facility/equipment that are required for the activity.</para>
        /// <para>Display Name: Resources</para>
        /// </summary>
        [AttributeLogicalName("resources")]
        public IEnumerable<ActivityParty> Resources {
            get {
                return GetEntityCollection<ActivityParty>("resources");
            }
            set {
                SetEntityCollection("resources", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Select the direction of the post as incoming or outbound.</para>
        /// <para>Display Name: Direction</para>
        /// </summary>
        [AttributeLogicalName("directioncode")]
        public bool? DirectionCode {
            get {
                return GetAttributeValue<bool?>("directioncode");
            }
            set {
                SetAttributeValue("directioncode", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
            set {
                SetAttributeValue("regardingobjectidname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the author of the post on the corresponding social channel.</para>
        /// <para>Display Name: Posted By</para>
        /// </summary>
        [AttributeLogicalName("postfromprofileid")]
        public EntityReference PostFromProfileId {
            get {
                return GetAttributeValue<EntityReference>("postfromprofileid");
            }
            set {
                SetAttributeValue("postfromprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.</para>
        /// <para>Display Name: Social Channel</para>
        /// </summary>
        [AttributeLogicalName("community")]
        public socialprofile_community? Community {
            get {
                return GetOptionSetValue<socialprofile_community>("community");
            }
            set {
                SetOptionSetValue("community", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the Activity.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Shows the parent account of the author of the post.</para>
        /// <para>Display Name: Post Author Account</para>
        /// </summary>
        [AttributeLogicalName("postauthoraccount")]
        public EntityReference PostAuthorAccount {
            get {
                return GetAttributeValue<EntityReference>("postauthoraccount");
            }
            set {
                SetAttributeValue("postauthoraccount", value);
            }
        }
        
        /// <summary>
        /// <para>Account or contact associated with the social profile or author of the post.</para>
        /// <para>Display Name: Post Author Name</para>
        /// </summary>
        [AttributeLogicalName("postauthorname")]
        public string PostAuthorName {
            get {
                return GetAttributeValue<string>("postauthorname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("postedon")]
        public DateTime? PostedOn {
            get {
                return GetAttributeValue<DateTime?>("postedon");
            }
            set {
                SetAttributeValue("postedon", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the social activity completed. This field is read-only.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public SocialActivityState? StateCode {
            get {
                return GetOptionSetValue<SocialActivityState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Social Activity record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the record that the social activity relates to.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the social conversation. For internal use only.</para>
        /// <para>Display Name: Thread ID</para>
        /// </summary>
        [AttributeLogicalName("threadid")]
        public string ThreadId {
            get {
                return GetAttributeValue<string>("threadid");
            }
            set {
                SetAttributeValue("threadid", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the activity.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Actual start time of the activity.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the Stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled start time of the activity.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the responses to a post. For internal use only.</para>
        /// <para>Display Name: In Response To</para>
        /// </summary>
        [AttributeLogicalName("inresponseto")]
        public string InResponseTo {
            get {
                return GetAttributeValue<string>("inresponseto");
            }
            set {
                SetAttributeValue("inresponseto", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public SocialActivity_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<SocialActivity_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the post. For internal use only.</para>
        /// <para>Display Name: Post ID</para>
        /// </summary>
        [AttributeLogicalName("postid")]
        public string PostId {
            get {
                return GetAttributeValue<string>("postid");
            }
            set {
                SetAttributeValue("postid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the activitypointer.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>Person who the activity is from.</para>
        /// <para>Display Name: From</para>
        /// </summary>
        [AttributeLogicalName("from")]
        public IEnumerable<ActivityParty> From {
            get {
                return GetEntityCollection<ActivityParty>("from");
            }
            set {
                SetEntityCollection("from", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the activity was created.</para>
        /// <para>Display Name: Created Date</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the social activity.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_SocialActivities")]
        public msdyn_PostAlbum msdyn_postalbum_SocialActivities {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_SocialActivities", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_SocialActivities")]
        public dg_event dg_event_SocialActivities {
            get {
                return GetRelatedEntity<dg_event>("dg_event_SocialActivities", null);
            }
            set {
                SetRelatedEntity("dg_event_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_SocialActivities")]
        public dg_participant dg_participant_SocialActivities {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_SocialActivities", null);
            }
            set {
                SetRelatedEntity("dg_participant_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_SocialActivities")]
        public Contact Contact_SocialActivities {
            get {
                return GetRelatedEntity<Contact>("Contact_SocialActivities", null);
            }
            set {
                SetRelatedEntity("Contact_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_socialactivitybase_modifiedonbehalfby")]
        public SystemUser lk_socialactivitybase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_socialactivitybase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_socialactivitybase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_SocialActivities")]
        public Opportunity Opportunity_SocialActivities {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_SocialActivities", null);
            }
            set {
                SetRelatedEntity("Opportunity_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_socialactivitybase_createdonbehalfby")]
        public SystemUser lk_socialactivitybase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_socialactivitybase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_socialactivitybase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_socialactivity_modifiedby")]
        public SystemUser lk_socialactivity_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_socialactivity_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_socialactivity_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_SocialActivities")]
        public Incident Incident_SocialActivities {
            get {
                return GetRelatedEntity<Incident>("Incident_SocialActivities", null);
            }
            set {
                SetRelatedEntity("Incident_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("postauthor")]
        [RelationshipSchemaName("SocialActivity_PostAuthor_accounts")]
        public Account SocialActivity_PostAuthor_accounts {
            get {
                return GetRelatedEntity<Account>("SocialActivity_PostAuthor_accounts", null);
            }
            set {
                SetRelatedEntity("SocialActivity_PostAuthor_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_socialactivity")]
        public SLA manualsla_socialactivity {
            get {
                return GetRelatedEntity<SLA>("manualsla_socialactivity", null);
            }
            set {
                SetRelatedEntity("manualsla_socialactivity", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_socialactivity")]
        public Team team_socialactivity {
            get {
                return GetRelatedEntity<Team>("team_socialactivity", null);
            }
            set {
                SetRelatedEntity("team_socialactivity", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_SocialActivities")]
        public SalesOrder SalesOrder_SocialActivities {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_SocialActivities", null);
            }
            set {
                SetRelatedEntity("SalesOrder_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("postauthor")]
        [RelationshipSchemaName("socialactivity_postauthor_contacts")]
        public Contact socialactivity_postauthor_contacts {
            get {
                return GetRelatedEntity<Contact>("socialactivity_postauthor_contacts", null);
            }
            set {
                SetRelatedEntity("socialactivity_postauthor_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_socialactivity")]
        public BusinessUnit business_unit_socialactivity {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_socialactivity", null);
            }
            set {
                SetRelatedEntity("business_unit_socialactivity", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_socialactivity")]
        public SystemUser user_socialactivity {
            get {
                return GetRelatedEntity<SystemUser>("user_socialactivity", null);
            }
            set {
                SetRelatedEntity("user_socialactivity", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_socialactivity")]
        public SLA sla_socialactivity {
            get {
                return GetRelatedEntity<SLA>("sla_socialactivity", null);
            }
            set {
                SetRelatedEntity("sla_socialactivity", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("transactioncurrency_socialactivity")]
        public TransactionCurrency transactioncurrency_socialactivity {
            get {
                return GetRelatedEntity<TransactionCurrency>("transactioncurrency_socialactivity", null);
            }
            set {
                SetRelatedEntity("transactioncurrency_socialactivity", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_SocialActivities")]
        public Lead Lead_SocialActivities {
            get {
                return GetRelatedEntity<Lead>("Lead_SocialActivities", null);
            }
            set {
                SetRelatedEntity("Lead_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_SocialActivities")]
        public Account Account_SocialActivities {
            get {
                return GetRelatedEntity<Account>("Account_SocialActivities", null);
            }
            set {
                SetRelatedEntity("Account_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_SocialActivities")]
        public Contract Contract_SocialActivities {
            get {
                return GetRelatedEntity<Contract>("Contract_SocialActivities", null);
            }
            set {
                SetRelatedEntity("Contract_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_socialactivity_createdby")]
        public SystemUser lk_socialactivity_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_socialactivity_createdby", null);
            }
            set {
                SetRelatedEntity("lk_socialactivity_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("postauthoraccount")]
        [RelationshipSchemaName("SocialActivity_PostAuthorAccount_accounts")]
        public Account SocialActivity_PostAuthorAccount_accounts {
            get {
                return GetRelatedEntity<Account>("SocialActivity_PostAuthorAccount_accounts", null);
            }
            set {
                SetRelatedEntity("SocialActivity_PostAuthorAccount_accounts", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_SocialActivities")]
        public Quote Quote_SocialActivities {
            get {
                return GetRelatedEntity<Quote>("Quote_SocialActivities", null);
            }
            set {
                SetRelatedEntity("Quote_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_SocialActivities")]
        public Entitlement entitlement_SocialActivities {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_SocialActivities", null);
            }
            set {
                SetRelatedEntity("entitlement_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_socialactivity")]
        public ActivityPointer activity_pointer_socialactivity {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_socialactivity", null);
            }
            set {
                SetRelatedEntity("activity_pointer_socialactivity", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_SocialActivities")]
        public Invoice Invoice_SocialActivities {
            get {
                return GetRelatedEntity<Invoice>("Invoice_SocialActivities", null);
            }
            set {
                SetRelatedEntity("Invoice_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_SocialActivities")]
        public KnowledgeArticle KnowledgeArticle_SocialActivities {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_SocialActivities", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("postauthoraccount")]
        [RelationshipSchemaName("socialactivity_postauthoraccount_contacts")]
        public Contact socialactivity_postauthoraccount_contacts {
            get {
                return GetRelatedEntity<Contact>("socialactivity_postauthoraccount_contacts", null);
            }
            set {
                SetRelatedEntity("socialactivity_postauthoraccount_contacts", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_SocialActivities")]
        public BookableResourceBookingHeader bookableresourcebookingheader_SocialActivities {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_SocialActivities", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_SocialActivities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_SocialActivities")]
        public BookableResourceBooking bookableresourcebooking_SocialActivities {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_SocialActivities", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_SocialActivities", null, value);
            }
        }
        
        [RelationshipSchemaName("socialactivity_connections2")]
        public IEnumerable<Connection> socialactivity_connections2 {
            get {
                return GetRelatedEntities<Connection>("socialactivity_connections2", null);
            }
            set {
                SetRelatedEntities("socialactivity_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("socialactivity_connections1")]
        public IEnumerable<Connection> socialactivity_connections1 {
            get {
                return GetRelatedEntities<Connection>("socialactivity_connections1", null);
            }
            set {
                SetRelatedEntities("socialactivity_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("SocialActivity_SyncErrors")]
        public IEnumerable<SyncError> SocialActivity_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("SocialActivity_SyncErrors", null);
            }
            set {
                SetRelatedEntities("SocialActivity_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("SocialActivity_QueueItem")]
        public IEnumerable<QueueItem> SocialActivity_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("SocialActivity_QueueItem", null);
            }
            set {
                SetRelatedEntities("SocialActivity_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("socialactivity_activity_parties")]
        public IEnumerable<ActivityParty> socialactivity_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("socialactivity_activity_parties", null);
            }
            set {
                SetRelatedEntities("socialactivity_activity_parties", null, value);
            }
        }
        
        public static SocialActivity Retrieve(IOrganizationService service, Guid id, params Expression<Func<SocialActivity,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Failure reason and other detailed information for a record that failed to sync.</para>
    /// <para>Display Name: Sync Error</para>
    /// </summary>
    [EntityLogicalName("syncerror")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SyncError : ExtendedEntity<SyncErrorState, SyncError_StatusCode> {
        
        public const string EntityLogicalName = "syncerror";
        
        public const int EntityTypeCode = 9869;
        
        public SyncError() : 
                base(EntityLogicalName) {
        }
        
        public SyncError(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("syncerrorid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("syncerrorid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the sync error.</para>
        /// <para>Display Name: Sync Error Id</para>
        /// </summary>
        [AttributeLogicalName("syncerrorid")]
        public Guid? SyncErrorId {
            get {
                return GetAttributeValue<Guid?>("syncerrorid");
            }
            set {
                SetId("syncerrorid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the sync error.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the sync error.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Error Message of the exception</para>
        /// <para>Display Name: Error Message</para>
        /// </summary>
        [AttributeLogicalName("errormessage")]
        public string ErrorMessage {
            get {
                return GetAttributeValue<string>("errormessage");
            }
            set {
                SetAttributeValue("errormessage", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the sync Error was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Select the sync error status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public SyncError_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<SyncError_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Show the action data</para>
        /// <para>Display Name: Action Data</para>
        /// </summary>
        [AttributeLogicalName("actiondata")]
        public string ActionData {
            get {
                return GetAttributeValue<string>("actiondata");
            }
            set {
                SetAttributeValue("actiondata", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the sync error was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Select the preferred error type.</para>
        /// <para>Display Name: Error Type</para>
        /// </summary>
        [AttributeLogicalName("errortype")]
        public SyncError_ErrorType? ErrorType {
            get {
                return GetOptionSetValue<SyncError_ErrorType>("errortype");
            }
            set {
                SetOptionSetValue("errortype", value);
            }
        }
        
        /// <summary>
        /// <para>Request data for the entity that had the sync error.</para>
        /// <para>Display Name: Request Data</para>
        /// </summary>
        [AttributeLogicalName("requestdata")]
        public string RequestData {
            get {
                return GetAttributeValue<string>("requestdata");
            }
            set {
                SetAttributeValue("requestdata", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the upsync request was executed on CRM server</para>
        /// <para>Display Name: Error Time</para>
        /// </summary>
        [AttributeLogicalName("errortime")]
        public DateTime? ErrorTime {
            get {
                return GetAttributeValue<DateTime?>("errortime");
            }
            set {
                SetAttributeValue("errortime", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the sync error.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the sync error.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows the version number of the sync error.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Business unit that owns the sync error.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Entity name of the record for which sync error has occurred</para>
        /// <para>Display Name: Entity</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Error description from the exception</para>
        /// <para>Display Name: Error Detail</para>
        /// </summary>
        [AttributeLogicalName("errordetail")]
        public string ErrorDetail {
            get {
                return GetAttributeValue<string>("errordetail");
            }
            set {
                SetAttributeValue("errordetail", value);
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
            set {
                SetAttributeValue("regardingobjectidname", value);
            }
        }
        
        /// <summary>
        /// <para>Action Name for which sync error has occurred</para>
        /// <para>Display Name: Action</para>
        /// </summary>
        [AttributeLogicalName("action")]
        public string Action {
            get {
                return GetAttributeValue<string>("action");
            }
            set {
                SetAttributeValue("action", value);
            }
        }
        
        /// <summary>
        /// <para>Displays the error code.</para>
        /// <para>Display Name: Error Code</para>
        /// </summary>
        [AttributeLogicalName("errorcode")]
        public string ErrorCode {
            get {
                return GetAttributeValue<string>("errorcode");
            }
            set {
                SetAttributeValue("errorcode", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the record that the sync error relates to.</para>
        /// <para>Display Name: Record</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the sync error.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Enter a short description of the sync error.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows whether the sync error is active or resolved.</para>
        /// <para>Display Name: State</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public SyncErrorState? StateCode {
            get {
                return GetOptionSetValue<SyncErrorState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the sync error.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the sync error.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_wallsavedqueryusersettings_SyncErrors")]
        public msdyn_wallsavedqueryusersettings msdyn_wallsavedqueryusersettings_SyncErrors {
            get {
                return GetRelatedEntity<msdyn_wallsavedqueryusersettings>("msdyn_wallsavedqueryusersettings_SyncErrors", null);
            }
            set {
                SetRelatedEntity("msdyn_wallsavedqueryusersettings_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_SyncErrors")]
        public msdyn_PostAlbum msdyn_postalbum_SyncErrors {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_SyncErrors", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_bus_SyncErrors")]
        public dg_bus dg_bus_SyncErrors {
            get {
                return GetRelatedEntity<dg_bus>("dg_bus_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_bus_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_mild_SyncErrors")]
        public dg_mild dg_mild_SyncErrors {
            get {
                return GetRelatedEntity<dg_mild>("dg_mild_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_mild_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_child_SyncErrors")]
        public dg_child dg_child_SyncErrors {
            get {
                return GetRelatedEntity<dg_child>("dg_child_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_child_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_man_SyncErrors")]
        public dg_man dg_man_SyncErrors {
            get {
                return GetRelatedEntity<dg_man>("dg_man_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_man_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_tooth_SyncErrors")]
        public dg_tooth dg_tooth_SyncErrors {
            get {
                return GetRelatedEntity<dg_tooth>("dg_tooth_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_tooth_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_field_SyncErrors")]
        public dg_field dg_field_SyncErrors {
            get {
                return GetRelatedEntity<dg_field>("dg_field_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_field_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_sheep_SyncErrors")]
        public dg_sheep dg_sheep_SyncErrors {
            get {
                return GetRelatedEntity<dg_sheep>("dg_sheep_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_sheep_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_SyncErrors")]
        public dg_participant dg_participant_SyncErrors {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_participant_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_SyncErrors")]
        public dg_event dg_event_SyncErrors {
            get {
                return GetRelatedEntity<dg_event>("dg_event_SyncErrors", null);
            }
            set {
                SetRelatedEntity("dg_event_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("OpportunityClose_SyncErrors")]
        public OpportunityClose OpportunityClose_SyncErrors {
            get {
                return GetRelatedEntity<OpportunityClose>("OpportunityClose_SyncErrors", null);
            }
            set {
                SetRelatedEntity("OpportunityClose_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("EmailServerProfile_SyncErrors")]
        public EmailServerProfile EmailServerProfile_SyncErrors {
            get {
                return GetRelatedEntity<EmailServerProfile>("EmailServerProfile_SyncErrors", null);
            }
            set {
                SetRelatedEntity("EmailServerProfile_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Entitlement_SyncErrors")]
        public Entitlement Entitlement_SyncErrors {
            get {
                return GetRelatedEntity<Entitlement>("Entitlement_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Entitlement_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SLA_SyncErrors")]
        public SLA SLA_SyncErrors {
            get {
                return GetRelatedEntity<SLA>("SLA_SyncErrors", null);
            }
            set {
                SetRelatedEntity("SLA_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_SyncErrors")]
        public Incident Incident_SyncErrors {
            get {
                return GetRelatedEntity<Incident>("Incident_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Incident_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SystemUser_SyncErrors")]
        public SystemUser SystemUser_SyncErrors {
            get {
                return GetRelatedEntity<SystemUser>("SystemUser_SyncErrors", null);
            }
            set {
                SetRelatedEntity("SystemUser_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("BusinessUnit_SyncError")]
        public BusinessUnit BusinessUnit_SyncError {
            get {
                return GetRelatedEntity<BusinessUnit>("BusinessUnit_SyncError", null);
            }
            set {
                SetRelatedEntity("BusinessUnit_SyncError", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BusinessUnit_SyncErrors")]
        public BusinessUnit BusinessUnit_SyncErrors {
            get {
                return GetRelatedEntity<BusinessUnit>("BusinessUnit_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BusinessUnit_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Mailbox_SyncErrors")]
        public Mailbox Mailbox_SyncErrors {
            get {
                return GetRelatedEntity<Mailbox>("Mailbox_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Mailbox_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Fax_SyncErrors")]
        public Fax Fax_SyncErrors {
            get {
                return GetRelatedEntity<Fax>("Fax_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Fax_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignResponse_SyncErrors")]
        public CampaignResponse CampaignResponse_SyncErrors {
            get {
                return GetRelatedEntity<CampaignResponse>("CampaignResponse_SyncErrors", null);
            }
            set {
                SetRelatedEntity("CampaignResponse_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_SyncErrors")]
        public Contract Contract_SyncErrors {
            get {
                return GetRelatedEntity<Contract>("Contract_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Contract_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_SyncErrors")]
        public Campaign Campaign_SyncErrors {
            get {
                return GetRelatedEntity<Campaign>("Campaign_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Campaign_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BookableResourceGroup_SyncErrors")]
        public BookableResourceGroup BookableResourceGroup_SyncErrors {
            get {
                return GetRelatedEntity<BookableResourceGroup>("BookableResourceGroup_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BookableResourceGroup_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_SyncErrors")]
        public SalesOrder SalesOrder_SyncErrors {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_SyncErrors", null);
            }
            set {
                SetRelatedEntity("SalesOrder_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Connection_SyncErrors")]
        public Connection Connection_SyncErrors {
            get {
                return GetRelatedEntity<Connection>("Connection_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Connection_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SharePointDocumentLocation_SyncErrors")]
        public SharePointDocumentLocation SharePointDocumentLocation_SyncErrors {
            get {
                return GetRelatedEntity<SharePointDocumentLocation>("SharePointDocumentLocation_SyncErrors", null);
            }
            set {
                SetRelatedEntity("SharePointDocumentLocation_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_SyncErrors")]
        public KnowledgeArticle KnowledgeArticle_SyncErrors {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_SyncErrors", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_SyncErrors")]
        public Opportunity Opportunity_SyncErrors {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Opportunity_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("List_SyncErrors")]
        public List List_SyncErrors {
            get {
                return GetRelatedEntity<List>("List_SyncErrors", null);
            }
            set {
                SetRelatedEntity("List_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Letter_SyncErrors")]
        public Letter Letter_SyncErrors {
            get {
                return GetRelatedEntity<Letter>("Letter_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Letter_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_SyncErrors")]
        public Lead Lead_SyncErrors {
            get {
                return GetRelatedEntity<Lead>("Lead_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Lead_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Characteristic_SyncErrors")]
        public Characteristic Characteristic_SyncErrors {
            get {
                return GetRelatedEntity<Characteristic>("Characteristic_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Characteristic_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Task_SyncErrors")]
        public Task Task_SyncErrors {
            get {
                return GetRelatedEntity<Task>("Task_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Task_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BookableResource_SyncErrors")]
        public BookableResource BookableResource_SyncErrors {
            get {
                return GetRelatedEntity<BookableResource>("BookableResource_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BookableResource_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Organization_SyncErrors")]
        public Organization Organization_SyncErrors {
            get {
                return GetRelatedEntity<Organization>("Organization_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Organization_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BookableResourceCategory_SyncErrors")]
        public BookableResourceCategory BookableResourceCategory_SyncErrors {
            get {
                return GetRelatedEntity<BookableResourceCategory>("BookableResourceCategory_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BookableResourceCategory_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Email_SyncErrors")]
        public Email Email_SyncErrors {
            get {
                return GetRelatedEntity<Email>("Email_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Email_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("ActivityParty_SyncErrors")]
        public ActivityParty ActivityParty_SyncErrors {
            get {
                return GetRelatedEntity<ActivityParty>("ActivityParty_SyncErrors", null);
            }
            set {
                SetRelatedEntity("ActivityParty_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_SyncErrors")]
        public Invoice Invoice_SyncErrors {
            get {
                return GetRelatedEntity<Invoice>("Invoice_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Invoice_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Workflow_SyncErrors")]
        public Workflow Workflow_SyncErrors {
            get {
                return GetRelatedEntity<Workflow>("Workflow_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Workflow_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_SyncErrors")]
        public Quote Quote_SyncErrors {
            get {
                return GetRelatedEntity<Quote>("Quote_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Quote_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_SyncErrors")]
        public Contact Contact_SyncErrors {
            get {
                return GetRelatedEntity<Contact>("Contact_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Contact_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("ExternalParty_SyncErrors")]
        public ExternalParty ExternalParty_SyncErrors {
            get {
                return GetRelatedEntity<ExternalParty>("ExternalParty_SyncErrors", null);
            }
            set {
                SetRelatedEntity("ExternalParty_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("SystemUser_SyncError")]
        public SystemUser SystemUser_SyncError {
            get {
                return GetRelatedEntity<SystemUser>("SystemUser_SyncError", null);
            }
            set {
                SetRelatedEntity("SystemUser_SyncError", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Appointment_SyncErrors")]
        public Appointment Appointment_SyncErrors {
            get {
                return GetRelatedEntity<Appointment>("Appointment_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Appointment_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("RatingModel_SyncErrors")]
        public RatingModel RatingModel_SyncErrors {
            get {
                return GetRelatedEntity<RatingModel>("RatingModel_SyncErrors", null);
            }
            set {
                SetRelatedEntity("RatingModel_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BookableResourceBookingHeader_SyncErrors")]
        public BookableResourceBookingHeader BookableResourceBookingHeader_SyncErrors {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("BookableResourceBookingHeader_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BookableResourceBookingHeader_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Team_SyncErrors")]
        public Team Team_SyncErrors {
            get {
                return GetRelatedEntity<Team>("Team_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Team_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BookingStatus_SyncErrors")]
        public BookingStatus BookingStatus_SyncErrors {
            get {
                return GetRelatedEntity<BookingStatus>("BookingStatus_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BookingStatus_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_SyncErrors")]
        public Account Account_SyncErrors {
            get {
                return GetRelatedEntity<Account>("Account_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Account_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("ServiceAppointment_SyncErrors")]
        public ServiceAppointment ServiceAppointment_SyncErrors {
            get {
                return GetRelatedEntity<ServiceAppointment>("ServiceAppointment_SyncErrors", null);
            }
            set {
                SetRelatedEntity("ServiceAppointment_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BookableResourceBooking_SyncErrors")]
        public BookableResourceBooking BookableResourceBooking_SyncErrors {
            get {
                return GetRelatedEntity<BookableResourceBooking>("BookableResourceBooking_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BookableResourceBooking_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BookableResourceCategoryAssn_SyncErrors")]
        public BookableResourceCategoryAssn BookableResourceCategoryAssn_SyncErrors {
            get {
                return GetRelatedEntity<BookableResourceCategoryAssn>("BookableResourceCategoryAssn_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BookableResourceCategoryAssn_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_syncerrorbase_createdonbehalfby")]
        public SystemUser lk_syncerrorbase_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_syncerrorbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_syncerrorbase_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_SyncErrors")]
        public CampaignActivity CampaignActivity_SyncErrors {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_SyncErrors", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_SyncError")]
        public Team team_SyncError {
            get {
                return GetRelatedEntity<Team>("team_SyncError", null);
            }
            set {
                SetRelatedEntity("team_SyncError", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("BookableResourceCharacteristic_SyncErrors")]
        public BookableResourceCharacteristic BookableResourceCharacteristic_SyncErrors {
            get {
                return GetRelatedEntity<BookableResourceCharacteristic>("BookableResourceCharacteristic_SyncErrors", null);
            }
            set {
                SetRelatedEntity("BookableResourceCharacteristic_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SocialActivity_SyncErrors")]
        public SocialActivity SocialActivity_SyncErrors {
            get {
                return GetRelatedEntity<SocialActivity>("SocialActivity_SyncErrors", null);
            }
            set {
                SetRelatedEntity("SocialActivity_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("TransactionCurrency_SyncErrors")]
        public TransactionCurrency TransactionCurrency_SyncErrors {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_SyncErrors", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("ChannelAccessProfileRule_SyncErrors")]
        public ChannelAccessProfileRule ChannelAccessProfileRule_SyncErrors {
            get {
                return GetRelatedEntity<ChannelAccessProfileRule>("ChannelAccessProfileRule_SyncErrors", null);
            }
            set {
                SetRelatedEntity("ChannelAccessProfileRule_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_syncerrorbase_modifiedonbehalfby")]
        public SystemUser lk_syncerrorbase_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_syncerrorbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_syncerrorbase_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_syncerrorbase_modifiedby")]
        public SystemUser lk_syncerrorbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_syncerrorbase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_syncerrorbase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("RatingValue_SyncErrors")]
        public RatingValue RatingValue_SyncErrors {
            get {
                return GetRelatedEntity<RatingValue>("RatingValue_SyncErrors", null);
            }
            set {
                SetRelatedEntity("RatingValue_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SyncError_SyncErrors", EntityRole.Referencing)]
        public SyncError ReferencingSyncError_SyncErrors {
            get {
                return GetRelatedEntity<SyncError>("SyncError_SyncErrors", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("SyncError_SyncErrors", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("ChannelAccessProfile_SyncErrors")]
        public ChannelAccessProfile ChannelAccessProfile_SyncErrors {
            get {
                return GetRelatedEntity<ChannelAccessProfile>("ChannelAccessProfile_SyncErrors", null);
            }
            set {
                SetRelatedEntity("ChannelAccessProfile_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("RecurringAppointmentMaster_SyncErrors")]
        public RecurringAppointmentMaster RecurringAppointmentMaster_SyncErrors {
            get {
                return GetRelatedEntity<RecurringAppointmentMaster>("RecurringAppointmentMaster_SyncErrors", null);
            }
            set {
                SetRelatedEntity("RecurringAppointmentMaster_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("PhoneCall_SyncErrors")]
        public PhoneCall PhoneCall_SyncErrors {
            get {
                return GetRelatedEntity<PhoneCall>("PhoneCall_SyncErrors", null);
            }
            set {
                SetRelatedEntity("PhoneCall_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_syncerrorbase_createdby")]
        public SystemUser lk_syncerrorbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_syncerrorbase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_syncerrorbase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Goal_SyncErrors")]
        public Goal Goal_SyncErrors {
            get {
                return GetRelatedEntity<Goal>("Goal_SyncErrors", null);
            }
            set {
                SetRelatedEntity("Goal_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SharePointSite_SyncErrors")]
        public SharePointSite SharePointSite_SyncErrors {
            get {
                return GetRelatedEntity<SharePointSite>("SharePointSite_SyncErrors", null);
            }
            set {
                SetRelatedEntity("SharePointSite_SyncErrors", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("QueueItem_SyncErrors")]
        public QueueItem QueueItem_SyncErrors {
            get {
                return GetRelatedEntity<QueueItem>("QueueItem_SyncErrors", null);
            }
            set {
                SetRelatedEntity("QueueItem_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("SyncError_SyncErrors", EntityRole.Referenced)]
        public IEnumerable<SyncError> ReferencedSyncError_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("SyncError_SyncErrors", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("SyncError_SyncErrors", EntityRole.Referenced, value);
            }
        }
        
        public static SyncError Retrieve(IOrganizationService service, Guid id, params Expression<Func<SyncError,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Person with access to the Microsoft CRM system and who owns objects in the Microsoft CRM database.</para>
    /// <para>Display Name: User</para>
    /// </summary>
    [EntityLogicalName("systemuser")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class SystemUser : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "systemuser";
        
        public const int EntityTypeCode = 8;
        
        public SystemUser() : 
                base(EntityLogicalName) {
        }
        
        public SystemUser(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("fullname");
            }
        }
        
        [AttributeLogicalName("systemuserid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("systemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the user.</para>
        /// <para>Display Name: User</para>
        /// </summary>
        [AttributeLogicalName("systemuserid")]
        public Guid? SystemUserId {
            get {
                return GetAttributeValue<Guid?>("systemuserid");
            }
            set {
                SetId("systemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is enabled.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("isdisabled")]
        public bool? IsDisabled {
            get {
                return GetAttributeValue<bool?>("isdisabled");
            }
        }
        
        /// <summary>
        /// <para>Full name of the user.</para>
        /// <para>Display Name: Full Name</para>
        /// </summary>
        [AttributeLogicalName("fullname")]
        public string FullName {
            get {
                return GetAttributeValue<string>("fullname");
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 1.</para>
        /// <para>Display Name: Address 1: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string Address1_UPSZone {
            get {
                return GetAttributeValue<string>("address1_upszone");
            }
            set {
                SetAttributeValue("address1_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 1</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string Address2_Line1 {
            get {
                return GetAttributeValue<string>("address2_line1");
            }
            set {
                SetAttributeValue("address2_line1", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 2.</para>
        /// <para>Display Name: Address 2: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public SystemUser_Address2_ShippingMethodCode? Address2_ShippingMethodCode {
            get {
                return GetOptionSetValue<SystemUser_Address2_ShippingMethodCode>("address2_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address2_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the user is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 1.</para>
        /// <para>Display Name: Address 1: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? Address1_Latitude {
            get {
                return GetAttributeValue<double?>("address1_latitude");
            }
            set {
                SetAttributeValue("address1_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 1.</para>
        /// <para>Display Name: Address 1: Fax</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string Address1_Fax {
            get {
                return GetAttributeValue<string>("address1_fax");
            }
            set {
                SetAttributeValue("address1_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 1.</para>
        /// <para>Display Name: Address 1: Name</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string Address1_Name {
            get {
                return GetAttributeValue<string>("address1_name");
            }
            set {
                SetAttributeValue("address1_name", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is synced with the directory.</para>
        /// <para>Display Name: User Synced</para>
        /// </summary>
        [AttributeLogicalName("issyncwithdirectory")]
        public bool? IsSyncWithDirectory {
            get {
                return GetAttributeValue<bool?>("issyncwithdirectory");
            }
            set {
                SetAttributeValue("issyncwithdirectory", value);
            }
        }
        
        [AttributeLogicalName("queueidname")]
        public string QueueIdName {
            get {
                return GetAttributeValue<string>("queueidname");
            }
        }
        
        /// <summary>
        /// <para>Version number of the user.</para>
        /// <para>Display Name: Version number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("organizationidname")]
        public string OrganizationIdName {
            get {
                return GetAttributeValue<string>("organizationidname");
            }
        }
        
        /// <summary>
        /// <para>User invitation status.</para>
        /// <para>Display Name: Invitation Status</para>
        /// </summary>
        [AttributeLogicalName("invitestatuscode")]
        public SystemUser_InviteStatusCode? InviteStatusCode {
            get {
                return GetOptionSetValue<SystemUser_InviteStatusCode>("invitestatuscode");
            }
            set {
                SetOptionSetValue("invitestatuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the status of approval of the email address by O365 Admin.</para>
        /// <para>Display Name: Email Address O365 Admin Approval Status</para>
        /// </summary>
        [AttributeLogicalName("isemailaddressapprovedbyo365admin")]
        public bool? IsEmailAddressApprovedByO365Admin {
            get {
                return GetAttributeValue<bool?>("isemailaddressapprovedbyo365admin");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>User's Yammer ID</para>
        /// <para>Display Name: Yammer User ID</para>
        /// </summary>
        [AttributeLogicalName("yammeruserid")]
        public string YammerUserId {
            get {
                return GetAttributeValue<string>("yammeruserid");
            }
            set {
                SetAttributeValue("yammeruserid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 2.</para>
        /// <para>Display Name: Address 2: ID</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid? Address2_AddressId {
            get {
                return GetAttributeValue<Guid?>("address2_addressid");
            }
            set {
                SetAttributeValue("address2_addressid", value);
            }
        }
        
        [AttributeLogicalName("positionidname")]
        public string PositionIdName {
            get {
                return GetAttributeValue<string>("positionidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the complete primary address.</para>
        /// <para>Display Name: Address</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string Address1_Composite {
            get {
                return GetAttributeValue<string>("address1_composite");
            }
        }
        
        /// <summary>
        /// <para>Type a default folder name for the user's OneDrive For Business location.</para>
        /// <para>Display Name: Default OneDrive for Business Folder Name</para>
        /// </summary>
        [AttributeLogicalName("defaultodbfoldername")]
        public string DefaultOdbFolderName {
            get {
                return GetAttributeValue<string>("defaultodbfoldername");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the manager of the user.</para>
        /// <para>Display Name: Manager</para>
        /// </summary>
        [AttributeLogicalName("parentsystemuserid")]
        public EntityReference ParentSystemUserId {
            get {
                return GetAttributeValue<EntityReference>("parentsystemuserid");
            }
            set {
                SetAttributeValue("parentsystemuserid", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 1.</para>
        /// <para>Display Name: ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string Address1_PostalCode {
            get {
                return GetAttributeValue<string>("address1_postalcode");
            }
            set {
                SetAttributeValue("address1_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>Salutation for correspondence with the user.</para>
        /// <para>Display Name: Salutation</para>
        /// </summary>
        [AttributeLogicalName("salutation")]
        public string Salutation {
            get {
                return GetAttributeValue<string>("salutation");
            }
            set {
                SetAttributeValue("salutation", value);
            }
        }
        
        /// <summary>
        /// <para>Windows Live ID</para>
        /// <para>Display Name: Windows Live ID</para>
        /// </summary>
        [AttributeLogicalName("windowsliveid")]
        public string WindowsLiveID {
            get {
                return GetAttributeValue<string>("windowsliveid");
            }
            set {
                SetAttributeValue("windowsliveid", value);
            }
        }
        
        /// <summary>
        /// <para>United Parcel Service (UPS) zone for address 2.</para>
        /// <para>Display Name: Address 2: UPS Zone</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string Address2_UPSZone {
            get {
                return GetAttributeValue<string>("address2_upszone");
            }
            set {
                SetAttributeValue("address2_upszone", value);
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 2, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 2: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public SystemUser_Address2_AddressTypeCode? Address2_AddressTypeCode {
            get {
                return GetOptionSetValue<SystemUser_Address2_AddressTypeCode>("address2_addresstypecode");
            }
            set {
                SetOptionSetValue("address2_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the user.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 1 information.</para>
        /// <para>Display Name: Street 2</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string Address1_Line2 {
            get {
                return GetAttributeValue<string>("address1_line2");
            }
            set {
                SetAttributeValue("address1_line2", value);
            }
        }
        
        /// <summary>
        /// <para>Fax number for address 2.</para>
        /// <para>Display Name: Address 2: Fax</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string Address2_Fax {
            get {
                return GetAttributeValue<string>("address2_fax");
            }
            set {
                SetAttributeValue("address2_fax", value);
            }
        }
        
        /// <summary>
        /// <para>Active Directory domain of which the user is a member.</para>
        /// <para>Display Name: User Name</para>
        /// </summary>
        [AttributeLogicalName("domainname")]
        public string DomainName {
            get {
                return GetAttributeValue<string>("domainname");
            }
            set {
                SetAttributeValue("domainname", value);
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 2.</para>
        /// <para>Display Name: Address 2: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? Address2_Longitude {
            get {
                return GetAttributeValue<double?>("address2_longitude");
            }
            set {
                SetAttributeValue("address2_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Check if user is an integration user.</para>
        /// <para>Display Name: Integration user mode</para>
        /// </summary>
        [AttributeLogicalName("isintegrationuser")]
        public bool? IsIntegrationUser {
            get {
                return GetAttributeValue<bool?>("isintegrationuser");
            }
            set {
                SetAttributeValue("isintegrationuser", value);
            }
        }
        
        /// <summary>
        /// <para>Personal email address of the user.</para>
        /// <para>Display Name: Email 2</para>
        /// </summary>
        [AttributeLogicalName("personalemailaddress")]
        public string PersonalEMailAddress {
            get {
                return GetAttributeValue<string>("personalemailaddress");
            }
            set {
                SetAttributeValue("personalemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Type of user.</para>
        /// <para>Display Name: Access Mode</para>
        /// </summary>
        [AttributeLogicalName("accessmode")]
        public SystemUser_AccessMode? AccessMode {
            get {
                return GetOptionSetValue<SystemUser_AccessMode>("accessmode");
            }
            set {
                SetOptionSetValue("accessmode", value);
            }
        }
        
        /// <summary>
        /// <para>URL for the Website on which a photo of the user is located.</para>
        /// <para>Display Name: Photo URL</para>
        /// </summary>
        [AttributeLogicalName("photourl")]
        public string PhotoUrl {
            get {
                return GetAttributeValue<string>("photourl");
            }
            set {
                SetAttributeValue("photourl", value);
            }
        }
        
        /// <summary>
        /// <para>Site at which the user is located.</para>
        /// <para>Display Name: Site</para>
        /// </summary>
        [AttributeLogicalName("siteid")]
        public EntityReference SiteId {
            get {
                return GetAttributeValue<EntityReference>("siteid");
            }
            set {
                SetAttributeValue("siteid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates if default outlook filters have been populated.</para>
        /// <para>Display Name: Default Filters Populated</para>
        /// </summary>
        [AttributeLogicalName("defaultfilterspopulated")]
        public bool? DefaultFiltersPopulated {
            get {
                return GetAttributeValue<bool?>("defaultfilterspopulated");
            }
        }
        
        [AttributeLogicalName("defaultmailboxname")]
        public string DefaultMailboxName {
            get {
                return GetAttributeValue<string>("defaultmailboxname");
            }
        }
        
        /// <summary>
        /// <para>User's Yammer login email address</para>
        /// <para>Display Name: Yammer Email</para>
        /// </summary>
        [AttributeLogicalName("yammeremailaddress")]
        public string YammerEmailAddress {
            get {
                return GetAttributeValue<string>("yammeremailaddress");
            }
            set {
                SetAttributeValue("yammeremailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the user.</para>
        /// <para>Display Name: Organization </para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public Guid? OrganizationId {
            get {
                return GetAttributeValue<Guid?>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 1.</para>
        /// <para>Display Name: Address 1: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string Address1_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address1_postofficebox");
            }
            set {
                SetAttributeValue("address1_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 1.</para>
        /// <para>Display Name: Pager</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string Address1_Telephone3 {
            get {
                return GetAttributeValue<string>("address1_telephone3");
            }
            set {
                SetAttributeValue("address1_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 1.</para>
        /// <para>Display Name: Other Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string Address1_Telephone2 {
            get {
                return GetAttributeValue<string>("address1_telephone2");
            }
            set {
                SetAttributeValue("address1_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 1.</para>
        /// <para>Display Name: Main Phone</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string Address1_Telephone1 {
            get {
                return GetAttributeValue<string>("address1_telephone1");
            }
            set {
                SetAttributeValue("address1_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the systemuser.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Nickname of the user.</para>
        /// <para>Display Name: Nickname</para>
        /// </summary>
        [AttributeLogicalName("nickname")]
        public string NickName {
            get {
                return GetAttributeValue<string>("nickname");
            }
            set {
                SetAttributeValue("nickname", value);
            }
        }
        
        /// <summary>
        /// <para>Job title of the user.</para>
        /// <para>Display Name: Job Title</para>
        /// </summary>
        [AttributeLogicalName("jobtitle")]
        public string JobTitle {
            get {
                return GetAttributeValue<string>("jobtitle");
            }
            set {
                SetAttributeValue("jobtitle", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the systemuser.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Incoming email delivery method for the user.</para>
        /// <para>Display Name: Incoming Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("incomingemaildeliverymethod")]
        public SystemUser_IncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<SystemUser_IncomingEmailDeliveryMethod>("incomingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("incomingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred address for the user.</para>
        /// <para>Display Name: Preferred Address</para>
        /// </summary>
        [AttributeLogicalName("preferredaddresscode")]
        public SystemUser_PreferredAddressCode? PreferredAddressCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredAddressCode>("preferredaddresscode");
            }
            set {
                SetOptionSetValue("preferredaddresscode", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 2. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 2: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? Address2_UTCOffset {
            get {
                return GetAttributeValue<int?>("address2_utcoffset");
            }
            set {
                SetAttributeValue("address2_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>User's position in hierarchical security model.</para>
        /// <para>Display Name: Position</para>
        /// </summary>
        [AttributeLogicalName("positionid")]
        public EntityReference PositionId {
            get {
                return GetAttributeValue<EntityReference>("positionid");
            }
            set {
                SetAttributeValue("positionid", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 1.</para>
        /// <para>Display Name: State/Province</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string Address1_StateOrProvince {
            get {
                return GetAttributeValue<string>("address1_stateorprovince");
            }
            set {
                SetAttributeValue("address1_stateorprovince", value);
            }
        }
        
        [AttributeLogicalName("businessunitidname")]
        public string BusinessUnitIdName {
            get {
                return GetAttributeValue<string>("businessunitidname");
            }
        }
        
        /// <summary>
        /// <para>SharePoint Work Email Address</para>
        /// <para>Display Name: SharePoint Email Address</para>
        /// </summary>
        [AttributeLogicalName("sharepointemailaddress")]
        public string SharePointEmailAddress {
            get {
                return GetAttributeValue<string>("sharepointemailaddress");
            }
            set {
                SetAttributeValue("sharepointemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Mobile alert email address for the user.</para>
        /// <para>Display Name: Mobile Alert Email</para>
        /// </summary>
        [AttributeLogicalName("mobilealertemail")]
        public string MobileAlertEMail {
            get {
                return GetAttributeValue<string>("mobilealertemail");
            }
            set {
                SetAttributeValue("mobilealertemail", value);
            }
        }
        
        /// <summary>
        /// <para>Country/region name in address 1.</para>
        /// <para>Display Name: Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string Address1_Country {
            get {
                return GetAttributeValue<string>("address1_country");
            }
            set {
                SetAttributeValue("address1_country", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the complete secondary address.</para>
        /// <para>Display Name: Other Address</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string Address2_Composite {
            get {
                return GetAttributeValue<string>("address2_composite");
            }
        }
        
        /// <summary>
        /// <para>Mobile phone number for the user.</para>
        /// <para>Display Name: Mobile Phone</para>
        /// </summary>
        [AttributeLogicalName("mobilephone")]
        public string MobilePhone {
            get {
                return GetAttributeValue<string>("mobilephone");
            }
            set {
                SetAttributeValue("mobilephone", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Second line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 2</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string Address2_Line2 {
            get {
                return GetAttributeValue<string>("address2_line2");
            }
            set {
                SetAttributeValue("address2_line2", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Middle name of the user.</para>
        /// <para>Display Name: Middle Name</para>
        /// </summary>
        [AttributeLogicalName("middlename")]
        public string MiddleName {
            get {
                return GetAttributeValue<string>("middlename");
            }
            set {
                SetAttributeValue("middlename", value);
            }
        }
        
        /// <summary>
        /// <para>Select the mailbox associated with this user.</para>
        /// <para>Display Name: Mailbox</para>
        /// </summary>
        [AttributeLogicalName("defaultmailbox")]
        public EntityReference DefaultMailbox {
            get {
                return GetAttributeValue<EntityReference>("defaultmailbox");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("territoryidname")]
        public string TerritoryIdName {
            get {
                return GetAttributeValue<string>("territoryidname");
            }
        }
        
        /// <summary>
        /// <para>Shows the status of the primary email address.</para>
        /// <para>Display Name: Primary Email Status</para>
        /// </summary>
        [AttributeLogicalName("emailrouteraccessapproval")]
        public SystemUser_EmailRouterAccessApproval? EmailRouterAccessApproval {
            get {
                return GetOptionSetValue<SystemUser_EmailRouterAccessApproval>("emailrouteraccessapproval");
            }
            set {
                SetOptionSetValue("emailrouteraccessapproval", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for address 1.</para>
        /// <para>Display Name: Address 1: ID</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid? Address1_AddressId {
            get {
                return GetAttributeValue<Guid?>("address1_addressid");
            }
            set {
                SetAttributeValue("address1_addressid", value);
            }
        }
        
        /// <summary>
        /// <para>Third telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 3</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string Address2_Telephone3 {
            get {
                return GetAttributeValue<string>("address2_telephone3");
            }
            set {
                SetAttributeValue("address2_telephone3", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the last name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Last Name</para>
        /// </summary>
        [AttributeLogicalName("yomilastname")]
        public string YomiLastName {
            get {
                return GetAttributeValue<string>("yomilastname");
            }
            set {
                SetAttributeValue("yomilastname", value);
            }
        }
        
        /// <summary>
        /// <para>First telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 1</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string Address2_Telephone1 {
            get {
                return GetAttributeValue<string>("address2_telephone1");
            }
            set {
                SetAttributeValue("address2_telephone1", value);
            }
        }
        
        /// <summary>
        /// <para>Post office box number for address 2.</para>
        /// <para>Display Name: Address 2: Post Office Box</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string Address2_PostOfficeBox {
            get {
                return GetAttributeValue<string>("address2_postofficebox");
            }
            set {
                SetAttributeValue("address2_postofficebox", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred phone number for the user.</para>
        /// <para>Display Name: Preferred Phone</para>
        /// </summary>
        [AttributeLogicalName("preferredphonecode")]
        public SystemUser_PreferredPhoneCode? PreferredPhoneCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredPhoneCode>("preferredphonecode");
            }
            set {
                SetOptionSetValue("preferredphonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Second telephone number associated with address 2.</para>
        /// <para>Display Name: Address 2: Telephone 2</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string Address2_Telephone2 {
            get {
                return GetAttributeValue<string>("address2_telephone2");
            }
            set {
                SetAttributeValue("address2_telephone2", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the systemuser.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>County name for address 1.</para>
        /// <para>Display Name: Address 1: County</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string Address1_County {
            get {
                return GetAttributeValue<string>("address1_county");
            }
            set {
                SetAttributeValue("address1_county", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Outgoing email delivery method for the user.</para>
        /// <para>Display Name: Outgoing Email Delivery Method</para>
        /// </summary>
        [AttributeLogicalName("outgoingemaildeliverymethod")]
        public SystemUser_OutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod {
            get {
                return GetOptionSetValue<SystemUser_OutgoingEmailDeliveryMethod>("outgoingemaildeliverymethod");
            }
            set {
                SetOptionSetValue("outgoingemaildeliverymethod", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the user.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 2 information.</para>
        /// <para>Display Name: Other Street 3</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string Address2_Line3 {
            get {
                return GetAttributeValue<string>("address2_line3");
            }
            set {
                SetAttributeValue("address2_line3", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Government identifier for the user.</para>
        /// <para>Display Name: Government</para>
        /// </summary>
        [AttributeLogicalName("governmentid")]
        public string GovernmentId {
            get {
                return GetAttributeValue<string>("governmentid");
            }
            set {
                SetAttributeValue("governmentid", value);
            }
        }
        
        [AttributeLogicalName("mobileofflineprofileidname")]
        public string MobileOfflineProfileIdName {
            get {
                return GetAttributeValue<string>("mobileofflineprofileidname");
            }
            set {
                SetAttributeValue("mobileofflineprofileidname", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Employee identifier for the user.</para>
        /// <para>Display Name: Employee</para>
        /// </summary>
        [AttributeLogicalName("employeeid")]
        public string EmployeeId {
            get {
                return GetAttributeValue<string>("employeeid");
            }
            set {
                SetAttributeValue("employeeid", value);
            }
        }
        
        /// <summary>
        /// <para>Whether to display the user in service views.</para>
        /// <para>Display Name: Display in Service Views</para>
        /// </summary>
        [AttributeLogicalName("displayinserviceviews")]
        public bool? DisplayInServiceViews {
            get {
                return GetAttributeValue<bool?>("displayinserviceviews");
            }
            set {
                SetAttributeValue("displayinserviceviews", value);
            }
        }
        
        /// <summary>
        /// <para>ZIP Code or postal code for address 2.</para>
        /// <para>Display Name: Other ZIP/Postal Code</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string Address2_PostalCode {
            get {
                return GetAttributeValue<string>("address2_postalcode");
            }
            set {
                SetAttributeValue("address2_postalcode", value);
            }
        }
        
        /// <summary>
        /// <para>First name of the user.</para>
        /// <para>Display Name: First Name</para>
        /// </summary>
        [AttributeLogicalName("firstname")]
        public string FirstName {
            get {
                return GetAttributeValue<string>("firstname");
            }
            set {
                SetAttributeValue("firstname", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the middle name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Middle Name</para>
        /// </summary>
        [AttributeLogicalName("yomimiddlename")]
        public string YomiMiddleName {
            get {
                return GetAttributeValue<string>("yomimiddlename");
            }
            set {
                SetAttributeValue("yomimiddlename", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default queue for the user.</para>
        /// <para>Display Name: Default Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        public EntityReference QueueId {
            get {
                return GetAttributeValue<EntityReference>("queueid");
            }
            set {
                SetAttributeValue("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the user was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Latitude for address 2.</para>
        /// <para>Display Name: Address 2: Latitude</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? Address2_Latitude {
            get {
                return GetAttributeValue<double?>("address2_latitude");
            }
            set {
                SetAttributeValue("address2_latitude", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Passport Lo</para>
        /// </summary>
        [AttributeLogicalName("passportlo")]
        public int? PassportLo {
            get {
                return GetAttributeValue<int?>("passportlo");
            }
            set {
                SetAttributeValue("passportlo", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 2.</para>
        /// <para>Display Name: Other City</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string Address2_City {
            get {
                return GetAttributeValue<string>("address2_city");
            }
            set {
                SetAttributeValue("address2_city", value);
            }
        }
        
        /// <summary>
        /// <para>Items contained with a particular SystemUser.</para>
        /// <para>Display Name: Mobile Offline Profile</para>
        /// </summary>
        [AttributeLogicalName("mobileofflineprofileid")]
        public EntityReference MobileOfflineProfileId {
            get {
                return GetAttributeValue<EntityReference>("mobileofflineprofileid");
            }
            set {
                SetAttributeValue("mobileofflineprofileid", value);
            }
        }
        
        /// <summary>
        /// <para>Preferred email address for the user.</para>
        /// <para>Display Name: Preferred Email</para>
        /// </summary>
        [AttributeLogicalName("preferredemailcode")]
        public SystemUser_PreferredEmailCode? PreferredEmailCode {
            get {
                return GetOptionSetValue<SystemUser_PreferredEmailCode>("preferredemailcode");
            }
            set {
                SetOptionSetValue("preferredemailcode", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the systemuser with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows the type of user license.</para>
        /// <para>Display Name: User License Type</para>
        /// </summary>
        [AttributeLogicalName("userlicensetype")]
        public int? UserLicenseType {
            get {
                return GetAttributeValue<int?>("userlicensetype");
            }
            set {
                SetAttributeValue("userlicensetype", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the user is licensed.</para>
        /// <para>Display Name: User Licensed</para>
        /// </summary>
        [AttributeLogicalName("islicensed")]
        public bool? IsLicensed {
            get {
                return GetAttributeValue<bool?>("islicensed");
            }
            set {
                SetAttributeValue("islicensed", value);
            }
        }
        
        /// <summary>
        /// <para>UTC offset for address 1. This is the difference between local time and standard Coordinated Universal Time.</para>
        /// <para>Display Name: Address 1: UTC Offset</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? Address1_UTCOffset {
            get {
                return GetAttributeValue<int?>("address1_utcoffset");
            }
            set {
                SetAttributeValue("address1_utcoffset", value);
            }
        }
        
        /// <summary>
        /// <para>Check if user is a setup user.</para>
        /// <para>Display Name: Restricted Access Mode</para>
        /// </summary>
        [AttributeLogicalName("setupuser")]
        public bool? SetupUser {
            get {
                return GetAttributeValue<bool?>("setupuser");
            }
            set {
                SetAttributeValue("setupuser", value);
            }
        }
        
        /// <summary>
        /// <para>Fiscal calendar associated with the user.</para>
        /// <para>Display Name: Calendar</para>
        /// </summary>
        [AttributeLogicalName("calendarid")]
        public EntityReference CalendarId {
            get {
                return GetAttributeValue<EntityReference>("calendarid");
            }
            set {
                SetAttributeValue("calendarid", value);
            }
        }
        
        /// <summary>
        /// <para>License type of user.</para>
        /// <para>Display Name: License Type</para>
        /// </summary>
        [AttributeLogicalName("caltype")]
        public SystemUser_CALType? CALType {
            get {
                return GetOptionSetValue<SystemUser_CALType>("caltype");
            }
            set {
                SetOptionSetValue("caltype", value);
            }
        }
        
        /// <summary>
        /// <para>Last name of the user.</para>
        /// <para>Display Name: Last Name</para>
        /// </summary>
        [AttributeLogicalName("lastname")]
        public string LastName {
            get {
                return GetAttributeValue<string>("lastname");
            }
            set {
                SetAttributeValue("lastname", value);
            }
        }
        
        /// <summary>
        /// <para>Reason for disabling the user.</para>
        /// <para>Display Name: Disabled Reason</para>
        /// </summary>
        [AttributeLogicalName("disabledreason")]
        public string DisabledReason {
            get {
                return GetAttributeValue<string>("disabledreason");
            }
        }
        
        /// <summary>
        /// <para>Name to enter for address 2.</para>
        /// <para>Display Name: Address 2: Name</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string Address2_Name {
            get {
                return GetAttributeValue<string>("address2_name");
            }
            set {
                SetAttributeValue("address2_name", value);
            }
        }
        
        /// <summary>
        /// <para>Country/region name in address 2.</para>
        /// <para>Display Name: Other Country/Region</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string Address2_Country {
            get {
                return GetAttributeValue<string>("address2_country");
            }
            set {
                SetAttributeValue("address2_country", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the territory to which the user is assigned.</para>
        /// <para>Display Name: Territory</para>
        /// </summary>
        [AttributeLogicalName("territoryid")]
        public EntityReference TerritoryId {
            get {
                return GetAttributeValue<EntityReference>("territoryid");
            }
            set {
                SetAttributeValue("territoryid", value);
            }
        }
        
        /// <summary>
        /// <para>State or province for address 2.</para>
        /// <para>Display Name: Other State/Province</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string Address2_StateOrProvince {
            get {
                return GetAttributeValue<string>("address2_stateorprovince");
            }
            set {
                SetAttributeValue("address2_stateorprovince", value);
            }
        }
        
        /// <summary>
        /// <para>Home phone number for the user.</para>
        /// <para>Display Name: Home Phone</para>
        /// </summary>
        [AttributeLogicalName("homephone")]
        public string HomePhone {
            get {
                return GetAttributeValue<string>("homephone");
            }
            set {
                SetAttributeValue("homephone", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Passport Hi</para>
        /// </summary>
        [AttributeLogicalName("passporthi")]
        public int? PassportHi {
            get {
                return GetAttributeValue<int?>("passporthi");
            }
            set {
                SetAttributeValue("passporthi", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Method of shipment for address 1.</para>
        /// <para>Display Name: Address 1: Shipping Method</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public SystemUser_Address1_ShippingMethodCode? Address1_ShippingMethodCode {
            get {
                return GetOptionSetValue<SystemUser_Address1_ShippingMethodCode>("address1_shippingmethodcode");
            }
            set {
                SetOptionSetValue("address1_shippingmethodcode", value);
            }
        }
        
        /// <summary>
        /// <para>Title of the user.</para>
        /// <para>Display Name: Title</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title {
            get {
                return GetAttributeValue<string>("title");
            }
            set {
                SetAttributeValue("title", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>County name for address 2.</para>
        /// <para>Display Name: Address 2: County</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string Address2_County {
            get {
                return GetAttributeValue<string>("address2_county");
            }
            set {
                SetAttributeValue("address2_county", value);
            }
        }
        
        [AttributeLogicalName("parentsystemuseridname")]
        public string ParentSystemUserIdName {
            get {
                return GetAttributeValue<string>("parentsystemuseridname");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Type of address for address 1, such as billing, shipping, or primary address.</para>
        /// <para>Display Name: Address 1: Address Type</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public SystemUser_Address1_AddressTypeCode? Address1_AddressTypeCode {
            get {
                return GetOptionSetValue<SystemUser_Address1_AddressTypeCode>("address1_addresstypecode");
            }
            set {
                SetOptionSetValue("address1_addresstypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the full name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Full Name</para>
        /// </summary>
        [AttributeLogicalName("yomifullname")]
        public string YomiFullName {
            get {
                return GetAttributeValue<string>("yomifullname");
            }
        }
        
        /// <summary>
        /// <para>Longitude for address 1.</para>
        /// <para>Display Name: Address 1: Longitude</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? Address1_Longitude {
            get {
                return GetAttributeValue<double?>("address1_longitude");
            }
            set {
                SetAttributeValue("address1_longitude", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the first name of the user, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi First Name</para>
        /// </summary>
        [AttributeLogicalName("yomifirstname")]
        public string YomiFirstName {
            get {
                return GetAttributeValue<string>("yomifirstname");
            }
            set {
                SetAttributeValue("yomifirstname", value);
            }
        }
        
        /// <summary>
        /// <para>Skill set of the user.</para>
        /// <para>Display Name: Skills</para>
        /// </summary>
        [AttributeLogicalName("skills")]
        public string Skills {
            get {
                return GetAttributeValue<string>("skills");
            }
            set {
                SetAttributeValue("skills", value);
            }
        }
        
        /// <summary>
        /// <para>Third line for entering address 1 information.</para>
        /// <para>Display Name: Street 3</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string Address1_Line3 {
            get {
                return GetAttributeValue<string>("address1_line3");
            }
            set {
                SetAttributeValue("address1_line3", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the user was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        [AttributeLogicalName("siteidname")]
        public string SiteIdName {
            get {
                return GetAttributeValue<string>("siteidname");
            }
        }
        
        /// <summary>
        /// <para>Internal email address for the user.</para>
        /// <para>Display Name: Primary Email</para>
        /// </summary>
        [AttributeLogicalName("internalemailaddress")]
        public string InternalEMailAddress {
            get {
                return GetAttributeValue<string>("internalemailaddress");
            }
            set {
                SetAttributeValue("internalemailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>First line for entering address 1 information.</para>
        /// <para>Display Name: Street 1</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string Address1_Line1 {
            get {
                return GetAttributeValue<string>("address1_line1");
            }
            set {
                SetAttributeValue("address1_line1", value);
            }
        }
        
        /// <summary>
        /// <para>City name for address 1.</para>
        /// <para>Display Name: City</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string Address1_City {
            get {
                return GetAttributeValue<string>("address1_city");
            }
            set {
                SetAttributeValue("address1_city", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        [RelationshipSchemaName("teammembership_association")]
        public IEnumerable<Team> teammembership_association {
            get {
                return GetRelatedEntities<Team>("teammembership_association", null);
            }
            set {
                SetRelatedEntities("teammembership_association", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_systemuser_createdonbehalfby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuser_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuser_createdonbehalfby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuser_createdonbehalfby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_systemuserbase_createdby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuserbase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuserbase_createdby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuserbase_createdby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuser_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuser_modifiedonbehalfby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_systemuserbase_modifiedby", EntityRole.Referencing)]
        public SystemUser Referencinglk_systemuserbase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_systemuserbase_modifiedby", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("lk_systemuserbase_modifiedby", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("organizationid")]
        [RelationshipSchemaName("organization_system_users")]
        public Organization organization_system_users {
            get {
                return GetRelatedEntity<Organization>("organization_system_users", null);
            }
            set {
                SetRelatedEntity("organization_system_users", null, value);
            }
        }
        
        [AttributeLogicalName("parentsystemuserid")]
        [RelationshipSchemaName("user_parent_user", EntityRole.Referencing)]
        public SystemUser Referencinguser_parent_user {
            get {
                return GetRelatedEntity<SystemUser>("user_parent_user", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("user_parent_user", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_SystemUser")]
        public TransactionCurrency TransactionCurrency_SystemUser {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_SystemUser", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_SystemUser", null, value);
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        [RelationshipSchemaName("business_unit_system_users")]
        public BusinessUnit business_unit_system_users {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_system_users", null);
            }
            set {
                SetRelatedEntity("business_unit_system_users", null, value);
            }
        }
        
        [AttributeLogicalName("calendarid")]
        [RelationshipSchemaName("calendar_system_users")]
        public Calendar calendar_system_users {
            get {
                return GetRelatedEntity<Calendar>("calendar_system_users", null);
            }
            set {
                SetRelatedEntity("calendar_system_users", null, value);
            }
        }
        
        [AttributeLogicalName("defaultmailbox")]
        [RelationshipSchemaName("systemuser_defaultmailbox_mailbox")]
        public Mailbox systemuser_defaultmailbox_mailbox {
            get {
                return GetRelatedEntity<Mailbox>("systemuser_defaultmailbox_mailbox", null);
            }
            set {
                SetRelatedEntity("systemuser_defaultmailbox_mailbox", null, value);
            }
        }
        
        [RelationshipSchemaName("msdyn_systemuser_wallsavedqueryusersettings_userid")]
        public IEnumerable<msdyn_wallsavedqueryusersettings> msdyn_systemuser_wallsavedqueryusersettings_userid {
            get {
                return GetRelatedEntities<msdyn_wallsavedqueryusersettings>("msdyn_systemuser_wallsavedqueryusersettings_userid", null);
            }
            set {
                SetRelatedEntities("msdyn_systemuser_wallsavedqueryusersettings_userid", null, value);
            }
        }
        
        [RelationshipSchemaName("user_msdyn_wallsavedqueryusersettings")]
        public IEnumerable<msdyn_wallsavedqueryusersettings> user_msdyn_wallsavedqueryusersettings {
            get {
                return GetRelatedEntities<msdyn_wallsavedqueryusersettings>("user_msdyn_wallsavedqueryusersettings", null);
            }
            set {
                SetRelatedEntities("user_msdyn_wallsavedqueryusersettings", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_msdyn_wallsavedqueryusersettings_modifiedonbehalfby")]
        public IEnumerable<msdyn_wallsavedqueryusersettings> lk_msdyn_wallsavedqueryusersettings_modifiedonbehalfby {
            get {
                return GetRelatedEntities<msdyn_wallsavedqueryusersettings>("lk_msdyn_wallsavedqueryusersettings_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_msdyn_wallsavedqueryusersettings_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_msdyn_wallsavedqueryusersettings_modifiedby")]
        public IEnumerable<msdyn_wallsavedqueryusersettings> lk_msdyn_wallsavedqueryusersettings_modifiedby {
            get {
                return GetRelatedEntities<msdyn_wallsavedqueryusersettings>("lk_msdyn_wallsavedqueryusersettings_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_msdyn_wallsavedqueryusersettings_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_msdyn_wallsavedqueryusersettings_createdonbehalfby")]
        public IEnumerable<msdyn_wallsavedqueryusersettings> lk_msdyn_wallsavedqueryusersettings_createdonbehalfby {
            get {
                return GetRelatedEntities<msdyn_wallsavedqueryusersettings>("lk_msdyn_wallsavedqueryusersettings_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_msdyn_wallsavedqueryusersettings_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_msdyn_wallsavedqueryusersettings_createdby")]
        public IEnumerable<msdyn_wallsavedqueryusersettings> lk_msdyn_wallsavedqueryusersettings_createdby {
            get {
                return GetRelatedEntities<msdyn_wallsavedqueryusersettings>("lk_msdyn_wallsavedqueryusersettings_createdby", null);
            }
            set {
                SetRelatedEntities("lk_msdyn_wallsavedqueryusersettings_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_msdyn_postalbum")]
        public IEnumerable<msdyn_PostAlbum> user_msdyn_postalbum {
            get {
                return GetRelatedEntities<msdyn_PostAlbum>("user_msdyn_postalbum", null);
            }
            set {
                SetRelatedEntities("user_msdyn_postalbum", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_msdyn_postalbum_modifiedonbehalfby")]
        public IEnumerable<msdyn_PostAlbum> lk_msdyn_postalbum_modifiedonbehalfby {
            get {
                return GetRelatedEntities<msdyn_PostAlbum>("lk_msdyn_postalbum_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_msdyn_postalbum_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_msdyn_postalbum_modifiedby")]
        public IEnumerable<msdyn_PostAlbum> lk_msdyn_postalbum_modifiedby {
            get {
                return GetRelatedEntities<msdyn_PostAlbum>("lk_msdyn_postalbum_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_msdyn_postalbum_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_msdyn_postalbum_createdonbehalfby")]
        public IEnumerable<msdyn_PostAlbum> lk_msdyn_postalbum_createdonbehalfby {
            get {
                return GetRelatedEntities<msdyn_PostAlbum>("lk_msdyn_postalbum_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_msdyn_postalbum_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_msdyn_postalbum_createdby")]
        public IEnumerable<msdyn_PostAlbum> lk_msdyn_postalbum_createdby {
            get {
                return GetRelatedEntities<msdyn_PostAlbum>("lk_msdyn_postalbum_createdby", null);
            }
            set {
                SetRelatedEntities("lk_msdyn_postalbum_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_bus")]
        public IEnumerable<dg_bus> user_dg_bus {
            get {
                return GetRelatedEntities<dg_bus>("user_dg_bus", null);
            }
            set {
                SetRelatedEntities("user_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_bus_modifiedonbehalfby")]
        public IEnumerable<dg_bus> lk_dg_bus_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_bus>("lk_dg_bus_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_bus_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_bus_modifiedby")]
        public IEnumerable<dg_bus> lk_dg_bus_modifiedby {
            get {
                return GetRelatedEntities<dg_bus>("lk_dg_bus_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_bus_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_bus_createdonbehalfby")]
        public IEnumerable<dg_bus> lk_dg_bus_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_bus>("lk_dg_bus_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_bus_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_bus_createdby")]
        public IEnumerable<dg_bus> lk_dg_bus_createdby {
            get {
                return GetRelatedEntities<dg_bus>("lk_dg_bus_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_bus_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_mild")]
        public IEnumerable<dg_mild> user_dg_mild {
            get {
                return GetRelatedEntities<dg_mild>("user_dg_mild", null);
            }
            set {
                SetRelatedEntities("user_dg_mild", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_mild_modifiedonbehalfby")]
        public IEnumerable<dg_mild> lk_dg_mild_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_mild>("lk_dg_mild_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_mild_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_mild_modifiedby")]
        public IEnumerable<dg_mild> lk_dg_mild_modifiedby {
            get {
                return GetRelatedEntities<dg_mild>("lk_dg_mild_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_mild_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_mild_createdonbehalfby")]
        public IEnumerable<dg_mild> lk_dg_mild_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_mild>("lk_dg_mild_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_mild_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_mild_createdby")]
        public IEnumerable<dg_mild> lk_dg_mild_createdby {
            get {
                return GetRelatedEntities<dg_mild>("lk_dg_mild_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_mild_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_child")]
        public IEnumerable<dg_child> user_dg_child {
            get {
                return GetRelatedEntities<dg_child>("user_dg_child", null);
            }
            set {
                SetRelatedEntities("user_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_child_modifiedonbehalfby")]
        public IEnumerable<dg_child> lk_dg_child_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_child>("lk_dg_child_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_child_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_child_modifiedby")]
        public IEnumerable<dg_child> lk_dg_child_modifiedby {
            get {
                return GetRelatedEntities<dg_child>("lk_dg_child_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_child_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_child_createdonbehalfby")]
        public IEnumerable<dg_child> lk_dg_child_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_child>("lk_dg_child_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_child_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_child_createdby")]
        public IEnumerable<dg_child> lk_dg_child_createdby {
            get {
                return GetRelatedEntities<dg_child>("lk_dg_child_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_child_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_man")]
        public IEnumerable<dg_man> user_dg_man {
            get {
                return GetRelatedEntities<dg_man>("user_dg_man", null);
            }
            set {
                SetRelatedEntities("user_dg_man", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_man_modifiedonbehalfby")]
        public IEnumerable<dg_man> lk_dg_man_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_man>("lk_dg_man_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_man_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_man_modifiedby")]
        public IEnumerable<dg_man> lk_dg_man_modifiedby {
            get {
                return GetRelatedEntities<dg_man>("lk_dg_man_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_man_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_man_createdonbehalfby")]
        public IEnumerable<dg_man> lk_dg_man_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_man>("lk_dg_man_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_man_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_man_createdby")]
        public IEnumerable<dg_man> lk_dg_man_createdby {
            get {
                return GetRelatedEntities<dg_man>("lk_dg_man_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_man_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_tooth")]
        public IEnumerable<dg_tooth> user_dg_tooth {
            get {
                return GetRelatedEntities<dg_tooth>("user_dg_tooth", null);
            }
            set {
                SetRelatedEntities("user_dg_tooth", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_tooth_modifiedonbehalfby")]
        public IEnumerable<dg_tooth> lk_dg_tooth_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_tooth>("lk_dg_tooth_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_tooth_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_tooth_modifiedby")]
        public IEnumerable<dg_tooth> lk_dg_tooth_modifiedby {
            get {
                return GetRelatedEntities<dg_tooth>("lk_dg_tooth_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_tooth_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_tooth_createdonbehalfby")]
        public IEnumerable<dg_tooth> lk_dg_tooth_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_tooth>("lk_dg_tooth_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_tooth_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_tooth_createdby")]
        public IEnumerable<dg_tooth> lk_dg_tooth_createdby {
            get {
                return GetRelatedEntities<dg_tooth>("lk_dg_tooth_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_tooth_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_field")]
        public IEnumerable<dg_field> user_dg_field {
            get {
                return GetRelatedEntities<dg_field>("user_dg_field", null);
            }
            set {
                SetRelatedEntities("user_dg_field", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_field_modifiedonbehalfby")]
        public IEnumerable<dg_field> lk_dg_field_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_field>("lk_dg_field_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_field_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_field_modifiedby")]
        public IEnumerable<dg_field> lk_dg_field_modifiedby {
            get {
                return GetRelatedEntities<dg_field>("lk_dg_field_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_field_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_field_createdonbehalfby")]
        public IEnumerable<dg_field> lk_dg_field_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_field>("lk_dg_field_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_field_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_field_createdby")]
        public IEnumerable<dg_field> lk_dg_field_createdby {
            get {
                return GetRelatedEntities<dg_field>("lk_dg_field_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_field_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_sheep")]
        public IEnumerable<dg_sheep> user_dg_sheep {
            get {
                return GetRelatedEntities<dg_sheep>("user_dg_sheep", null);
            }
            set {
                SetRelatedEntities("user_dg_sheep", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_sheep_modifiedonbehalfby")]
        public IEnumerable<dg_sheep> lk_dg_sheep_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_sheep>("lk_dg_sheep_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_sheep_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_sheep_modifiedby")]
        public IEnumerable<dg_sheep> lk_dg_sheep_modifiedby {
            get {
                return GetRelatedEntities<dg_sheep>("lk_dg_sheep_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_sheep_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_sheep_createdonbehalfby")]
        public IEnumerable<dg_sheep> lk_dg_sheep_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_sheep>("lk_dg_sheep_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_sheep_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_sheep_createdby")]
        public IEnumerable<dg_sheep> lk_dg_sheep_createdby {
            get {
                return GetRelatedEntities<dg_sheep>("lk_dg_sheep_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_sheep_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_participant")]
        public IEnumerable<dg_participant> user_dg_participant {
            get {
                return GetRelatedEntities<dg_participant>("user_dg_participant", null);
            }
            set {
                SetRelatedEntities("user_dg_participant", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_participant_modifiedonbehalfby")]
        public IEnumerable<dg_participant> lk_dg_participant_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_participant>("lk_dg_participant_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_participant_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_participant_modifiedby")]
        public IEnumerable<dg_participant> lk_dg_participant_modifiedby {
            get {
                return GetRelatedEntities<dg_participant>("lk_dg_participant_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_participant_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_participant_createdonbehalfby")]
        public IEnumerable<dg_participant> lk_dg_participant_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_participant>("lk_dg_participant_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_participant_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_participant_createdby")]
        public IEnumerable<dg_participant> lk_dg_participant_createdby {
            get {
                return GetRelatedEntities<dg_participant>("lk_dg_participant_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_participant_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_dg_event")]
        public IEnumerable<dg_event> user_dg_event {
            get {
                return GetRelatedEntities<dg_event>("user_dg_event", null);
            }
            set {
                SetRelatedEntities("user_dg_event", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_event_modifiedonbehalfby")]
        public IEnumerable<dg_event> lk_dg_event_modifiedonbehalfby {
            get {
                return GetRelatedEntities<dg_event>("lk_dg_event_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_event_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_event_modifiedby")]
        public IEnumerable<dg_event> lk_dg_event_modifiedby {
            get {
                return GetRelatedEntities<dg_event>("lk_dg_event_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_dg_event_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_event_createdonbehalfby")]
        public IEnumerable<dg_event> lk_dg_event_createdonbehalfby {
            get {
                return GetRelatedEntities<dg_event>("lk_dg_event_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_dg_event_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_dg_event_createdby")]
        public IEnumerable<dg_event> lk_dg_event_createdby {
            get {
                return GetRelatedEntities<dg_event>("lk_dg_event_createdby", null);
            }
            set {
                SetRelatedEntities("lk_dg_event_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("SystemUser_SyncErrors")]
        public IEnumerable<SyncError> SystemUser_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("SystemUser_SyncErrors", null);
            }
            set {
                SetRelatedEntities("SystemUser_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_incidents")]
        public IEnumerable<Incident> system_user_incidents {
            get {
                return GetRelatedEntities<Incident>("system_user_incidents", null);
            }
            set {
                SetRelatedEntities("system_user_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_syncerrorbase_createdby")]
        public IEnumerable<SyncError> lk_syncerrorbase_createdby {
            get {
                return GetRelatedEntities<SyncError>("lk_syncerrorbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_syncerrorbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_sharepointdocumentlocationbase_modifiedonbehalfby")]
        public IEnumerable<SharePointDocumentLocation> lk_sharepointdocumentlocationbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("lk_sharepointdocumentlocationbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_sharepointdocumentlocationbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_businessunitbase_createdby")]
        public IEnumerable<BusinessUnit> lk_businessunitbase_createdby {
            get {
                return GetRelatedEntities<BusinessUnit>("lk_businessunitbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_businessunitbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contract_createdonbehalfby")]
        public IEnumerable<Contract> lk_contract_createdonbehalfby {
            get {
                return GetRelatedEntities<Contract>("lk_contract_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_contract_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_socialactivitybase_createdonbehalfby")]
        public IEnumerable<SocialActivity> lk_socialactivitybase_createdonbehalfby {
            get {
                return GetRelatedEntities<SocialActivity>("lk_socialactivitybase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_socialactivitybase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_socialactivitybase_modifiedonbehalfby")]
        public IEnumerable<SocialActivity> lk_socialactivitybase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SocialActivity>("lk_socialactivitybase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_socialactivitybase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaign_modifiedby")]
        public IEnumerable<Campaign> lk_campaign_modifiedby {
            get {
                return GetRelatedEntities<Campaign>("lk_campaign_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_campaign_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_letter_createdonbehalfby")]
        public IEnumerable<Letter> lk_letter_createdonbehalfby {
            get {
                return GetRelatedEntities<Letter>("lk_letter_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_letter_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contactbase_modifiedby")]
        public IEnumerable<Contact> lk_contactbase_modifiedby {
            get {
                return GetRelatedEntities<Contact>("lk_contactbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_contactbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_createdonbehalfby")]
        public IEnumerable<Task> lk_task_createdonbehalfby {
            get {
                return GetRelatedEntities<Task>("lk_task_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_task_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("systemuser_connections2")]
        public IEnumerable<Connection> systemuser_connections2 {
            get {
                return GetRelatedEntities<Connection>("systemuser_connections2", null);
            }
            set {
                SetRelatedEntities("systemuser_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("user_campaignactivity")]
        public IEnumerable<CampaignActivity> user_campaignactivity {
            get {
                return GetRelatedEntities<CampaignActivity>("user_campaignactivity", null);
            }
            set {
                SetRelatedEntities("user_campaignactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_serviceappointment_modifiedonbehalfby")]
        public IEnumerable<ServiceAppointment> lk_serviceappointment_modifiedonbehalfby {
            get {
                return GetRelatedEntities<ServiceAppointment>("lk_serviceappointment_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_serviceappointment_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contractbase_modifiedby")]
        public IEnumerable<Contract> lk_contractbase_modifiedby {
            get {
                return GetRelatedEntities<Contract>("lk_contractbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_contractbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_invoices")]
        public IEnumerable<Invoice> system_user_invoices {
            get {
                return GetRelatedEntities<Invoice>("system_user_invoices", null);
            }
            set {
                SetRelatedEntities("system_user_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuserbase_createdby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuserbase_createdby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuserbase_createdby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuserbase_createdby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_slabase_createdonbehalfby")]
        public IEnumerable<SLA> lk_slabase_createdonbehalfby {
            get {
                return GetRelatedEntities<SLA>("lk_slabase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_slabase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentbase_createdby")]
        public IEnumerable<Incident> lk_incidentbase_createdby {
            get {
                return GetRelatedEntities<Incident>("lk_incidentbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_incidentbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_phonecall")]
        public IEnumerable<PhoneCall> user_phonecall {
            get {
                return GetRelatedEntities<PhoneCall>("user_phonecall", null);
            }
            set {
                SetRelatedEntities("user_phonecall", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_listmember_modifiedby")]
        public IEnumerable<ListMember> lk_listmember_modifiedby {
            get {
                return GetRelatedEntities<ListMember>("lk_listmember_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_listmember_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_sharepointsitebase_createdby")]
        public IEnumerable<SharePointSite> lk_sharepointsitebase_createdby {
            get {
                return GetRelatedEntities<SharePointSite>("lk_sharepointsitebase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_sharepointsitebase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contract_modifiedonbehalfby")]
        public IEnumerable<Contract> lk_contract_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Contract>("lk_contract_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_contract_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_sharepointsitebase_modifiedonbehalfby")]
        public IEnumerable<SharePointSite> lk_sharepointsitebase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SharePointSite>("lk_sharepointsitebase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_sharepointsitebase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_recurringappointmentmaster_modifiedonbehalfby")]
        public IEnumerable<RecurringAppointmentMaster> lk_recurringappointmentmaster_modifiedonbehalfby {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("lk_recurringappointmentmaster_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_recurringappointmentmaster_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_email_createdonbehalfby")]
        public IEnumerable<Email> lk_email_createdonbehalfby {
            get {
                return GetRelatedEntities<Email>("lk_email_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_email_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaignresponse_createdby")]
        public IEnumerable<CampaignResponse> lk_campaignresponse_createdby {
            get {
                return GetRelatedEntities<CampaignResponse>("lk_campaignresponse_createdby", null);
            }
            set {
                SetRelatedEntities("lk_campaignresponse_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuser_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuser_modifiedonbehalfby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_salesorderbase_modifiedby")]
        public IEnumerable<SalesOrder> lk_salesorderbase_modifiedby {
            get {
                return GetRelatedEntities<SalesOrder>("lk_salesorderbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_salesorderbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_createdonbehalfby")]
        public IEnumerable<Account> lk_accountbase_createdonbehalfby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_listmember_createdby")]
        public IEnumerable<ListMember> lk_listmember_createdby {
            get {
                return GetRelatedEntities<ListMember>("lk_listmember_createdby", null);
            }
            set {
                SetRelatedEntities("lk_listmember_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contact_modifiedonbehalfby")]
        public IEnumerable<Contact> lk_contact_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Contact>("lk_contact_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_contact_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_activitypointer_createdonbehalfby")]
        public IEnumerable<ActivityPointer> lk_activitypointer_createdonbehalfby {
            get {
                return GetRelatedEntities<ActivityPointer>("lk_activitypointer_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_activitypointer_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaignresponse_modifiedby")]
        public IEnumerable<CampaignResponse> lk_campaignresponse_modifiedby {
            get {
                return GetRelatedEntities<CampaignResponse>("lk_campaignresponse_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_campaignresponse_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_owning_user")]
        public IEnumerable<Lead> lead_owning_user {
            get {
                return GetRelatedEntities<Lead>("lead_owning_user", null);
            }
            set {
                SetRelatedEntities("lead_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("user_parent_user", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referenceduser_parent_user {
            get {
                return GetRelatedEntities<SystemUser>("user_parent_user", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("user_parent_user", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("user_slabase")]
        public IEnumerable<SLA> user_slabase {
            get {
                return GetRelatedEntities<SLA>("user_slabase", null);
            }
            set {
                SetRelatedEntities("user_slabase", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_quotebase_createdby")]
        public IEnumerable<Quote> lk_quotebase_createdby {
            get {
                return GetRelatedEntities<Quote>("lk_quotebase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_quotebase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_lead_createdonbehalfby")]
        public IEnumerable<Lead> lk_lead_createdonbehalfby {
            get {
                return GetRelatedEntities<Lead>("lk_lead_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_lead_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_appointment_modifiedby")]
        public IEnumerable<Appointment> lk_appointment_modifiedby {
            get {
                return GetRelatedEntities<Appointment>("lk_appointment_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_appointment_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_transactioncurrencybase_createdby")]
        public IEnumerable<TransactionCurrency> lk_transactioncurrencybase_createdby {
            get {
                return GetRelatedEntities<TransactionCurrency>("lk_transactioncurrencybase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_transactioncurrencybase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_quote_modifiedonbehalfby")]
        public IEnumerable<Quote> lk_quote_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Quote>("lk_quote_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_quote_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_sharepointdocumentlocationbase_createdonbehalfby")]
        public IEnumerable<SharePointDocumentLocation> lk_sharepointdocumentlocationbase_createdonbehalfby {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("lk_sharepointdocumentlocationbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_sharepointdocumentlocationbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_quotebase_modifiedby")]
        public IEnumerable<Quote> lk_quotebase_modifiedby {
            get {
                return GetRelatedEntities<Quote>("lk_quotebase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_quotebase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_modifiedonbehalfby")]
        public IEnumerable<Account> lk_accountbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_socialactivity_modifiedby")]
        public IEnumerable<SocialActivity> lk_socialactivity_modifiedby {
            get {
                return GetRelatedEntities<SocialActivity>("lk_socialactivity_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_socialactivity_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("SystemUser_SyncError")]
        public IEnumerable<SyncError> SystemUser_SyncError {
            get {
                return GetRelatedEntities<SyncError>("SystemUser_SyncError", null);
            }
            set {
                SetRelatedEntities("SystemUser_SyncError", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_list_createdonbehalfby")]
        public IEnumerable<List> lk_list_createdonbehalfby {
            get {
                return GetRelatedEntities<List>("lk_list_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_list_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_recurringappointmentmaster_createdby")]
        public IEnumerable<RecurringAppointmentMaster> lk_recurringappointmentmaster_createdby {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("lk_recurringappointmentmaster_createdby", null);
            }
            set {
                SetRelatedEntities("lk_recurringappointmentmaster_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_transactioncurrency_createdonbehalfby")]
        public IEnumerable<TransactionCurrency> lk_transactioncurrency_createdonbehalfby {
            get {
                return GetRelatedEntities<TransactionCurrency>("lk_transactioncurrency_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_transactioncurrency_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_modifiedonbehalfby")]
        public IEnumerable<Workflow> workflow_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Workflow>("workflow_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("workflow_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_orders")]
        public IEnumerable<SalesOrder> system_user_orders {
            get {
                return GetRelatedEntities<SalesOrder>("system_user_orders", null);
            }
            set {
                SetRelatedEntities("system_user_orders", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_service_contracts")]
        public IEnumerable<Contract> system_user_service_contracts {
            get {
                return GetRelatedEntities<Contract>("system_user_service_contracts", null);
            }
            set {
                SetRelatedEntities("system_user_service_contracts", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_activity_parties")]
        public IEnumerable<ActivityParty> system_user_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("system_user_activity_parties", null);
            }
            set {
                SetRelatedEntities("system_user_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_sharepointdocumentlocationbase_modifiedby")]
        public IEnumerable<SharePointDocumentLocation> lk_sharepointdocumentlocationbase_modifiedby {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("lk_sharepointdocumentlocationbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_sharepointdocumentlocationbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunityclose_modifiedby")]
        public IEnumerable<OpportunityClose> lk_opportunityclose_modifiedby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_opportunityclose_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_opportunityclose_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitembase_modifiedby")]
        public IEnumerable<QueueItem> lk_queueitembase_modifiedby {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitembase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_queueitembase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_letter_modifiedby")]
        public IEnumerable<Letter> lk_letter_modifiedby {
            get {
                return GetRelatedEntities<Letter>("lk_letter_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_letter_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_appointment_createdby")]
        public IEnumerable<Appointment> lk_appointment_createdby {
            get {
                return GetRelatedEntities<Appointment>("lk_appointment_createdby", null);
            }
            set {
                SetRelatedEntities("lk_appointment_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_email")]
        public IEnumerable<Email> user_email {
            get {
                return GetRelatedEntities<Email>("user_email", null);
            }
            set {
                SetRelatedEntities("user_email", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunitybase_modifiedby")]
        public IEnumerable<Opportunity> lk_opportunitybase_modifiedby {
            get {
                return GetRelatedEntities<Opportunity>("lk_opportunitybase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_opportunitybase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_invoicebase_modifiedby")]
        public IEnumerable<Invoice> lk_invoicebase_modifiedby {
            get {
                return GetRelatedEntities<Invoice>("lk_invoicebase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_invoicebase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("opportunity_owning_user")]
        public IEnumerable<Opportunity> opportunity_owning_user {
            get {
                return GetRelatedEntities<Opportunity>("opportunity_owning_user", null);
            }
            set {
                SetRelatedEntities("opportunity_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaignactivity_createdonbehalfby")]
        public IEnumerable<CampaignActivity> lk_campaignactivity_createdonbehalfby {
            get {
                return GetRelatedEntities<CampaignActivity>("lk_campaignactivity_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_campaignactivity_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contractbase_createdby")]
        public IEnumerable<Contract> lk_contractbase_createdby {
            get {
                return GetRelatedEntities<Contract>("lk_contractbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_contractbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaignactivity_createdby")]
        public IEnumerable<CampaignActivity> lk_campaignactivity_createdby {
            get {
                return GetRelatedEntities<CampaignActivity>("lk_campaignactivity_createdby", null);
            }
            set {
                SetRelatedEntities("lk_campaignactivity_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_email_createdby")]
        public IEnumerable<Email> lk_email_createdby {
            get {
                return GetRelatedEntities<Email>("lk_email_createdby", null);
            }
            set {
                SetRelatedEntities("lk_email_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("knowledgearticle_primaryauthorid")]
        public IEnumerable<KnowledgeArticle> knowledgearticle_primaryauthorid {
            get {
                return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_primaryauthorid", null);
            }
            set {
                SetRelatedEntities("knowledgearticle_primaryauthorid", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_teambase_administratorid")]
        public IEnumerable<Team> lk_teambase_administratorid {
            get {
                return GetRelatedEntities<Team>("lk_teambase_administratorid", null);
            }
            set {
                SetRelatedEntities("lk_teambase_administratorid", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_team_modifiedonbehalfby")]
        public IEnumerable<Team> lk_team_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Team>("lk_team_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_team_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_list")]
        public IEnumerable<List> user_list {
            get {
                return GetRelatedEntities<List>("user_list", null);
            }
            set {
                SetRelatedEntities("user_list", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitembase_createdby")]
        public IEnumerable<QueueItem> lk_queueitembase_createdby {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitembase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_queueitembase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_serviceappointment_createdby")]
        public IEnumerable<ServiceAppointment> lk_serviceappointment_createdby {
            get {
                return GetRelatedEntities<ServiceAppointment>("lk_serviceappointment_createdby", null);
            }
            set {
                SetRelatedEntities("lk_serviceappointment_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunityclose_modifiedonbehalfby")]
        public IEnumerable<OpportunityClose> lk_opportunityclose_modifiedonbehalfby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_opportunityclose_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_opportunityclose_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_calendar_createdby")]
        public IEnumerable<Calendar> lk_calendar_createdby {
            get {
                return GetRelatedEntities<Calendar>("lk_calendar_createdby", null);
            }
            set {
                SetRelatedEntities("lk_calendar_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentbase_modifiedby")]
        public IEnumerable<Incident> lk_incidentbase_modifiedby {
            get {
                return GetRelatedEntities<Incident>("lk_incidentbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_incidentbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_syncerrorbase_modifiedby")]
        public IEnumerable<SyncError> lk_syncerrorbase_modifiedby {
            get {
                return GetRelatedEntities<SyncError>("lk_syncerrorbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_syncerrorbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_socialactivity_createdby")]
        public IEnumerable<SocialActivity> lk_socialactivity_createdby {
            get {
                return GetRelatedEntities<SocialActivity>("lk_socialactivity_createdby", null);
            }
            set {
                SetRelatedEntities("lk_socialactivity_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_invoicebase_createdby")]
        public IEnumerable<Invoice> lk_invoicebase_createdby {
            get {
                return GetRelatedEntities<Invoice>("lk_invoicebase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_invoicebase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contact_createdonbehalfby")]
        public IEnumerable<Contact> lk_contact_createdonbehalfby {
            get {
                return GetRelatedEntities<Contact>("lk_contact_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_contact_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_fax_modifiedonbehalfby")]
        public IEnumerable<Fax> lk_fax_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Fax>("lk_fax_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_fax_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_phonecall_createdby")]
        public IEnumerable<PhoneCall> lk_phonecall_createdby {
            get {
                return GetRelatedEntities<PhoneCall>("lk_phonecall_createdby", null);
            }
            set {
                SetRelatedEntities("lk_phonecall_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_task")]
        public IEnumerable<Task> user_task {
            get {
                return GetRelatedEntities<Task>("user_task", null);
            }
            set {
                SetRelatedEntities("user_task", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_Dynamicpropertyinsatanceattribute_ModifiedBy")]
        public IEnumerable<DynamicPropertyInstance> lk_Dynamicpropertyinsatanceattribute_ModifiedBy {
            get {
                return GetRelatedEntities<DynamicPropertyInstance>("lk_Dynamicpropertyinsatanceattribute_ModifiedBy", null);
            }
            set {
                SetRelatedEntities("lk_Dynamicpropertyinsatanceattribute_ModifiedBy", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_appointment_modifiedonbehalfby")]
        public IEnumerable<Appointment> lk_appointment_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Appointment>("lk_appointment_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_appointment_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuser_createdonbehalfby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuser_createdonbehalfby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuser_createdonbehalfby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuser_createdonbehalfby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("system_user_accounts")]
        public IEnumerable<Account> system_user_accounts {
            get {
                return GetRelatedEntities<Account>("system_user_accounts", null);
            }
            set {
                SetRelatedEntities("system_user_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("contact_owning_user")]
        public IEnumerable<Contact> contact_owning_user {
            get {
                return GetRelatedEntities<Contact>("contact_owning_user", null);
            }
            set {
                SetRelatedEntities("contact_owning_user", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentbase_createdonbehalfby")]
        public IEnumerable<Incident> lk_incidentbase_createdonbehalfby {
            get {
                return GetRelatedEntities<Incident>("lk_incidentbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_incidentbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_createdby")]
        public IEnumerable<Task> lk_task_createdby {
            get {
                return GetRelatedEntities<Task>("lk_task_createdby", null);
            }
            set {
                SetRelatedEntities("lk_task_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_organizationbase_modifiedby")]
        public IEnumerable<Organization> lk_organizationbase_modifiedby {
            get {
                return GetRelatedEntities<Organization>("lk_organizationbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_organizationbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_modifiedby")]
        public IEnumerable<Task> lk_task_modifiedby {
            get {
                return GetRelatedEntities<Task>("lk_task_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_task_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_incidentbase_modifiedonbehalfby")]
        public IEnumerable<Incident> lk_incidentbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Incident>("lk_incidentbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_incidentbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_businessunitbase_modifiedby")]
        public IEnumerable<BusinessUnit> lk_businessunitbase_modifiedby {
            get {
                return GetRelatedEntities<BusinessUnit>("lk_businessunitbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_businessunitbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_phonecall_modifiedonbehalfby")]
        public IEnumerable<PhoneCall> lk_phonecall_modifiedonbehalfby {
            get {
                return GetRelatedEntities<PhoneCall>("lk_phonecall_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_phonecall_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("Dynamicpropertyinsatance_createdby")]
        public IEnumerable<DynamicPropertyInstance> Dynamicpropertyinsatance_createdby {
            get {
                return GetRelatedEntities<DynamicPropertyInstance>("Dynamicpropertyinsatance_createdby", null);
            }
            set {
                SetRelatedEntities("Dynamicpropertyinsatance_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_quotes")]
        public IEnumerable<Quote> system_user_quotes {
            get {
                return GetRelatedEntities<Quote>("system_user_quotes", null);
            }
            set {
                SetRelatedEntities("system_user_quotes", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_salesorder_createdonbehalfby")]
        public IEnumerable<SalesOrder> lk_salesorder_createdonbehalfby {
            get {
                return GetRelatedEntities<SalesOrder>("lk_salesorder_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_salesorder_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_emailserverprofile_createdby")]
        public IEnumerable<EmailServerProfile> lk_emailserverprofile_createdby {
            get {
                return GetRelatedEntities<EmailServerProfile>("lk_emailserverprofile_createdby", null);
            }
            set {
                SetRelatedEntities("lk_emailserverprofile_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("OwningUser_Dynamicpropertyinsatance")]
        public IEnumerable<DynamicPropertyInstance> OwningUser_Dynamicpropertyinsatance {
            get {
                return GetRelatedEntities<DynamicPropertyInstance>("OwningUser_Dynamicpropertyinsatance", null);
            }
            set {
                SetRelatedEntities("OwningUser_Dynamicpropertyinsatance", null, value);
            }
        }
        
        [RelationshipSchemaName("systemuser_connections1")]
        public IEnumerable<Connection> systemuser_connections1 {
            get {
                return GetRelatedEntities<Connection>("systemuser_connections1", null);
            }
            set {
                SetRelatedEntities("systemuser_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_organization_modifiedonbehalfby")]
        public IEnumerable<Organization> lk_organization_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Organization>("lk_organization_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_organization_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_createdby")]
        public IEnumerable<Account> lk_accountbase_createdby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaignresponse_modifiedonbehalfby")]
        public IEnumerable<CampaignResponse> lk_campaignresponse_modifiedonbehalfby {
            get {
                return GetRelatedEntities<CampaignResponse>("lk_campaignresponse_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_campaignresponse_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_convertruleitembase_modifiedonbehalfby")]
        public IEnumerable<ConvertRuleItem> lk_convertruleitembase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<ConvertRuleItem>("lk_convertruleitembase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_convertruleitembase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_convertruleitembase_createdonbehalfby")]
        public IEnumerable<ConvertRuleItem> lk_convertruleitembase_createdonbehalfby {
            get {
                return GetRelatedEntities<ConvertRuleItem>("lk_convertruleitembase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_convertruleitembase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_invoice_createdonbehalfby")]
        public IEnumerable<Invoice> lk_invoice_createdonbehalfby {
            get {
                return GetRelatedEntities<Invoice>("lk_invoice_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_invoice_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_connectionbase_createdonbehalfby")]
        public IEnumerable<Connection> lk_connectionbase_createdonbehalfby {
            get {
                return GetRelatedEntities<Connection>("lk_connectionbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_connectionbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_sharepointsitebase_modifiedby")]
        public IEnumerable<SharePointSite> lk_sharepointsitebase_modifiedby {
            get {
                return GetRelatedEntities<SharePointSite>("lk_sharepointsitebase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_sharepointsitebase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_activitypointer_modifiedonbehalfby")]
        public IEnumerable<ActivityPointer> lk_activitypointer_modifiedonbehalfby {
            get {
                return GetRelatedEntities<ActivityPointer>("lk_activitypointer_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_activitypointer_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_fax")]
        public IEnumerable<Fax> user_fax {
            get {
                return GetRelatedEntities<Fax>("user_fax", null);
            }
            set {
                SetRelatedEntities("user_fax", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_lead_modifiedonbehalfby")]
        public IEnumerable<Lead> lk_lead_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Lead>("lk_lead_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_lead_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_quote_createdonbehalfby")]
        public IEnumerable<Quote> lk_quote_createdonbehalfby {
            get {
                return GetRelatedEntities<Quote>("lk_quote_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_quote_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_accountbase_modifiedby")]
        public IEnumerable<Account> lk_accountbase_modifiedby {
            get {
                return GetRelatedEntities<Account>("lk_accountbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_accountbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_list_modifiedonbehalfby")]
        public IEnumerable<List> lk_list_modifiedonbehalfby {
            get {
                return GetRelatedEntities<List>("lk_list_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_list_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_salesorder_modifiedonbehalfby")]
        public IEnumerable<SalesOrder> lk_salesorder_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SalesOrder>("lk_salesorder_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_salesorder_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_leadbase_createdby")]
        public IEnumerable<Lead> lk_leadbase_createdby {
            get {
                return GetRelatedEntities<Lead>("lk_leadbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_leadbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_serviceappointment_createdonbehalfby")]
        public IEnumerable<ServiceAppointment> lk_serviceappointment_createdonbehalfby {
            get {
                return GetRelatedEntities<ServiceAppointment>("lk_serviceappointment_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_serviceappointment_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_calendar_modifiedonbehalfby")]
        public IEnumerable<Calendar> lk_calendar_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Calendar>("lk_calendar_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_calendar_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_organization_createdonbehalfby")]
        public IEnumerable<Organization> lk_organization_createdonbehalfby {
            get {
                return GetRelatedEntities<Organization>("lk_organization_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_organization_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_letter")]
        public IEnumerable<Letter> user_letter {
            get {
                return GetRelatedEntities<Letter>("user_letter", null);
            }
            set {
                SetRelatedEntities("user_letter", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_listmember_modifiedonbehalfby")]
        public IEnumerable<ListMember> lk_listmember_modifiedonbehalfby {
            get {
                return GetRelatedEntities<ListMember>("lk_listmember_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_listmember_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_list_createdby")]
        public IEnumerable<List> lk_list_createdby {
            get {
                return GetRelatedEntities<List>("lk_list_createdby", null);
            }
            set {
                SetRelatedEntities("lk_list_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("modifiedby_connection")]
        public IEnumerable<Connection> modifiedby_connection {
            get {
                return GetRelatedEntities<Connection>("modifiedby_connection", null);
            }
            set {
                SetRelatedEntities("modifiedby_connection", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_systemuserbase_modifiedby", EntityRole.Referenced)]
        public IEnumerable<SystemUser> Referencedlk_systemuserbase_modifiedby {
            get {
                return GetRelatedEntities<SystemUser>("lk_systemuserbase_modifiedby", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("lk_systemuserbase_modifiedby", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("lk_appointment_createdonbehalfby")]
        public IEnumerable<Appointment> lk_appointment_createdonbehalfby {
            get {
                return GetRelatedEntities<Appointment>("lk_appointment_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_appointment_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_workflow")]
        public IEnumerable<Workflow> system_user_workflow {
            get {
                return GetRelatedEntities<Workflow>("system_user_workflow", null);
            }
            set {
                SetRelatedEntities("system_user_workflow", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_contactbase_createdby")]
        public IEnumerable<Contact> lk_contactbase_createdby {
            get {
                return GetRelatedEntities<Contact>("lk_contactbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_contactbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_salesorderbase_createdby")]
        public IEnumerable<SalesOrder> lk_salesorderbase_createdby {
            get {
                return GetRelatedEntities<SalesOrder>("lk_salesorderbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_salesorderbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_activitypointer_createdby")]
        public IEnumerable<ActivityPointer> lk_activitypointer_createdby {
            get {
                return GetRelatedEntities<ActivityPointer>("lk_activitypointer_createdby", null);
            }
            set {
                SetRelatedEntities("lk_activitypointer_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_accounts")]
        public IEnumerable<Account> user_accounts {
            get {
                return GetRelatedEntities<Account>("user_accounts", null);
            }
            set {
                SetRelatedEntities("user_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_sharepointdocumentlocationbase_createdby")]
        public IEnumerable<SharePointDocumentLocation> lk_sharepointdocumentlocationbase_createdby {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("lk_sharepointdocumentlocationbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_sharepointdocumentlocationbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_Dynamicpropertyinsatanceattribute_createdonbehalfby")]
        public IEnumerable<DynamicPropertyInstance> lk_Dynamicpropertyinsatanceattribute_createdonbehalfby {
            get {
                return GetRelatedEntities<DynamicPropertyInstance>("lk_Dynamicpropertyinsatanceattribute_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_Dynamicpropertyinsatanceattribute_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_email_modifiedby")]
        public IEnumerable<Email> lk_email_modifiedby {
            get {
                return GetRelatedEntities<Email>("lk_email_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_email_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_phonecall_createdonbehalfby")]
        public IEnumerable<PhoneCall> lk_phonecall_createdonbehalfby {
            get {
                return GetRelatedEntities<PhoneCall>("lk_phonecall_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_phonecall_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_contacts")]
        public IEnumerable<Contact> system_user_contacts {
            get {
                return GetRelatedEntities<Contact>("system_user_contacts", null);
            }
            set {
                SetRelatedEntities("system_user_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunitybase_createdby")]
        public IEnumerable<Opportunity> lk_opportunitybase_createdby {
            get {
                return GetRelatedEntities<Opportunity>("lk_opportunitybase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_opportunitybase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_leadbase_modifiedby")]
        public IEnumerable<Lead> lk_leadbase_modifiedby {
            get {
                return GetRelatedEntities<Lead>("lk_leadbase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_leadbase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_transactioncurrencybase_modifiedby")]
        public IEnumerable<TransactionCurrency> lk_transactioncurrencybase_modifiedby {
            get {
                return GetRelatedEntities<TransactionCurrency>("lk_transactioncurrencybase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_transactioncurrencybase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_organizationbase_createdby")]
        public IEnumerable<Organization> lk_organizationbase_createdby {
            get {
                return GetRelatedEntities<Organization>("lk_organizationbase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_organizationbase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_slabase_createdby")]
        public IEnumerable<SLA> lk_slabase_createdby {
            get {
                return GetRelatedEntities<SLA>("lk_slabase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_slabase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_list_modifiedby")]
        public IEnumerable<List> lk_list_modifiedby {
            get {
                return GetRelatedEntities<List>("lk_list_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_list_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_recurringappointmentmaster")]
        public IEnumerable<RecurringAppointmentMaster> user_recurringappointmentmaster {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("user_recurringappointmentmaster", null);
            }
            set {
                SetRelatedEntities("user_recurringappointmentmaster", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_createdonbehalfby")]
        public IEnumerable<Workflow> workflow_createdonbehalfby {
            get {
                return GetRelatedEntities<Workflow>("workflow_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("workflow_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_convertruleitembase_modifiedby")]
        public IEnumerable<ConvertRuleItem> lk_convertruleitembase_modifiedby {
            get {
                return GetRelatedEntities<ConvertRuleItem>("lk_convertruleitembase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_convertruleitembase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("SystemUser_Campaigns")]
        public IEnumerable<Campaign> SystemUser_Campaigns {
            get {
                return GetRelatedEntities<Campaign>("SystemUser_Campaigns", null);
            }
            set {
                SetRelatedEntities("SystemUser_Campaigns", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaign_createdonbehalfby")]
        public IEnumerable<Campaign> lk_campaign_createdonbehalfby {
            get {
                return GetRelatedEntities<Campaign>("lk_campaign_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_campaign_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitem_createdonbehalfby")]
        public IEnumerable<QueueItem> lk_queueitem_createdonbehalfby {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitem_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_queueitem_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_connectionbase_modifiedonbehalfby")]
        public IEnumerable<Connection> lk_connectionbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Connection>("lk_connectionbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_connectionbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_emailserverprofile_modifiedby")]
        public IEnumerable<EmailServerProfile> lk_emailserverprofile_modifiedby {
            get {
                return GetRelatedEntities<EmailServerProfile>("lk_emailserverprofile_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_emailserverprofile_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_teambase_createdby")]
        public IEnumerable<Team> lk_teambase_createdby {
            get {
                return GetRelatedEntities<Team>("lk_teambase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_teambase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_serviceappointment_modifiedby")]
        public IEnumerable<ServiceAppointment> lk_serviceappointment_modifiedby {
            get {
                return GetRelatedEntities<ServiceAppointment>("lk_serviceappointment_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_serviceappointment_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_businessunit_modifiedonbehalfby")]
        public IEnumerable<BusinessUnit> lk_businessunit_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BusinessUnit>("lk_businessunit_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_businessunit_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunity_createdonbehalfby")]
        public IEnumerable<Opportunity> lk_opportunity_createdonbehalfby {
            get {
                return GetRelatedEntities<Opportunity>("lk_opportunity_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_opportunity_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_activity")]
        public IEnumerable<ActivityPointer> user_activity {
            get {
                return GetRelatedEntities<ActivityPointer>("user_activity", null);
            }
            set {
                SetRelatedEntities("user_activity", null, value);
            }
        }
        
        [RelationshipSchemaName("SystemUser_Email_EmailSender")]
        public IEnumerable<Email> SystemUser_Email_EmailSender {
            get {
                return GetRelatedEntities<Email>("SystemUser_Email_EmailSender", null);
            }
            set {
                SetRelatedEntities("SystemUser_Email_EmailSender", null, value);
            }
        }
        
        [RelationshipSchemaName("user_appointment")]
        public IEnumerable<Appointment> user_appointment {
            get {
                return GetRelatedEntities<Appointment>("user_appointment", null);
            }
            set {
                SetRelatedEntities("user_appointment", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_modifiedby")]
        public IEnumerable<Workflow> workflow_modifiedby {
            get {
                return GetRelatedEntities<Workflow>("workflow_modifiedby", null);
            }
            set {
                SetRelatedEntities("workflow_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunityclose_createdonbehalfby")]
        public IEnumerable<OpportunityClose> lk_opportunityclose_createdonbehalfby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_opportunityclose_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_opportunityclose_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("createdby_connection")]
        public IEnumerable<Connection> createdby_connection {
            get {
                return GetRelatedEntities<Connection>("createdby_connection", null);
            }
            set {
                SetRelatedEntities("createdby_connection", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_team_createdonbehalfby")]
        public IEnumerable<Team> lk_team_createdonbehalfby {
            get {
                return GetRelatedEntities<Team>("lk_team_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_team_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_email_modifiedonbehalfby")]
        public IEnumerable<Email> lk_email_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Email>("lk_email_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_email_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_createdby")]
        public IEnumerable<Workflow> workflow_createdby {
            get {
                return GetRelatedEntities<Workflow>("workflow_createdby", null);
            }
            set {
                SetRelatedEntities("workflow_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_teambase_modifiedby")]
        public IEnumerable<Team> lk_teambase_modifiedby {
            get {
                return GetRelatedEntities<Team>("lk_teambase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_teambase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_syncerrorbase_modifiedonbehalfby")]
        public IEnumerable<SyncError> lk_syncerrorbase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SyncError>("lk_syncerrorbase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_syncerrorbase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_activitypointer_modifiedby")]
        public IEnumerable<ActivityPointer> lk_activitypointer_modifiedby {
            get {
                return GetRelatedEntities<ActivityPointer>("lk_activitypointer_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_activitypointer_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitembase_workerid")]
        public IEnumerable<QueueItem> lk_queueitembase_workerid {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitembase_workerid", null);
            }
            set {
                SetRelatedEntities("lk_queueitembase_workerid", null, value);
            }
        }
        
        [RelationshipSchemaName("system_user_service_appointments")]
        public IEnumerable<ServiceAppointment> system_user_service_appointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("system_user_service_appointments", null);
            }
            set {
                SetRelatedEntities("system_user_service_appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_calendar_createdonbehalfby")]
        public IEnumerable<Calendar> lk_calendar_createdonbehalfby {
            get {
                return GetRelatedEntities<Calendar>("lk_calendar_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_calendar_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunity_modifiedonbehalfby")]
        public IEnumerable<Opportunity> lk_opportunity_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Opportunity>("lk_opportunity_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_opportunity_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_task_modifiedonbehalfby")]
        public IEnumerable<Task> lk_task_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Task>("lk_task_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_task_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_transactioncurrency_modifiedonbehalfby")]
        public IEnumerable<TransactionCurrency> lk_transactioncurrency_modifiedonbehalfby {
            get {
                return GetRelatedEntities<TransactionCurrency>("lk_transactioncurrency_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_transactioncurrency_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_socialactivity")]
        public IEnumerable<SocialActivity> user_socialactivity {
            get {
                return GetRelatedEntities<SocialActivity>("user_socialactivity", null);
            }
            set {
                SetRelatedEntities("user_socialactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_queueitem_modifiedonbehalfby")]
        public IEnumerable<QueueItem> lk_queueitem_modifiedonbehalfby {
            get {
                return GetRelatedEntities<QueueItem>("lk_queueitem_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_queueitem_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_Dynamicpropertyinsatanceattribute_ModifiedOnBehalfBy")]
        public IEnumerable<DynamicPropertyInstance> lk_Dynamicpropertyinsatanceattribute_ModifiedOnBehalfBy {
            get {
                return GetRelatedEntities<DynamicPropertyInstance>("lk_Dynamicpropertyinsatanceattribute_ModifiedOnBehalfBy", null);
            }
            set {
                SetRelatedEntities("lk_Dynamicpropertyinsatanceattribute_ModifiedOnBehalfBy", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_invoice_modifiedonbehalfby")]
        public IEnumerable<Invoice> lk_invoice_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Invoice>("lk_invoice_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_invoice_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_slabase_modifiedby")]
        public IEnumerable<SLA> lk_slabase_modifiedby {
            get {
                return GetRelatedEntities<SLA>("lk_slabase_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_slabase_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaign_modifiedonbehalfby")]
        public IEnumerable<Campaign> lk_campaign_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Campaign>("lk_campaign_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_campaign_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_phonecall_modifiedby")]
        public IEnumerable<PhoneCall> lk_phonecall_modifiedby {
            get {
                return GetRelatedEntities<PhoneCall>("lk_phonecall_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_phonecall_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaignactivity_modifiedby")]
        public IEnumerable<CampaignActivity> lk_campaignactivity_modifiedby {
            get {
                return GetRelatedEntities<CampaignActivity>("lk_campaignactivity_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_campaignactivity_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaignresponse_createdonbehalfby")]
        public IEnumerable<CampaignResponse> lk_campaignresponse_createdonbehalfby {
            get {
                return GetRelatedEntities<CampaignResponse>("lk_campaignresponse_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_campaignresponse_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_syncerrorbase_createdonbehalfby")]
        public IEnumerable<SyncError> lk_syncerrorbase_createdonbehalfby {
            get {
                return GetRelatedEntities<SyncError>("lk_syncerrorbase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_syncerrorbase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_sharepointsitebase_createdonbehalfby")]
        public IEnumerable<SharePointSite> lk_sharepointsitebase_createdonbehalfby {
            get {
                return GetRelatedEntities<SharePointSite>("lk_sharepointsitebase_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_sharepointsitebase_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaignactivity_modifiedonbehalfby")]
        public IEnumerable<CampaignActivity> lk_campaignactivity_modifiedonbehalfby {
            get {
                return GetRelatedEntities<CampaignActivity>("lk_campaignactivity_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_campaignactivity_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_fax_createdonbehalfby")]
        public IEnumerable<Fax> lk_fax_createdonbehalfby {
            get {
                return GetRelatedEntities<Fax>("lk_fax_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_fax_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_opportunityclose_createdby")]
        public IEnumerable<OpportunityClose> lk_opportunityclose_createdby {
            get {
                return GetRelatedEntities<OpportunityClose>("lk_opportunityclose_createdby", null);
            }
            set {
                SetRelatedEntities("lk_opportunityclose_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_opportunityclose")]
        public IEnumerable<OpportunityClose> user_opportunityclose {
            get {
                return GetRelatedEntities<OpportunityClose>("user_opportunityclose", null);
            }
            set {
                SetRelatedEntities("user_opportunityclose", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_calendar_modifiedby")]
        public IEnumerable<Calendar> lk_calendar_modifiedby {
            get {
                return GetRelatedEntities<Calendar>("lk_calendar_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_calendar_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_letter_createdby")]
        public IEnumerable<Letter> lk_letter_createdby {
            get {
                return GetRelatedEntities<Letter>("lk_letter_createdby", null);
            }
            set {
                SetRelatedEntities("lk_letter_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_letter_modifiedonbehalfby")]
        public IEnumerable<Letter> lk_letter_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Letter>("lk_letter_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_letter_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_fax_createdby")]
        public IEnumerable<Fax> lk_fax_createdby {
            get {
                return GetRelatedEntities<Fax>("lk_fax_createdby", null);
            }
            set {
                SetRelatedEntities("lk_fax_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_recurringappointmentmaster_modifiedby")]
        public IEnumerable<RecurringAppointmentMaster> lk_recurringappointmentmaster_modifiedby {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("lk_recurringappointmentmaster_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_recurringappointmentmaster_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_recurringappointmentmaster_createdonbehalfby")]
        public IEnumerable<RecurringAppointmentMaster> lk_recurringappointmentmaster_createdonbehalfby {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("lk_recurringappointmentmaster_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_recurringappointmentmaster_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_listmember_createdonbehalfby")]
        public IEnumerable<ListMember> lk_listmember_createdonbehalfby {
            get {
                return GetRelatedEntities<ListMember>("lk_listmember_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_listmember_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_campaignresponse")]
        public IEnumerable<CampaignResponse> user_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("user_campaignresponse", null);
            }
            set {
                SetRelatedEntities("user_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_convertruleitembase_createdby")]
        public IEnumerable<ConvertRuleItem> lk_convertruleitembase_createdby {
            get {
                return GetRelatedEntities<ConvertRuleItem>("lk_convertruleitembase_createdby", null);
            }
            set {
                SetRelatedEntities("lk_convertruleitembase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_slabase_modifiedonbehalfby")]
        public IEnumerable<SLA> lk_slabase_modifiedonbehalfby {
            get {
                return GetRelatedEntities<SLA>("lk_slabase_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_slabase_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_businessunit_createdonbehalfby")]
        public IEnumerable<BusinessUnit> lk_businessunit_createdonbehalfby {
            get {
                return GetRelatedEntities<BusinessUnit>("lk_businessunit_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_businessunit_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_fax_modifiedby")]
        public IEnumerable<Fax> lk_fax_modifiedby {
            get {
                return GetRelatedEntities<Fax>("lk_fax_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_fax_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_campaign_createdby")]
        public IEnumerable<Campaign> lk_campaign_createdby {
            get {
                return GetRelatedEntities<Campaign>("lk_campaign_createdby", null);
            }
            set {
                SetRelatedEntities("lk_campaign_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_profilerule")]
        public IEnumerable<ChannelAccessProfileRule> user_profilerule {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("user_profilerule", null);
            }
            set {
                SetRelatedEntities("user_profilerule", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_profilerule_modifiedonbehalfby")]
        public IEnumerable<ChannelAccessProfileRule> lk_profilerule_modifiedonbehalfby {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("lk_profilerule_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_profilerule_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_profilerule_modifiedby")]
        public IEnumerable<ChannelAccessProfileRule> lk_profilerule_modifiedby {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("lk_profilerule_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_profilerule_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_profilerule_createdonbehalfby")]
        public IEnumerable<ChannelAccessProfileRule> lk_profilerule_createdonbehalfby {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("lk_profilerule_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_profilerule_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_profilerule_createdby")]
        public IEnumerable<ChannelAccessProfileRule> lk_profilerule_createdby {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("lk_profilerule_createdby", null);
            }
            set {
                SetRelatedEntities("lk_profilerule_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_externalparty")]
        public IEnumerable<ExternalParty> user_externalparty {
            get {
                return GetRelatedEntities<ExternalParty>("user_externalparty", null);
            }
            set {
                SetRelatedEntities("user_externalparty", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_modifiedonbehalfby")]
        public IEnumerable<ExternalParty> lk_externalparty_modifiedonbehalfby {
            get {
                return GetRelatedEntities<ExternalParty>("lk_externalparty_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_modifiedby")]
        public IEnumerable<ExternalParty> lk_externalparty_modifiedby {
            get {
                return GetRelatedEntities<ExternalParty>("lk_externalparty_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_createdonbehalfby")]
        public IEnumerable<ExternalParty> lk_externalparty_createdonbehalfby {
            get {
                return GetRelatedEntities<ExternalParty>("lk_externalparty_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_externalparty_createdby")]
        public IEnumerable<ExternalParty> lk_externalparty_createdby {
            get {
                return GetRelatedEntities<ExternalParty>("lk_externalparty_createdby", null);
            }
            set {
                SetRelatedEntities("lk_externalparty_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_channelaccessprofile")]
        public IEnumerable<ChannelAccessProfile> user_channelaccessprofile {
            get {
                return GetRelatedEntities<ChannelAccessProfile>("user_channelaccessprofile", null);
            }
            set {
                SetRelatedEntities("user_channelaccessprofile", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_channelaccessprofile_modifiedonbehalfby")]
        public IEnumerable<ChannelAccessProfile> lk_channelaccessprofile_modifiedonbehalfby {
            get {
                return GetRelatedEntities<ChannelAccessProfile>("lk_channelaccessprofile_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_channelaccessprofile_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_channelaccessprofile_modifiedby")]
        public IEnumerable<ChannelAccessProfile> lk_channelaccessprofile_modifiedby {
            get {
                return GetRelatedEntities<ChannelAccessProfile>("lk_channelaccessprofile_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_channelaccessprofile_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_channelaccessprofile_createdonbehalfby")]
        public IEnumerable<ChannelAccessProfile> lk_channelaccessprofile_createdonbehalfby {
            get {
                return GetRelatedEntities<ChannelAccessProfile>("lk_channelaccessprofile_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_channelaccessprofile_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_channelaccessprofile_createdby")]
        public IEnumerable<ChannelAccessProfile> lk_channelaccessprofile_createdby {
            get {
                return GetRelatedEntities<ChannelAccessProfile>("lk_channelaccessprofile_createdby", null);
            }
            set {
                SetRelatedEntities("lk_channelaccessprofile_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("systemuser_bookableresource_UserId")]
        public IEnumerable<BookableResource> systemuser_bookableresource_UserId {
            get {
                return GetRelatedEntities<BookableResource>("systemuser_bookableresource_UserId", null);
            }
            set {
                SetRelatedEntities("systemuser_bookableresource_UserId", null, value);
            }
        }
        
        [RelationshipSchemaName("user_ratingvalue")]
        public IEnumerable<RatingValue> user_ratingvalue {
            get {
                return GetRelatedEntities<RatingValue>("user_ratingvalue", null);
            }
            set {
                SetRelatedEntities("user_ratingvalue", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_ratingvalue_modifiedonbehalfby")]
        public IEnumerable<RatingValue> lk_ratingvalue_modifiedonbehalfby {
            get {
                return GetRelatedEntities<RatingValue>("lk_ratingvalue_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_ratingvalue_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_ratingvalue_modifiedby")]
        public IEnumerable<RatingValue> lk_ratingvalue_modifiedby {
            get {
                return GetRelatedEntities<RatingValue>("lk_ratingvalue_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_ratingvalue_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_ratingvalue_createdonbehalfby")]
        public IEnumerable<RatingValue> lk_ratingvalue_createdonbehalfby {
            get {
                return GetRelatedEntities<RatingValue>("lk_ratingvalue_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_ratingvalue_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_ratingvalue_createdby")]
        public IEnumerable<RatingValue> lk_ratingvalue_createdby {
            get {
                return GetRelatedEntities<RatingValue>("lk_ratingvalue_createdby", null);
            }
            set {
                SetRelatedEntities("lk_ratingvalue_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_ratingmodel")]
        public IEnumerable<RatingModel> user_ratingmodel {
            get {
                return GetRelatedEntities<RatingModel>("user_ratingmodel", null);
            }
            set {
                SetRelatedEntities("user_ratingmodel", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_ratingmodel_modifiedonbehalfby")]
        public IEnumerable<RatingModel> lk_ratingmodel_modifiedonbehalfby {
            get {
                return GetRelatedEntities<RatingModel>("lk_ratingmodel_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_ratingmodel_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_ratingmodel_modifiedby")]
        public IEnumerable<RatingModel> lk_ratingmodel_modifiedby {
            get {
                return GetRelatedEntities<RatingModel>("lk_ratingmodel_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_ratingmodel_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_ratingmodel_createdonbehalfby")]
        public IEnumerable<RatingModel> lk_ratingmodel_createdonbehalfby {
            get {
                return GetRelatedEntities<RatingModel>("lk_ratingmodel_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_ratingmodel_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_ratingmodel_createdby")]
        public IEnumerable<RatingModel> lk_ratingmodel_createdby {
            get {
                return GetRelatedEntities<RatingModel>("lk_ratingmodel_createdby", null);
            }
            set {
                SetRelatedEntities("lk_ratingmodel_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_characteristic")]
        public IEnumerable<Characteristic> user_characteristic {
            get {
                return GetRelatedEntities<Characteristic>("user_characteristic", null);
            }
            set {
                SetRelatedEntities("user_characteristic", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_characteristic_modifiedonbehalfby")]
        public IEnumerable<Characteristic> lk_characteristic_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Characteristic>("lk_characteristic_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_characteristic_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_characteristic_modifiedby")]
        public IEnumerable<Characteristic> lk_characteristic_modifiedby {
            get {
                return GetRelatedEntities<Characteristic>("lk_characteristic_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_characteristic_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_characteristic_createdonbehalfby")]
        public IEnumerable<Characteristic> lk_characteristic_createdonbehalfby {
            get {
                return GetRelatedEntities<Characteristic>("lk_characteristic_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_characteristic_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_characteristic_createdby")]
        public IEnumerable<Characteristic> lk_characteristic_createdby {
            get {
                return GetRelatedEntities<Characteristic>("lk_characteristic_createdby", null);
            }
            set {
                SetRelatedEntities("lk_characteristic_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_bookingstatus")]
        public IEnumerable<BookingStatus> user_bookingstatus {
            get {
                return GetRelatedEntities<BookingStatus>("user_bookingstatus", null);
            }
            set {
                SetRelatedEntities("user_bookingstatus", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookingstatus_modifiedonbehalfby")]
        public IEnumerable<BookingStatus> lk_bookingstatus_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BookingStatus>("lk_bookingstatus_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookingstatus_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookingstatus_modifiedby")]
        public IEnumerable<BookingStatus> lk_bookingstatus_modifiedby {
            get {
                return GetRelatedEntities<BookingStatus>("lk_bookingstatus_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_bookingstatus_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookingstatus_createdonbehalfby")]
        public IEnumerable<BookingStatus> lk_bookingstatus_createdonbehalfby {
            get {
                return GetRelatedEntities<BookingStatus>("lk_bookingstatus_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookingstatus_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookingstatus_createdby")]
        public IEnumerable<BookingStatus> lk_bookingstatus_createdby {
            get {
                return GetRelatedEntities<BookingStatus>("lk_bookingstatus_createdby", null);
            }
            set {
                SetRelatedEntities("lk_bookingstatus_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_bookableresourcegroup")]
        public IEnumerable<BookableResourceGroup> user_bookableresourcegroup {
            get {
                return GetRelatedEntities<BookableResourceGroup>("user_bookableresourcegroup", null);
            }
            set {
                SetRelatedEntities("user_bookableresourcegroup", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcegroup_modifiedonbehalfby")]
        public IEnumerable<BookableResourceGroup> lk_bookableresourcegroup_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceGroup>("lk_bookableresourcegroup_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcegroup_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcegroup_modifiedby")]
        public IEnumerable<BookableResourceGroup> lk_bookableresourcegroup_modifiedby {
            get {
                return GetRelatedEntities<BookableResourceGroup>("lk_bookableresourcegroup_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcegroup_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcegroup_createdonbehalfby")]
        public IEnumerable<BookableResourceGroup> lk_bookableresourcegroup_createdonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceGroup>("lk_bookableresourcegroup_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcegroup_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcegroup_createdby")]
        public IEnumerable<BookableResourceGroup> lk_bookableresourcegroup_createdby {
            get {
                return GetRelatedEntities<BookableResourceGroup>("lk_bookableresourcegroup_createdby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcegroup_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_bookableresourcecharacteristic")]
        public IEnumerable<BookableResourceCharacteristic> user_bookableresourcecharacteristic {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("user_bookableresourcecharacteristic", null);
            }
            set {
                SetRelatedEntities("user_bookableresourcecharacteristic", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecharacteristic_modifiedonbehalfby")]
        public IEnumerable<BookableResourceCharacteristic> lk_bookableresourcecharacteristic_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("lk_bookableresourcecharacteristic_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecharacteristic_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecharacteristic_modifiedby")]
        public IEnumerable<BookableResourceCharacteristic> lk_bookableresourcecharacteristic_modifiedby {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("lk_bookableresourcecharacteristic_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecharacteristic_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecharacteristic_createdonbehalfby")]
        public IEnumerable<BookableResourceCharacteristic> lk_bookableresourcecharacteristic_createdonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("lk_bookableresourcecharacteristic_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecharacteristic_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecharacteristic_createdby")]
        public IEnumerable<BookableResourceCharacteristic> lk_bookableresourcecharacteristic_createdby {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("lk_bookableresourcecharacteristic_createdby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecharacteristic_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_bookableresourcecategoryassn")]
        public IEnumerable<BookableResourceCategoryAssn> user_bookableresourcecategoryassn {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("user_bookableresourcecategoryassn", null);
            }
            set {
                SetRelatedEntities("user_bookableresourcecategoryassn", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecategoryassn_modifiedonbehalfby")]
        public IEnumerable<BookableResourceCategoryAssn> lk_bookableresourcecategoryassn_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("lk_bookableresourcecategoryassn_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecategoryassn_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecategoryassn_modifiedby")]
        public IEnumerable<BookableResourceCategoryAssn> lk_bookableresourcecategoryassn_modifiedby {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("lk_bookableresourcecategoryassn_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecategoryassn_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecategoryassn_createdonbehalfby")]
        public IEnumerable<BookableResourceCategoryAssn> lk_bookableresourcecategoryassn_createdonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("lk_bookableresourcecategoryassn_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecategoryassn_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecategoryassn_createdby")]
        public IEnumerable<BookableResourceCategoryAssn> lk_bookableresourcecategoryassn_createdby {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("lk_bookableresourcecategoryassn_createdby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecategoryassn_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_bookableresourcecategory")]
        public IEnumerable<BookableResourceCategory> user_bookableresourcecategory {
            get {
                return GetRelatedEntities<BookableResourceCategory>("user_bookableresourcecategory", null);
            }
            set {
                SetRelatedEntities("user_bookableresourcecategory", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecategory_modifiedonbehalfby")]
        public IEnumerable<BookableResourceCategory> lk_bookableresourcecategory_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceCategory>("lk_bookableresourcecategory_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecategory_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecategory_modifiedby")]
        public IEnumerable<BookableResourceCategory> lk_bookableresourcecategory_modifiedby {
            get {
                return GetRelatedEntities<BookableResourceCategory>("lk_bookableresourcecategory_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecategory_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecategory_createdonbehalfby")]
        public IEnumerable<BookableResourceCategory> lk_bookableresourcecategory_createdonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceCategory>("lk_bookableresourcecategory_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecategory_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcecategory_createdby")]
        public IEnumerable<BookableResourceCategory> lk_bookableresourcecategory_createdby {
            get {
                return GetRelatedEntities<BookableResourceCategory>("lk_bookableresourcecategory_createdby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcecategory_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_bookableresourcebookingheader")]
        public IEnumerable<BookableResourceBookingHeader> user_bookableresourcebookingheader {
            get {
                return GetRelatedEntities<BookableResourceBookingHeader>("user_bookableresourcebookingheader", null);
            }
            set {
                SetRelatedEntities("user_bookableresourcebookingheader", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcebookingheader_modifiedonbehalfby")]
        public IEnumerable<BookableResourceBookingHeader> lk_bookableresourcebookingheader_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceBookingHeader>("lk_bookableresourcebookingheader_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcebookingheader_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcebookingheader_modifiedby")]
        public IEnumerable<BookableResourceBookingHeader> lk_bookableresourcebookingheader_modifiedby {
            get {
                return GetRelatedEntities<BookableResourceBookingHeader>("lk_bookableresourcebookingheader_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcebookingheader_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcebookingheader_createdonbehalfby")]
        public IEnumerable<BookableResourceBookingHeader> lk_bookableresourcebookingheader_createdonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceBookingHeader>("lk_bookableresourcebookingheader_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcebookingheader_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcebookingheader_createdby")]
        public IEnumerable<BookableResourceBookingHeader> lk_bookableresourcebookingheader_createdby {
            get {
                return GetRelatedEntities<BookableResourceBookingHeader>("lk_bookableresourcebookingheader_createdby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcebookingheader_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_bookableresourcebooking")]
        public IEnumerable<BookableResourceBooking> user_bookableresourcebooking {
            get {
                return GetRelatedEntities<BookableResourceBooking>("user_bookableresourcebooking", null);
            }
            set {
                SetRelatedEntities("user_bookableresourcebooking", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcebooking_modifiedonbehalfby")]
        public IEnumerable<BookableResourceBooking> lk_bookableresourcebooking_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceBooking>("lk_bookableresourcebooking_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcebooking_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcebooking_modifiedby")]
        public IEnumerable<BookableResourceBooking> lk_bookableresourcebooking_modifiedby {
            get {
                return GetRelatedEntities<BookableResourceBooking>("lk_bookableresourcebooking_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcebooking_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcebooking_createdonbehalfby")]
        public IEnumerable<BookableResourceBooking> lk_bookableresourcebooking_createdonbehalfby {
            get {
                return GetRelatedEntities<BookableResourceBooking>("lk_bookableresourcebooking_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcebooking_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresourcebooking_createdby")]
        public IEnumerable<BookableResourceBooking> lk_bookableresourcebooking_createdby {
            get {
                return GetRelatedEntities<BookableResourceBooking>("lk_bookableresourcebooking_createdby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresourcebooking_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_bookableresource")]
        public IEnumerable<BookableResource> user_bookableresource {
            get {
                return GetRelatedEntities<BookableResource>("user_bookableresource", null);
            }
            set {
                SetRelatedEntities("user_bookableresource", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresource_modifiedonbehalfby")]
        public IEnumerable<BookableResource> lk_bookableresource_modifiedonbehalfby {
            get {
                return GetRelatedEntities<BookableResource>("lk_bookableresource_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresource_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresource_modifiedby")]
        public IEnumerable<BookableResource> lk_bookableresource_modifiedby {
            get {
                return GetRelatedEntities<BookableResource>("lk_bookableresource_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresource_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresource_createdonbehalfby")]
        public IEnumerable<BookableResource> lk_bookableresource_createdonbehalfby {
            get {
                return GetRelatedEntities<BookableResource>("lk_bookableresource_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresource_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_bookableresource_createdby")]
        public IEnumerable<BookableResource> lk_bookableresource_createdby {
            get {
                return GetRelatedEntities<BookableResource>("lk_bookableresource_createdby", null);
            }
            set {
                SetRelatedEntities("lk_bookableresource_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("mailbox_regarding_systemuser")]
        public IEnumerable<Mailbox> mailbox_regarding_systemuser {
            get {
                return GetRelatedEntities<Mailbox>("mailbox_regarding_systemuser", null);
            }
            set {
                SetRelatedEntities("mailbox_regarding_systemuser", null, value);
            }
        }
        
        [RelationshipSchemaName("user_mailbox")]
        public IEnumerable<Mailbox> user_mailbox {
            get {
                return GetRelatedEntities<Mailbox>("user_mailbox", null);
            }
            set {
                SetRelatedEntities("user_mailbox", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mailbox_modifiedonbehalfby")]
        public IEnumerable<Mailbox> lk_mailbox_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Mailbox>("lk_mailbox_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mailbox_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mailbox_modifiedby")]
        public IEnumerable<Mailbox> lk_mailbox_modifiedby {
            get {
                return GetRelatedEntities<Mailbox>("lk_mailbox_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_mailbox_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mailbox_createdonbehalfby")]
        public IEnumerable<Mailbox> lk_mailbox_createdonbehalfby {
            get {
                return GetRelatedEntities<Mailbox>("lk_mailbox_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_mailbox_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_mailbox_createdby")]
        public IEnumerable<Mailbox> lk_mailbox_createdby {
            get {
                return GetRelatedEntities<Mailbox>("lk_mailbox_createdby", null);
            }
            set {
                SetRelatedEntities("lk_mailbox_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_emailserverprofile_modifiedonbehalfby")]
        public IEnumerable<EmailServerProfile> lk_emailserverprofile_modifiedonbehalfby {
            get {
                return GetRelatedEntities<EmailServerProfile>("lk_emailserverprofile_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_emailserverprofile_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_emailserverprofile_createdonbehalfby")]
        public IEnumerable<EmailServerProfile> lk_emailserverprofile_createdonbehalfby {
            get {
                return GetRelatedEntities<EmailServerProfile>("lk_emailserverprofile_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_emailserverprofile_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_goal_goalowner")]
        public IEnumerable<Goal> user_goal_goalowner {
            get {
                return GetRelatedEntities<Goal>("user_goal_goalowner", null);
            }
            set {
                SetRelatedEntities("user_goal_goalowner", null, value);
            }
        }
        
        [RelationshipSchemaName("user_goal")]
        public IEnumerable<Goal> user_goal {
            get {
                return GetRelatedEntities<Goal>("user_goal", null);
            }
            set {
                SetRelatedEntities("user_goal", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_goal_modifiedonbehalfby")]
        public IEnumerable<Goal> lk_goal_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Goal>("lk_goal_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_goal_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_goal_modifiedby")]
        public IEnumerable<Goal> lk_goal_modifiedby {
            get {
                return GetRelatedEntities<Goal>("lk_goal_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_goal_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_goal_createdonbehalfby")]
        public IEnumerable<Goal> lk_goal_createdonbehalfby {
            get {
                return GetRelatedEntities<Goal>("lk_goal_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_goal_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_goal_createdby")]
        public IEnumerable<Goal> lk_goal_createdby {
            get {
                return GetRelatedEntities<Goal>("lk_goal_createdby", null);
            }
            set {
                SetRelatedEntities("lk_goal_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_entitlement")]
        public IEnumerable<Entitlement> user_entitlement {
            get {
                return GetRelatedEntities<Entitlement>("user_entitlement", null);
            }
            set {
                SetRelatedEntities("user_entitlement", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_entitlement_modifiedonbehalfby")]
        public IEnumerable<Entitlement> lk_entitlement_modifiedonbehalfby {
            get {
                return GetRelatedEntities<Entitlement>("lk_entitlement_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_entitlement_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_entitlement_modifiedby")]
        public IEnumerable<Entitlement> lk_entitlement_modifiedby {
            get {
                return GetRelatedEntities<Entitlement>("lk_entitlement_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_entitlement_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_entitlement_createdonbehalfby")]
        public IEnumerable<Entitlement> lk_entitlement_createdonbehalfby {
            get {
                return GetRelatedEntities<Entitlement>("lk_entitlement_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_entitlement_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_entitlement_createdby")]
        public IEnumerable<Entitlement> lk_entitlement_createdby {
            get {
                return GetRelatedEntities<Entitlement>("lk_entitlement_createdby", null);
            }
            set {
                SetRelatedEntities("lk_entitlement_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("user_sharepointdocumentlocation")]
        public IEnumerable<SharePointDocumentLocation> user_sharepointdocumentlocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("user_sharepointdocumentlocation", null);
            }
            set {
                SetRelatedEntities("user_sharepointdocumentlocation", null, value);
            }
        }
        
        [RelationshipSchemaName("user_sharepointsite")]
        public IEnumerable<SharePointSite> user_sharepointsite {
            get {
                return GetRelatedEntities<SharePointSite>("user_sharepointsite", null);
            }
            set {
                SetRelatedEntities("user_sharepointsite", null, value);
            }
        }
        
        [RelationshipSchemaName("user_knowledgearticle")]
        public IEnumerable<KnowledgeArticle> user_knowledgearticle {
            get {
                return GetRelatedEntities<KnowledgeArticle>("user_knowledgearticle", null);
            }
            set {
                SetRelatedEntities("user_knowledgearticle", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_knowledgearticle_modifiedonbehalfby")]
        public IEnumerable<KnowledgeArticle> lk_knowledgearticle_modifiedonbehalfby {
            get {
                return GetRelatedEntities<KnowledgeArticle>("lk_knowledgearticle_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_knowledgearticle_modifiedonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_knowledgearticle_modifiedby")]
        public IEnumerable<KnowledgeArticle> lk_knowledgearticle_modifiedby {
            get {
                return GetRelatedEntities<KnowledgeArticle>("lk_knowledgearticle_modifiedby", null);
            }
            set {
                SetRelatedEntities("lk_knowledgearticle_modifiedby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_knowledgearticle_createdonbehalfby")]
        public IEnumerable<KnowledgeArticle> lk_knowledgearticle_createdonbehalfby {
            get {
                return GetRelatedEntities<KnowledgeArticle>("lk_knowledgearticle_createdonbehalfby", null);
            }
            set {
                SetRelatedEntities("lk_knowledgearticle_createdonbehalfby", null, value);
            }
        }
        
        [RelationshipSchemaName("lk_knowledgearticle_createdby")]
        public IEnumerable<KnowledgeArticle> lk_knowledgearticle_createdby {
            get {
                return GetRelatedEntities<KnowledgeArticle>("lk_knowledgearticle_createdby", null);
            }
            set {
                SetRelatedEntities("lk_knowledgearticle_createdby", null, value);
            }
        }
        
        public static SystemUser Retrieve(IOrganizationService service, Guid id, params Expression<Func<SystemUser,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Generic activity representing work needed to be done.</para>
    /// <para>Display Name: Task</para>
    /// </summary>
    [EntityLogicalName("task")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Task : ExtendedEntity<TaskState, Task_StatusCode> {
        
        public const string EntityLogicalName = "task";
        
        public const int EntityTypeCode = 4212;
        
        public Task() : 
                base(EntityLogicalName) {
        }
        
        public Task(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("subject");
            }
        }
        
        [AttributeLogicalName("activityid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("activityid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the task.</para>
        /// <para>Display Name: Task</para>
        /// </summary>
        [AttributeLogicalName("activityid")]
        public Guid? ActivityId {
            get {
                return GetAttributeValue<Guid?>("activityid");
            }
            set {
                SetId("activityid", value);
            }
        }
        
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type a short description about the objective or primary topic of the task.</para>
        /// <para>Display Name: Subject</para>
        /// </summary>
        [AttributeLogicalName("subject")]
        public string Subject {
            get {
                return GetAttributeValue<string>("subject");
            }
            set {
                SetAttributeValue("subject", value);
            }
        }
        
        /// <summary>
        /// <para>Type the number of minutes spent on the task. The duration is used in reporting.</para>
        /// <para>Display Name: Duration</para>
        /// </summary>
        [AttributeLogicalName("actualdurationminutes")]
        public int? ActualDurationMinutes {
            get {
                return GetAttributeValue<int?>("actualdurationminutes");
            }
            set {
                SetAttributeValue("actualdurationminutes", value);
            }
        }
        
        /// <summary>
        /// <para>Select the task's status.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Task_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Task_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Due Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledend")]
        public DateTime? ScheduledEnd {
            get {
                return GetAttributeValue<DateTime?>("scheduledend");
            }
            set {
                SetAttributeValue("scheduledend", value);
            }
        }
        
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName {
            get {
                return GetAttributeValue<string>("slainvokedidname");
            }
        }
        
        /// <summary>
        /// <para>Information regarding whether the activity is a regular activity type or event type.</para>
        /// <para>Display Name: Is Regular Activity</para>
        /// </summary>
        [AttributeLogicalName("isregularactivity")]
        public bool? IsRegularActivity {
            get {
                return GetAttributeValue<bool?>("isregularactivity");
            }
        }
        
        /// <summary>
        /// <para>Shows the record owner's business unit.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>Enter the actual end date and time of the task. By default, it displays when the activity was completed or canceled.</para>
        /// <para>Display Name: Actual End</para>
        /// </summary>
        [AttributeLogicalName("actualend")]
        public DateTime? ActualEnd {
            get {
                return GetAttributeValue<DateTime?>("actualend");
            }
            set {
                SetAttributeValue("actualend", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user that owns the task.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Type the percentage complete value for the task to track tasks to completion.</para>
        /// <para>Display Name: Percent Complete</para>
        /// </summary>
        [AttributeLogicalName("percentcomplete")]
        public int? PercentComplete {
            get {
                return GetAttributeValue<int?>("percentcomplete");
            }
            set {
                SetAttributeValue("percentcomplete", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service that is associated with this activity.</para>
        /// <para>Display Name: Service</para>
        /// </summary>
        [AttributeLogicalName("serviceid")]
        public EntityReference ServiceId {
            get {
                return GetAttributeValue<EntityReference>("serviceid");
            }
            set {
                SetAttributeValue("serviceid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Last SLA that was applied to this Task. This field is for internal use only.</para>
        /// <para>Display Name: Last SLA applied</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId {
            get {
                return GetAttributeValue<EntityReference>("slainvokedid");
            }
        }
        
        /// <summary>
        /// <para>Choose the local currency for the record to make sure budgets are reported in the correct currency.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Contains the date and time stamp of the last on hold time.</para>
        /// <para>Display Name: Last On Hold Time</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime {
            get {
                return GetAttributeValue<DateTime?>("lastonholdtime");
            }
            set {
                SetAttributeValue("lastonholdtime", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team that owns the task.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        [AttributeLogicalName("slaname")]
        public string SLAName {
            get {
                return GetAttributeValue<string>("slaname");
            }
        }
        
        /// <summary>
        /// <para>Type additional information to describe the task.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a category to identify the task type, such as lead gathering or customer follow up, to tie the task to a business group or function.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public string Category {
            get {
                return GetAttributeValue<string>("category");
            }
            set {
                SetAttributeValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>Scheduled duration of the task, specified in minutes.</para>
        /// <para>Display Name: Scheduled Duration</para>
        /// </summary>
        [AttributeLogicalName("scheduleddurationminutes")]
        public int? ScheduledDurationMinutes {
            get {
                return GetAttributeValue<int?>("scheduleddurationminutes");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the service level agreement (SLA) that you want to apply to the Task record.</para>
        /// <para>Display Name: SLA</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId {
            get {
                return GetAttributeValue<EntityReference>("slaid");
            }
            set {
                SetAttributeValue("slaid", value);
            }
        }
        
        /// <summary>
        /// <para>Time zone code that was in use when the record was created.</para>
        /// <para>Display Name: UTC Conversion Time Zone Code</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode {
            get {
                return GetAttributeValue<int?>("utcconversiontimezonecode");
            }
            set {
                SetAttributeValue("utcconversiontimezonecode", value);
            }
        }
        
        /// <summary>
        /// <para>Type of activity.</para>
        /// <para>Display Name: Activity Type</para>
        /// </summary>
        [AttributeLogicalName("activitytypecode")]
        public string ActivityTypeCode {
            get {
                return GetAttributeValue<string>("activitytypecode");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Additional Parameters</para>
        /// </summary>
        [AttributeLogicalName("activityadditionalparams")]
        public string ActivityAdditionalParams {
            get {
                return GetAttributeValue<string>("activityadditionalparams");
            }
            set {
                SetAttributeValue("activityadditionalparams", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectidname")]
        public string RegardingObjectIdName {
            get {
                return GetAttributeValue<string>("regardingobjectidname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Time Zone Rule Version Number</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber {
            get {
                return GetAttributeValue<int?>("timezoneruleversionnumber");
            }
            set {
                SetAttributeValue("timezoneruleversionnumber", value);
            }
        }
        
        /// <summary>
        /// <para>Shows whether the task is open, completed, or canceled. Completed and canceled tasks are read-only and can't be edited.</para>
        /// <para>Display Name: Activity Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public TaskState? StateCode {
            get {
                return GetOptionSetValue<TaskState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the object with which the task is associated.</para>
        /// <para>Display Name: Regarding</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Type a subcategory to identify the task type and relate the activity to a specific product, sales region, business group, or other function.</para>
        /// <para>Display Name: Sub-Category</para>
        /// </summary>
        [AttributeLogicalName("subcategory")]
        public string Subcategory {
            get {
                return GetAttributeValue<string>("subcategory");
            }
            set {
                SetAttributeValue("subcategory", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Shows who last updated the record on behalf of another user.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Subscription</para>
        /// </summary>
        [AttributeLogicalName("subscriptionid")]
        public Guid? SubscriptionId {
            get {
                return GetAttributeValue<Guid?>("subscriptionid");
            }
            set {
                SetAttributeValue("subscriptionid", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the actual start date and time for the task. By default, it displays when the task was created.</para>
        /// <para>Display Name: Actual Start</para>
        /// </summary>
        [AttributeLogicalName("actualstart")]
        public DateTime? ActualStart {
            get {
                return GetAttributeValue<DateTime?>("actualstart");
            }
            set {
                SetAttributeValue("actualstart", value);
            }
        }
        
        /// <summary>
        /// <para>Enter the expected due date and time.</para>
        /// <para>Display Name: Start Date</para>
        /// </summary>
        [AttributeLogicalName("scheduledstart")]
        public DateTime? ScheduledStart {
            get {
                return GetAttributeValue<DateTime?>("scheduledstart");
            }
            set {
                SetAttributeValue("scheduledstart", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Select the priority so that preferred customers or critical issues are handled quickly.</para>
        /// <para>Display Name: Priority</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public Task_PriorityCode? PriorityCode {
            get {
                return GetOptionSetValue<Task_PriorityCode>("prioritycode");
            }
            set {
                SetOptionSetValue("prioritycode", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Shows how long, in minutes, that the record was on hold.</para>
        /// <para>Display Name: On Hold Time (Minutes)</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime {
            get {
                return GetAttributeValue<int?>("onholdtime");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Shows who created the record on behalf of another user.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Assigned Task Unique Id</para>
        /// <para>Display Name: Assigned Task Unique Id</para>
        /// </summary>
        [AttributeLogicalName("crmtaskassigneduniqueid")]
        public Guid? CrmTaskAssignedUniqueId {
            get {
                return GetAttributeValue<Guid?>("crmtaskassigneduniqueid");
            }
            set {
                SetAttributeValue("crmtaskassigneduniqueid", value);
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Information which specifies if the task was created from a workflow rule.</para>
        /// <para>Display Name: Is Workflow Created</para>
        /// </summary>
        [AttributeLogicalName("isworkflowcreated")]
        public bool? IsWorkflowCreated {
            get {
                return GetAttributeValue<bool?>("isworkflowcreated");
            }
            set {
                SetAttributeValue("isworkflowcreated", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics CRM options.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        /// <summary>
        /// <para>Version number of the task.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        /// <summary>
        /// <para>Information which specifies whether the task was billed as part of resolving a case.</para>
        /// <para>Display Name: Is Billed</para>
        /// </summary>
        [AttributeLogicalName("isbilled")]
        public bool? IsBilled {
            get {
                return GetAttributeValue<bool?>("isbilled");
            }
            set {
                SetAttributeValue("isbilled", value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("msdyn_postalbum_Tasks")]
        public msdyn_PostAlbum msdyn_postalbum_Tasks {
            get {
                return GetRelatedEntity<msdyn_PostAlbum>("msdyn_postalbum_Tasks", null);
            }
            set {
                SetRelatedEntity("msdyn_postalbum_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_event_Tasks")]
        public dg_event dg_event_Tasks {
            get {
                return GetRelatedEntity<dg_event>("dg_event_Tasks", null);
            }
            set {
                SetRelatedEntity("dg_event_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("dg_participant_Tasks")]
        public dg_participant dg_participant_Tasks {
            get {
                return GetRelatedEntity<dg_participant>("dg_participant_Tasks", null);
            }
            set {
                SetRelatedEntity("dg_participant_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_task_modifiedonbehalfby")]
        public SystemUser lk_task_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_task_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("slaid")]
        [RelationshipSchemaName("manualsla_task")]
        public SLA manualsla_task {
            get {
                return GetRelatedEntity<SLA>("manualsla_task", null);
            }
            set {
                SetRelatedEntity("manualsla_task", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contract_Tasks")]
        public Contract Contract_Tasks {
            get {
                return GetRelatedEntity<Contract>("Contract_Tasks", null);
            }
            set {
                SetRelatedEntity("Contract_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Quote_Tasks")]
        public Quote Quote_Tasks {
            get {
                return GetRelatedEntity<Quote>("Quote_Tasks", null);
            }
            set {
                SetRelatedEntity("Quote_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("slainvokedid")]
        [RelationshipSchemaName("sla_task")]
        public SLA sla_task {
            get {
                return GetRelatedEntity<SLA>("sla_task", null);
            }
            set {
                SetRelatedEntity("sla_task", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Lead_Tasks")]
        public Lead Lead_Tasks {
            get {
                return GetRelatedEntity<Lead>("Lead_Tasks", null);
            }
            set {
                SetRelatedEntity("Lead_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Incident_Tasks")]
        public Incident Incident_Tasks {
            get {
                return GetRelatedEntity<Incident>("Incident_Tasks", null);
            }
            set {
                SetRelatedEntity("Incident_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_task_modifiedby")]
        public SystemUser lk_task_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_task_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("CampaignActivity_Tasks")]
        public CampaignActivity CampaignActivity_Tasks {
            get {
                return GetRelatedEntity<CampaignActivity>("CampaignActivity_Tasks", null);
            }
            set {
                SetRelatedEntity("CampaignActivity_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Contact_Tasks")]
        public Contact Contact_Tasks {
            get {
                return GetRelatedEntity<Contact>("Contact_Tasks", null);
            }
            set {
                SetRelatedEntity("Contact_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Account_Tasks")]
        public Account Account_Tasks {
            get {
                return GetRelatedEntity<Account>("Account_Tasks", null);
            }
            set {
                SetRelatedEntity("Account_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Campaign_Tasks")]
        public Campaign Campaign_Tasks {
            get {
                return GetRelatedEntity<Campaign>("Campaign_Tasks", null);
            }
            set {
                SetRelatedEntity("Campaign_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("activityid")]
        [RelationshipSchemaName("activity_pointer_task")]
        public ActivityPointer activity_pointer_task {
            get {
                return GetRelatedEntity<ActivityPointer>("activity_pointer_task", null);
            }
            set {
                SetRelatedEntity("activity_pointer_task", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("SalesOrder_Tasks")]
        public SalesOrder SalesOrder_Tasks {
            get {
                return GetRelatedEntity<SalesOrder>("SalesOrder_Tasks", null);
            }
            set {
                SetRelatedEntity("SalesOrder_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_task_createdonbehalfby")]
        public SystemUser lk_task_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_task_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_task")]
        public Team team_task {
            get {
                return GetRelatedEntity<Team>("team_task", null);
            }
            set {
                SetRelatedEntity("team_task", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("KnowledgeArticle_Tasks")]
        public KnowledgeArticle KnowledgeArticle_Tasks {
            get {
                return GetRelatedEntity<KnowledgeArticle>("KnowledgeArticle_Tasks", null);
            }
            set {
                SetRelatedEntity("KnowledgeArticle_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("user_task")]
        public SystemUser user_task {
            get {
                return GetRelatedEntity<SystemUser>("user_task", null);
            }
            set {
                SetRelatedEntity("user_task", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_task_createdby")]
        public SystemUser lk_task_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_task_createdby", null);
            }
            set {
                SetRelatedEntity("lk_task_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Invoice_Tasks")]
        public Invoice Invoice_Tasks {
            get {
                return GetRelatedEntity<Invoice>("Invoice_Tasks", null);
            }
            set {
                SetRelatedEntity("Invoice_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("Opportunity_Tasks")]
        public Opportunity Opportunity_Tasks {
            get {
                return GetRelatedEntity<Opportunity>("Opportunity_Tasks", null);
            }
            set {
                SetRelatedEntity("Opportunity_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Task")]
        public TransactionCurrency TransactionCurrency_Task {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Task", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Task", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_task_activities")]
        public BusinessUnit business_unit_task_activities {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_task_activities", null);
            }
            set {
                SetRelatedEntity("business_unit_task_activities", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebookingheader_Tasks")]
        public BookableResourceBookingHeader bookableresourcebookingheader_Tasks {
            get {
                return GetRelatedEntity<BookableResourceBookingHeader>("bookableresourcebookingheader_Tasks", null);
            }
            set {
                SetRelatedEntity("bookableresourcebookingheader_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("bookableresourcebooking_Tasks")]
        public BookableResourceBooking bookableresourcebooking_Tasks {
            get {
                return GetRelatedEntity<BookableResourceBooking>("bookableresourcebooking_Tasks", null);
            }
            set {
                SetRelatedEntity("bookableresourcebooking_Tasks", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("entitlement_Tasks")]
        public Entitlement entitlement_Tasks {
            get {
                return GetRelatedEntity<Entitlement>("entitlement_Tasks", null);
            }
            set {
                SetRelatedEntity("entitlement_Tasks", null, value);
            }
        }
        
        [RelationshipSchemaName("task_connections1")]
        public IEnumerable<Connection> task_connections1 {
            get {
                return GetRelatedEntities<Connection>("task_connections1", null);
            }
            set {
                SetRelatedEntities("task_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("task_activity_parties")]
        public IEnumerable<ActivityParty> task_activity_parties {
            get {
                return GetRelatedEntities<ActivityParty>("task_activity_parties", null);
            }
            set {
                SetRelatedEntities("task_activity_parties", null, value);
            }
        }
        
        [RelationshipSchemaName("task_connections2")]
        public IEnumerable<Connection> task_connections2 {
            get {
                return GetRelatedEntities<Connection>("task_connections2", null);
            }
            set {
                SetRelatedEntities("task_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("Task_QueueItem")]
        public IEnumerable<QueueItem> Task_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("Task_QueueItem", null);
            }
            set {
                SetRelatedEntities("Task_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("Task_SyncErrors")]
        public IEnumerable<SyncError> Task_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Task_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Task_SyncErrors", null, value);
            }
        }
        
        public static Task Retrieve(IOrganizationService service, Guid id, params Expression<Func<Task,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Collection of system users that routinely collaborate. Teams can be used to simplify record sharing and provide team members with common access to organization data when team members belong to different Business Units.</para>
    /// <para>Display Name: Team</para>
    /// </summary>
    [EntityLogicalName("team")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Team : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "team";
        
        public const int EntityTypeCode = 9;
        
        public Team() : 
                base(EntityLogicalName) {
        }
        
        public Team(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("teamid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("teamid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier for the team.</para>
        /// <para>Display Name: Team</para>
        /// </summary>
        [AttributeLogicalName("teamid")]
        public Guid? TeamId {
            get {
                return GetAttributeValue<Guid?>("teamid");
            }
            set {
                SetId("teamid", value);
            }
        }
        
        /// <summary>
        /// <para>Information about whether the team is a default business unit team.</para>
        /// <para>Display Name: Is Default</para>
        /// </summary>
        [AttributeLogicalName("isdefault")]
        public bool? IsDefault {
            get {
                return GetAttributeValue<bool?>("isdefault");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("organizationidname")]
        public string OrganizationIdName {
            get {
                return GetAttributeValue<string>("organizationidname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the team was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the default queue for the team.</para>
        /// <para>Display Name: Default Queue</para>
        /// </summary>
        [AttributeLogicalName("queueid")]
        public EntityReference QueueId {
            get {
                return GetAttributeValue<EntityReference>("queueid");
            }
            set {
                SetAttributeValue("queueid", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the team was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Shows the team template that is associated with the team.</para>
        /// <para>Display Name: Team Template Identifier</para>
        /// </summary>
        [AttributeLogicalName("teamtemplateid")]
        public EntityReference TeamTemplateId {
            get {
                return GetAttributeValue<EntityReference>("teamtemplateid");
            }
            set {
                SetAttributeValue("teamtemplateid", value);
            }
        }
        
        /// <summary>
        /// <para>Pronunciation of the full name of the team, written in phonetic hiragana or katakana characters.</para>
        /// <para>Display Name: Yomi Name</para>
        /// </summary>
        [AttributeLogicalName("yominame")]
        public string YomiName {
            get {
                return GetAttributeValue<string>("yominame");
            }
            set {
                SetAttributeValue("yominame", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid? ProcessId {
            get {
                return GetAttributeValue<Guid?>("processid");
            }
            set {
                SetAttributeValue("processid", value);
            }
        }
        
        /// <summary>
        /// <para>Exchange rate for the currency associated with the team with respect to the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
        }
        
        /// <summary>
        /// <para>Select the team type.</para>
        /// <para>Display Name: Team Type</para>
        /// </summary>
        [AttributeLogicalName("teamtype")]
        public Team_TeamType? TeamType {
            get {
                return GetOptionSetValue<Team_TeamType>("teamtype");
            }
            set {
                SetOptionSetValue("teamtype", value);
            }
        }
        
        [AttributeLogicalName("administratoridname")]
        public string AdministratorIdName {
            get {
                return GetAttributeValue<string>("administratoridname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the team.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the team.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Version number of the team.</para>
        /// <para>Display Name: Version number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Select whether the team will be managed by the system.</para>
        /// <para>Display Name: Is System Managed</para>
        /// </summary>
        [AttributeLogicalName("systemmanaged")]
        public bool? SystemManaged {
            get {
                return GetAttributeValue<bool?>("systemmanaged");
            }
        }
        
        /// <summary>
        /// <para>Email address for the team.</para>
        /// <para>Display Name: Email</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string EMailAddress {
            get {
                return GetAttributeValue<string>("emailaddress");
            }
            set {
                SetAttributeValue("emailaddress", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit with which the team is associated.</para>
        /// <para>Display Name: Business Unit</para>
        /// </summary>
        [AttributeLogicalName("businessunitid")]
        public EntityReference BusinessUnitId {
            get {
                return GetAttributeValue<EntityReference>("businessunitid");
            }
            set {
                SetAttributeValue("businessunitid", value);
            }
        }
        
        [AttributeLogicalName("businessunitidname")]
        public string BusinessUnitIdName {
            get {
                return GetAttributeValue<string>("businessunitidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the team.</para>
        /// <para>Display Name: Organization </para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public Guid? OrganizationId {
            get {
                return GetAttributeValue<Guid?>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>Type of the associated record for team - used for system managed access teams only.</para>
        /// <para>Display Name: Regarding Object Type</para>
        /// </summary>
        [AttributeLogicalName("regardingobjecttypecode")]
        public string RegardingObjectTypeCode {
            get {
                return GetAttributeValue<string>("regardingobjecttypecode");
            }
            set {
                SetAttributeValue("regardingobjecttypecode", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the ID of the stage.</para>
        /// <para>Display Name: Process Stage</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid? StageId {
            get {
                return GetAttributeValue<Guid?>("stageid");
            }
            set {
                SetAttributeValue("stageid", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the team.</para>
        /// <para>Display Name: Team Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Choose the record that the team relates to.</para>
        /// <para>Display Name: Regarding Object Id</para>
        /// </summary>
        [AttributeLogicalName("regardingobjectid")]
        public EntityReference RegardingObjectId {
            get {
                return GetAttributeValue<EntityReference>("regardingobjectid");
            }
            set {
                SetAttributeValue("regardingobjectid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the currency associated with the team.</para>
        /// <para>Display Name: Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId {
            get {
                return GetAttributeValue<EntityReference>("transactioncurrencyid");
            }
            set {
                SetAttributeValue("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the team.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("queueidname")]
        public string QueueIdName {
            get {
                return GetAttributeValue<string>("queueidname");
            }
        }
        
        /// <summary>
        /// <para>Description of the team.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user primary responsible for the team.</para>
        /// <para>Display Name: Administrator</para>
        /// </summary>
        [AttributeLogicalName("administratorid")]
        public EntityReference AdministratorId {
            get {
                return GetAttributeValue<EntityReference>("administratorid");
            }
            set {
                SetAttributeValue("administratorid", value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName {
            get {
                return GetAttributeValue<string>("transactioncurrencyidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the team.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Traversed Path</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath {
            get {
                return GetAttributeValue<string>("traversedpath");
            }
            set {
                SetAttributeValue("traversedpath", value);
            }
        }
        
        [RelationshipSchemaName("teammembership_association")]
        public IEnumerable<SystemUser> teammembership_association {
            get {
                return GetRelatedEntities<SystemUser>("teammembership_association", null);
            }
            set {
                SetRelatedEntities("teammembership_association", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_team_createdonbehalfby")]
        public SystemUser lk_team_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_team_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_team_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_team_modifiedonbehalfby")]
        public SystemUser lk_team_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_team_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_team_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("organizationid")]
        [RelationshipSchemaName("organization_teams")]
        public Organization organization_teams {
            get {
                return GetRelatedEntity<Organization>("organization_teams", null);
            }
            set {
                SetRelatedEntity("organization_teams", null, value);
            }
        }
        
        [AttributeLogicalName("businessunitid")]
        [RelationshipSchemaName("business_unit_teams")]
        public BusinessUnit business_unit_teams {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_teams", null);
            }
            set {
                SetRelatedEntity("business_unit_teams", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("opportunity_Teams")]
        public Opportunity opportunity_Teams {
            get {
                return GetRelatedEntity<Opportunity>("opportunity_Teams", null);
            }
            set {
                SetRelatedEntity("opportunity_Teams", null, value);
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        [RelationshipSchemaName("TransactionCurrency_Team")]
        public TransactionCurrency TransactionCurrency_Team {
            get {
                return GetRelatedEntity<TransactionCurrency>("TransactionCurrency_Team", null);
            }
            set {
                SetRelatedEntity("TransactionCurrency_Team", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_teambase_createdby")]
        public SystemUser lk_teambase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_teambase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_teambase_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_teambase_modifiedby")]
        public SystemUser lk_teambase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_teambase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_teambase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("administratorid")]
        [RelationshipSchemaName("lk_teambase_administratorid")]
        public SystemUser lk_teambase_administratorid {
            get {
                return GetRelatedEntity<SystemUser>("lk_teambase_administratorid", null);
            }
            set {
                SetRelatedEntity("lk_teambase_administratorid", null, value);
            }
        }
        
        [AttributeLogicalName("regardingobjectid")]
        [RelationshipSchemaName("knowledgearticle_Teams")]
        public KnowledgeArticle knowledgearticle_Teams {
            get {
                return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_Teams", null);
            }
            set {
                SetRelatedEntity("knowledgearticle_Teams", null, value);
            }
        }
        
        [RelationshipSchemaName("team_msdyn_wallsavedqueryusersettings")]
        public IEnumerable<msdyn_wallsavedqueryusersettings> team_msdyn_wallsavedqueryusersettings {
            get {
                return GetRelatedEntities<msdyn_wallsavedqueryusersettings>("team_msdyn_wallsavedqueryusersettings", null);
            }
            set {
                SetRelatedEntities("team_msdyn_wallsavedqueryusersettings", null, value);
            }
        }
        
        [RelationshipSchemaName("team_msdyn_postalbum")]
        public IEnumerable<msdyn_PostAlbum> team_msdyn_postalbum {
            get {
                return GetRelatedEntities<msdyn_PostAlbum>("team_msdyn_postalbum", null);
            }
            set {
                SetRelatedEntities("team_msdyn_postalbum", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_bus")]
        public IEnumerable<dg_bus> team_dg_bus {
            get {
                return GetRelatedEntities<dg_bus>("team_dg_bus", null);
            }
            set {
                SetRelatedEntities("team_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_mild")]
        public IEnumerable<dg_mild> team_dg_mild {
            get {
                return GetRelatedEntities<dg_mild>("team_dg_mild", null);
            }
            set {
                SetRelatedEntities("team_dg_mild", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_child")]
        public IEnumerable<dg_child> team_dg_child {
            get {
                return GetRelatedEntities<dg_child>("team_dg_child", null);
            }
            set {
                SetRelatedEntities("team_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_man")]
        public IEnumerable<dg_man> team_dg_man {
            get {
                return GetRelatedEntities<dg_man>("team_dg_man", null);
            }
            set {
                SetRelatedEntities("team_dg_man", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_tooth")]
        public IEnumerable<dg_tooth> team_dg_tooth {
            get {
                return GetRelatedEntities<dg_tooth>("team_dg_tooth", null);
            }
            set {
                SetRelatedEntities("team_dg_tooth", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_field")]
        public IEnumerable<dg_field> team_dg_field {
            get {
                return GetRelatedEntities<dg_field>("team_dg_field", null);
            }
            set {
                SetRelatedEntities("team_dg_field", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_sheep")]
        public IEnumerable<dg_sheep> team_dg_sheep {
            get {
                return GetRelatedEntities<dg_sheep>("team_dg_sheep", null);
            }
            set {
                SetRelatedEntities("team_dg_sheep", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_participant")]
        public IEnumerable<dg_participant> team_dg_participant {
            get {
                return GetRelatedEntities<dg_participant>("team_dg_participant", null);
            }
            set {
                SetRelatedEntities("team_dg_participant", null, value);
            }
        }
        
        [RelationshipSchemaName("team_dg_event")]
        public IEnumerable<dg_event> team_dg_event {
            get {
                return GetRelatedEntities<dg_event>("team_dg_event", null);
            }
            set {
                SetRelatedEntities("team_dg_event", null, value);
            }
        }
        
        [RelationshipSchemaName("team_workflow")]
        public IEnumerable<Workflow> team_workflow {
            get {
                return GetRelatedEntities<Workflow>("team_workflow", null);
            }
            set {
                SetRelatedEntities("team_workflow", null, value);
            }
        }
        
        [RelationshipSchemaName("team_fax")]
        public IEnumerable<Fax> team_fax {
            get {
                return GetRelatedEntities<Fax>("team_fax", null);
            }
            set {
                SetRelatedEntities("team_fax", null, value);
            }
        }
        
        [RelationshipSchemaName("team_email")]
        public IEnumerable<Email> team_email {
            get {
                return GetRelatedEntities<Email>("team_email", null);
            }
            set {
                SetRelatedEntities("team_email", null, value);
            }
        }
        
        [RelationshipSchemaName("team_incidents")]
        public IEnumerable<Incident> team_incidents {
            get {
                return GetRelatedEntities<Incident>("team_incidents", null);
            }
            set {
                SetRelatedEntities("team_incidents", null, value);
            }
        }
        
        [RelationshipSchemaName("team_accounts")]
        public IEnumerable<Account> team_accounts {
            get {
                return GetRelatedEntities<Account>("team_accounts", null);
            }
            set {
                SetRelatedEntities("team_accounts", null, value);
            }
        }
        
        [RelationshipSchemaName("team_activity")]
        public IEnumerable<ActivityPointer> team_activity {
            get {
                return GetRelatedEntities<ActivityPointer>("team_activity", null);
            }
            set {
                SetRelatedEntities("team_activity", null, value);
            }
        }
        
        [RelationshipSchemaName("team_task")]
        public IEnumerable<Task> team_task {
            get {
                return GetRelatedEntities<Task>("team_task", null);
            }
            set {
                SetRelatedEntities("team_task", null, value);
            }
        }
        
        [RelationshipSchemaName("Team_SyncErrors")]
        public IEnumerable<SyncError> Team_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Team_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Team_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("team_list")]
        public IEnumerable<List> team_list {
            get {
                return GetRelatedEntities<List>("team_list", null);
            }
            set {
                SetRelatedEntities("team_list", null, value);
            }
        }
        
        [RelationshipSchemaName("team_DynamicPropertyInstance")]
        public IEnumerable<DynamicPropertyInstance> team_DynamicPropertyInstance {
            get {
                return GetRelatedEntities<DynamicPropertyInstance>("team_DynamicPropertyInstance", null);
            }
            set {
                SetRelatedEntities("team_DynamicPropertyInstance", null, value);
            }
        }
        
        [RelationshipSchemaName("team_campaignactivity")]
        public IEnumerable<CampaignActivity> team_campaignactivity {
            get {
                return GetRelatedEntities<CampaignActivity>("team_campaignactivity", null);
            }
            set {
                SetRelatedEntities("team_campaignactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("team_Campaigns")]
        public IEnumerable<Campaign> team_Campaigns {
            get {
                return GetRelatedEntities<Campaign>("team_Campaigns", null);
            }
            set {
                SetRelatedEntities("team_Campaigns", null, value);
            }
        }
        
        [RelationshipSchemaName("team_invoices")]
        public IEnumerable<Invoice> team_invoices {
            get {
                return GetRelatedEntities<Invoice>("team_invoices", null);
            }
            set {
                SetRelatedEntities("team_invoices", null, value);
            }
        }
        
        [RelationshipSchemaName("team_appointment")]
        public IEnumerable<Appointment> team_appointment {
            get {
                return GetRelatedEntities<Appointment>("team_appointment", null);
            }
            set {
                SetRelatedEntities("team_appointment", null, value);
            }
        }
        
        [RelationshipSchemaName("team_letter")]
        public IEnumerable<Letter> team_letter {
            get {
                return GetRelatedEntities<Letter>("team_letter", null);
            }
            set {
                SetRelatedEntities("team_letter", null, value);
            }
        }
        
        [RelationshipSchemaName("team_SyncError")]
        public IEnumerable<SyncError> team_SyncError {
            get {
                return GetRelatedEntities<SyncError>("team_SyncError", null);
            }
            set {
                SetRelatedEntities("team_SyncError", null, value);
            }
        }
        
        [RelationshipSchemaName("team_contacts")]
        public IEnumerable<Contact> team_contacts {
            get {
                return GetRelatedEntities<Contact>("team_contacts", null);
            }
            set {
                SetRelatedEntities("team_contacts", null, value);
            }
        }
        
        [RelationshipSchemaName("team_socialactivity")]
        public IEnumerable<SocialActivity> team_socialactivity {
            get {
                return GetRelatedEntities<SocialActivity>("team_socialactivity", null);
            }
            set {
                SetRelatedEntities("team_socialactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("team_campaignresponse")]
        public IEnumerable<CampaignResponse> team_campaignresponse {
            get {
                return GetRelatedEntities<CampaignResponse>("team_campaignresponse", null);
            }
            set {
                SetRelatedEntities("team_campaignresponse", null, value);
            }
        }
        
        [RelationshipSchemaName("team_service_appointments")]
        public IEnumerable<ServiceAppointment> team_service_appointments {
            get {
                return GetRelatedEntities<ServiceAppointment>("team_service_appointments", null);
            }
            set {
                SetRelatedEntities("team_service_appointments", null, value);
            }
        }
        
        [RelationshipSchemaName("lead_owning_team")]
        public IEnumerable<Lead> lead_owning_team {
            get {
                return GetRelatedEntities<Lead>("lead_owning_team", null);
            }
            set {
                SetRelatedEntities("lead_owning_team", null, value);
            }
        }
        
        [RelationshipSchemaName("team_quotes")]
        public IEnumerable<Quote> team_quotes {
            get {
                return GetRelatedEntities<Quote>("team_quotes", null);
            }
            set {
                SetRelatedEntities("team_quotes", null, value);
            }
        }
        
        [RelationshipSchemaName("team_orders")]
        public IEnumerable<SalesOrder> team_orders {
            get {
                return GetRelatedEntities<SalesOrder>("team_orders", null);
            }
            set {
                SetRelatedEntities("team_orders", null, value);
            }
        }
        
        [RelationshipSchemaName("team_connections1")]
        public IEnumerable<Connection> team_connections1 {
            get {
                return GetRelatedEntities<Connection>("team_connections1", null);
            }
            set {
                SetRelatedEntities("team_connections1", null, value);
            }
        }
        
        [RelationshipSchemaName("team_emailserverprofile")]
        public IEnumerable<EmailServerProfile> team_emailserverprofile {
            get {
                return GetRelatedEntities<EmailServerProfile>("team_emailserverprofile", null);
            }
            set {
                SetRelatedEntities("team_emailserverprofile", null, value);
            }
        }
        
        [RelationshipSchemaName("team_phonecall")]
        public IEnumerable<PhoneCall> team_phonecall {
            get {
                return GetRelatedEntities<PhoneCall>("team_phonecall", null);
            }
            set {
                SetRelatedEntities("team_phonecall", null, value);
            }
        }
        
        [RelationshipSchemaName("team_queueitembase_workerid")]
        public IEnumerable<QueueItem> team_queueitembase_workerid {
            get {
                return GetRelatedEntities<QueueItem>("team_queueitembase_workerid", null);
            }
            set {
                SetRelatedEntities("team_queueitembase_workerid", null, value);
            }
        }
        
        [RelationshipSchemaName("team_opportunityclose")]
        public IEnumerable<OpportunityClose> team_opportunityclose {
            get {
                return GetRelatedEntities<OpportunityClose>("team_opportunityclose", null);
            }
            set {
                SetRelatedEntities("team_opportunityclose", null, value);
            }
        }
        
        [RelationshipSchemaName("team_recurringappointmentmaster")]
        public IEnumerable<RecurringAppointmentMaster> team_recurringappointmentmaster {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("team_recurringappointmentmaster", null);
            }
            set {
                SetRelatedEntities("team_recurringappointmentmaster", null, value);
            }
        }
        
        [RelationshipSchemaName("team_service_contracts")]
        public IEnumerable<Contract> team_service_contracts {
            get {
                return GetRelatedEntities<Contract>("team_service_contracts", null);
            }
            set {
                SetRelatedEntities("team_service_contracts", null, value);
            }
        }
        
        [RelationshipSchemaName("team_goal_goalowner")]
        public IEnumerable<Goal> team_goal_goalowner {
            get {
                return GetRelatedEntities<Goal>("team_goal_goalowner", null);
            }
            set {
                SetRelatedEntities("team_goal_goalowner", null, value);
            }
        }
        
        [RelationshipSchemaName("team_opportunities")]
        public IEnumerable<Opportunity> team_opportunities {
            get {
                return GetRelatedEntities<Opportunity>("team_opportunities", null);
            }
            set {
                SetRelatedEntities("team_opportunities", null, value);
            }
        }
        
        [RelationshipSchemaName("team_slaBase")]
        public IEnumerable<SLA> team_slaBase {
            get {
                return GetRelatedEntities<SLA>("team_slaBase", null);
            }
            set {
                SetRelatedEntities("team_slaBase", null, value);
            }
        }
        
        [RelationshipSchemaName("team_connections2")]
        public IEnumerable<Connection> team_connections2 {
            get {
                return GetRelatedEntities<Connection>("team_connections2", null);
            }
            set {
                SetRelatedEntities("team_connections2", null, value);
            }
        }
        
        [RelationshipSchemaName("team_profilerule")]
        public IEnumerable<ChannelAccessProfileRule> team_profilerule {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("team_profilerule", null);
            }
            set {
                SetRelatedEntities("team_profilerule", null, value);
            }
        }
        
        [RelationshipSchemaName("team_externalparty")]
        public IEnumerable<ExternalParty> team_externalparty {
            get {
                return GetRelatedEntities<ExternalParty>("team_externalparty", null);
            }
            set {
                SetRelatedEntities("team_externalparty", null, value);
            }
        }
        
        [RelationshipSchemaName("team_channelaccessprofile")]
        public IEnumerable<ChannelAccessProfile> team_channelaccessprofile {
            get {
                return GetRelatedEntities<ChannelAccessProfile>("team_channelaccessprofile", null);
            }
            set {
                SetRelatedEntities("team_channelaccessprofile", null, value);
            }
        }
        
        [RelationshipSchemaName("team_ratingvalue")]
        public IEnumerable<RatingValue> team_ratingvalue {
            get {
                return GetRelatedEntities<RatingValue>("team_ratingvalue", null);
            }
            set {
                SetRelatedEntities("team_ratingvalue", null, value);
            }
        }
        
        [RelationshipSchemaName("team_ratingmodel")]
        public IEnumerable<RatingModel> team_ratingmodel {
            get {
                return GetRelatedEntities<RatingModel>("team_ratingmodel", null);
            }
            set {
                SetRelatedEntities("team_ratingmodel", null, value);
            }
        }
        
        [RelationshipSchemaName("team_characteristic")]
        public IEnumerable<Characteristic> team_characteristic {
            get {
                return GetRelatedEntities<Characteristic>("team_characteristic", null);
            }
            set {
                SetRelatedEntities("team_characteristic", null, value);
            }
        }
        
        [RelationshipSchemaName("team_bookingstatus")]
        public IEnumerable<BookingStatus> team_bookingstatus {
            get {
                return GetRelatedEntities<BookingStatus>("team_bookingstatus", null);
            }
            set {
                SetRelatedEntities("team_bookingstatus", null, value);
            }
        }
        
        [RelationshipSchemaName("team_bookableresourcegroup")]
        public IEnumerable<BookableResourceGroup> team_bookableresourcegroup {
            get {
                return GetRelatedEntities<BookableResourceGroup>("team_bookableresourcegroup", null);
            }
            set {
                SetRelatedEntities("team_bookableresourcegroup", null, value);
            }
        }
        
        [RelationshipSchemaName("team_bookableresourcecharacteristic")]
        public IEnumerable<BookableResourceCharacteristic> team_bookableresourcecharacteristic {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("team_bookableresourcecharacteristic", null);
            }
            set {
                SetRelatedEntities("team_bookableresourcecharacteristic", null, value);
            }
        }
        
        [RelationshipSchemaName("team_bookableresourcecategoryassn")]
        public IEnumerable<BookableResourceCategoryAssn> team_bookableresourcecategoryassn {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("team_bookableresourcecategoryassn", null);
            }
            set {
                SetRelatedEntities("team_bookableresourcecategoryassn", null, value);
            }
        }
        
        [RelationshipSchemaName("team_bookableresourcecategory")]
        public IEnumerable<BookableResourceCategory> team_bookableresourcecategory {
            get {
                return GetRelatedEntities<BookableResourceCategory>("team_bookableresourcecategory", null);
            }
            set {
                SetRelatedEntities("team_bookableresourcecategory", null, value);
            }
        }
        
        [RelationshipSchemaName("team_bookableresourcebookingheader")]
        public IEnumerable<BookableResourceBookingHeader> team_bookableresourcebookingheader {
            get {
                return GetRelatedEntities<BookableResourceBookingHeader>("team_bookableresourcebookingheader", null);
            }
            set {
                SetRelatedEntities("team_bookableresourcebookingheader", null, value);
            }
        }
        
        [RelationshipSchemaName("team_bookableresourcebooking")]
        public IEnumerable<BookableResourceBooking> team_bookableresourcebooking {
            get {
                return GetRelatedEntities<BookableResourceBooking>("team_bookableresourcebooking", null);
            }
            set {
                SetRelatedEntities("team_bookableresourcebooking", null, value);
            }
        }
        
        [RelationshipSchemaName("team_bookableresource")]
        public IEnumerable<BookableResource> team_bookableresource {
            get {
                return GetRelatedEntities<BookableResource>("team_bookableresource", null);
            }
            set {
                SetRelatedEntities("team_bookableresource", null, value);
            }
        }
        
        [RelationshipSchemaName("team_mailbox")]
        public IEnumerable<Mailbox> team_mailbox {
            get {
                return GetRelatedEntities<Mailbox>("team_mailbox", null);
            }
            set {
                SetRelatedEntities("team_mailbox", null, value);
            }
        }
        
        [RelationshipSchemaName("team_goal")]
        public IEnumerable<Goal> team_goal {
            get {
                return GetRelatedEntities<Goal>("team_goal", null);
            }
            set {
                SetRelatedEntities("team_goal", null, value);
            }
        }
        
        [RelationshipSchemaName("team_entitlement")]
        public IEnumerable<Entitlement> team_entitlement {
            get {
                return GetRelatedEntities<Entitlement>("team_entitlement", null);
            }
            set {
                SetRelatedEntities("team_entitlement", null, value);
            }
        }
        
        [RelationshipSchemaName("team_sharepointdocumentlocation")]
        public IEnumerable<SharePointDocumentLocation> team_sharepointdocumentlocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("team_sharepointdocumentlocation", null);
            }
            set {
                SetRelatedEntities("team_sharepointdocumentlocation", null, value);
            }
        }
        
        [RelationshipSchemaName("team_sharepointsite")]
        public IEnumerable<SharePointSite> team_sharepointsite {
            get {
                return GetRelatedEntities<SharePointSite>("team_sharepointsite", null);
            }
            set {
                SetRelatedEntities("team_sharepointsite", null, value);
            }
        }
        
        [RelationshipSchemaName("team_knowledgearticle")]
        public IEnumerable<KnowledgeArticle> team_knowledgearticle {
            get {
                return GetRelatedEntities<KnowledgeArticle>("team_knowledgearticle", null);
            }
            set {
                SetRelatedEntities("team_knowledgearticle", null, value);
            }
        }
        
        public static Team Retrieve(IOrganizationService service, Guid id, params Expression<Func<Team,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    [EntityLogicalName("teammembership")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class TeamMembership : ExtendedEntity<EmptyEnum, EmptyEnum> {
        
        public const string EntityLogicalName = "teammembership";
        
        public const int EntityTypeCode = 23;
        
        public TeamMembership() : 
                base(EntityLogicalName) {
        }
        
        public TeamMembership(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay(null);
            }
        }
        
        [AttributeLogicalName("teammembershipid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("teammembershipid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team membership.</para>
        /// </summary>
        [AttributeLogicalName("teammembershipid")]
        public Guid? TeamMembershipId {
            get {
                return GetAttributeValue<Guid?>("teammembershipid");
            }
            set {
                SetId("teammembershipid", value);
            }
        }
        
        [AttributeLogicalName("systemuserid")]
        public Guid? SystemUserId {
            get {
                return GetAttributeValue<Guid?>("systemuserid");
            }
        }
        
        [AttributeLogicalName("teamid")]
        public Guid? TeamId {
            get {
                return GetAttributeValue<Guid?>("teamid");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        public static TeamMembership Retrieve(IOrganizationService service, Guid id, params Expression<Func<TeamMembership,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Currency in which a financial transaction is carried out.</para>
    /// <para>Display Name: Currency</para>
    /// </summary>
    [EntityLogicalName("transactioncurrency")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class TransactionCurrency : ExtendedEntity<TransactionCurrencyState, TransactionCurrency_StatusCode> {
        
        public const string EntityLogicalName = "transactioncurrency";
        
        public const int EntityTypeCode = 9105;
        
        public TransactionCurrency() : 
                base(EntityLogicalName) {
        }
        
        public TransactionCurrency(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("currencyname");
            }
        }
        
        [AttributeLogicalName("transactioncurrencyid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("transactioncurrencyid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the transaction currency.</para>
        /// <para>Display Name: Transaction Currency</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public Guid? TransactionCurrencyId {
            get {
                return GetAttributeValue<Guid?>("transactioncurrencyid");
            }
            set {
                SetId("transactioncurrencyid", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Date and time that the record was migrated.</para>
        /// <para>Display Name: Record Created On</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn {
            get {
                return GetAttributeValue<DateTime?>("overriddencreatedon");
            }
            set {
                SetAttributeValue("overriddencreatedon", value);
            }
        }
        
        /// <summary>
        /// <para>Name of the transaction currency.</para>
        /// <para>Display Name: Currency Name</para>
        /// </summary>
        [AttributeLogicalName("currencyname")]
        public string CurrencyName {
            get {
                return GetAttributeValue<string>("currencyname");
            }
            set {
                SetAttributeValue("currencyname", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the transaction currency was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>Exchange rate between the transaction currency and the base currency.</para>
        /// <para>Display Name: Exchange Rate</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate {
            get {
                return GetAttributeValue<decimal?>("exchangerate");
            }
            set {
                SetAttributeValue("exchangerate", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the transaction currency was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the transaction currency.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the transaction currency.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>ISO currency code for the transaction currency.</para>
        /// <para>Display Name: Currency Code</para>
        /// </summary>
        [AttributeLogicalName("isocurrencycode")]
        public string ISOCurrencyCode {
            get {
                return GetAttributeValue<string>("isocurrencycode");
            }
            set {
                SetAttributeValue("isocurrencycode", value);
            }
        }
        
        /// <summary>
        /// <para>Version number of the transaction currency.</para>
        /// <para>Display Name: Version Number</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Number of decimal places that can be used for currency.</para>
        /// <para>Display Name: Currency Precision</para>
        /// </summary>
        [AttributeLogicalName("currencyprecision")]
        public int? CurrencyPrecision {
            get {
                return GetAttributeValue<int?>("currencyprecision");
            }
            set {
                SetAttributeValue("currencyprecision", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the organization associated with the transaction currency.</para>
        /// <para>Display Name: Organization</para>
        /// </summary>
        [AttributeLogicalName("organizationid")]
        public EntityReference OrganizationId {
            get {
                return GetAttributeValue<EntityReference>("organizationid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the data import or data migration that created this record.</para>
        /// <para>Display Name: Import Sequence Number</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber {
            get {
                return GetAttributeValue<int?>("importsequencenumber");
            }
            set {
                SetAttributeValue("importsequencenumber", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the transactioncurrency.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Reason for the status of the transaction currency.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public TransactionCurrency_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<TransactionCurrency_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        /// <summary>
        /// <para>Status of the transaction currency.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public TransactionCurrencyState? StateCode {
            get {
                return GetOptionSetValue<TransactionCurrencyState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Symbol for the transaction currency.</para>
        /// <para>Display Name: Currency Symbol</para>
        /// </summary>
        [AttributeLogicalName("currencysymbol")]
        public string CurrencySymbol {
            get {
                return GetAttributeValue<string>("currencysymbol");
            }
            set {
                SetAttributeValue("currencysymbol", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the transactioncurrency.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("lk_transactioncurrency_createdonbehalfby")]
        public SystemUser lk_transactioncurrency_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_transactioncurrency_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_transactioncurrency_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("organizationid")]
        [RelationshipSchemaName("organization_transactioncurrencies")]
        public Organization organization_transactioncurrencies {
            get {
                return GetRelatedEntity<Organization>("organization_transactioncurrencies", null);
            }
            set {
                SetRelatedEntity("organization_transactioncurrencies", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("lk_transactioncurrency_modifiedonbehalfby")]
        public SystemUser lk_transactioncurrency_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("lk_transactioncurrency_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("lk_transactioncurrency_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("lk_transactioncurrencybase_modifiedby")]
        public SystemUser lk_transactioncurrencybase_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("lk_transactioncurrencybase_modifiedby", null);
            }
            set {
                SetRelatedEntity("lk_transactioncurrencybase_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("lk_transactioncurrencybase_createdby")]
        public SystemUser lk_transactioncurrencybase_createdby {
            get {
                return GetRelatedEntity<SystemUser>("lk_transactioncurrencybase_createdby", null);
            }
            set {
                SetRelatedEntity("lk_transactioncurrencybase_createdby", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_dg_child")]
        public IEnumerable<dg_child> TransactionCurrency_dg_child {
            get {
                return GetRelatedEntities<dg_child>("TransactionCurrency_dg_child", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_dg_child", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_dg_bus")]
        public IEnumerable<dg_bus> TransactionCurrency_dg_bus {
            get {
                return GetRelatedEntities<dg_bus>("TransactionCurrency_dg_bus", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_dg_bus", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_account")]
        public IEnumerable<Account> transactioncurrency_account {
            get {
                return GetRelatedEntities<Account>("transactioncurrency_account", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_account", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_list")]
        public IEnumerable<List> transactioncurrency_list {
            get {
                return GetRelatedEntities<List>("transactioncurrency_list", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_list", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_RecurringAppointmentMaster")]
        public IEnumerable<RecurringAppointmentMaster> TransactionCurrency_RecurringAppointmentMaster {
            get {
                return GetRelatedEntities<RecurringAppointmentMaster>("TransactionCurrency_RecurringAppointmentMaster", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_RecurringAppointmentMaster", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_knowledgearticle")]
        public IEnumerable<KnowledgeArticle> TransactionCurrency_knowledgearticle {
            get {
                return GetRelatedEntities<KnowledgeArticle>("TransactionCurrency_knowledgearticle", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_knowledgearticle", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_ChannelAccessProfile")]
        public IEnumerable<ChannelAccessProfile> TransactionCurrency_ChannelAccessProfile {
            get {
                return GetRelatedEntities<ChannelAccessProfile>("TransactionCurrency_ChannelAccessProfile", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_ChannelAccessProfile", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_CampaignResponse")]
        public IEnumerable<CampaignResponse> TransactionCurrency_CampaignResponse {
            get {
                return GetRelatedEntities<CampaignResponse>("TransactionCurrency_CampaignResponse", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_CampaignResponse", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Dynamicpropertyinsatance")]
        public IEnumerable<DynamicPropertyInstance> TransactionCurrency_Dynamicpropertyinsatance {
            get {
                return GetRelatedEntities<DynamicPropertyInstance>("TransactionCurrency_Dynamicpropertyinsatance", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Dynamicpropertyinsatance", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Incident")]
        public IEnumerable<Incident> TransactionCurrency_Incident {
            get {
                return GetRelatedEntities<Incident>("TransactionCurrency_Incident", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Incident", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_ServiceAppointment")]
        public IEnumerable<ServiceAppointment> TransactionCurrency_ServiceAppointment {
            get {
                return GetRelatedEntities<ServiceAppointment>("TransactionCurrency_ServiceAppointment", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_ServiceAppointment", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_contact")]
        public IEnumerable<Contact> transactioncurrency_contact {
            get {
                return GetRelatedEntities<Contact>("transactioncurrency_contact", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_contact", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_bookableresourcebookingheader")]
        public IEnumerable<BookableResourceBookingHeader> TransactionCurrency_bookableresourcebookingheader {
            get {
                return GetRelatedEntities<BookableResourceBookingHeader>("TransactionCurrency_bookableresourcebookingheader", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_bookableresourcebookingheader", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_ExternalParty")]
        public IEnumerable<ExternalParty> TransactionCurrency_ExternalParty {
            get {
                return GetRelatedEntities<ExternalParty>("TransactionCurrency_ExternalParty", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_ExternalParty", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Connection")]
        public IEnumerable<Connection> TransactionCurrency_Connection {
            get {
                return GetRelatedEntities<Connection>("TransactionCurrency_Connection", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Connection", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_quote")]
        public IEnumerable<Quote> transactioncurrency_quote {
            get {
                return GetRelatedEntities<Quote>("transactioncurrency_quote", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_quote", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_bookableresourcebooking")]
        public IEnumerable<BookableResourceBooking> TransactionCurrency_bookableresourcebooking {
            get {
                return GetRelatedEntities<BookableResourceBooking>("TransactionCurrency_bookableresourcebooking", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_bookableresourcebooking", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Appointment")]
        public IEnumerable<Appointment> TransactionCurrency_Appointment {
            get {
                return GetRelatedEntities<Appointment>("TransactionCurrency_Appointment", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Appointment", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_ratingvalue")]
        public IEnumerable<RatingValue> TransactionCurrency_ratingvalue {
            get {
                return GetRelatedEntities<RatingValue>("TransactionCurrency_ratingvalue", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_ratingvalue", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_campaignactivity")]
        public IEnumerable<CampaignActivity> transactioncurrency_campaignactivity {
            get {
                return GetRelatedEntities<CampaignActivity>("transactioncurrency_campaignactivity", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_campaignactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_bookableresourcecategory")]
        public IEnumerable<BookableResourceCategory> TransactionCurrency_bookableresourcecategory {
            get {
                return GetRelatedEntities<BookableResourceCategory>("TransactionCurrency_bookableresourcecategory", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_bookableresourcecategory", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_salesorder")]
        public IEnumerable<SalesOrder> transactioncurrency_salesorder {
            get {
                return GetRelatedEntities<SalesOrder>("transactioncurrency_salesorder", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_salesorder", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_BusinessUnit")]
        public IEnumerable<BusinessUnit> TransactionCurrency_BusinessUnit {
            get {
                return GetRelatedEntities<BusinessUnit>("TransactionCurrency_BusinessUnit", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_BusinessUnit", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Email")]
        public IEnumerable<Email> TransactionCurrency_Email {
            get {
                return GetRelatedEntities<Email>("TransactionCurrency_Email", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Email", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Team")]
        public IEnumerable<Team> TransactionCurrency_Team {
            get {
                return GetRelatedEntities<Team>("TransactionCurrency_Team", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Team", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_SystemUser")]
        public IEnumerable<SystemUser> TransactionCurrency_SystemUser {
            get {
                return GetRelatedEntities<SystemUser>("TransactionCurrency_SystemUser", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_SystemUser", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_lead")]
        public IEnumerable<Lead> transactioncurrency_lead {
            get {
                return GetRelatedEntities<Lead>("transactioncurrency_lead", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_lead", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_convertruleitem")]
        public IEnumerable<ConvertRuleItem> transactioncurrency_convertruleitem {
            get {
                return GetRelatedEntities<ConvertRuleItem>("transactioncurrency_convertruleitem", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_convertruleitem", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Letter")]
        public IEnumerable<Letter> TransactionCurrency_Letter {
            get {
                return GetRelatedEntities<Letter>("TransactionCurrency_Letter", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Letter", null, value);
            }
        }
        
        [RelationshipSchemaName("basecurrency_organization")]
        public IEnumerable<Organization> basecurrency_organization {
            get {
                return GetRelatedEntities<Organization>("basecurrency_organization", null);
            }
            set {
                SetRelatedEntities("basecurrency_organization", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_SLA")]
        public IEnumerable<SLA> TransactionCurrency_SLA {
            get {
                return GetRelatedEntities<SLA>("TransactionCurrency_SLA", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_SLA", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Task")]
        public IEnumerable<Task> TransactionCurrency_Task {
            get {
                return GetRelatedEntities<Task>("TransactionCurrency_Task", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Task", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_ActivityPointer")]
        public IEnumerable<ActivityPointer> TransactionCurrency_ActivityPointer {
            get {
                return GetRelatedEntities<ActivityPointer>("TransactionCurrency_ActivityPointer", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_ActivityPointer", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_opportunityclose")]
        public IEnumerable<OpportunityClose> transactioncurrency_opportunityclose {
            get {
                return GetRelatedEntities<OpportunityClose>("transactioncurrency_opportunityclose", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_opportunityclose", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_ratingmodel")]
        public IEnumerable<RatingModel> TransactionCurrency_ratingmodel {
            get {
                return GetRelatedEntities<RatingModel>("TransactionCurrency_ratingmodel", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_ratingmodel", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_opportunity")]
        public IEnumerable<Opportunity> transactioncurrency_opportunity {
            get {
                return GetRelatedEntities<Opportunity>("transactioncurrency_opportunity", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_opportunity", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Fax")]
        public IEnumerable<Fax> TransactionCurrency_Fax {
            get {
                return GetRelatedEntities<Fax>("TransactionCurrency_Fax", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Fax", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_bookableresourcecategoryassn")]
        public IEnumerable<BookableResourceCategoryAssn> TransactionCurrency_bookableresourcecategoryassn {
            get {
                return GetRelatedEntities<BookableResourceCategoryAssn>("TransactionCurrency_bookableresourcecategoryassn", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_bookableresourcecategoryassn", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_PhoneCall")]
        public IEnumerable<PhoneCall> TransactionCurrency_PhoneCall {
            get {
                return GetRelatedEntities<PhoneCall>("TransactionCurrency_PhoneCall", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_PhoneCall", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_campaign")]
        public IEnumerable<Campaign> transactioncurrency_campaign {
            get {
                return GetRelatedEntities<Campaign>("transactioncurrency_campaign", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_campaign", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_characteristic")]
        public IEnumerable<Characteristic> TransactionCurrency_characteristic {
            get {
                return GetRelatedEntities<Characteristic>("TransactionCurrency_characteristic", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_characteristic", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_contract")]
        public IEnumerable<Contract> transactioncurrency_contract {
            get {
                return GetRelatedEntities<Contract>("transactioncurrency_contract", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_contract", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_socialactivity")]
        public IEnumerable<SocialActivity> transactioncurrency_socialactivity {
            get {
                return GetRelatedEntities<SocialActivity>("transactioncurrency_socialactivity", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_socialactivity", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_SyncErrors")]
        public IEnumerable<SyncError> TransactionCurrency_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("TransactionCurrency_SyncErrors", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_profilerule")]
        public IEnumerable<ChannelAccessProfileRule> TransactionCurrency_profilerule {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("TransactionCurrency_profilerule", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_profilerule", null, value);
            }
        }
        
        [RelationshipSchemaName("transactioncurrency_invoice")]
        public IEnumerable<Invoice> transactioncurrency_invoice {
            get {
                return GetRelatedEntities<Invoice>("transactioncurrency_invoice", null);
            }
            set {
                SetRelatedEntities("transactioncurrency_invoice", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_bookableresourcecharacteristic")]
        public IEnumerable<BookableResourceCharacteristic> TransactionCurrency_bookableresourcecharacteristic {
            get {
                return GetRelatedEntities<BookableResourceCharacteristic>("TransactionCurrency_bookableresourcecharacteristic", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_bookableresourcecharacteristic", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_SharePointDocumentLocation")]
        public IEnumerable<SharePointDocumentLocation> TransactionCurrency_SharePointDocumentLocation {
            get {
                return GetRelatedEntities<SharePointDocumentLocation>("TransactionCurrency_SharePointDocumentLocation", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_SharePointDocumentLocation", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_bookableresourcegroup")]
        public IEnumerable<BookableResourceGroup> TransactionCurrency_bookableresourcegroup {
            get {
                return GetRelatedEntities<BookableResourceGroup>("TransactionCurrency_bookableresourcegroup", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_bookableresourcegroup", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_bookableresource")]
        public IEnumerable<BookableResource> TransactionCurrency_bookableresource {
            get {
                return GetRelatedEntities<BookableResource>("TransactionCurrency_bookableresource", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_bookableresource", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Entitlement")]
        public IEnumerable<Entitlement> TransactionCurrency_Entitlement {
            get {
                return GetRelatedEntities<Entitlement>("TransactionCurrency_Entitlement", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Entitlement", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_QueueItem")]
        public IEnumerable<QueueItem> TransactionCurrency_QueueItem {
            get {
                return GetRelatedEntities<QueueItem>("TransactionCurrency_QueueItem", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_QueueItem", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_bookingstatus")]
        public IEnumerable<BookingStatus> TransactionCurrency_bookingstatus {
            get {
                return GetRelatedEntities<BookingStatus>("TransactionCurrency_bookingstatus", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_bookingstatus", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_SharePointSite")]
        public IEnumerable<SharePointSite> TransactionCurrency_SharePointSite {
            get {
                return GetRelatedEntities<SharePointSite>("TransactionCurrency_SharePointSite", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_SharePointSite", null, value);
            }
        }
        
        [RelationshipSchemaName("TransactionCurrency_Goal")]
        public IEnumerable<Goal> TransactionCurrency_Goal {
            get {
                return GetRelatedEntities<Goal>("TransactionCurrency_Goal", null);
            }
            set {
                SetRelatedEntities("TransactionCurrency_Goal", null, value);
            }
        }
        
        public static TransactionCurrency Retrieve(IOrganizationService service, Guid id, params Expression<Func<TransactionCurrency,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    /// <summary>
    /// <para>Set of logical rules that define the steps necessary to automate a specific business process, task, or set of actions to be performed.</para>
    /// <para>Display Name: Process</para>
    /// </summary>
    [EntityLogicalName("workflow")]
    [DebuggerDisplay("{DebuggerDisplay,nq}")]
    [DataContract()]
    public partial class Workflow : ExtendedEntity<WorkflowState, Workflow_StatusCode> {
        
        public const string EntityLogicalName = "workflow";
        
        public const int EntityTypeCode = 4703;
        
        public Workflow() : 
                base(EntityLogicalName) {
        }
        
        public Workflow(Guid Id) : 
                base(EntityLogicalName, Id) {
        }
        
        private string DebuggerDisplay {
            get {
                return GetDebuggerDisplay("name");
            }
        }
        
        [AttributeLogicalName("workflowid")]
        public override Guid Id {
            get {
                return base.Id;
            }
            set {
                SetId("workflowid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the process.</para>
        /// <para>Display Name: Process</para>
        /// </summary>
        [AttributeLogicalName("workflowid")]
        public Guid? WorkflowId {
            get {
                return GetAttributeValue<Guid?>("workflowid");
            }
            set {
                SetId("workflowid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process was created using the Microsoft Dynamics CRM Web application.</para>
        /// <para>Display Name: Is CRM Process</para>
        /// </summary>
        [AttributeLogicalName("iscrmuiworkflow")]
        public bool? IsCrmUIWorkflow {
            get {
                return GetAttributeValue<bool?>("iscrmuiworkflow");
            }
        }
        
        /// <summary>
        /// <para>Stage of the process when triggered on Create.</para>
        /// <para>Display Name: Create Stage</para>
        /// </summary>
        [AttributeLogicalName("createstage")]
        public workflow_stage? CreateStage {
            get {
                return GetOptionSetValue<workflow_stage>("createstage");
            }
            set {
                SetOptionSetValue("createstage", value);
            }
        }
        
        /// <summary>
        /// <para>Whether or not the steps in the process are executed in a single transaction.</para>
        /// <para>Display Name: Is Transacted</para>
        /// </summary>
        [AttributeLogicalName("istransacted")]
        public bool? IsTransacted {
            get {
                return GetAttributeValue<bool?>("istransacted");
            }
            set {
                SetAttributeValue("istransacted", value);
            }
        }
        
        /// <summary>
        /// <para>XAML that defines the process.</para>
        /// </summary>
        [AttributeLogicalName("xaml")]
        public string Xaml {
            get {
                return GetAttributeValue<string>("xaml");
            }
            set {
                SetAttributeValue("xaml", value);
            }
        }
        
        /// <summary>
        /// <para>Category of the process.</para>
        /// <para>Display Name: Category</para>
        /// </summary>
        [AttributeLogicalName("category")]
        public Workflow_Category? Category {
            get {
                return GetOptionSetValue<Workflow_Category>("category");
            }
            set {
                SetOptionSetValue("category", value);
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Component State</para>
        /// </summary>
        [AttributeLogicalName("componentstate")]
        public componentstate? ComponentState {
            get {
                return GetOptionSetValue<componentstate>("componentstate");
            }
        }
        
        /// <summary>
        /// <para>Business Process Type.</para>
        /// <para>Display Name: Business Process Type</para>
        /// </summary>
        [AttributeLogicalName("businessprocesstype")]
        public Workflow_BusinessProcessType? BusinessProcessType {
            get {
                return GetOptionSetValue<Workflow_BusinessProcessType>("businessprocesstype");
            }
            set {
                SetOptionSetValue("businessprocesstype", value);
            }
        }
        
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName {
            get {
                return GetAttributeValue<string>("modifiedbyname");
            }
        }
        
        /// <summary>
        /// <para>Additional information about status of the process.</para>
        /// <para>Display Name: Status Reason</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public Workflow_StatusCode? StatusCode {
            get {
                return GetOptionSetValue<Workflow_StatusCode>("statuscode");
            }
            set {
                SetOptionSetValue("statuscode", value);
            }
        }
        
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL {
            get {
                return GetAttributeValue<string>("entityimage_url");
            }
        }
        
        /// <summary>
        /// <para>Name of the process.</para>
        /// <para>Display Name: Process Name</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string Name {
            get {
                return GetAttributeValue<string>("name");
            }
            set {
                SetAttributeValue("name", value);
            }
        }
        
        /// <summary>
        /// <para>Scope of the process.</para>
        /// <para>Display Name: Scope</para>
        /// </summary>
        [AttributeLogicalName("scope")]
        public Workflow_Scope? Scope {
            get {
                return GetOptionSetValue<Workflow_Scope>("scope");
            }
            set {
                SetOptionSetValue("scope", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the business unit that owns the process.</para>
        /// <para>Display Name: Owning Business Unit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit {
            get {
                return GetAttributeValue<EntityReference>("owningbusinessunit");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Record Overwrite Time</para>
        /// </summary>
        [AttributeLogicalName("overwritetime")]
        public DateTime? OverwriteTime {
            get {
                return GetAttributeValue<DateTime?>("overwritetime");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who owns the process.</para>
        /// <para>Display Name: Owning User</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser {
            get {
                return GetAttributeValue<EntityReference>("owninguser");
            }
        }
        
        /// <summary>
        /// <para>Contains the role assignment for the process.</para>
        /// <para>Display Name: Role assignment for Process</para>
        /// </summary>
        [AttributeLogicalName("processroleassignment")]
        public string ProcessRoleAssignment {
            get {
                return GetAttributeValue<string>("processroleassignment");
            }
            set {
                SetAttributeValue("processroleassignment", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who last modified the process.</para>
        /// <para>Display Name: Modified By</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedby");
            }
        }
        
        /// <summary>
        /// <para>Type of the process.</para>
        /// <para>Display Name: Type</para>
        /// </summary>
        [AttributeLogicalName("type")]
        public Workflow_Type? Type {
            get {
                return GetOptionSetValue<Workflow_Type>("type");
            }
            set {
                SetOptionSetValue("type", value);
            }
        }
        
        /// <summary>
        /// <para>Language of the process.</para>
        /// <para>Display Name: Language</para>
        /// </summary>
        [AttributeLogicalName("languagecode")]
        public int? LanguageCode {
            get {
                return GetAttributeValue<int?>("languagecode");
            }
            set {
                SetAttributeValue("languagecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the definition for process activation.</para>
        /// <para>Display Name: Parent Process ID</para>
        /// </summary>
        [AttributeLogicalName("parentworkflowid")]
        public EntityReference ParentWorkflowId {
            get {
                return GetAttributeValue<EntityReference>("parentworkflowid");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process is able to run as an on-demand process.</para>
        /// <para>Display Name: Run as On Demand</para>
        /// </summary>
        [AttributeLogicalName("ondemand")]
        public bool? OnDemand {
            get {
                return GetAttributeValue<bool?>("ondemand");
            }
            set {
                SetAttributeValue("ondemand", value);
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName {
            get {
                return GetAttributeValue<string>("modifiedonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Input parameters to the process.</para>
        /// <para>Display Name: Input Parameters</para>
        /// </summary>
        [AttributeLogicalName("inputparameters")]
        public string InputParameters {
            get {
                return GetAttributeValue<string>("inputparameters");
            }
            set {
                SetAttributeValue("inputparameters", value);
            }
        }
        
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName {
            get {
                return GetAttributeValue<string>("createdbyname");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// <para>Display Name: Entity Image Id</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid? EntityImageId {
            get {
                return GetAttributeValue<Guid?>("entityimageid");
            }
        }
        
        /// <summary>
        /// <para>Indicates the rank for order of execution for the synchronous workflow.</para>
        /// <para>Display Name: Rank</para>
        /// </summary>
        [AttributeLogicalName("rank")]
        public int? Rank {
            get {
                return GetAttributeValue<int?>("rank");
            }
            set {
                SetAttributeValue("rank", value);
            }
        }
        
        /// <summary>
        /// <para>Description of the process.</para>
        /// <para>Display Name: Description</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description {
            get {
                return GetAttributeValue<string>("description");
            }
            set {
                SetAttributeValue("description", value);
            }
        }
        
        /// <summary>
        /// <para>Business logic converted into client data</para>
        /// <para>Display Name: Client Data</para>
        /// </summary>
        [AttributeLogicalName("clientdata")]
        public string ClientData {
            get {
                return GetAttributeValue<string>("clientdata");
            }
        }
        
        /// <summary>
        /// <para>Date and time when the process was last modified.</para>
        /// <para>Display Name: Modified On</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn {
            get {
                return GetAttributeValue<DateTime?>("modifiedon");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user or team who owns the process.</para>
        /// <para>Display Name: Owner</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId {
            get {
                return GetAttributeValue<EntityReference>("ownerid");
            }
            set {
                SetAttributeValue("ownerid", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the user who created the process.</para>
        /// <para>Display Name: Created By</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy {
            get {
                return GetAttributeValue<EntityReference>("createdby");
            }
        }
        
        /// <summary>
        /// <para>The renderer type of Workflow</para>
        /// <para>Display Name: Renderer Type</para>
        /// </summary>
        [AttributeLogicalName("rendererobjecttypecode")]
        public string RendererObjectTypeCode {
            get {
                return GetAttributeValue<string>("rendererobjecttypecode");
            }
            set {
                SetAttributeValue("rendererobjecttypecode", value);
            }
        }
        
        [AttributeLogicalName("activeworkflowidname")]
        public string ActiveWorkflowIdName {
            get {
                return GetAttributeValue<string>("activeworkflowidname");
            }
        }
        
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName {
            get {
                return GetAttributeValue<string>("createdonbehalfbyname");
            }
        }
        
        /// <summary>
        /// <para>Type the business process flow order.</para>
        /// <para>Display Name: Process Order</para>
        /// </summary>
        [AttributeLogicalName("processorder")]
        public int? ProcessOrder {
            get {
                return GetAttributeValue<int?>("processorder");
            }
            set {
                SetAttributeValue("processorder", value);
            }
        }
        
        /// <summary>
        /// <para>Select the stage a process will be triggered on update.</para>
        /// <para>Display Name: Update Stage</para>
        /// </summary>
        [AttributeLogicalName("updatestage")]
        public workflow_stage? UpdateStage {
            get {
                return GetOptionSetValue<workflow_stage>("updatestage");
            }
            set {
                SetOptionSetValue("updatestage", value);
            }
        }
        
        /// <summary>
        /// <para>Attributes that trigger the process when updated.</para>
        /// <para>Display Name: Trigger On Update Attribute List</para>
        /// </summary>
        [AttributeLogicalName("triggeronupdateattributelist")]
        public string TriggerOnUpdateAttributeList {
            get {
                return GetAttributeValue<string>("triggeronupdateattributelist");
            }
            set {
                SetAttributeValue("triggeronupdateattributelist", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process can be included in other processes as a child process.</para>
        /// <para>Display Name: Is Child Process</para>
        /// </summary>
        [AttributeLogicalName("subprocess")]
        public bool? Subprocess {
            get {
                return GetAttributeValue<bool?>("subprocess");
            }
            set {
                SetAttributeValue("subprocess", value);
            }
        }
        
        /// <summary>
        /// <para>Shows the mode of the process.</para>
        /// <para>Display Name: Mode</para>
        /// </summary>
        [AttributeLogicalName("mode")]
        public Workflow_Mode? Mode {
            get {
                return GetOptionSetValue<Workflow_Mode>("mode");
            }
            set {
                SetOptionSetValue("mode", value);
            }
        }
        
        /// <summary>
        /// <para>Specifies the system user account under which a workflow executes.</para>
        /// <para>Display Name: Run As User</para>
        /// </summary>
        [AttributeLogicalName("runas")]
        public workflow_runas? RunAs {
            get {
                return GetOptionSetValue<workflow_runas>("runas");
            }
            set {
                SetOptionSetValue("runas", value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunitname")]
        public string OwningBusinessUnitName {
            get {
                return GetAttributeValue<string>("owningbusinessunitname");
            }
        }
        
        /// <summary>
        /// <para>Stage of the process when triggered on Delete.</para>
        /// <para>Display Name: Delete stage</para>
        /// </summary>
        [AttributeLogicalName("deletestage")]
        public workflow_stage? DeleteStage {
            get {
                return GetOptionSetValue<workflow_stage>("deletestage");
            }
            set {
                SetOptionSetValue("deletestage", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the SDK Message associated with this workflow.</para>
        /// <para>Display Name: SDK Message</para>
        /// </summary>
        [AttributeLogicalName("sdkmessageid")]
        public EntityReference SdkMessageId {
            get {
                return GetAttributeValue<EntityReference>("sdkmessageid");
            }
        }
        
        /// <summary>
        /// <para>Status of the process.</para>
        /// <para>Display Name: Status</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public WorkflowState? StateCode {
            get {
                return GetOptionSetValue<WorkflowState>("statecode");
            }
            set {
                SetOptionSetValue("statecode", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the team who owns the process.</para>
        /// <para>Display Name: Owning Team</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam {
            get {
                return GetAttributeValue<EntityReference>("owningteam");
            }
        }
        
        /// <summary>
        /// <para>Information that specifies whether this component can be customized.</para>
        /// <para>Display Name: Customizable</para>
        /// </summary>
        [AttributeLogicalName("iscustomizable")]
        public BooleanManagedProperty IsCustomizable {
            get {
                return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
            }
            set {
                SetAttributeValue("iscustomizable", value);
            }
        }
        
        [AttributeLogicalName("parentworkflowidname")]
        public string ParentWorkflowIdName {
            get {
                return GetAttributeValue<string>("parentworkflowidname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who last modified the process.</para>
        /// <para>Display Name: Modified By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("modifiedonbehalfby");
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process will be triggered on deletion of the primary entity.</para>
        /// <para>Display Name: Trigger On Delete</para>
        /// </summary>
        [AttributeLogicalName("triggerondelete")]
        public bool? TriggerOnDelete {
            get {
                return GetAttributeValue<bool?>("triggerondelete");
            }
            set {
                SetAttributeValue("triggerondelete", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the solution component is part of a managed solution.</para>
        /// <para>Display Name: Is Managed</para>
        /// </summary>
        [AttributeLogicalName("ismanaged")]
        public bool? IsManaged {
            get {
                return GetAttributeValue<bool?>("ismanaged");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the latest activation record for the process.</para>
        /// <para>Display Name: Active Process ID</para>
        /// </summary>
        [AttributeLogicalName("activeworkflowid")]
        public EntityReference ActiveWorkflowId {
            get {
                return GetAttributeValue<EntityReference>("activeworkflowid");
            }
        }
        
        /// <summary>
        /// <para>Version in which the form is introduced.</para>
        /// <para>Display Name: Introduced Version</para>
        /// </summary>
        [AttributeLogicalName("introducedversion")]
        public string IntroducedVersion {
            get {
                return GetAttributeValue<string>("introducedversion");
            }
            set {
                SetAttributeValue("introducedversion", value);
            }
        }
        
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName {
            get {
                return GetAttributeValue<string>("owneridname");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the plug-in type.</para>
        /// </summary>
        [AttributeLogicalName("plugintypeid")]
        public EntityReference PluginTypeId {
            get {
                return GetAttributeValue<EntityReference>("plugintypeid");
            }
        }
        
        /// <summary>
        /// <para>For internal use only.</para>
        /// </summary>
        [AttributeLogicalName("workflowidunique")]
        public Guid? WorkflowIdUnique {
            get {
                return GetAttributeValue<Guid?>("workflowidunique");
            }
        }
        
        /// <summary>
        /// <para>Primary entity for the process. The process can be associated for one or more SDK operations defined on the primary entity.</para>
        /// <para>Display Name: Primary Entity</para>
        /// </summary>
        [AttributeLogicalName("primaryentity")]
        public string PrimaryEntity {
            get {
                return GetAttributeValue<string>("primaryentity");
            }
            set {
                SetAttributeValue("primaryentity", value);
            }
        }
        
        /// <summary>
        /// <para>Unique name of the process</para>
        /// <para>Display Name: Unique Name</para>
        /// </summary>
        [AttributeLogicalName("uniquename")]
        public string UniqueName {
            get {
                return GetAttributeValue<string>("uniquename");
            }
            set {
                SetAttributeValue("uniquename", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the delegate user who created the process.</para>
        /// <para>Display Name: Created By (Delegate)</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy {
            get {
                return GetAttributeValue<EntityReference>("createdonbehalfby");
            }
        }
        
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType {
            get {
                return GetAttributeValue<string>("owneridtype");
            }
            set {
                SetAttributeValue("owneridtype", value);
            }
        }
        
        /// <summary>
        /// <para>Select whether synchronous workflow failures will be saved to log files.</para>
        /// <para>Display Name: Log upon Failure</para>
        /// </summary>
        [AttributeLogicalName("syncworkflowlogonfailure")]
        public bool? SyncWorkflowLogOnFailure {
            get {
                return GetAttributeValue<bool?>("syncworkflowlogonfailure");
            }
            set {
                SetAttributeValue("syncworkflowlogonfailure", value);
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated solution.</para>
        /// <para>Display Name: Solution</para>
        /// </summary>
        [AttributeLogicalName("solutionid")]
        public Guid? SolutionId {
            get {
                return GetAttributeValue<Guid?>("solutionid");
            }
        }
        
        /// <summary>
        /// <para>Unique identifier of the associated form.</para>
        /// <para>Display Name: Form ID</para>
        /// </summary>
        [AttributeLogicalName("formid")]
        public Guid? FormId {
            get {
                return GetAttributeValue<Guid?>("formid");
            }
            set {
                SetAttributeValue("formid", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the asynchronous system job is automatically deleted on completion.</para>
        /// <para>Display Name: Delete Job On Completion</para>
        /// </summary>
        [AttributeLogicalName("asyncautodelete")]
        public bool? AsyncAutoDelete {
            get {
                return GetAttributeValue<bool?>("asyncautodelete");
            }
            set {
                SetAttributeValue("asyncautodelete", value);
            }
        }
        
        /// <summary>
        /// <para>Indicates whether the process will be triggered when the primary entity is created.</para>
        /// <para>Display Name: Trigger On Create</para>
        /// </summary>
        [AttributeLogicalName("triggeroncreate")]
        public bool? TriggerOnCreate {
            get {
                return GetAttributeValue<bool?>("triggeroncreate");
            }
            set {
                SetAttributeValue("triggeroncreate", value);
            }
        }
        
        /// <summary>
        /// <para>Date and time when the process was created.</para>
        /// <para>Display Name: Created On</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn {
            get {
                return GetAttributeValue<DateTime?>("createdon");
            }
        }
        
        [AttributeLogicalName("entityimage_timestamp")]
        public long? EntityImage_Timestamp {
            get {
                return GetAttributeValue<long?>("entityimage_timestamp");
            }
        }
        
        [AttributeLogicalName("versionnumber")]
        public long? VersionNumber {
            get {
                return GetAttributeValue<long?>("versionnumber");
            }
        }
        
        [AttributeLogicalName("modifiedonbehalfby")]
        [RelationshipSchemaName("workflow_modifiedonbehalfby")]
        public SystemUser workflow_modifiedonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("workflow_modifiedonbehalfby", null);
            }
            set {
                SetRelatedEntity("workflow_modifiedonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("parentworkflowid")]
        [RelationshipSchemaName("workflow_parent_workflow", EntityRole.Referencing)]
        public Workflow Referencingworkflow_parent_workflow {
            get {
                return GetRelatedEntity<Workflow>("workflow_parent_workflow", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("workflow_parent_workflow", EntityRole.Referencing, value);
            }
        }
        
        [AttributeLogicalName("createdby")]
        [RelationshipSchemaName("workflow_createdby")]
        public SystemUser workflow_createdby {
            get {
                return GetRelatedEntity<SystemUser>("workflow_createdby", null);
            }
            set {
                SetRelatedEntity("workflow_createdby", null, value);
            }
        }
        
        [AttributeLogicalName("owningteam")]
        [RelationshipSchemaName("team_workflow")]
        public Team team_workflow {
            get {
                return GetRelatedEntity<Team>("team_workflow", null);
            }
            set {
                SetRelatedEntity("team_workflow", null, value);
            }
        }
        
        [AttributeLogicalName("owninguser")]
        [RelationshipSchemaName("system_user_workflow")]
        public SystemUser system_user_workflow {
            get {
                return GetRelatedEntity<SystemUser>("system_user_workflow", null);
            }
            set {
                SetRelatedEntity("system_user_workflow", null, value);
            }
        }
        
        [AttributeLogicalName("owningbusinessunit")]
        [RelationshipSchemaName("business_unit_workflow")]
        public BusinessUnit business_unit_workflow {
            get {
                return GetRelatedEntity<BusinessUnit>("business_unit_workflow", null);
            }
            set {
                SetRelatedEntity("business_unit_workflow", null, value);
            }
        }
        
        [AttributeLogicalName("createdonbehalfby")]
        [RelationshipSchemaName("workflow_createdonbehalfby")]
        public SystemUser workflow_createdonbehalfby {
            get {
                return GetRelatedEntity<SystemUser>("workflow_createdonbehalfby", null);
            }
            set {
                SetRelatedEntity("workflow_createdonbehalfby", null, value);
            }
        }
        
        [AttributeLogicalName("modifiedby")]
        [RelationshipSchemaName("workflow_modifiedby")]
        public SystemUser workflow_modifiedby {
            get {
                return GetRelatedEntity<SystemUser>("workflow_modifiedby", null);
            }
            set {
                SetRelatedEntity("workflow_modifiedby", null, value);
            }
        }
        
        [AttributeLogicalName("activeworkflowid")]
        [RelationshipSchemaName("workflow_active_workflow", EntityRole.Referencing)]
        public Workflow Referencingworkflow_active_workflow {
            get {
                return GetRelatedEntity<Workflow>("workflow_active_workflow", EntityRole.Referencing);
            }
            set {
                SetRelatedEntity("workflow_active_workflow", EntityRole.Referencing, value);
            }
        }
        
        [RelationshipSchemaName("convertruleitembase_workflowid")]
        public IEnumerable<ConvertRuleItem> convertruleitembase_workflowid {
            get {
                return GetRelatedEntities<ConvertRuleItem>("convertruleitembase_workflowid", null);
            }
            set {
                SetRelatedEntities("convertruleitembase_workflowid", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_active_workflow", EntityRole.Referenced)]
        public IEnumerable<Workflow> Referencedworkflow_active_workflow {
            get {
                return GetRelatedEntities<Workflow>("workflow_active_workflow", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("workflow_active_workflow", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("Workflow_SyncErrors")]
        public IEnumerable<SyncError> Workflow_SyncErrors {
            get {
                return GetRelatedEntities<SyncError>("Workflow_SyncErrors", null);
            }
            set {
                SetRelatedEntities("Workflow_SyncErrors", null, value);
            }
        }
        
        [RelationshipSchemaName("slabase_workflowid")]
        public IEnumerable<SLA> slabase_workflowid {
            get {
                return GetRelatedEntities<SLA>("slabase_workflowid", null);
            }
            set {
                SetRelatedEntities("slabase_workflowid", null, value);
            }
        }
        
        [RelationshipSchemaName("workflow_parent_workflow", EntityRole.Referenced)]
        public IEnumerable<Workflow> Referencedworkflow_parent_workflow {
            get {
                return GetRelatedEntities<Workflow>("workflow_parent_workflow", EntityRole.Referenced);
            }
            set {
                SetRelatedEntities("workflow_parent_workflow", EntityRole.Referenced, value);
            }
        }
        
        [RelationshipSchemaName("workflowid_profilerule")]
        public IEnumerable<ChannelAccessProfileRule> workflowid_profilerule {
            get {
                return GetRelatedEntities<ChannelAccessProfileRule>("workflowid_profilerule", null);
            }
            set {
                SetRelatedEntities("workflowid_profilerule", null, value);
            }
        }
        
        public static Workflow Retrieve(IOrganizationService service, Guid id, params Expression<Func<Workflow,object>>[] attrs) {
            return service.Retrieve(id, attrs);
        }
    }
    
    public partial class Xrm : ExtendedOrganizationServiceContext {
        
        public Xrm(IOrganizationService service) : 
                base(service) {
        }
        
        public IQueryable<Account> AccountSet {
            get {
                return CreateQuery<Account>();
            }
        }
        
        public IQueryable<AccountLeads> AccountLeadsSet {
            get {
                return CreateQuery<AccountLeads>();
            }
        }
        
        public IQueryable<ActivityParty> ActivityPartySet {
            get {
                return CreateQuery<ActivityParty>();
            }
        }
        
        public IQueryable<ActivityPointer> ActivityPointerSet {
            get {
                return CreateQuery<ActivityPointer>();
            }
        }
        
        public IQueryable<Appointment> AppointmentSet {
            get {
                return CreateQuery<Appointment>();
            }
        }
        
        public IQueryable<BookableResource> BookableResourceSet {
            get {
                return CreateQuery<BookableResource>();
            }
        }
        
        public IQueryable<BookableResourceBooking> BookableResourceBookingSet {
            get {
                return CreateQuery<BookableResourceBooking>();
            }
        }
        
        public IQueryable<BookableResourceBookingHeader> BookableResourceBookingHeaderSet {
            get {
                return CreateQuery<BookableResourceBookingHeader>();
            }
        }
        
        public IQueryable<BookableResourceCategory> BookableResourceCategorySet {
            get {
                return CreateQuery<BookableResourceCategory>();
            }
        }
        
        public IQueryable<BookableResourceCategoryAssn> BookableResourceCategoryAssnSet {
            get {
                return CreateQuery<BookableResourceCategoryAssn>();
            }
        }
        
        public IQueryable<BookableResourceCharacteristic> BookableResourceCharacteristicSet {
            get {
                return CreateQuery<BookableResourceCharacteristic>();
            }
        }
        
        public IQueryable<BookableResourceGroup> BookableResourceGroupSet {
            get {
                return CreateQuery<BookableResourceGroup>();
            }
        }
        
        public IQueryable<BookingStatus> BookingStatusSet {
            get {
                return CreateQuery<BookingStatus>();
            }
        }
        
        public IQueryable<BusinessUnit> BusinessUnitSet {
            get {
                return CreateQuery<BusinessUnit>();
            }
        }
        
        public IQueryable<Calendar> CalendarSet {
            get {
                return CreateQuery<Calendar>();
            }
        }
        
        public IQueryable<Campaign> CampaignSet {
            get {
                return CreateQuery<Campaign>();
            }
        }
        
        public IQueryable<CampaignActivity> CampaignActivitySet {
            get {
                return CreateQuery<CampaignActivity>();
            }
        }
        
        public IQueryable<CampaignActivityItem> CampaignActivityItemSet {
            get {
                return CreateQuery<CampaignActivityItem>();
            }
        }
        
        public IQueryable<CampaignItem> CampaignItemSet {
            get {
                return CreateQuery<CampaignItem>();
            }
        }
        
        public IQueryable<CampaignResponse> CampaignResponseSet {
            get {
                return CreateQuery<CampaignResponse>();
            }
        }
        
        public IQueryable<ChannelAccessProfile> ChannelAccessProfileSet {
            get {
                return CreateQuery<ChannelAccessProfile>();
            }
        }
        
        public IQueryable<ChannelAccessProfileRule> ChannelAccessProfileRuleSet {
            get {
                return CreateQuery<ChannelAccessProfileRule>();
            }
        }
        
        public IQueryable<Characteristic> CharacteristicSet {
            get {
                return CreateQuery<Characteristic>();
            }
        }
        
        public IQueryable<Connection> ConnectionSet {
            get {
                return CreateQuery<Connection>();
            }
        }
        
        public IQueryable<Contact> ContactSet {
            get {
                return CreateQuery<Contact>();
            }
        }
        
        public IQueryable<ContactInvoices> ContactInvoicesSet {
            get {
                return CreateQuery<ContactInvoices>();
            }
        }
        
        public IQueryable<ContactLeads> ContactLeadsSet {
            get {
                return CreateQuery<ContactLeads>();
            }
        }
        
        public IQueryable<ContactOrders> ContactOrdersSet {
            get {
                return CreateQuery<ContactOrders>();
            }
        }
        
        public IQueryable<ContactQuotes> ContactQuotesSet {
            get {
                return CreateQuery<ContactQuotes>();
            }
        }
        
        public IQueryable<Contract> ContractSet {
            get {
                return CreateQuery<Contract>();
            }
        }
        
        public IQueryable<ConvertRuleItem> ConvertRuleItemSet {
            get {
                return CreateQuery<ConvertRuleItem>();
            }
        }
        
        public IQueryable<dg_account_account> dg_account_accountSet {
            get {
                return CreateQuery<dg_account_account>();
            }
        }
        
        public IQueryable<dg_account_contact> dg_account_contactSet {
            get {
                return CreateQuery<dg_account_contact>();
            }
        }
        
        public IQueryable<dg_bus> dg_busSet {
            get {
                return CreateQuery<dg_bus>();
            }
        }
        
        public IQueryable<dg_child> dg_childSet {
            get {
                return CreateQuery<dg_child>();
            }
        }
        
        public IQueryable<dg_event> dg_eventSet {
            get {
                return CreateQuery<dg_event>();
            }
        }
        
        public IQueryable<dg_field> dg_fieldSet {
            get {
                return CreateQuery<dg_field>();
            }
        }
        
        public IQueryable<dg_HasRidden> dg_HasRiddenSet {
            get {
                return CreateQuery<dg_HasRidden>();
            }
        }
        
        public IQueryable<dg_man> dg_manSet {
            get {
                return CreateQuery<dg_man>();
            }
        }
        
        public IQueryable<dg_mild> dg_mildSet {
            get {
                return CreateQuery<dg_mild>();
            }
        }
        
        public IQueryable<dg_participant> dg_participantSet {
            get {
                return CreateQuery<dg_participant>();
            }
        }
        
        public IQueryable<dg_sheep> dg_sheepSet {
            get {
                return CreateQuery<dg_sheep>();
            }
        }
        
        public IQueryable<dg_tooth> dg_toothSet {
            get {
                return CreateQuery<dg_tooth>();
            }
        }
        
        public IQueryable<DynamicPropertyInstance> DynamicPropertyInstanceSet {
            get {
                return CreateQuery<DynamicPropertyInstance>();
            }
        }
        
        public IQueryable<Email> EmailSet {
            get {
                return CreateQuery<Email>();
            }
        }
        
        public IQueryable<EmailServerProfile> EmailServerProfileSet {
            get {
                return CreateQuery<EmailServerProfile>();
            }
        }
        
        public IQueryable<Entitlement> EntitlementSet {
            get {
                return CreateQuery<Entitlement>();
            }
        }
        
        public IQueryable<EntitlementContacts> EntitlementContactsSet {
            get {
                return CreateQuery<EntitlementContacts>();
            }
        }
        
        public IQueryable<ExternalParty> ExternalPartySet {
            get {
                return CreateQuery<ExternalParty>();
            }
        }
        
        public IQueryable<Fax> FaxSet {
            get {
                return CreateQuery<Fax>();
            }
        }
        
        public IQueryable<Goal> GoalSet {
            get {
                return CreateQuery<Goal>();
            }
        }
        
        public IQueryable<Incident> IncidentSet {
            get {
                return CreateQuery<Incident>();
            }
        }
        
        public IQueryable<Invoice> InvoiceSet {
            get {
                return CreateQuery<Invoice>();
            }
        }
        
        public IQueryable<KnowledgeArticle> KnowledgeArticleSet {
            get {
                return CreateQuery<KnowledgeArticle>();
            }
        }
        
        public IQueryable<Lead> LeadSet {
            get {
                return CreateQuery<Lead>();
            }
        }
        
        public IQueryable<Letter> LetterSet {
            get {
                return CreateQuery<Letter>();
            }
        }
        
        public IQueryable<List> ListSet {
            get {
                return CreateQuery<List>();
            }
        }
        
        public IQueryable<ListMember> ListMemberSet {
            get {
                return CreateQuery<ListMember>();
            }
        }
        
        public IQueryable<Mailbox> MailboxSet {
            get {
                return CreateQuery<Mailbox>();
            }
        }
        
        public IQueryable<msdyn_PostAlbum> msdyn_PostAlbumSet {
            get {
                return CreateQuery<msdyn_PostAlbum>();
            }
        }
        
        public IQueryable<msdyn_wallsavedqueryusersettings> msdyn_wallsavedqueryusersettingsSet {
            get {
                return CreateQuery<msdyn_wallsavedqueryusersettings>();
            }
        }
        
        public IQueryable<Opportunity> OpportunitySet {
            get {
                return CreateQuery<Opportunity>();
            }
        }
        
        public IQueryable<OpportunityClose> OpportunityCloseSet {
            get {
                return CreateQuery<OpportunityClose>();
            }
        }
        
        public IQueryable<Organization> OrganizationSet {
            get {
                return CreateQuery<Organization>();
            }
        }
        
        public IQueryable<PhoneCall> PhoneCallSet {
            get {
                return CreateQuery<PhoneCall>();
            }
        }
        
        public IQueryable<QueueItem> QueueItemSet {
            get {
                return CreateQuery<QueueItem>();
            }
        }
        
        public IQueryable<Quote> QuoteSet {
            get {
                return CreateQuery<Quote>();
            }
        }
        
        public IQueryable<RatingModel> RatingModelSet {
            get {
                return CreateQuery<RatingModel>();
            }
        }
        
        public IQueryable<RatingValue> RatingValueSet {
            get {
                return CreateQuery<RatingValue>();
            }
        }
        
        public IQueryable<RecurringAppointmentMaster> RecurringAppointmentMasterSet {
            get {
                return CreateQuery<RecurringAppointmentMaster>();
            }
        }
        
        public IQueryable<SalesOrder> SalesOrderSet {
            get {
                return CreateQuery<SalesOrder>();
            }
        }
        
        public IQueryable<ServiceAppointment> ServiceAppointmentSet {
            get {
                return CreateQuery<ServiceAppointment>();
            }
        }
        
        public IQueryable<ServiceContractContacts> ServiceContractContactsSet {
            get {
                return CreateQuery<ServiceContractContacts>();
            }
        }
        
        public IQueryable<SharePointDocumentLocation> SharePointDocumentLocationSet {
            get {
                return CreateQuery<SharePointDocumentLocation>();
            }
        }
        
        public IQueryable<SharePointSite> SharePointSiteSet {
            get {
                return CreateQuery<SharePointSite>();
            }
        }
        
        public IQueryable<SLA> SLASet {
            get {
                return CreateQuery<SLA>();
            }
        }
        
        public IQueryable<SocialActivity> SocialActivitySet {
            get {
                return CreateQuery<SocialActivity>();
            }
        }
        
        public IQueryable<SyncError> SyncErrorSet {
            get {
                return CreateQuery<SyncError>();
            }
        }
        
        public IQueryable<SystemUser> SystemUserSet {
            get {
                return CreateQuery<SystemUser>();
            }
        }
        
        public IQueryable<Task> TaskSet {
            get {
                return CreateQuery<Task>();
            }
        }
        
        public IQueryable<Team> TeamSet {
            get {
                return CreateQuery<Team>();
            }
        }
        
        public IQueryable<TeamMembership> TeamMembershipSet {
            get {
                return CreateQuery<TeamMembership>();
            }
        }
        
        public IQueryable<TransactionCurrency> TransactionCurrencySet {
            get {
                return CreateQuery<TransactionCurrency>();
            }
        }
        
        public IQueryable<Workflow> WorkflowSet {
            get {
                return CreateQuery<Workflow>();
            }
        }
    }
    
    [DataContract()]
    public enum Account_Address1_AddressTypeCode {
        
        [EnumMember()]
        BillTo = 1,
        
        [EnumMember()]
        ShipTo = 2,
        
        [EnumMember()]
        Primary = 3,
        
        [EnumMember()]
        Other = 4,
    }
    
    [DataContract()]
    public enum Account_Address1_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Account_AccountCategoryCode {
        
        [EnumMember()]
        PreferredCustomer = 1,
        
        [EnumMember()]
        Standard = 2,
    }
    
    [DataContract()]
    public enum Account_Address1_FreightTermsCode {
        
        [EnumMember()]
        FOB = 1,
        
        [EnumMember()]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum Account_PreferredAppointmentTimeCode {
        
        [EnumMember()]
        Morning = 1,
        
        [EnumMember()]
        Afternoon = 2,
        
        [EnumMember()]
        Evening = 3,
    }
    
    [DataContract()]
    public enum Account_AccountClassificationCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_CustomerTypeCode {
        
        [EnumMember()]
        Competitor = 1,
        
        [EnumMember()]
        Consultant = 2,
        
        [EnumMember()]
        Customer = 3,
        
        [EnumMember()]
        Investor = 4,
        
        [EnumMember()]
        Partner = 5,
        
        [EnumMember()]
        Influencer = 6,
        
        [EnumMember()]
        Press = 7,
        
        [EnumMember()]
        Prospect = 8,
        
        [EnumMember()]
        Reseller = 9,
        
        [EnumMember()]
        Supplier = 10,
        
        [EnumMember()]
        Vendor = 11,
        
        [EnumMember()]
        Other = 12,
    }
    
    [DataContract()]
    public enum Account_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
        
        [EnumMember()]
        Somestatus = 122930000,
    }
    
    [DataContract()]
    public enum Account_OwnershipCode {
        
        [EnumMember()]
        Public = 1,
        
        [EnumMember()]
        Private = 2,
        
        [EnumMember()]
        Subsidiary = 3,
        
        [EnumMember()]
        Other = 4,
    }
    
    [DataContract()]
    public enum Account_TerritoryCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_IndustryCode {
        
        [EnumMember()]
        Accounting = 1,
        
        [EnumMember()]
        AgricultureandNonpetrolNaturalResourceExtraction = 2,
        
        [EnumMember()]
        BroadcastingPrintingandPublishing = 3,
        
        [EnumMember()]
        Brokers = 4,
        
        [EnumMember()]
        BuildingSupplyRetail = 5,
        
        [EnumMember()]
        BusinessServices = 6,
        
        [EnumMember()]
        Consulting = 7,
        
        [EnumMember()]
        ConsumerServices = 8,
        
        [EnumMember()]
        DesignDirectionandCreativeManagement = 9,
        
        [EnumMember()]
        DistributorsDispatchersandProcessors = 10,
        
        [EnumMember()]
        DoctorsOfficesandClinics = 11,
        
        [EnumMember()]
        DurableManufacturing = 12,
        
        [EnumMember()]
        EatingandDrinkingPlaces = 13,
        
        [EnumMember()]
        EntertainmentRetail = 14,
        
        [EnumMember()]
        EquipmentRentalandLeasing = 15,
        
        [EnumMember()]
        Financial = 16,
        
        [EnumMember()]
        FoodandTobaccoProcessing = 17,
        
        [EnumMember()]
        InboundCapitalIntensiveProcessing = 18,
        
        [EnumMember()]
        InboundRepairandServices = 19,
        
        [EnumMember()]
        Insurance = 20,
        
        [EnumMember()]
        LegalServices = 21,
        
        [EnumMember()]
        NonDurableMerchandiseRetail = 22,
        
        [EnumMember()]
        OutboundConsumerService = 23,
        
        [EnumMember()]
        PetrochemicalExtractionandDistribution = 24,
        
        [EnumMember()]
        ServiceRetail = 25,
        
        [EnumMember()]
        SIGAffiliations = 26,
        
        [EnumMember()]
        SocialServices = 27,
        
        [EnumMember()]
        SpecialOutboundTradeContractors = 28,
        
        [EnumMember()]
        SpecialtyRealty = 29,
        
        [EnumMember()]
        Transportation = 30,
        
        [EnumMember()]
        UtilityCreationandDistribution = 31,
        
        [EnumMember()]
        VehicleRetail = 32,
        
        [EnumMember()]
        Wholesale = 33,
    }
    
    [DataContract()]
    public enum Account_BusinessTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum Account_AccountRatingCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_CustomerSizeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_PreferredContactMethodCode {
        
        [EnumMember()]
        Any = 1,
        
        [EnumMember()]
        Email = 2,
        
        [EnumMember()]
        Phone = 3,
        
        [EnumMember()]
        Fax = 4,
        
        [EnumMember()]
        Mail = 5,
    }
    
    [DataContract()]
    public enum Account_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Account_PreferredAppointmentDayCode {
        
        [EnumMember()]
        Sunday = 0,
        
        [EnumMember()]
        Monday = 1,
        
        [EnumMember()]
        Tuesday = 2,
        
        [EnumMember()]
        Wednesday = 3,
        
        [EnumMember()]
        Thursday = 4,
        
        [EnumMember()]
        Friday = 5,
        
        [EnumMember()]
        Saturday = 6,
    }
    
    [DataContract()]
    public enum Account_Address2_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum AccountState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum ActivityParty_ParticipationTypeMask {
        
        [EnumMember()]
        Sender = 1,
        
        [EnumMember()]
        ToRecipient = 2,
        
        [EnumMember()]
        CCRecipient = 3,
        
        [EnumMember()]
        BCCRecipient = 4,
        
        [EnumMember()]
        Requiredattendee = 5,
        
        [EnumMember()]
        Optionalattendee = 6,
        
        [EnumMember()]
        Organizer = 7,
        
        [EnumMember()]
        Regarding = 8,
        
        [EnumMember()]
        Owner = 9,
        
        [EnumMember()]
        Resource = 10,
        
        [EnumMember()]
        Customer = 11,
    }
    
    [DataContract()]
    public enum ActivityParty_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum ActivityPointer_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum activitypointer_deliveryprioritycode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum ActivityPointerState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Scheduled = 3,
    }
    
    [DataContract()]
    public enum socialprofile_community {
        
        [EnumMember()]
        Other = 0,
        
        [EnumMember()]
        Facebook = 1,
        
        [EnumMember()]
        Twitter = 2,
    }
    
    [DataContract()]
    public enum activitypointer_activitytypecode {
        
        [EnumMember()]
        Appointment = 4201,
        
        [EnumMember()]
        Email = 4202,
        
        [EnumMember()]
        Fax = 4204,
        
        [EnumMember()]
        CaseResolution = 4206,
        
        [EnumMember()]
        Letter = 4207,
        
        [EnumMember()]
        OpportunityClose = 4208,
        
        [EnumMember()]
        OrderClose = 4209,
        
        [EnumMember()]
        PhoneCall = 4210,
        
        [EnumMember()]
        QuoteClose = 4211,
        
        [EnumMember()]
        Task = 4212,
        
        [EnumMember()]
        ServiceActivity = 4214,
        
        [EnumMember()]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        CampaignResponse = 4401,
        
        [EnumMember()]
        CampaignActivity = 4402,
        
        [EnumMember()]
        BulkOperation = 4406,
    }
    
    [DataContract()]
    public enum ActivityPointer_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum ActivityPointer_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Canceled = 3,
        
        [EnumMember()]
        Scheduled = 4,
    }
    
    [DataContract()]
    public enum Appointment_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum Appointment_AttachmentErrors {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        TheappointmentwassavedasaMicrosoftDynamicsCRMappointmentrecordbutnotalltheattachmentscouldbesavedwithitAnattachmentcannotbesavedifitisblockedorifitsfiletypeisinvalid = 1,
    }
    
    [DataContract()]
    public enum Appointment_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum AppointmentState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Scheduled = 3,
    }
    
    [DataContract()]
    public enum Appointment_StatusCode {
        
        [EnumMember()]
        Free = 1,
        
        [EnumMember()]
        Tentative = 2,
        
        [EnumMember()]
        Completed = 3,
        
        [EnumMember()]
        Canceled = 4,
        
        [EnumMember()]
        Busy = 5,
        
        [EnumMember()]
        OutofOffice = 6,
    }
    
    [DataContract()]
    public enum BookableResource_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum BookableResourceState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum BookableResource_ResourceType {
        
        [EnumMember()]
        Generic = 1,
        
        [EnumMember()]
        Contact = 2,
        
        [EnumMember()]
        User = 3,
        
        [EnumMember()]
        Equipment = 4,
        
        [EnumMember()]
        Account = 5,
        
        [EnumMember()]
        Group = 6,
    }
    
    [DataContract()]
    public enum BookableResourceBooking_BookingType {
        
        [EnumMember()]
        Solid = 1,
        
        [EnumMember()]
        Liquid = 2,
    }
    
    [DataContract()]
    public enum BookableResourceBookingState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum BookableResourceBooking_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum BookableResourceBookingHeaderState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum BookableResourceBookingHeader_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum BookableResourceCategoryState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum BookableResourceCategory_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum BookableResourceCategoryAssnState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum BookableResourceCategoryAssn_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum BookableResourceCharacteristic_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum BookableResourceCharacteristicState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum BookableResourceGroup_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum BookableResourceGroupState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum BookingStatus_Status {
        
        [EnumMember()]
        Proposed = 1,
        
        [EnumMember()]
        Committed = 2,
        
        [EnumMember()]
        Canceled = 3,
    }
    
    [DataContract()]
    public enum BookingStatusState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum BookingStatus_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum BusinessUnit_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum BusinessUnit_Address1_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum BusinessUnit_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum BusinessUnit_Address1_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Calendar_Type {
        
        [EnumMember()]
        InnerCalendartype = -1,
        
        [EnumMember()]
        Default = 0,
        
        [EnumMember()]
        CustomerService = 1,
        
        [EnumMember()]
        HolidaySchedule = 2,
    }
    
    [DataContract()]
    public enum CampaignState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Campaign_StatusCode {
        
        [EnumMember()]
        Proposed = 0,
        
        [EnumMember()]
        ReadyToLaunch = 1,
        
        [EnumMember()]
        Launched = 2,
        
        [EnumMember()]
        Completed = 3,
        
        [EnumMember()]
        Canceled = 4,
        
        [EnumMember()]
        Suspended = 5,
        
        [EnumMember()]
        Inactive = 6,
    }
    
    [DataContract()]
    public enum Campaign_TypeCode {
        
        [EnumMember()]
        Advertisement = 1,
        
        [EnumMember()]
        DirectMarketing = 2,
        
        [EnumMember()]
        Event = 3,
        
        [EnumMember()]
        Cobranding = 4,
        
        [EnumMember()]
        Other = 5,
    }
    
    [DataContract()]
    public enum CampaignActivity_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum CampaignActivityState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Closed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum CampaignActivity_StatusCode {
        
        [EnumMember()]
        InProgress = 0,
        
        [EnumMember()]
        Proposed = 1,
        
        [EnumMember()]
        Closed = 2,
        
        [EnumMember()]
        Canceled = 3,
        
        [EnumMember()]
        Pending = 4,
        
        [EnumMember()]
        SystemAborted = 5,
        
        [EnumMember()]
        Completed = 6,
    }
    
    [DataContract()]
    public enum CampaignActivity_ChannelTypeCode {
        
        [EnumMember()]
        Phone = 1,
        
        [EnumMember()]
        Appointment = 2,
        
        [EnumMember()]
        Letter = 3,
        
        [EnumMember()]
        LetterviaMailMerge = 4,
        
        [EnumMember()]
        Fax = 5,
        
        [EnumMember()]
        FaxviaMailMerge = 6,
        
        [EnumMember()]
        Email = 7,
        
        [EnumMember()]
        EmailviaMailMerge = 8,
        
        [EnumMember()]
        Other = 9,
    }
    
    [DataContract()]
    public enum CampaignActivity_TypeCode {
        
        [EnumMember()]
        Research = 1,
        
        [EnumMember()]
        ContentPreparation = 2,
        
        [EnumMember()]
        TargetMarketingListCreation = 3,
        
        [EnumMember()]
        LeadQualification = 4,
        
        [EnumMember()]
        ContentDistribution = 5,
        
        [EnumMember()]
        DirectInitialContact = 6,
        
        [EnumMember()]
        DirectFollowUpContact = 7,
        
        [EnumMember()]
        ReminderDistribution = 8,
    }
    
    [DataContract()]
    public enum CampaignResponse_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum CampaignResponseState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Closed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum CampaignResponse_ResponseCode {
        
        [EnumMember()]
        Interested = 1,
        
        [EnumMember()]
        NotInterested = 2,
        
        [EnumMember()]
        DoNotSendMarketingMaterials = 3,
        
        [EnumMember()]
        Error = 4,
    }
    
    [DataContract()]
    public enum CampaignResponse_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Closed = 2,
        
        [EnumMember()]
        Canceled = 3,
    }
    
    [DataContract()]
    public enum CampaignResponse_ChannelTypeCode {
        
        [EnumMember()]
        Email = 1,
        
        [EnumMember()]
        Phone = 2,
        
        [EnumMember()]
        Fax = 3,
        
        [EnumMember()]
        Letter = 4,
        
        [EnumMember()]
        Appointment = 5,
        
        [EnumMember()]
        Others = 6,
    }
    
    [DataContract()]
    public enum ChannelAccessProfileState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum componentstate {
        
        [EnumMember()]
        Published = 0,
        
        [EnumMember()]
        Unpublished = 1,
        
        [EnumMember()]
        Deleted = 2,
        
        [EnumMember()]
        DeletedUnpublished = 3,
    }
    
    [DataContract()]
    public enum ChannelAccessProfile_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum ChannelAccessProfileRule_StatusCode {
        
        [EnumMember()]
        Draft = 1,
        
        [EnumMember()]
        Active = 2,
    }
    
    [DataContract()]
    public enum ChannelAccessProfileRuleState {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Active = 1,
    }
    
    [DataContract()]
    public enum CharacteristicState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Characteristic_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum bookableresourcecharacteristictype {
        
        [EnumMember()]
        Skill = 1,
        
        [EnumMember()]
        Certification = 2,
    }
    
    [DataContract()]
    public enum Connection_Record2ObjectTypeCode {
        
        [EnumMember()]
        Account = 1,
        
        [EnumMember()]
        Contact = 2,
        
        [EnumMember()]
        Opportunity = 3,
        
        [EnumMember()]
        Lead = 4,
        
        [EnumMember()]
        User = 8,
        
        [EnumMember()]
        Team = 9,
        
        [EnumMember()]
        Position = 50,
        
        [EnumMember()]
        SocialProfile = 99,
        
        [EnumMember()]
        Case = 112,
        
        [EnumMember()]
        Competitor = 123,
        
        [EnumMember()]
        Contract = 1010,
        
        [EnumMember()]
        PriceList = 1022,
        
        [EnumMember()]
        Product = 1024,
        
        [EnumMember()]
        Quote = 1084,
        
        [EnumMember()]
        Order = 1088,
        
        [EnumMember()]
        Invoice = 1090,
        
        [EnumMember()]
        Territory = 2013,
        
        [EnumMember()]
        FacilityEquipment = 4000,
        
        [EnumMember()]
        SchedulingGroup = 4005,
        
        [EnumMember()]
        ResourceGroup = 4007,
        
        [EnumMember()]
        Activity = 4200,
        
        [EnumMember()]
        Appointment = 4201,
        
        [EnumMember()]
        Email = 4202,
        
        [EnumMember()]
        Fax = 4204,
        
        [EnumMember()]
        Letter = 4207,
        
        [EnumMember()]
        PhoneCall = 4210,
        
        [EnumMember()]
        Task = 4212,
        
        [EnumMember()]
        ServiceActivity = 4214,
        
        [EnumMember()]
        SocialActivity = 4216,
        
        [EnumMember()]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        MarketingList = 4300,
        
        [EnumMember()]
        Campaign = 4400,
        
        [EnumMember()]
        CampaignActivity = 4402,
        
        [EnumMember()]
        ProcessSession = 4710,
        
        [EnumMember()]
        ChannelAccessProfileRule = 9400,
        
        [EnumMember()]
        Goal = 9600,
        
        [EnumMember()]
        Entitlement = 9700,
        
        [EnumMember()]
        KnowledgeBaseRecord = 9930,
        
        [EnumMember()]
        KnowledgeArticle = 9953,
        
        [EnumMember()]
        ProfileAlbum = 10000,
        
        [EnumMember()]
        Bus = 10016,
        
        [EnumMember()]
        EniroConfig = 10019,
        
        [EnumMember()]
        EniroLog = 10020,
    }
    
    [DataContract()]
    public enum ConnectionState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Connection_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum Connection_Record1ObjectTypeCode {
        
        [EnumMember()]
        Account = 1,
        
        [EnumMember()]
        Contact = 2,
        
        [EnumMember()]
        Opportunity = 3,
        
        [EnumMember()]
        Lead = 4,
        
        [EnumMember()]
        User = 8,
        
        [EnumMember()]
        Team = 9,
        
        [EnumMember()]
        Position = 50,
        
        [EnumMember()]
        SocialProfile = 99,
        
        [EnumMember()]
        Case = 112,
        
        [EnumMember()]
        Competitor = 123,
        
        [EnumMember()]
        Contract = 1010,
        
        [EnumMember()]
        PriceList = 1022,
        
        [EnumMember()]
        Product = 1024,
        
        [EnumMember()]
        Quote = 1084,
        
        [EnumMember()]
        Order = 1088,
        
        [EnumMember()]
        Invoice = 1090,
        
        [EnumMember()]
        Territory = 2013,
        
        [EnumMember()]
        FacilityEquipment = 4000,
        
        [EnumMember()]
        SchedulingGroup = 4005,
        
        [EnumMember()]
        ResourceGroup = 4007,
        
        [EnumMember()]
        Activity = 4200,
        
        [EnumMember()]
        Appointment = 4201,
        
        [EnumMember()]
        Email = 4202,
        
        [EnumMember()]
        Fax = 4204,
        
        [EnumMember()]
        Letter = 4207,
        
        [EnumMember()]
        PhoneCall = 4210,
        
        [EnumMember()]
        Task = 4212,
        
        [EnumMember()]
        ServiceActivity = 4214,
        
        [EnumMember()]
        SocialActivity = 4216,
        
        [EnumMember()]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        MarketingList = 4300,
        
        [EnumMember()]
        Campaign = 4400,
        
        [EnumMember()]
        CampaignActivity = 4402,
        
        [EnumMember()]
        ProcessSession = 4710,
        
        [EnumMember()]
        ChannelAccessProfileRule = 9400,
        
        [EnumMember()]
        Goal = 9600,
        
        [EnumMember()]
        Entitlement = 9700,
        
        [EnumMember()]
        KnowledgeBaseRecord = 9930,
        
        [EnumMember()]
        KnowledgeArticle = 9953,
        
        [EnumMember()]
        ProfileAlbum = 10000,
        
        [EnumMember()]
        Bus = 10016,
        
        [EnumMember()]
        EniroConfig = 10019,
        
        [EnumMember()]
        EniroLog = 10020,
    }
    
    [DataContract()]
    public enum Contact_Address3_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address1_AddressTypeCode {
        
        [EnumMember()]
        BillTo = 1,
        
        [EnumMember()]
        ShipTo = 2,
        
        [EnumMember()]
        Primary = 3,
        
        [EnumMember()]
        Other = 4,
    }
    
    [DataContract()]
    public enum Contact_AccountRoleCode {
        
        [EnumMember()]
        DecisionMaker = 1,
        
        [EnumMember()]
        Employee = 2,
        
        [EnumMember()]
        Influencer = 3,
    }
    
    [DataContract()]
    public enum Contact_Address1_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Contact_GenderCode {
        
        [EnumMember()]
        Male = 1,
        
        [EnumMember()]
        Female = 2,
    }
    
    [DataContract()]
    public enum Contact_PreferredAppointmentTimeCode {
        
        [EnumMember()]
        Morning = 1,
        
        [EnumMember()]
        Afternoon = 2,
        
        [EnumMember()]
        Evening = 3,
    }
    
    [DataContract()]
    public enum Contact_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
        
        [EnumMember()]
        Anotherstatus = 123500000,
    }
    
    [DataContract()]
    public enum Contact_CustomerTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_CustomerSizeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_PreferredContactMethodCode {
        
        [EnumMember()]
        Any = 1,
        
        [EnumMember()]
        Email = 2,
        
        [EnumMember()]
        Phone = 3,
        
        [EnumMember()]
        Fax = 4,
        
        [EnumMember()]
        Mail = 5,
    }
    
    [DataContract()]
    public enum Contact_Address2_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_EducationCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address3_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_Address1_FreightTermsCode {
        
        [EnumMember()]
        FOB = 1,
        
        [EnumMember()]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum Contact_Address3_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum ContactState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Contact_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_PreferredAppointmentDayCode {
        
        [EnumMember()]
        Sunday = 0,
        
        [EnumMember()]
        Monday = 1,
        
        [EnumMember()]
        Tuesday = 2,
        
        [EnumMember()]
        Wednesday = 3,
        
        [EnumMember()]
        Thursday = 4,
        
        [EnumMember()]
        Friday = 5,
        
        [EnumMember()]
        Saturday = 6,
    }
    
    [DataContract()]
    public enum Contact_HasChildrenCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_FamilyStatusCode {
        
        [EnumMember()]
        Single = 1,
        
        [EnumMember()]
        Married = 2,
        
        [EnumMember()]
        Divorced = 3,
        
        [EnumMember()]
        Widowed = 4,
    }
    
    [DataContract()]
    public enum Contact_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_LeadSourceCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contact_TerritoryCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Contract_AllotmentTypeCode {
        
        [EnumMember()]
        NumberofCases = 1,
        
        [EnumMember()]
        Time = 2,
        
        [EnumMember()]
        CoverageDates = 3,
    }
    
    [DataContract()]
    public enum Contract_ContractServiceLevelCode {
        
        [EnumMember()]
        Gold = 1,
        
        [EnumMember()]
        Silver = 2,
        
        [EnumMember()]
        Bronze = 3,
    }
    
    [DataContract()]
    public enum ContractState {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Invoiced = 1,
        
        [EnumMember()]
        Active = 2,
        
        [EnumMember()]
        OnHold = 3,
        
        [EnumMember()]
        Canceled = 4,
        
        [EnumMember()]
        Expired = 5,
    }
    
    [DataContract()]
    public enum Contract_BillingFrequencyCode {
        
        [EnumMember()]
        Monthly = 1,
        
        [EnumMember()]
        Bimonthly = 2,
        
        [EnumMember()]
        Quarterly = 3,
        
        [EnumMember()]
        Semiannually = 4,
        
        [EnumMember()]
        Annually = 5,
    }
    
    [DataContract()]
    public enum Contract_StatusCode {
        
        [EnumMember()]
        Draft = 1,
        
        [EnumMember()]
        Invoiced = 2,
        
        [EnumMember()]
        Active = 3,
        
        [EnumMember()]
        OnHold = 4,
        
        [EnumMember()]
        Canceled = 5,
        
        [EnumMember()]
        Expired = 6,
    }
    
    [DataContract()]
    public enum dg_myoptionset {
        
        [EnumMember()]
        Item1 = 10016,
        
        [EnumMember()]
        Item2 = 10017,
    }
    
    [DataContract()]
    public enum dg_busState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_bus_dg_PicklistUdregnet {
        
        [EnumMember()]
        Item1 = 123500000,
        
        [EnumMember()]
        Item2 = 123500001,
        
        [EnumMember()]
        Item3 = 123500002,
    }
    
    [DataContract()]
    public enum dg_bus_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_childState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_child_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_eventState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_event_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_fieldState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_field_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_manState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_man_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_mildState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_mild_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
        
        [EnumMember()]
        Old1 = 122930000,
    }
    
    [DataContract()]
    public enum dg_participantState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_participant_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_foodpreference {
        
        [EnumMember()]
        Beef = 123500000,
        
        [EnumMember()]
        Pork = 123500001,
        
        [EnumMember()]
        Vegetarian = 123500002,
        
        [EnumMember()]
        Cake = 123500003,
    }
    
    [DataContract()]
    public enum dg_sheepState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_sheep_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum dg_toothState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum dg_tooth_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum Email_CorrelationMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        Skipped = 1,
        
        [EnumMember()]
        XHeader = 2,
        
        [EnumMember()]
        InReplyTo = 3,
        
        [EnumMember()]
        TrackingToken = 4,
        
        [EnumMember()]
        ConversationIndex = 5,
        
        [EnumMember()]
        SmartMatching = 6,
        
        [EnumMember()]
        CustomCorrelation = 7,
    }
    
    [DataContract()]
    public enum Email_Notifications {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        ThemessagewassavedasaMicrosoftDynamicsCRMemailrecordbutnotalltheattachmentscouldbesavedwithitAnattachmentcannotbesavedifitisblockedorifitsfiletypeisinvalid = 1,
        
        [EnumMember()]
        Truncatedbody = 2,
    }
    
    [DataContract()]
    public enum Email_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum EmailState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Email_StatusCode {
        
        [EnumMember()]
        Draft = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Sent = 3,
        
        [EnumMember()]
        Received = 4,
        
        [EnumMember()]
        Canceled = 5,
        
        [EnumMember()]
        PendingSend = 6,
        
        [EnumMember()]
        Sending = 7,
        
        [EnumMember()]
        Failed = 8,
    }
    
    [DataContract()]
    public enum EmailServerProfile_LastAuthorizationStatus {
        
        [EnumMember()]
        Failure = 0,
        
        [EnumMember()]
        Success = 1,
    }
    
    [DataContract()]
    public enum EmailServerProfile_ServerType {
        
        [EnumMember()]
        ExchangeServer = 0,
        
        [EnumMember()]
        OtherPOP3SMTP = 1,
        
        [EnumMember()]
        ExchangeServerHybrid = 2,
        
        [EnumMember()]
        ExchangeOnlineHybrid = 3,
    }
    
    [DataContract()]
    public enum EmailServerProfile_LastTestValidationStatus {
        
        [EnumMember()]
        Failure = 0,
        
        [EnumMember()]
        Success = 1,
    }
    
    [DataContract()]
    public enum EmailServerProfile_LastTestExecutionStatus {
        
        [EnumMember()]
        Failure = 0,
        
        [EnumMember()]
        Success = 1,
        
        [EnumMember()]
        Warning = 2,
    }
    
    [DataContract()]
    public enum EmailServerProfile_OutgoingCredentialRetrieval {
        
        [EnumMember()]
        CredentialsSpecifiedbyaUserorQueue = 0,
        
        [EnumMember()]
        CredentialsSpecifiedinEmailServerProfile = 1,
        
        [EnumMember()]
        ServertoServerAuthentication = 2,
        
        [EnumMember()]
        WindowsIntegratedAuthentication = 3,
        
        [EnumMember()]
        WithoutCredentialsAnonymous = 4,
    }
    
    [DataContract()]
    public enum EmailServerProfileState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum EmailServerProfile_IncomingCredentialRetrieval {
        
        [EnumMember()]
        CredentialsSpecifiedbyaUserorQueue = 0,
        
        [EnumMember()]
        CredentialsSpecifiedinEmailServerProfile = 1,
        
        [EnumMember()]
        ServertoServerAuthentication = 2,
        
        [EnumMember()]
        WindowsIntegratedAuthentication = 3,
        
        [EnumMember()]
        WithoutCredentialsAnonymous = 4,
    }
    
    [DataContract()]
    public enum emailserverprofile_authenticationprotocol {
        
        [EnumMember()]
        AutoDetect = 0,
        
        [EnumMember()]
        Negotiate = 1,
        
        [EnumMember()]
        NTLM = 2,
        
        [EnumMember()]
        Basic = 3,
    }
    
    [DataContract()]
    public enum EmailServerProfile_ExchangeVersion {
        
        [EnumMember()]
        Exchange2007 = 0,
        
        [EnumMember()]
        Exchange2007SP1 = 1,
        
        [EnumMember()]
        Exchange2010 = 2,
        
        [EnumMember()]
        Exchange2010SP1 = 3,
        
        [EnumMember()]
        Exchange2010SP2 = 4,
        
        [EnumMember()]
        Exchange2013 = 5,
    }
    
    [DataContract()]
    public enum EmailServerProfile_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum Entitlement_KbAccessLevel {
        
        [EnumMember()]
        Standard = 0,
        
        [EnumMember()]
        Premium = 1,
        
        [EnumMember()]
        None = 2,
    }
    
    [DataContract()]
    public enum Entitlement_AllocationTypeCode {
        
        [EnumMember()]
        Numberofcases = 0,
        
        [EnumMember()]
        Numberofhours = 1,
    }
    
    [DataContract()]
    public enum EntitlementState {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Cancelled = 2,
        
        [EnumMember()]
        Expired = 3,
        
        [EnumMember()]
        Waiting = 4,
    }
    
    [DataContract()]
    public enum Entitlement_DecreaseRemainingOn {
        
        [EnumMember()]
        CaseResolution = 0,
        
        [EnumMember()]
        CaseCreation = 1,
    }
    
    [DataContract()]
    public enum Entitlement_StatusCode {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Cancelled = 2,
        
        [EnumMember()]
        Expired = 3,
        
        [EnumMember()]
        Waiting = 1200,
    }
    
    [DataContract()]
    public enum ExternalPartyState {
        
        [EnumMember()]
        Enabled = 0,
        
        [EnumMember()]
        Disabled = 1,
    }
    
    [DataContract()]
    public enum ExternalParty_StatusCode {
        
        [EnumMember()]
        Enabled = 1,
        
        [EnumMember()]
        Disabled = 2,
    }
    
    [DataContract()]
    public enum Fax_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum FaxState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Fax_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Sent = 3,
        
        [EnumMember()]
        Received = 4,
        
        [EnumMember()]
        Canceled = 5,
    }
    
    [DataContract()]
    public enum GoalState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum metric_goaltype {
        
        [EnumMember()]
        Money = 0,
        
        [EnumMember()]
        Decimal = 1,
        
        [EnumMember()]
        Integer = 2,
    }
    
    [DataContract()]
    public enum goal_fiscalperiod {
        
        [EnumMember()]
        Quarter1 = 1,
        
        [EnumMember()]
        Quarter2 = 2,
        
        [EnumMember()]
        Quarter3 = 3,
        
        [EnumMember()]
        Quarter4 = 4,
        
        [EnumMember()]
        January = 101,
        
        [EnumMember()]
        February = 102,
        
        [EnumMember()]
        March = 103,
        
        [EnumMember()]
        April = 104,
        
        [EnumMember()]
        May = 105,
        
        [EnumMember()]
        June = 106,
        
        [EnumMember()]
        July = 107,
        
        [EnumMember()]
        August = 108,
        
        [EnumMember()]
        September = 109,
        
        [EnumMember()]
        October = 110,
        
        [EnumMember()]
        November = 111,
        
        [EnumMember()]
        December = 112,
        
        [EnumMember()]
        Semester1 = 201,
        
        [EnumMember()]
        Semester2 = 202,
        
        [EnumMember()]
        Annual = 301,
        
        [EnumMember()]
        P1 = 401,
        
        [EnumMember()]
        P2 = 402,
        
        [EnumMember()]
        P3 = 403,
        
        [EnumMember()]
        P4 = 404,
        
        [EnumMember()]
        P5 = 405,
        
        [EnumMember()]
        P6 = 406,
        
        [EnumMember()]
        P7 = 407,
        
        [EnumMember()]
        P8 = 408,
        
        [EnumMember()]
        P9 = 409,
        
        [EnumMember()]
        P10 = 410,
        
        [EnumMember()]
        P11 = 411,
        
        [EnumMember()]
        P12 = 412,
        
        [EnumMember()]
        P13 = 413,
    }
    
    [DataContract()]
    public enum goal_fiscalyear {
        
        [EnumMember()]
        FY1970 = 1970,
        
        [EnumMember()]
        FY1971 = 1971,
        
        [EnumMember()]
        FY1972 = 1972,
        
        [EnumMember()]
        FY1973 = 1973,
        
        [EnumMember()]
        FY1974 = 1974,
        
        [EnumMember()]
        FY1975 = 1975,
        
        [EnumMember()]
        FY1976 = 1976,
        
        [EnumMember()]
        FY1977 = 1977,
        
        [EnumMember()]
        FY1978 = 1978,
        
        [EnumMember()]
        FY1979 = 1979,
        
        [EnumMember()]
        FY1980 = 1980,
        
        [EnumMember()]
        FY1981 = 1981,
        
        [EnumMember()]
        FY1982 = 1982,
        
        [EnumMember()]
        FY1983 = 1983,
        
        [EnumMember()]
        FY1984 = 1984,
        
        [EnumMember()]
        FY1985 = 1985,
        
        [EnumMember()]
        FY1986 = 1986,
        
        [EnumMember()]
        FY1987 = 1987,
        
        [EnumMember()]
        FY1988 = 1988,
        
        [EnumMember()]
        FY1989 = 1989,
        
        [EnumMember()]
        FY1990 = 1990,
        
        [EnumMember()]
        FY1991 = 1991,
        
        [EnumMember()]
        FY1992 = 1992,
        
        [EnumMember()]
        FY1993 = 1993,
        
        [EnumMember()]
        FY1994 = 1994,
        
        [EnumMember()]
        FY1995 = 1995,
        
        [EnumMember()]
        FY1996 = 1996,
        
        [EnumMember()]
        FY1997 = 1997,
        
        [EnumMember()]
        FY1998 = 1998,
        
        [EnumMember()]
        FY1999 = 1999,
        
        [EnumMember()]
        FY2000 = 2000,
        
        [EnumMember()]
        FY2001 = 2001,
        
        [EnumMember()]
        FY2002 = 2002,
        
        [EnumMember()]
        FY2003 = 2003,
        
        [EnumMember()]
        FY2004 = 2004,
        
        [EnumMember()]
        FY2005 = 2005,
        
        [EnumMember()]
        FY2006 = 2006,
        
        [EnumMember()]
        FY2007 = 2007,
        
        [EnumMember()]
        FY2008 = 2008,
        
        [EnumMember()]
        FY2009 = 2009,
        
        [EnumMember()]
        FY2010 = 2010,
        
        [EnumMember()]
        FY2011 = 2011,
        
        [EnumMember()]
        FY2012 = 2012,
        
        [EnumMember()]
        FY2013 = 2013,
        
        [EnumMember()]
        FY2014 = 2014,
        
        [EnumMember()]
        FY2015 = 2015,
        
        [EnumMember()]
        FY2016 = 2016,
        
        [EnumMember()]
        FY2017 = 2017,
        
        [EnumMember()]
        FY2018 = 2018,
        
        [EnumMember()]
        FY2019 = 2019,
        
        [EnumMember()]
        FY2020 = 2020,
        
        [EnumMember()]
        FY2021 = 2021,
        
        [EnumMember()]
        FY2022 = 2022,
        
        [EnumMember()]
        FY2023 = 2023,
        
        [EnumMember()]
        FY2024 = 2024,
        
        [EnumMember()]
        FY2025 = 2025,
        
        [EnumMember()]
        FY2026 = 2026,
        
        [EnumMember()]
        FY2027 = 2027,
        
        [EnumMember()]
        FY2028 = 2028,
        
        [EnumMember()]
        FY2029 = 2029,
        
        [EnumMember()]
        FY2030 = 2030,
        
        [EnumMember()]
        FY2031 = 2031,
        
        [EnumMember()]
        FY2032 = 2032,
        
        [EnumMember()]
        FY2033 = 2033,
        
        [EnumMember()]
        FY2034 = 2034,
        
        [EnumMember()]
        FY2035 = 2035,
        
        [EnumMember()]
        FY2036 = 2036,
        
        [EnumMember()]
        FY2037 = 2037,
        
        [EnumMember()]
        FY2038 = 2038,
    }
    
    [DataContract()]
    public enum Goal_StatusCode {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Closed = 1,
        
        [EnumMember()]
        Discarded = 2,
    }
    
    [DataContract()]
    public enum Incident_StatusCode {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        OnHold = 2,
        
        [EnumMember()]
        WaitingforDetails = 3,
        
        [EnumMember()]
        Researching = 4,
        
        [EnumMember()]
        ProblemSolved = 5,
        
        [EnumMember()]
        Canceled = 6,
        
        [EnumMember()]
        InformationProvided = 1000,
        
        [EnumMember()]
        Merged = 2000,
    }
    
    [DataContract()]
    public enum incident_caseorigincode {
        
        [EnumMember()]
        Phone = 1,
        
        [EnumMember()]
        Email = 2,
        
        [EnumMember()]
        Web = 3,
        
        [EnumMember()]
        Facebook = 2483,
        
        [EnumMember()]
        Twitter = 3986,
    }
    
    [DataContract()]
    public enum Incident_CustomerSatisfactionCode {
        
        [EnumMember()]
        VeryDissatisfied = 1,
        
        [EnumMember()]
        Dissatisfied = 2,
        
        [EnumMember()]
        Neutral = 3,
        
        [EnumMember()]
        Satisfied = 4,
        
        [EnumMember()]
        VerySatisfied = 5,
    }
    
    [DataContract()]
    public enum Incident_FirstResponseSLAStatus {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        NearingNoncompliance = 2,
        
        [EnumMember()]
        Succeeded = 3,
        
        [EnumMember()]
        Noncompliant = 4,
    }
    
    [DataContract()]
    public enum servicestage {
        
        [EnumMember()]
        Identify = 0,
        
        [EnumMember()]
        Research = 1,
        
        [EnumMember()]
        Resolve = 2,
    }
    
    [DataContract()]
    public enum Incident_ContractServiceLevelCode {
        
        [EnumMember()]
        Gold = 1,
        
        [EnumMember()]
        Silver = 2,
        
        [EnumMember()]
        Bronze = 3,
    }
    
    [DataContract()]
    public enum Incident_CaseTypeCode {
        
        [EnumMember()]
        Question = 1,
        
        [EnumMember()]
        Problem = 2,
        
        [EnumMember()]
        Request = 3,
    }
    
    [DataContract()]
    public enum Incident_SeverityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Incident_ResolveBySLAStatus {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        NearingNoncompliance = 2,
        
        [EnumMember()]
        Succeeded = 3,
        
        [EnumMember()]
        Noncompliant = 4,
    }
    
    [DataContract()]
    public enum IncidentState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Resolved = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Incident_IncidentStageCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Incident_PriorityCode {
        
        [EnumMember()]
        High = 1,
        
        [EnumMember()]
        Normal = 2,
        
        [EnumMember()]
        Low = 3,
    }
    
    [DataContract()]
    public enum socialactivity_postmessagetype {
        
        [EnumMember()]
        PublicMessage = 0,
        
        [EnumMember()]
        PrivateMessage = 1,
    }
    
    [DataContract()]
    public enum Invoice_PriorityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Invoice_ShipTo_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum InvoiceState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Closeddeprecated = 1,
        
        [EnumMember()]
        Paid = 2,
        
        [EnumMember()]
        Canceled = 3,
    }
    
    [DataContract()]
    public enum Invoice_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Invoice_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum qooi_pricingerrorcode {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        DetailError = 1,
        
        [EnumMember()]
        MissingPriceLevel = 2,
        
        [EnumMember()]
        InactivePriceLevel = 3,
        
        [EnumMember()]
        MissingQuantity = 4,
        
        [EnumMember()]
        MissingUnitPrice = 5,
        
        [EnumMember()]
        MissingProduct = 6,
        
        [EnumMember()]
        InvalidProduct = 7,
        
        [EnumMember()]
        MissingPricingCode = 8,
        
        [EnumMember()]
        InvalidPricingCode = 9,
        
        [EnumMember()]
        MissingUOM = 10,
        
        [EnumMember()]
        ProductNotInPriceLevel = 11,
        
        [EnumMember()]
        MissingPriceLevelAmount = 12,
        
        [EnumMember()]
        MissingPriceLevelPercentage = 13,
        
        [EnumMember()]
        MissingPrice = 14,
        
        [EnumMember()]
        MissingCurrentCost = 15,
        
        [EnumMember()]
        MissingStandardCost = 16,
        
        [EnumMember()]
        InvalidPriceLevelAmount = 17,
        
        [EnumMember()]
        InvalidPriceLevelPercentage = 18,
        
        [EnumMember()]
        InvalidPrice = 19,
        
        [EnumMember()]
        InvalidCurrentCost = 20,
        
        [EnumMember()]
        InvalidStandardCost = 21,
        
        [EnumMember()]
        InvalidRoundingPolicy = 22,
        
        [EnumMember()]
        InvalidRoundingOption = 23,
        
        [EnumMember()]
        InvalidRoundingAmount = 24,
        
        [EnumMember()]
        PriceCalculationError = 25,
        
        [EnumMember()]
        InvalidDiscountType = 26,
        
        [EnumMember()]
        DiscountTypeInvalidState = 27,
        
        [EnumMember()]
        InvalidDiscount = 28,
        
        [EnumMember()]
        InvalidQuantity = 29,
        
        [EnumMember()]
        InvalidPricingPrecision = 30,
        
        [EnumMember()]
        MissingProductDefaultUOM = 31,
        
        [EnumMember()]
        MissingProductUOMSchedule = 32,
        
        [EnumMember()]
        InactiveDiscountType = 33,
        
        [EnumMember()]
        InvalidPriceLevelCurrency = 34,
        
        [EnumMember()]
        PriceAttributeOutOfRange = 35,
        
        [EnumMember()]
        BaseCurrencyAttributeOverflow = 36,
        
        [EnumMember()]
        BaseCurrencyAttributeUnderflow = 37,
    }
    
    [DataContract()]
    public enum Invoice_StatusCode {
        
        [EnumMember()]
        New = 1,
        
        [EnumMember()]
        PartiallyShipped = 2,
        
        [EnumMember()]
        Canceleddeprecated = 3,
        
        [EnumMember()]
        Billed = 4,
        
        [EnumMember()]
        Bookedappliestoservices = 5,
        
        [EnumMember()]
        Installedappliestoservices = 6,
        
        [EnumMember()]
        PaidinFulldeprecated = 7,
        
        [EnumMember()]
        Complete = 100001,
        
        [EnumMember()]
        Partial = 100002,
        
        [EnumMember()]
        Canceled = 100003,
    }
    
    [DataContract()]
    public enum KnowledgeArticleState {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Approved = 1,
        
        [EnumMember()]
        Scheduled = 2,
        
        [EnumMember()]
        Published = 3,
        
        [EnumMember()]
        Expired = 4,
        
        [EnumMember()]
        Archived = 5,
        
        [EnumMember()]
        Discarded = 6,
    }
    
    [DataContract()]
    public enum KnowledgeArticle_ExpiredReviewOptions {
        
        [EnumMember()]
        NeedsUpdating = 0,
        
        [EnumMember()]
        Republish = 1,
        
        [EnumMember()]
        Archive = 2,
    }
    
    [DataContract()]
    public enum KnowledgeArticle_Review {
        
        [EnumMember()]
        Approved = 0,
        
        [EnumMember()]
        Rejected = 1,
    }
    
    [DataContract()]
    public enum KnowledgeArticle_StatusCode {
        
        [EnumMember()]
        Proposed = 1,
        
        [EnumMember()]
        Draft = 2,
        
        [EnumMember()]
        Needsreview = 3,
        
        [EnumMember()]
        Inreview = 4,
        
        [EnumMember()]
        Approved = 5,
        
        [EnumMember()]
        Scheduled = 6,
        
        [EnumMember()]
        Published = 7,
        
        [EnumMember()]
        Needsreview_2 = 8,
        
        [EnumMember()]
        Updating = 9,
        
        [EnumMember()]
        Expired = 10,
        
        [EnumMember()]
        Rejected = 11,
        
        [EnumMember()]
        Archived = 12,
        
        [EnumMember()]
        Discarded = 13,
        
        [EnumMember()]
        Rejected_2 = 14,
    }
    
    [DataContract()]
    public enum budgetstatus {
        
        [EnumMember()]
        NoCommittedBudget = 0,
        
        [EnumMember()]
        MayBuy = 1,
        
        [EnumMember()]
        CanBuy = 2,
        
        [EnumMember()]
        WillBuy = 3,
    }
    
    [DataContract()]
    public enum Lead_Address1_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Lead_Address1_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Lead_LeadQualityCode {
        
        [EnumMember()]
        Hot = 1,
        
        [EnumMember()]
        Warm = 2,
        
        [EnumMember()]
        Cold = 3,
    }
    
    [DataContract()]
    public enum Lead_StatusCode {
        
        [EnumMember()]
        New = 1,
        
        [EnumMember()]
        Contacted = 2,
        
        [EnumMember()]
        Qualified = 3,
        
        [EnumMember()]
        Lost = 4,
        
        [EnumMember()]
        CannotContact = 5,
        
        [EnumMember()]
        NoLongerInterested = 6,
        
        [EnumMember()]
        Canceled = 7,
    }
    
    [DataContract()]
    public enum initialcommunication {
        
        [EnumMember()]
        Contacted = 0,
        
        [EnumMember()]
        NotContacted = 1,
    }
    
    [DataContract()]
    public enum Lead_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum lead_salesstage {
        
        [EnumMember()]
        Qualify = 0,
    }
    
    [DataContract()]
    public enum Lead_PreferredContactMethodCode {
        
        [EnumMember()]
        Any = 1,
        
        [EnumMember()]
        Email = 2,
        
        [EnumMember()]
        Phone = 3,
        
        [EnumMember()]
        Fax = 4,
        
        [EnumMember()]
        Mail = 5,
    }
    
    [DataContract()]
    public enum Lead_LeadSourceCode {
        
        [EnumMember()]
        Advertisement = 1,
        
        [EnumMember()]
        EmployeeReferral = 2,
        
        [EnumMember()]
        ExternalReferral = 3,
        
        [EnumMember()]
        Partner = 4,
        
        [EnumMember()]
        PublicRelations = 5,
        
        [EnumMember()]
        Seminar = 6,
        
        [EnumMember()]
        TradeShow = 7,
        
        [EnumMember()]
        Web = 8,
        
        [EnumMember()]
        WordofMouth = 9,
        
        [EnumMember()]
        Other = 10,
    }
    
    [DataContract()]
    public enum Lead_IndustryCode {
        
        [EnumMember()]
        Accounting = 1,
        
        [EnumMember()]
        AgricultureandNonpetrolNaturalResourceExtraction = 2,
        
        [EnumMember()]
        BroadcastingPrintingandPublishing = 3,
        
        [EnumMember()]
        Brokers = 4,
        
        [EnumMember()]
        BuildingSupplyRetail = 5,
        
        [EnumMember()]
        BusinessServices = 6,
        
        [EnumMember()]
        Consulting = 7,
        
        [EnumMember()]
        ConsumerServices = 8,
        
        [EnumMember()]
        DesignDirectionandCreativeManagement = 9,
        
        [EnumMember()]
        DistributorsDispatchersandProcessors = 10,
        
        [EnumMember()]
        DoctorsOfficesandClinics = 11,
        
        [EnumMember()]
        DurableManufacturing = 12,
        
        [EnumMember()]
        EatingandDrinkingPlaces = 13,
        
        [EnumMember()]
        EntertainmentRetail = 14,
        
        [EnumMember()]
        EquipmentRentalandLeasing = 15,
        
        [EnumMember()]
        Financial = 16,
        
        [EnumMember()]
        FoodandTobaccoProcessing = 17,
        
        [EnumMember()]
        InboundCapitalIntensiveProcessing = 18,
        
        [EnumMember()]
        InboundRepairandServices = 19,
        
        [EnumMember()]
        Insurance = 20,
        
        [EnumMember()]
        LegalServices = 21,
        
        [EnumMember()]
        NonDurableMerchandiseRetail = 22,
        
        [EnumMember()]
        OutboundConsumerService = 23,
        
        [EnumMember()]
        PetrochemicalExtractionandDistribution = 24,
        
        [EnumMember()]
        ServiceRetail = 25,
        
        [EnumMember()]
        SIGAffiliations = 26,
        
        [EnumMember()]
        SocialServices = 27,
        
        [EnumMember()]
        SpecialOutboundTradeContractors = 28,
        
        [EnumMember()]
        SpecialtyRealty = 29,
        
        [EnumMember()]
        Transportation = 30,
        
        [EnumMember()]
        UtilityCreationandDistribution = 31,
        
        [EnumMember()]
        VehicleRetail = 32,
        
        [EnumMember()]
        Wholesale = 33,
    }
    
    [DataContract()]
    public enum Lead_SalesStageCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum purchasetimeframe {
        
        [EnumMember()]
        Immediate = 0,
        
        [EnumMember()]
        ThisQuarter = 1,
        
        [EnumMember()]
        NextQuarter = 2,
        
        [EnumMember()]
        ThisYear = 3,
        
        [EnumMember()]
        Unknown = 4,
    }
    
    [DataContract()]
    public enum Lead_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Lead_PriorityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum purchaseprocess {
        
        [EnumMember()]
        Individual = 0,
        
        [EnumMember()]
        Committee = 1,
        
        [EnumMember()]
        Unknown = 2,
    }
    
    [DataContract()]
    public enum need {
        
        [EnumMember()]
        Musthave = 0,
        
        [EnumMember()]
        Shouldhave = 1,
        
        [EnumMember()]
        Goodtohave = 2,
        
        [EnumMember()]
        Noneed = 3,
    }
    
    [DataContract()]
    public enum LeadState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Qualified = 1,
        
        [EnumMember()]
        Disqualified = 2,
    }
    
    [DataContract()]
    public enum Letter_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum LetterState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Letter_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Draft = 2,
        
        [EnumMember()]
        Received = 3,
        
        [EnumMember()]
        Sent = 4,
        
        [EnumMember()]
        Canceled = 5,
    }
    
    [DataContract()]
    public enum List_CreatedFromCode {
        
        [EnumMember()]
        Account = 1,
        
        [EnumMember()]
        Contact = 2,
        
        [EnumMember()]
        Lead = 4,
    }
    
    [DataContract()]
    public enum List_StatusCode {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum ListState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Mailbox_IncomingEmailStatus {
        
        [EnumMember()]
        NotRun = 0,
        
        [EnumMember()]
        Success = 1,
        
        [EnumMember()]
        Failure = 2,
    }
    
    [DataContract()]
    public enum Mailbox_OutgoingEmailDeliveryMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        MicrosoftDynamicsCRMforOutlook = 1,
        
        [EnumMember()]
        ServerSideSynchronizationorEmailRouter = 2,
    }
    
    [DataContract()]
    public enum Mailbox_OutgoingEmailStatus {
        
        [EnumMember()]
        NotRun = 0,
        
        [EnumMember()]
        Success = 1,
        
        [EnumMember()]
        Failure = 2,
    }
    
    [DataContract()]
    public enum Mailbox_ACTStatus {
        
        [EnumMember()]
        NotRun = 0,
        
        [EnumMember()]
        Success = 1,
        
        [EnumMember()]
        Failure = 2,
    }
    
    [DataContract()]
    public enum Mailbox_OfficeAppsDeploymentStatus {
        
        [EnumMember()]
        NotInstalled = 0,
        
        [EnumMember()]
        Installed = 1,
        
        [EnumMember()]
        InstallFailed = 2,
        
        [EnumMember()]
        UninstallFailed = 3,
    }
    
    [DataContract()]
    public enum MailboxState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum Mailbox_EmailRouterAccessApproval {
        
        [EnumMember()]
        Empty = 0,
        
        [EnumMember()]
        Approved = 1,
        
        [EnumMember()]
        PendingApproval = 2,
        
        [EnumMember()]
        Rejected = 3,
    }
    
    [DataContract()]
    public enum Mailbox_MailboxStatus {
        
        [EnumMember()]
        NotRun = 0,
        
        [EnumMember()]
        Success = 1,
        
        [EnumMember()]
        Failure = 2,
    }
    
    [DataContract()]
    public enum Mailbox_IncomingEmailDeliveryMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        MicrosoftDynamicsCRMforOutlook = 1,
        
        [EnumMember()]
        ServerSideSynchronizationorEmailRouter = 2,
        
        [EnumMember()]
        ForwardMailbox = 3,
    }
    
    [DataContract()]
    public enum Mailbox_ACTDeliveryMethod {
        
        [EnumMember()]
        MicrosoftDynamicsCRMforOutlook = 0,
        
        [EnumMember()]
        ServerSideSynchronization = 1,
        
        [EnumMember()]
        None = 2,
    }
    
    [DataContract()]
    public enum Mailbox_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum msdyn_PostAlbumState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum msdyn_PostAlbum_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum msdyn_wallsavedqueryusersettingsState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum msdyn_wallsavedqueryusersettings_statuscode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum Opportunity_StatusCode {
        
        [EnumMember()]
        InProgress = 1,
        
        [EnumMember()]
        OnHold = 2,
        
        [EnumMember()]
        Won = 3,
        
        [EnumMember()]
        Canceled = 4,
        
        [EnumMember()]
        OutSold = 5,
    }
    
    [DataContract()]
    public enum Opportunity_OpportunityRatingCode {
        
        [EnumMember()]
        Hot = 1,
        
        [EnumMember()]
        Warm = 2,
        
        [EnumMember()]
        Cold = 3,
    }
    
    [DataContract()]
    public enum opportunity_salesstage {
        
        [EnumMember()]
        Qualify = 0,
        
        [EnumMember()]
        Develop = 1,
        
        [EnumMember()]
        Propose = 2,
        
        [EnumMember()]
        Close = 3,
    }
    
    [DataContract()]
    public enum Opportunity_TimeLine {
        
        [EnumMember()]
        Immediate = 0,
        
        [EnumMember()]
        ThisQuarter = 1,
        
        [EnumMember()]
        NextQuarter = 2,
        
        [EnumMember()]
        ThisYear = 3,
        
        [EnumMember()]
        Notknown = 4,
    }
    
    [DataContract()]
    public enum Opportunity_SalesStageCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum OpportunityState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Won = 1,
        
        [EnumMember()]
        Lost = 2,
    }
    
    [DataContract()]
    public enum Opportunity_PriorityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum OpportunityCloseState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum OpportunityClose_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Completed = 2,
        
        [EnumMember()]
        Canceled = 3,
    }
    
    [DataContract()]
    public enum Organization_YammerPostMethod {
        
        [EnumMember()]
        Public = 0,
        
        [EnumMember()]
        Private = 1,
    }
    
    [DataContract()]
    public enum Organization_FullNameConventionCode {
        
        [EnumMember()]
        LastNameFirstName = 0,
        
        [EnumMember()]
        FirstName = 1,
        
        [EnumMember()]
        LastNameFirstNameMiddleInitial = 2,
        
        [EnumMember()]
        FirstNameMiddleInitialLastName = 3,
        
        [EnumMember()]
        LastNameFirstNameMiddleName = 4,
        
        [EnumMember()]
        FirstNameMiddleNameLastName = 5,
        
        [EnumMember()]
        LastNamespaceFirstName = 6,
        
        [EnumMember()]
        LastNamenospaceFirstName = 7,
    }
    
    [DataContract()]
    public enum Organization_DefaultRecurrenceEndRangeType {
        
        [EnumMember()]
        NoEndDate = 1,
        
        [EnumMember()]
        NumberofOccurrences = 2,
        
        [EnumMember()]
        EndByDate = 3,
    }
    
    [DataContract()]
    public enum Organization_ISVIntegrationCode {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        Web = 1,
        
        [EnumMember()]
        OutlookWorkstationClient = 2,
        
        [EnumMember()]
        WebOutlookWorkstationClient = 3,
        
        [EnumMember()]
        OutlookLaptopClient = 4,
        
        [EnumMember()]
        WebOutlookLaptopClient = 5,
        
        [EnumMember()]
        Outlook = 6,
        
        [EnumMember()]
        All = 7,
    }
    
    [DataContract()]
    public enum Organization_ReportScriptErrors {
        
        [EnumMember()]
        NopreferenceforsendinganerrorreporttoMicrosoftaboutMicrosoftDynamicsCRM = 0,
        
        [EnumMember()]
        AskmeforpermissiontosendanerrorreporttoMicrosoft = 1,
        
        [EnumMember()]
        AutomaticallysendanerrorreporttoMicrosoftwithoutaskingmeforpermission = 2,
        
        [EnumMember()]
        NeversendanerrorreporttoMicrosoftaboutMicrosoftDynamicsCRM = 3,
    }
    
    [DataContract()]
    public enum Organization_NegativeFormatCode {
        
        [EnumMember()]
        Brackets = 0,
        
        [EnumMember()]
        Dash = 1,
        
        [EnumMember()]
        DashplusSpace = 2,
        
        [EnumMember()]
        TrailingDash = 3,
        
        [EnumMember()]
        SpaceplusTrailingDash = 4,
    }
    
    [DataContract()]
    public enum Organization_SharePointDeploymentType {
        
        [EnumMember()]
        Online = 0,
        
        [EnumMember()]
        OnPremises = 1,
    }
    
    [DataContract()]
    public enum Organization_CurrencyDisplayOption {
        
        [EnumMember()]
        Currencysymbol = 0,
        
        [EnumMember()]
        Currencycode = 1,
    }
    
    [DataContract()]
    public enum Organization_CurrencyFormatCode {
        
        [EnumMember()]
        _123 = 0,
        
        [EnumMember()]
        _123_2 = 1,
        
        [EnumMember()]
        _123_3 = 2,
        
        [EnumMember()]
        _123_4 = 3,
    }
    
    [DataContract()]
    public enum Organization_FiscalYearFormatPrefix {
        
        [EnumMember()]
        FY = 1,
        
        [EnumMember()]
        _EmptyString = 2,
    }
    
    [DataContract()]
    public enum Organization_FiscalPeriodFormatPeriod {
        
        [EnumMember()]
        Quarter0 = 1,
        
        [EnumMember()]
        Q0 = 2,
        
        [EnumMember()]
        P0 = 3,
        
        [EnumMember()]
        Month0 = 4,
        
        [EnumMember()]
        M0 = 5,
        
        [EnumMember()]
        Semester0 = 6,
        
        [EnumMember()]
        MonthName = 7,
    }
    
    [DataContract()]
    public enum Organization_EmailConnectionChannel {
        
        [EnumMember()]
        ServerSideSynchronization = 0,
        
        [EnumMember()]
        MicrosoftDynamicsCRM2016EmailRouter = 1,
    }
    
    [DataContract()]
    public enum Organization_FiscalYearFormatYear {
        
        [EnumMember()]
        YYYY = 1,
        
        [EnumMember()]
        YY = 2,
        
        [EnumMember()]
        GGYY = 3,
    }
    
    [DataContract()]
    public enum Organization_DiscountCalculationMethod {
        
        [EnumMember()]
        Lineitem = 0,
        
        [EnumMember()]
        Perunit = 1,
    }
    
    [DataContract()]
    public enum Organization_PluginTraceLogSetting {
        
        [EnumMember()]
        Off = 0,
        
        [EnumMember()]
        Exception = 1,
        
        [EnumMember()]
        All = 2,
    }
    
    [DataContract()]
    public enum Organization_FiscalYearFormatSuffix {
        
        [EnumMember()]
        FY = 1,
        
        [EnumMember()]
        FiscalYear = 2,
        
        [EnumMember()]
        _EmptyString = 3,
    }
    
    [DataContract()]
    public enum PhoneCall_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum PhoneCallState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum PhoneCall_StatusCode {
        
        [EnumMember()]
        Open = 1,
        
        [EnumMember()]
        Made = 2,
        
        [EnumMember()]
        Canceled = 3,
        
        [EnumMember()]
        Received = 4,
    }
    
    [DataContract()]
    public enum QueueItem_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum QueueItemState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum QueueItem_ObjectTypeCode {
        
        [EnumMember()]
        Case = 112,
        
        [EnumMember()]
        Activity = 4200,
        
        [EnumMember()]
        Appointment = 4201,
        
        [EnumMember()]
        Email = 4202,
        
        [EnumMember()]
        Fax = 4204,
        
        [EnumMember()]
        Letter = 4207,
        
        [EnumMember()]
        PhoneCall = 4210,
        
        [EnumMember()]
        Task = 4212,
        
        [EnumMember()]
        ServiceActivity = 4214,
        
        [EnumMember()]
        SocialActivity = 4216,
        
        [EnumMember()]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        CampaignResponse = 4401,
        
        [EnumMember()]
        CampaignActivity = 4402,
        
        [EnumMember()]
        QuickCampaign = 4406,
        
        [EnumMember()]
        KnowledgeArticle = 9953,
    }
    
    [DataContract()]
    public enum Quote_ShipTo_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum QuoteState {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Won = 2,
        
        [EnumMember()]
        Closed = 3,
    }
    
    [DataContract()]
    public enum Quote_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum Quote_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum Quote_StatusCode {
        
        [EnumMember()]
        InProgress_2 = 1,
        
        [EnumMember()]
        InProgress = 2,
        
        [EnumMember()]
        Open = 3,
        
        [EnumMember()]
        Won = 4,
        
        [EnumMember()]
        Lost = 5,
        
        [EnumMember()]
        Canceled = 6,
        
        [EnumMember()]
        Revised = 7,
    }
    
    [DataContract()]
    public enum Quote_FreightTermsCode {
        
        [EnumMember()]
        FOB = 1,
        
        [EnumMember()]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum RatingModelState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum RatingModel_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum RatingValueState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum RatingValue_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum RecurringAppointmentMaster_InstanceTypeCode {
        
        [EnumMember()]
        NotRecurring = 0,
        
        [EnumMember()]
        RecurringMaster = 1,
        
        [EnumMember()]
        RecurringInstance = 2,
        
        [EnumMember()]
        RecurringException = 3,
        
        [EnumMember()]
        RecurringFutureException = 4,
    }
    
    [DataContract()]
    public enum RecurringAppointmentMaster_ExpansionStateCode {
        
        [EnumMember()]
        Unexpanded = 0,
        
        [EnumMember()]
        Partial = 1,
        
        [EnumMember()]
        Full = 2,
    }
    
    [DataContract()]
    public enum RecurringAppointmentMaster_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum RecurringAppointmentMasterState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Scheduled = 3,
    }
    
    [DataContract()]
    public enum RecurringAppointmentMaster_PatternEndType {
        
        [EnumMember()]
        NoEndDate = 1,
        
        [EnumMember()]
        Occurrences = 2,
        
        [EnumMember()]
        PatternEndDate = 3,
    }
    
    [DataContract()]
    public enum RecurringAppointmentMaster_Instance {
        
        [EnumMember()]
        First = 1,
        
        [EnumMember()]
        Second = 2,
        
        [EnumMember()]
        Third = 3,
        
        [EnumMember()]
        Fourth = 4,
        
        [EnumMember()]
        Last = 5,
    }
    
    [DataContract()]
    public enum recurrencerule_monthofyear {
        
        [EnumMember()]
        InvalidMonthOfYear = 0,
        
        [EnumMember()]
        January = 1,
        
        [EnumMember()]
        February = 2,
        
        [EnumMember()]
        March = 3,
        
        [EnumMember()]
        April = 4,
        
        [EnumMember()]
        May = 5,
        
        [EnumMember()]
        June = 6,
        
        [EnumMember()]
        July = 7,
        
        [EnumMember()]
        August = 8,
        
        [EnumMember()]
        September = 9,
        
        [EnumMember()]
        October = 10,
        
        [EnumMember()]
        November = 11,
        
        [EnumMember()]
        December = 12,
    }
    
    [DataContract()]
    public enum RecurringAppointmentMaster_RecurrencePatternType {
        
        [EnumMember()]
        Daily = 0,
        
        [EnumMember()]
        Weekly = 1,
        
        [EnumMember()]
        Monthly = 2,
        
        [EnumMember()]
        Yearly = 3,
    }
    
    [DataContract()]
    public enum RecurringAppointmentMaster_StatusCode {
        
        [EnumMember()]
        Free = 1,
        
        [EnumMember()]
        Tentative = 2,
        
        [EnumMember()]
        Completed = 3,
        
        [EnumMember()]
        Canceled = 4,
        
        [EnumMember()]
        Busy = 5,
        
        [EnumMember()]
        OutofOffice = 6,
    }
    
    [DataContract()]
    public enum SalesOrder_PaymentTermsCode {
        
        [EnumMember()]
        Net30 = 1,
        
        [EnumMember()]
        _210Net30 = 2,
        
        [EnumMember()]
        Net45 = 3,
        
        [EnumMember()]
        Net60 = 4,
    }
    
    [DataContract()]
    public enum SalesOrder_StatusCode {
        
        [EnumMember()]
        New = 1,
        
        [EnumMember()]
        Pending = 2,
        
        [EnumMember()]
        InProgress = 3,
        
        [EnumMember()]
        NoMoney = 4,
        
        [EnumMember()]
        Complete = 100001,
        
        [EnumMember()]
        Partial = 100002,
        
        [EnumMember()]
        Invoiced = 100003,
    }
    
    [DataContract()]
    public enum SalesOrder_ShipTo_FreightTermsCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SalesOrder_FreightTermsCode {
        
        [EnumMember()]
        FOB = 1,
        
        [EnumMember()]
        NoCharge = 2,
    }
    
    [DataContract()]
    public enum SalesOrder_PriorityCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SalesOrder_ShippingMethodCode {
        
        [EnumMember()]
        Airborne = 1,
        
        [EnumMember()]
        DHL = 2,
        
        [EnumMember()]
        FedEx = 3,
        
        [EnumMember()]
        UPS = 4,
        
        [EnumMember()]
        PostalMail = 5,
        
        [EnumMember()]
        FullLoad = 6,
        
        [EnumMember()]
        WillCall = 7,
    }
    
    [DataContract()]
    public enum SalesOrderState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Submitted = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Fulfilled = 3,
        
        [EnumMember()]
        Invoiced = 4,
    }
    
    [DataContract()]
    public enum ServiceAppointment_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum ServiceAppointmentState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Closed = 1,
        
        [EnumMember()]
        Canceled = 2,
        
        [EnumMember()]
        Scheduled = 3,
    }
    
    [DataContract()]
    public enum ServiceAppointment_StatusCode {
        
        [EnumMember()]
        Requested = 1,
        
        [EnumMember()]
        Tentative = 2,
        
        [EnumMember()]
        Pending = 3,
        
        [EnumMember()]
        Reserved = 4,
        
        [EnumMember()]
        InProgress = 6,
        
        [EnumMember()]
        Arrived = 7,
        
        [EnumMember()]
        Completed = 8,
        
        [EnumMember()]
        Canceled = 9,
        
        [EnumMember()]
        NoShow = 10,
    }
    
    [DataContract()]
    public enum sharepointsite_servicetype {
        
        [EnumMember()]
        SharePoint = 0,
        
        [EnumMember()]
        OneDrive = 1,
        
        [EnumMember()]
        Sharedwithme = 2,
    }
    
    [DataContract()]
    public enum SharePointDocumentLocationState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum sharepointdocumentlocation_locationtype {
        
        [EnumMember()]
        General = 0,
        
        [EnumMember()]
        DedicatedforOneNoteIntegration = 1,
    }
    
    [DataContract()]
    public enum SharePointDocumentLocation_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum sharepoint_validationstatus {
        
        [EnumMember()]
        NotValidated = 1,
        
        [EnumMember()]
        InProgress = 2,
        
        [EnumMember()]
        Invalid = 3,
        
        [EnumMember()]
        Valid = 4,
        
        [EnumMember()]
        Couldnotvalidate = 5,
    }
    
    [DataContract()]
    public enum SharePointSite_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum SharePointSite_FolderStructureEntity {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        Account = 1,
        
        [EnumMember()]
        Contact = 2,
    }
    
    [DataContract()]
    public enum SharePointSiteState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum sharepoint_validationstatusreason {
        
        [EnumMember()]
        ThisrecordsURLhasnotbeenvalidated = 1,
        
        [EnumMember()]
        ThisrecordsURLisvalid = 2,
        
        [EnumMember()]
        ThisrecordsURLisnotvalid = 3,
        
        [EnumMember()]
        TheURLschemesofMicrosoftDynamicsCRMandSharePointaredifferent = 4,
        
        [EnumMember()]
        TheURLcouldnotbeaccessedbecauseofInternetExplorersecuritysettings = 5,
        
        [EnumMember()]
        Authenticationfailure = 6,
        
        [EnumMember()]
        Invalidcertificates = 7,
    }
    
    [DataContract()]
    public enum SLA_StatusCode {
        
        [EnumMember()]
        Draft = 1,
        
        [EnumMember()]
        Active = 2,
    }
    
    [DataContract()]
    public enum SLA_ObjectTypeCode {
        
        [EnumMember()]
        Account = 1,
        
        [EnumMember()]
        Contact = 2,
        
        [EnumMember()]
        Opportunity = 3,
        
        [EnumMember()]
        Lead = 4,
        
        [EnumMember()]
        Note = 5,
        
        [EnumMember()]
        BusinessUnitMap = 6,
        
        [EnumMember()]
        Owner = 7,
        
        [EnumMember()]
        User = 8,
        
        [EnumMember()]
        Team = 9,
        
        [EnumMember()]
        BusinessUnit = 10,
        
        [EnumMember()]
        SystemUserPrincipal = 14,
        
        [EnumMember()]
        Subscription = 29,
        
        [EnumMember()]
        FilterTemplate = 30,
        
        [EnumMember()]
        PrivilegeObjectTypeCode = 31,
        
        [EnumMember()]
        SalesProcessInstance = 32,
        
        [EnumMember()]
        SubscriptionSynchronizationInformation = 33,
        
        [EnumMember()]
        Trackinginformationfordeletedentities = 35,
        
        [EnumMember()]
        Clientupdate = 36,
        
        [EnumMember()]
        SubscriptionManuallyTrackedObject = 37,
        
        [EnumMember()]
        SystemUserBusinessUnitEntityMap = 42,
        
        [EnumMember()]
        FieldSharing = 44,
        
        [EnumMember()]
        SubscriptionStatisticOffline = 45,
        
        [EnumMember()]
        SubscriptionStatisticOutlook = 46,
        
        [EnumMember()]
        SubscriptionSyncEntryOffline = 47,
        
        [EnumMember()]
        SubscriptionSyncEntryOutlook = 48,
        
        [EnumMember()]
        Position = 50,
        
        [EnumMember()]
        SystemUserManagerMap = 51,
        
        [EnumMember()]
        Teamtemplate = 92,
        
        [EnumMember()]
        SocialProfile = 99,
        
        [EnumMember()]
        Case = 112,
        
        [EnumMember()]
        ChildIncidentCount = 113,
        
        [EnumMember()]
        Competitor = 123,
        
        [EnumMember()]
        IndexedArticle = 126,
        
        [EnumMember()]
        Article = 127,
        
        [EnumMember()]
        Subject = 129,
        
        [EnumMember()]
        Announcement = 132,
        
        [EnumMember()]
        ActivityParty = 135,
        
        [EnumMember()]
        UserSettings = 150,
        
        [EnumMember()]
        Attachment = 1001,
        
        [EnumMember()]
        Attachment_2 = 1002,
        
        [EnumMember()]
        InternalAddress = 1003,
        
        [EnumMember()]
        CompetitorAddress = 1004,
        
        [EnumMember()]
        CompetitorProduct = 1006,
        
        [EnumMember()]
        ImageDescriptor = 1007,
        
        [EnumMember()]
        Contract = 1010,
        
        [EnumMember()]
        ContractLine = 1011,
        
        [EnumMember()]
        Discount = 1013,
        
        [EnumMember()]
        ArticleTemplate = 1016,
        
        [EnumMember()]
        LeadAddress = 1017,
        
        [EnumMember()]
        Organization = 1019,
        
        [EnumMember()]
        OrganizationUI = 1021,
        
        [EnumMember()]
        PriceList = 1022,
        
        [EnumMember()]
        Privilege = 1023,
        
        [EnumMember()]
        Product = 1024,
        
        [EnumMember()]
        ProductAssociation = 1025,
        
        [EnumMember()]
        PriceListItem = 1026,
        
        [EnumMember()]
        ProductRelationship = 1028,
        
        [EnumMember()]
        SystemForm = 1030,
        
        [EnumMember()]
        UserDashboard = 1031,
        
        [EnumMember()]
        SecurityRole = 1036,
        
        [EnumMember()]
        RoleTemplate = 1037,
        
        [EnumMember()]
        SalesLiterature = 1038,
        
        [EnumMember()]
        View = 1039,
        
        [EnumMember()]
        StringMap = 1043,
        
        [EnumMember()]
        Property = 1048,
        
        [EnumMember()]
        PropertyOptionSetItem = 1049,
        
        [EnumMember()]
        Unit = 1055,
        
        [EnumMember()]
        UnitGroup = 1056,
        
        [EnumMember()]
        SalesAttachment = 1070,
        
        [EnumMember()]
        Address = 1071,
        
        [EnumMember()]
        SubscriptionClients = 1072,
        
        [EnumMember()]
        StatusMap = 1075,
        
        [EnumMember()]
        DiscountList = 1080,
        
        [EnumMember()]
        ArticleComment = 1082,
        
        [EnumMember()]
        OpportunityProduct = 1083,
        
        [EnumMember()]
        Quote = 1084,
        
        [EnumMember()]
        QuoteProduct = 1085,
        
        [EnumMember()]
        UserFiscalCalendar = 1086,
        
        [EnumMember()]
        Order = 1088,
        
        [EnumMember()]
        OrderProduct = 1089,
        
        [EnumMember()]
        Invoice = 1090,
        
        [EnumMember()]
        InvoiceProduct = 1091,
        
        [EnumMember()]
        AuthorizationServer = 1094,
        
        [EnumMember()]
        PartnerApplication = 1095,
        
        [EnumMember()]
        SystemChart = 1111,
        
        [EnumMember()]
        UserChart = 1112,
        
        [EnumMember()]
        RibbonTabToCommandMapping = 1113,
        
        [EnumMember()]
        RibbonContextGroup = 1115,
        
        [EnumMember()]
        RibbonCommand = 1116,
        
        [EnumMember()]
        RibbonRule = 1117,
        
        [EnumMember()]
        ApplicationRibbons = 1120,
        
        [EnumMember()]
        RibbonDifference = 1130,
        
        [EnumMember()]
        ReplicationBacklog = 1140,
        
        [EnumMember()]
        Characteristic = 1141,
        
        [EnumMember()]
        RatingValue = 1142,
        
        [EnumMember()]
        RatingModel = 1144,
        
        [EnumMember()]
        BookableResourceBooking = 1145,
        
        [EnumMember()]
        BookableResourceBookingHeader = 1146,
        
        [EnumMember()]
        BookableResourceCategory = 1147,
        
        [EnumMember()]
        BookableResourceCharacteristic = 1148,
        
        [EnumMember()]
        BookableResourceCategoryAssn = 1149,
        
        [EnumMember()]
        BookableResource = 1150,
        
        [EnumMember()]
        BookableResourceGroup = 1151,
        
        [EnumMember()]
        BookingStatus = 1152,
        
        [EnumMember()]
        DocumentRecommendation = 1189,
        
        [EnumMember()]
        FieldSecurityProfile = 1200,
        
        [EnumMember()]
        FieldPermission = 1201,
        
        [EnumMember()]
        TeamProfiles = 1203,
        
        [EnumMember()]
        ChannelPropertyGroup = 1234,
        
        [EnumMember()]
        PropertyAssociation = 1235,
        
        [EnumMember()]
        ChannelProperty = 1236,
        
        [EnumMember()]
        SocialInsightsConfiguration = 1300,
        
        [EnumMember()]
        SavedOrganizationInsightsConfiguration = 1309,
        
        [EnumMember()]
        PropertyInstance = 1333,
        
        [EnumMember()]
        SyncAttributeMappingProfile = 1400,
        
        [EnumMember()]
        SyncAttributeMapping = 1401,
        
        [EnumMember()]
        TeamSyncAttributeMappingProfiles = 1403,
        
        [EnumMember()]
        PrincipalSyncAttributeMap = 1404,
        
        [EnumMember()]
        AnnualFiscalCalendar = 2000,
        
        [EnumMember()]
        SemiannualFiscalCalendar = 2001,
        
        [EnumMember()]
        QuarterlyFiscalCalendar = 2002,
        
        [EnumMember()]
        MonthlyFiscalCalendar = 2003,
        
        [EnumMember()]
        FixedMonthlyFiscalCalendar = 2004,
        
        [EnumMember()]
        EmailTemplate = 2010,
        
        [EnumMember()]
        ContractTemplate = 2011,
        
        [EnumMember()]
        UnresolvedAddress = 2012,
        
        [EnumMember()]
        Territory = 2013,
        
        [EnumMember()]
        Theme = 2015,
        
        [EnumMember()]
        UserMapping = 2016,
        
        [EnumMember()]
        Queue = 2020,
        
        [EnumMember()]
        QueueItemCount = 2023,
        
        [EnumMember()]
        QueueMemberCount = 2024,
        
        [EnumMember()]
        License = 2027,
        
        [EnumMember()]
        QueueItem = 2029,
        
        [EnumMember()]
        UserEntityUISettings = 2500,
        
        [EnumMember()]
        UserEntityInstanceData = 2501,
        
        [EnumMember()]
        IntegrationStatus = 3000,
        
        [EnumMember()]
        ChannelAccessProfile = 3005,
        
        [EnumMember()]
        ExternalParty = 3008,
        
        [EnumMember()]
        ConnectionRole = 3231,
        
        [EnumMember()]
        ConnectionRoleObjectTypeCode = 3233,
        
        [EnumMember()]
        Connection = 3234,
        
        [EnumMember()]
        FacilityEquipment = 4000,
        
        [EnumMember()]
        Service = 4001,
        
        [EnumMember()]
        Resource = 4002,
        
        [EnumMember()]
        Calendar = 4003,
        
        [EnumMember()]
        CalendarRule = 4004,
        
        [EnumMember()]
        SchedulingGroup = 4005,
        
        [EnumMember()]
        ResourceSpecification = 4006,
        
        [EnumMember()]
        ResourceGroup = 4007,
        
        [EnumMember()]
        Site = 4009,
        
        [EnumMember()]
        ResourceExpansion = 4010,
        
        [EnumMember()]
        InterProcessLock = 4011,
        
        [EnumMember()]
        EmailHash = 4023,
        
        [EnumMember()]
        DisplayStringMap = 4101,
        
        [EnumMember()]
        DisplayString = 4102,
        
        [EnumMember()]
        Notification = 4110,
        
        [EnumMember()]
        ExchangeSyncIdMapping = 4120,
        
        [EnumMember()]
        Activity = 4200,
        
        [EnumMember()]
        Appointment = 4201,
        
        [EnumMember()]
        Email = 4202,
        
        [EnumMember()]
        Fax = 4204,
        
        [EnumMember()]
        CaseResolution = 4206,
        
        [EnumMember()]
        Letter = 4207,
        
        [EnumMember()]
        OpportunityClose = 4208,
        
        [EnumMember()]
        OrderClose = 4209,
        
        [EnumMember()]
        PhoneCall = 4210,
        
        [EnumMember()]
        QuoteClose = 4211,
        
        [EnumMember()]
        Task = 4212,
        
        [EnumMember()]
        ServiceActivity = 4214,
        
        [EnumMember()]
        Commitment = 4215,
        
        [EnumMember()]
        SocialActivity = 4216,
        
        [EnumMember()]
        SavedView = 4230,
        
        [EnumMember()]
        MetadataDifference = 4231,
        
        [EnumMember()]
        BusinessDataLocalizedLabel = 4232,
        
        [EnumMember()]
        RecurrenceRule = 4250,
        
        [EnumMember()]
        RecurringAppointment = 4251,
        
        [EnumMember()]
        EmailSearch = 4299,
        
        [EnumMember()]
        MarketingList = 4300,
        
        [EnumMember()]
        MarketingListMember = 4301,
        
        [EnumMember()]
        Campaign = 4400,
        
        [EnumMember()]
        CampaignResponse = 4401,
        
        [EnumMember()]
        CampaignActivity = 4402,
        
        [EnumMember()]
        CampaignItem = 4403,
        
        [EnumMember()]
        CampaignActivityItem = 4404,
        
        [EnumMember()]
        BulkOperationLog = 4405,
        
        [EnumMember()]
        QuickCampaign = 4406,
        
        [EnumMember()]
        DataImport = 4410,
        
        [EnumMember()]
        DataMap = 4411,
        
        [EnumMember()]
        ImportSourceFile = 4412,
        
        [EnumMember()]
        ImportData = 4413,
        
        [EnumMember()]
        DuplicateDetectionRule = 4414,
        
        [EnumMember()]
        DuplicateRecord = 4415,
        
        [EnumMember()]
        DuplicateRuleCondition = 4416,
        
        [EnumMember()]
        ColumnMapping = 4417,
        
        [EnumMember()]
        ListValueMapping = 4418,
        
        [EnumMember()]
        LookupMapping = 4419,
        
        [EnumMember()]
        OwnerMapping = 4420,
        
        [EnumMember()]
        ImportLog = 4423,
        
        [EnumMember()]
        BulkDeleteOperation = 4424,
        
        [EnumMember()]
        BulkDeleteFailure = 4425,
        
        [EnumMember()]
        TransformationMapping = 4426,
        
        [EnumMember()]
        TransformationParameterMapping = 4427,
        
        [EnumMember()]
        ImportEntityMapping = 4428,
        
        [EnumMember()]
        DataPerformanceDashboard = 4450,
        
        [EnumMember()]
        OfficeDocument = 4490,
        
        [EnumMember()]
        RelationshipRole = 4500,
        
        [EnumMember()]
        RelationshipRoleMap = 4501,
        
        [EnumMember()]
        CustomerRelationship = 4502,
        
        [EnumMember()]
        OpportunityRelationship = 4503,
        
        [EnumMember()]
        Auditing = 4567,
        
        [EnumMember()]
        EntityMap = 4600,
        
        [EnumMember()]
        AttributeMap = 4601,
        
        [EnumMember()]
        PluginType = 4602,
        
        [EnumMember()]
        PluginTypeStatistic = 4603,
        
        [EnumMember()]
        PluginAssembly = 4605,
        
        [EnumMember()]
        SdkMessage = 4606,
        
        [EnumMember()]
        SdkMessageFilter = 4607,
        
        [EnumMember()]
        SdkMessageProcessingStep = 4608,
        
        [EnumMember()]
        SdkMessageRequest = 4609,
        
        [EnumMember()]
        SdkMessageResponse = 4610,
        
        [EnumMember()]
        SdkMessageResponseField = 4611,
        
        [EnumMember()]
        SdkMessagePair = 4613,
        
        [EnumMember()]
        SdkMessageRequestField = 4614,
        
        [EnumMember()]
        SdkMessageProcessingStepImage = 4615,
        
        [EnumMember()]
        SdkMessageProcessingStepSecureConfiguration = 4616,
        
        [EnumMember()]
        ServiceEndpoint = 4618,
        
        [EnumMember()]
        PluginTraceLog = 4619,
        
        [EnumMember()]
        SystemJob = 4700,
        
        [EnumMember()]
        WorkflowWaitSubscription = 4702,
        
        [EnumMember()]
        Process = 4703,
        
        [EnumMember()]
        ProcessDependency = 4704,
        
        [EnumMember()]
        ISVConfig = 4705,
        
        [EnumMember()]
        ProcessLog = 4706,
        
        [EnumMember()]
        ApplicationFile = 4707,
        
        [EnumMember()]
        OrganizationStatistic = 4708,
        
        [EnumMember()]
        SiteMap = 4709,
        
        [EnumMember()]
        ProcessSession = 4710,
        
        [EnumMember()]
        ProcessTrigger = 4712,
        
        [EnumMember()]
        ProcessStage = 4724,
        
        [EnumMember()]
        BusinessProcessFlowInstance = 4725,
        
        [EnumMember()]
        WebWizard = 4800,
        
        [EnumMember()]
        WizardPage = 4802,
        
        [EnumMember()]
        WebWizardAccessPrivilege = 4803,
        
        [EnumMember()]
        TimeZoneDefinition = 4810,
        
        [EnumMember()]
        TimeZoneRule = 4811,
        
        [EnumMember()]
        TimeZoneLocalizedName = 4812,
        
        [EnumMember()]
        SystemApplicationMetadata = 7000,
        
        [EnumMember()]
        UserApplicationMetadata = 7001,
        
        [EnumMember()]
        Solution = 7100,
        
        [EnumMember()]
        Publisher = 7101,
        
        [EnumMember()]
        PublisherAddress = 7102,
        
        [EnumMember()]
        SolutionComponent = 7103,
        
        [EnumMember()]
        Dependency = 7105,
        
        [EnumMember()]
        DependencyNode = 7106,
        
        [EnumMember()]
        InvalidDependency = 7107,
        
        [EnumMember()]
        DependencyFeature = 7108,
        
        [EnumMember()]
        Post = 8000,
        
        [EnumMember()]
        PostRole = 8001,
        
        [EnumMember()]
        PostRegarding = 8002,
        
        [EnumMember()]
        Follow = 8003,
        
        [EnumMember()]
        Comment = 8005,
        
        [EnumMember()]
        Like = 8006,
        
        [EnumMember()]
        Trace = 8050,
        
        [EnumMember()]
        TraceAssociation = 8051,
        
        [EnumMember()]
        TraceRegarding = 8052,
        
        [EnumMember()]
        RoutingRuleSet = 8181,
        
        [EnumMember()]
        RuleItem = 8199,
        
        [EnumMember()]
        HierarchyRule = 8840,
        
        [EnumMember()]
        Report = 9100,
        
        [EnumMember()]
        ReportRelatedEntity = 9101,
        
        [EnumMember()]
        ReportRelatedCategory = 9102,
        
        [EnumMember()]
        ReportVisibility = 9103,
        
        [EnumMember()]
        ReportLink = 9104,
        
        [EnumMember()]
        Currency = 9105,
        
        [EnumMember()]
        MailMergeTemplate = 9106,
        
        [EnumMember()]
        ImportJob = 9107,
        
        [EnumMember()]
        LocalConfigStore = 9201,
        
        [EnumMember()]
        RecordCreationandUpdateRule = 9300,
        
        [EnumMember()]
        RecordCreationandUpdateRuleItem = 9301,
        
        [EnumMember()]
        WebResource = 9333,
        
        [EnumMember()]
        ChannelAccessProfileRule = 9400,
        
        [EnumMember()]
        ChannelAccessProfileRuleItem = 9401,
        
        [EnumMember()]
        SharePointSite = 9502,
        
        [EnumMember()]
        SharepointDocument = 9507,
        
        [EnumMember()]
        DocumentLocation = 9508,
        
        [EnumMember()]
        SharePointData = 9509,
        
        [EnumMember()]
        RollupProperties = 9510,
        
        [EnumMember()]
        RollupJob = 9511,
        
        [EnumMember()]
        Goal = 9600,
        
        [EnumMember()]
        RollupQuery = 9602,
        
        [EnumMember()]
        GoalMetric = 9603,
        
        [EnumMember()]
        RollupField = 9604,
        
        [EnumMember()]
        EmailServerProfile = 9605,
        
        [EnumMember()]
        Mailbox = 9606,
        
        [EnumMember()]
        MailboxStatistics = 9607,
        
        [EnumMember()]
        MailboxAutoTrackingFolder = 9608,
        
        [EnumMember()]
        ProcessConfiguration = 9650,
        
        [EnumMember()]
        OrganizationInsightsMetric = 9699,
        
        [EnumMember()]
        Entitlement = 9700,
        
        [EnumMember()]
        EntitlementChannel = 9701,
        
        [EnumMember()]
        EntitlementTemplate = 9702,
        
        [EnumMember()]
        EntitlementTemplateChannel = 9703,
        
        [EnumMember()]
        SLA = 9750,
        
        [EnumMember()]
        SLAItem = 9751,
        
        [EnumMember()]
        SLAKPIInstance = 9752,
        
        [EnumMember()]
        CustomControl = 9753,
        
        [EnumMember()]
        CustomControlResource = 9754,
        
        [EnumMember()]
        CustomControlDefaultConfig = 9755,
        
        [EnumMember()]
        MobileOfflineProfile = 9866,
        
        [EnumMember()]
        MobileOfflineProfileItem = 9867,
        
        [EnumMember()]
        MobileOfflineProfileItemAssociation = 9868,
        
        [EnumMember()]
        SyncError = 9869,
        
        [EnumMember()]
        MultiEntitySearch = 9910,
        
        [EnumMember()]
        HierarchySecurityConfiguration = 9919,
        
        [EnumMember()]
        KnowledgeBaseRecord = 9930,
        
        [EnumMember()]
        TimeStampDateMapping = 9932,
        
        [EnumMember()]
        ProductRecommendationModel = 9933,
        
        [EnumMember()]
        ModelEntityMapping = 9934,
        
        [EnumMember()]
        RecommendationModelVersion = 9935,
        
        [EnumMember()]
        AzureServiceConnection = 9936,
        
        [EnumMember()]
        RecommendationModelVersionExecutionHistory = 9937,
        
        [EnumMember()]
        RecommendationCache = 9938,
        
        [EnumMember()]
        DocumentTemplate = 9940,
        
        [EnumMember()]
        PersonalDocumentTemplate = 9941,
        
        [EnumMember()]
        TopicModelConfiguration = 9942,
        
        [EnumMember()]
        TopicModelExecutionHistory = 9943,
        
        [EnumMember()]
        TopicModel = 9944,
        
        [EnumMember()]
        TextAnalyticsEntityMapping = 9945,
        
        [EnumMember()]
        TopicHistory = 9946,
        
        [EnumMember()]
        KnowledgeSearchModel = 9947,
        
        [EnumMember()]
        TextAnalyticsTopic = 9948,
        
        [EnumMember()]
        AdvancedSimilarityRule = 9949,
        
        [EnumMember()]
        OfficeGraphDocument = 9950,
        
        [EnumMember()]
        SimilarityRule = 9951,
        
        [EnumMember()]
        KnowledgeArticle = 9953,
        
        [EnumMember()]
        KnowledgeArticleIncident = 9954,
        
        [EnumMember()]
        KnowledgeArticleViews = 9955,
        
        [EnumMember()]
        Language = 9957,
        
        [EnumMember()]
        Feedback = 9958,
        
        [EnumMember()]
        Category = 9959,
        
        [EnumMember()]
        KnowledgeArticleCategory = 9960,
        
        [EnumMember()]
        DelveActionHub = 9961,
        
        [EnumMember()]
        ExternalPartyItem = 9987,
        
        [EnumMember()]
        EmailSignature = 9997,
        
        [EnumMember()]
        ProfileAlbum = 10000,
        
        [EnumMember()]
        PostConfiguration = 10001,
        
        [EnumMember()]
        PostRuleConfiguration = 10002,
        
        [EnumMember()]
        WallView = 10003,
        
        [EnumMember()]
        Filter = 10004,
        
        [EnumMember()]
        Event = 10007,
        
        [EnumMember()]
        Participant = 10008,
        
        [EnumMember()]
        Sheep = 10010,
        
        [EnumMember()]
        Field = 10011,
        
        [EnumMember()]
        Tooth = 10012,
        
        [EnumMember()]
        Man = 10013,
        
        [EnumMember()]
        Child = 10014,
        
        [EnumMember()]
        Mild = 10015,
        
        [EnumMember()]
        Bus = 10016,
        
        [EnumMember()]
        EniroConfig = 10019,
        
        [EnumMember()]
        EniroLog = 10020,
        
        [EnumMember()]
        EniroRefresh = 10021,
    }
    
    [DataContract()]
    public enum SLA_SLAType {
        
        [EnumMember()]
        Standard = 0,
        
        [EnumMember()]
        Enhanced = 1,
    }
    
    [DataContract()]
    public enum SLAState {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Active = 1,
    }
    
    [DataContract()]
    public enum SLA_ApplicableFromPickList {
        
        [EnumMember()]
        No = 1,
        
        [EnumMember()]
        Yes = 2,
    }
    
    [DataContract()]
    public enum SocialActivity_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum SocialActivityState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum SocialActivity_StatusCode {
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Failed = 2,
        
        [EnumMember()]
        Processing = 3,
        
        [EnumMember()]
        Open = 4,
        
        [EnumMember()]
        Canceled = 5,
    }
    
    [DataContract()]
    public enum SyncErrorState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Resolved = 1,
    }
    
    [DataContract()]
    public enum SyncError_ErrorType {
        
        [EnumMember()]
        Conflict = 0,
        
        [EnumMember()]
        Recordnotfound = 1,
        
        [EnumMember()]
        Recordalreadyexists = 2,
        
        [EnumMember()]
        Others = 3,
    }
    
    [DataContract()]
    public enum SyncError_StatusCode {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Fixed = 1,
    }
    
    [DataContract()]
    public enum SystemUser_Address1_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_Address1_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_CALType {
        
        [EnumMember()]
        Professional = 0,
        
        [EnumMember()]
        Administrative = 1,
        
        [EnumMember()]
        Basic = 2,
        
        [EnumMember()]
        DeviceProfessional = 3,
        
        [EnumMember()]
        DeviceBasic = 4,
        
        [EnumMember()]
        Essential = 5,
        
        [EnumMember()]
        DeviceEssential = 6,
        
        [EnumMember()]
        Enterprise = 7,
        
        [EnumMember()]
        DeviceEnterprise = 8,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredEmailCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_OutgoingEmailDeliveryMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        MicrosoftDynamicsCRMforOutlook = 1,
        
        [EnumMember()]
        ServerSideSynchronizationorEmailRouter = 2,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredPhoneCode {
        
        [EnumMember()]
        MainPhone = 1,
        
        [EnumMember()]
        OtherPhone = 2,
        
        [EnumMember()]
        HomePhone = 3,
        
        [EnumMember()]
        MobilePhone = 4,
    }
    
    [DataContract()]
    public enum SystemUser_EmailRouterAccessApproval {
        
        [EnumMember()]
        Empty = 0,
        
        [EnumMember()]
        Approved = 1,
        
        [EnumMember()]
        PendingApproval = 2,
        
        [EnumMember()]
        Rejected = 3,
    }
    
    [DataContract()]
    public enum SystemUser_PreferredAddressCode {
        
        [EnumMember()]
        MailingAddress = 1,
        
        [EnumMember()]
        OtherAddress = 2,
    }
    
    [DataContract()]
    public enum SystemUser_IncomingEmailDeliveryMethod {
        
        [EnumMember()]
        None = 0,
        
        [EnumMember()]
        MicrosoftDynamicsCRMforOutlook = 1,
        
        [EnumMember()]
        ServerSideSynchronizationorEmailRouter = 2,
        
        [EnumMember()]
        ForwardMailbox = 3,
    }
    
    [DataContract()]
    public enum SystemUser_AccessMode {
        
        [EnumMember()]
        ReadWrite = 0,
        
        [EnumMember()]
        Administrative = 1,
        
        [EnumMember()]
        Read = 2,
        
        [EnumMember()]
        SupportUser = 3,
        
        [EnumMember()]
        Noninteractive = 4,
        
        [EnumMember()]
        DelegatedAdmin = 5,
    }
    
    [DataContract()]
    public enum SystemUser_Address2_AddressTypeCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum SystemUser_InviteStatusCode {
        
        [EnumMember()]
        InvitationNotSent = 0,
        
        [EnumMember()]
        Invited = 1,
        
        [EnumMember()]
        InvitationNearExpired = 2,
        
        [EnumMember()]
        InvitationExpired = 3,
        
        [EnumMember()]
        InvitationAccepted = 4,
        
        [EnumMember()]
        InvitationRejected = 5,
        
        [EnumMember()]
        InvitationRevoked = 6,
    }
    
    [DataContract()]
    public enum SystemUser_Address2_ShippingMethodCode {
        
        [EnumMember()]
        DefaultValue = 1,
    }
    
    [DataContract()]
    public enum Task_PriorityCode {
        
        [EnumMember()]
        Low = 0,
        
        [EnumMember()]
        Normal = 1,
        
        [EnumMember()]
        High = 2,
    }
    
    [DataContract()]
    public enum TaskState {
        
        [EnumMember()]
        Open = 0,
        
        [EnumMember()]
        Completed = 1,
        
        [EnumMember()]
        Canceled = 2,
    }
    
    [DataContract()]
    public enum Task_StatusCode {
        
        [EnumMember()]
        NotStarted = 2,
        
        [EnumMember()]
        InProgress = 3,
        
        [EnumMember()]
        Waitingonsomeoneelse = 4,
        
        [EnumMember()]
        Completed = 5,
        
        [EnumMember()]
        Canceled = 6,
        
        [EnumMember()]
        Deferred = 7,
    }
    
    [DataContract()]
    public enum Team_TeamType {
        
        [EnumMember()]
        Owner = 0,
        
        [EnumMember()]
        Access = 1,
    }
    
    [DataContract()]
    public enum TransactionCurrencyState {
        
        [EnumMember()]
        Active = 0,
        
        [EnumMember()]
        Inactive = 1,
    }
    
    [DataContract()]
    public enum TransactionCurrency_StatusCode {
        
        [EnumMember()]
        Active = 1,
        
        [EnumMember()]
        Inactive = 2,
    }
    
    [DataContract()]
    public enum WorkflowState {
        
        [EnumMember()]
        Draft = 0,
        
        [EnumMember()]
        Activated = 1,
    }
    
    [DataContract()]
    public enum workflow_stage {
        
        [EnumMember()]
        Preoperation = 20,
        
        [EnumMember()]
        Postoperation = 40,
    }
    
    [DataContract()]
    public enum workflow_runas {
        
        [EnumMember()]
        Owner = 0,
        
        [EnumMember()]
        CallingUser = 1,
    }
    
    [DataContract()]
    public enum Workflow_Mode {
        
        [EnumMember()]
        Background = 0,
        
        [EnumMember()]
        Realtime = 1,
    }
    
    [DataContract()]
    public enum Workflow_Type {
        
        [EnumMember()]
        Definition = 1,
        
        [EnumMember()]
        Activation = 2,
        
        [EnumMember()]
        Template = 3,
    }
    
    [DataContract()]
    public enum Workflow_Scope {
        
        [EnumMember()]
        User = 1,
        
        [EnumMember()]
        BusinessUnit = 2,
        
        [EnumMember()]
        ParentChildBusinessUnits = 3,
        
        [EnumMember()]
        Organization = 4,
    }
    
    [DataContract()]
    public enum Workflow_StatusCode {
        
        [EnumMember()]
        Draft = 1,
        
        [EnumMember()]
        Activated = 2,
    }
    
    [DataContract()]
    public enum Workflow_BusinessProcessType {
        
        [EnumMember()]
        BusinessFlow = 0,
        
        [EnumMember()]
        TaskFlow = 1,
    }
    
    [DataContract()]
    public enum Workflow_Category {
        
        [EnumMember()]
        Workflow = 0,
        
        [EnumMember()]
        Dialog = 1,
        
        [EnumMember()]
        BusinessRule = 2,
        
        [EnumMember()]
        Action = 3,
        
        [EnumMember()]
        BusinessProcessFlow = 4,
    }
}
