using System;
using System.ServiceModel;
using DG.Some.Namespace;
using DG.XrmFramework.BusinessDomain.ServiceContext;
using Microsoft.Xrm.Sdk.Query;

namespace DG.Delegate.TSTOnboarding.Plugins
{
    public class AccountBothImagePlugin : PluginNonDaxif
    {
        /*
         * This is a plugin that isn't registered through DAXIF, therefore we expect that the plugin can be found registered in Metadata.xml, which is
         * generated by MetadataGenerator365. It have to generate metadata from Lab4 solutions, since some tests are dependent on stuff op there and
         * from Pre and Post-images Test Solution from the same Server. This plugin and AccountCurrencyBase are both registered here.
         */

        public AccountBothImagePlugin() : base(typeof(AccountBothImagePlugin)) {  }

        // protected void ExecuteAccountUpdateErpFigures(LocalPluginContext localContext)
        public override void Execute(IServiceProvider serviceProvider)
        {
            var localContext = new LocalPluginContext(serviceProvider);
            if (localContext.PluginExecutionContext.Depth > 1) { return; }

            var service = localContext.OrganizationService;

            var accountId = localContext.PluginExecutionContext.PrimaryEntityId;
            var retrievedAccount = service.Retrieve(Account.EntityLogicalName, accountId, new ColumnSet("name"));

            if (!retrievedAccount.Attributes.Contains("name")) return;
            if ((string)retrievedAccount.Attributes["name"] != "ChangeMePlease") return;


            var preImages = localContext.PluginExecutionContext.PreEntityImages;
            if (preImages.Count == 0)
            {
                throw new FaultException("There is no pre images");
            }

            var postImages = localContext.PluginExecutionContext.PostEntityImages;
            if (postImages.Count == 0)
            {
                throw new FaultException("There is no post images");
            }


            var account = new Account()
            {
                Id = accountId,
                Name = "NameIsModified"
            };

            service.Update(account);
        }
    }
}
